{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"71c95774de16f2039ec0188b41e1ba5bab1f5bda","modified":1631619619901},{"_id":"source/robots.txt","hash":"99276e2a5485017b35cd46124e3d21b84b41904c","modified":1631619619911},{"_id":"themes/anatole/LICENSE","hash":"013aeea58737aaf555e4487dab17f06286597c3d","modified":1631619619912},{"_id":"themes/anatole/README.md","hash":"8e51a41de2ce148db91c3ef60987bc2d2f4ec5d7","modified":1631619619912},{"_id":"themes/anatole/_config.yml","hash":"c2c7d95f25fa4975195580355a9d3ac1f3d34462","modified":1652459616183},{"_id":"source/_posts/2017-mid-year-summary.md","hash":"e449263bcda83f36f1b5e7c925fca7ada7c3ad65","modified":1644758038106},{"_id":"source/_posts/2020-resolution.md","hash":"61ffb57cc0137809de783a50896c7f0d1eb370e4","modified":1644758038106},{"_id":"source/_posts/Build-a-Personal-Blog-With-Hexo.md","hash":"b44f407f2a3eccf9a771a6b9fea9d2c2ba88a2aa","modified":1631619619902},{"_id":"source/_posts/Decorator-in-JavaScript.md","hash":"b726efd18365c9a58e664995ecad7e05e28b60fe","modified":1631619619902},{"_id":"source/_posts/ES6-Block-Binding.md","hash":"20447ced17a9693d3c8bc5e0039974d9a91b9dbc","modified":1631619619903},{"_id":"source/_posts/Iterators-and-generators.md","hash":"f01965d48442e38dde522a014aa20e722a6c11d8","modified":1631619619903},{"_id":"source/_posts/Regret-Minimization-and-Multi-task-Serially.md","hash":"92d72aa18bb92ec14b4baf28d41c5e1b6a647a3f","modified":1631619619903},{"_id":"source/_posts/Run-react-native-app-on-Mac.md","hash":"393dee63caff4257ca972c018d91fa94faaa0e2f","modified":1631619619903},{"_id":"source/_posts/Timers-in-JavaScript.md","hash":"c23594b2b583c6a3007cb2dd7940b5cb2ee68b7b","modified":1631619619904},{"_id":"source/_posts/ecmascript2015-modules.md","hash":"cf9218e5f6f9b4979e9a0916a0261e0fea0b36b2","modified":1631619619904},{"_id":"source/_posts/flutter-setup.md","hash":"4d52d1837fd597d1158f26f69b39d73b4b86f3ed","modified":1631619619904},{"_id":"source/_posts/effective-javascript.md","hash":"02bbaee82f314d5b250f7d8d38148dd3ffc8cfa3","modified":1631619619904},{"_id":"source/_posts/interview-with-huawei.md","hash":"5244f8a9792ac8d0240901ecdaf2e410306bd191","modified":1631619619904},{"_id":"source/_posts/javaScript-leetCode-day-1.md","hash":"a0a6b9623c0fcd8f2ea0de6c9d0a59ace633d41f","modified":1586228780362},{"_id":"source/_posts/javascript-events.md","hash":"b9896c9404036027e2a04c8f85b0b1aaffa53c2f","modified":1631619619905},{"_id":"source/_posts/march-summary.md","hash":"7078c76c2c39d0a85dafa6aa5665bb68f9ed9e2f","modified":1631619619905},{"_id":"source/_posts/new-job.md","hash":"0015089dbedab0847a4476f4dc016aa618a2a32c","modified":1631619619905},{"_id":"source/_posts/node-modules.md","hash":"b3708a625709d1f4ad8688de431248331aba890a","modified":1631619619905},{"_id":"source/_posts/promise-vs-observables.md","hash":"70a3139378fd7c74aefbee749f4623b14efc1026","modified":1631619619905},{"_id":"source/_posts/reading-march.md","hash":"eea9510199aedb70b49e993302261a2e0cc37594","modified":1650179390122},{"_id":"source/_posts/tooltip-in-echars.md","hash":"25307b8f301e6c1dc274d8d3ba02dbe34de89e22","modified":1631619619906},{"_id":"source/_posts/我读前端工程化.md","hash":"4d4e69f4db99f68194dc7e70d615047d116b42e3","modified":1589470738750},{"_id":"source/_posts/下班.md","hash":"d79161850a375682d2b2a28b16deae7d9ffa4002","modified":1631619619906},{"_id":"source/about/index.md","hash":"958d3ff4b741fea54d261ed54ae087e4baaa189e","modified":1631619619910},{"_id":"source/categories/index.md","hash":"2029d39cc68b2fc09655d126cfc51374bba153ff","modified":1631619619911},{"_id":"source/tags/index.md","hash":"771e3964b6e5ce39dcb5adb87be4c17b9783f632","modified":1631619619911},{"_id":"themes/anatole/layout/archive.jade","hash":"52b73d18420af570ece4e749985a8c548e7571ea","modified":1631619619913},{"_id":"themes/anatole/layout/index.jade","hash":"ab8828a0e8d7595b0931247debcdab649864e5db","modified":1631619619913},{"_id":"themes/anatole/layout/mixins.jade","hash":"66de965cd813b7039d1b1945d53ca4299417789f","modified":1650381689414},{"_id":"themes/anatole/layout/page.jade","hash":"624c2f7abf8c7d63a5e336838b7b878b39816353","modified":1647181714336},{"_id":"themes/anatole/layout/post.jade","hash":"a76e632d5cd42e1a611dcac762618afeae927fee","modified":1649748235627},{"_id":"themes/anatole/layout/projects.jade","hash":"1317a0f1cc0fc2299f423a8a1f8f3637c48d7dd0","modified":1631619619916},{"_id":"themes/anatole/layout/partial/footer.jade","hash":"07c1cba41e6b3595d24e42ab0d52e3d95403556d","modified":1651403817196},{"_id":"themes/anatole/layout/partial/comments.jade","hash":"10bf7fbd8b97fcc4e6672592584eee23e8c58e3f","modified":1651400529749},{"_id":"themes/anatole/layout/partial/layout.jade","hash":"a71ceabcfb527d35a3b94ff87255f4af6948c64a","modified":1650179621460},{"_id":"themes/anatole/layout/partial/head.jade","hash":"c22cd60fec5d022792d09aa98f75ed531870970f","modified":1652598224223},{"_id":"themes/anatole/layout/partial/nav.jade","hash":"016b012a07138aa13821f4d28c8474905b5a1bae","modified":1650381211584},{"_id":"themes/anatole/layout/partial/sidebar.jade","hash":"bc1739e814672ac94dc4ddf30b1ff6213cad265b","modified":1651404359112},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"75a4b1ef676668141e38fb3c42f1f139fa44a1ee","modified":1651400984848},{"_id":"themes/anatole/source/css/custom.css","hash":"6bcb04950277c3476be1f26d111021bb6e484a2f","modified":1583330973040},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1651395322949},{"_id":"themes/anatole/source/css/style.css","hash":"043b146a2d5692fb05edee9a5e36e2da95c01800","modified":1650381705110},{"_id":"themes/anatole/source/css/style.scss","hash":"7fd8b6532c2a34a42933264b57ce4b549274fef2","modified":1651403715814},{"_id":"themes/anatole/source/images/favicon.png","hash":"e65281698fa90e67758953184104f89602588db6","modified":1651406397945},{"_id":"themes/anatole/source/images/logo.png","hash":"c60a35a1abbba36f5fb34fbfb6773edbce6d4cf6","modified":1651399391908},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1583330973049},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1583330973043},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1631619619930},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1631619619930},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1583330973047},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1583330973047},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1631619619932},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1631619619921},{"_id":"themes/anatole/source/images/mylogo.png","hash":"bb12c3110592128245b8202eae6ddcb2acba7e5f","modified":1583330973052},{"_id":"source/_posts/日式吃法.md","hash":"8081b4daa6b6d7783382c826956797c4fd19d78d","modified":1631619619908},{"_id":"source/_posts/新还是旧.md","hash":"66509d1d1a029095e529da32dd85b24e0e10fea7","modified":1631619619908},{"_id":"source/_posts/温度计.md","hash":"c6a0f0af09d1e59763eac1615a8b4bb48570245d","modified":1591624382024},{"_id":"source/_posts/摆摊.md","hash":"095246a44da2b01de3ad9c404a8b7d9280d0f206","modified":1631619619908},{"_id":"source/_posts/午夜急诊.md","hash":"e04bbfc4909c6e2b357042cb430dcbb89863d8d4","modified":1631619619907},{"_id":"source/_posts/天文课.md","hash":"fd877df9594ba9832b7a0411791383d27abda97b","modified":1631619619907},{"_id":"source/_posts/彼得原理.md","hash":"4b70d4f364b0ca80c1a84425e7d137ac685f5442","modified":1631619619907},{"_id":"source/_posts/中年人戒油腻指南.md","hash":"9b1cf40b39fe3646951838ce717b0893bd98d211","modified":1599325090616},{"_id":"source/_posts/task-and-microtask.md","hash":"2151d52eef53e36ec7e8a3fb06cd196b9939f70a","modified":1603813866933},{"_id":"source/_posts/三十而立.md","hash":"31dd6aa4c104825acdad435c0bd7590b9c1177f5","modified":1631619619906},{"_id":"source/_posts/重读两小儿辩日.md","hash":"1796df2ee41d8dc81fa57ccc70e20e2865d8a360","modified":1601110717866},{"_id":"source/_posts/游恭王府.md","hash":"0abf647b63638faa95d59b5730866725fb49fcba","modified":1651394535316},{"_id":"source/_img/gongwangfu.jpg","hash":"d308df2a2563182506c203db7c9178925c037638","modified":1602429798121},{"_id":"source/img/gongwangfu.jpg","hash":"d308df2a2563182506c203db7c9178925c037638","modified":1602429798121},{"_id":"source/img/yangjiaodenghutong1.jpg","hash":"a69dfb88bd711a0f69b981f1d221112cc06aa71b","modified":1602430306954},{"_id":"source/img/fangtangshuixie.jpg","hash":"3a78a4e3950badde811fb2565488ba8fadb294d7","modified":1602430187425},{"_id":"source/img/tianxiangtingyuan.jpg","hash":"b01642405b2dd09ff35a503fbbd76f6fc8ed7a4b","modified":1602430146747},{"_id":"source/img/pingbuqingyunlu.jpg","hash":"282effccdec58258878a879e10f3c2a5bf3426ad","modified":1602430161652},{"_id":"source/img/yangjiaodenghutong2.jpg","hash":"4a22727e6a70ddeb7297421a5b7ee40e3aec1a75","modified":1602430317363},{"_id":"source/.DS_Store","hash":"b2e2486e46b81e854da85b40b18748c49cb566d3","modified":1605150528663},{"_id":"source/_posts/node vs browser event loop.md","hash":"9031a0d3d7085c21e603aa9740e13478f9f30056","modified":1617775609238},{"_id":"source/_posts/聊聊事件循环.md","hash":"47d4083764157a393b969940ac819772081484bf","modified":1631619619910},{"_id":"source/_posts/聊聊柯里化.md","hash":"ec95dcbe346e66c58d94998a236bbf5fc255c4b5","modified":1631619619910},{"_id":"source/_posts/我读《复盘网飞》.md","hash":"8444f3e8829c745239495d5ef568a8b5e7c0d130","modified":1631619619907},{"_id":"source/_posts/手机坏掉之后.md","hash":"bda98cdd6a58366082274eb0fd2fe5cb0fc0e02a","modified":1631619619908},{"_id":"source/_posts/我读《负动产时代》.md","hash":"5f6063a70b628fae5f408db3372e354d4932006a","modified":1631619619907},{"_id":"source/_posts/我读《一生的旅程》.md","hash":"764341efc970253107d6a865026f4ff9a0cace18","modified":1631619619907},{"_id":"source/_posts/我读《上学记》.md","hash":"5d5e04ba760b2d528fc43f3ba8b9d4947a5ce6b1","modified":1631620079055},{"_id":"source/_posts/我的2021年终总结.md","hash":"40fe5dc64355ff6a1a1c011a4f77253d19f474dc","modified":1644758105231},{"_id":"source/_posts/我读《东京贫困女子》.md","hash":"3fe7506af25974b88352ea6eb534e4d1e2c3f7d2","modified":1646624009589},{"_id":"source/_posts/我读《前端工程化》.md","hash":"fde815fa8f870e32ee048901ca362ff4cda26ec8","modified":1646316146892},{"_id":"source/_posts/我读《两个人的小家》.md","hash":"5d2f31659288c86ca5ebbd7a66f90efc566887a3","modified":1646624009590},{"_id":"source/_posts/我读《两京十五日》.md","hash":"b304c1671a01413eb914ce35053e7b07e1dee6dc","modified":1646924918051},{"_id":"source/_posts/我读《字节跳动：从0到1的秘密》.md","hash":"5da59c8b525bfe78474701fb192e039b045d93f6","modified":1646924810679},{"_id":"source/_hide/当代两小儿辩日.md","hash":"29ca5b16064c33ef77ea6441f34f87bbc4dd53ff","modified":1603809505596},{"_id":"source/_posts/.obsidian/app.json","hash":"ad001769c49663b0d6d8e447f9e16955b7db5876","modified":1646446518716},{"_id":"source/_posts/.obsidian/core-plugins.json","hash":"072341e5a074625ec8b265787004641393a046de","modified":1647833348827},{"_id":"source/_posts/.obsidian/appearance.json","hash":"1fc96edc821fe66c42b2899c43f2382da26e8c21","modified":1646446518717},{"_id":"source/_posts/.obsidian/graph.json","hash":"df24482d59b3e8f3d2eb91eb281b6232486a045d","modified":1646473174037},{"_id":"source/_posts/.obsidian/hotkeys.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1646315591236},{"_id":"source/_posts/.obsidian/workspace","hash":"b0a7472cb522c1ee99b81d81e11ecedbb5850d6c","modified":1647846589740},{"_id":"source/_posts/.obsidian/themes/Minimal.css","hash":"955fa444d19bacbded185efb5077b8ed04213889","modified":1646380947127},{"_id":"source/_posts/2022-03-week1.md","hash":"160f54e8ded111ad47ab71a160dbff58ce57436b","modified":1647164378131},{"_id":"source/_posts/2022-03-week2.md","hash":"781a21565dbde1558aacccf4051391e9810e91d4","modified":1647164367985},{"_id":"source/_drafts/2022-03-week4.md","hash":"8fbaa30623c8adeb1b83ef488329820e22cc901f","modified":1647833742536},{"_id":"source/_posts/2022-03-week3.md","hash":"ac3e860d94c9d122e6f9c1809c5a815bf72d4548","modified":1647834999276},{"_id":"source/_drafts/2022-03-week-4.md","hash":"8fbaa30623c8adeb1b83ef488329820e22cc901f","modified":1647833742536},{"_id":"source/_drafts/2022-04-week-1.md","hash":"e935ffdd455c84d8b7a65c33a70dad9fdc55a4a9","modified":1648570395777},{"_id":"source/_posts/2022-03-week-1.md","hash":"bdf072c54b4a389944dee6deda9c575707ed6349","modified":1649517506992},{"_id":"source/_posts/2022-03-week-2.md","hash":"3d9f7c446d5023975602dc20eb66a9a429abbf49","modified":1649514802602},{"_id":"source/_posts/2022-03-week-3.md","hash":"a56fdfe6dec37b7e5fa501fff25d454852a514fb","modified":1649517520771},{"_id":"source/.obsidian/appearance.json","hash":"ba64da41c3f8559d96f49dc324335edbac06eefa","modified":1651722446870},{"_id":"source/.obsidian/daily-notes.json","hash":"d4bdffb390bdff957c2f0b7cafa3087cdc2ffa4f","modified":1647849004381},{"_id":"source/.obsidian/core-plugins.json","hash":"e425db684f1e036e3b31513c3e64b87d05716e5c","modified":1651722446501},{"_id":"source/.obsidian/app.json","hash":"a0850722cd7323b025cc43805a33931fa56bbc80","modified":1651722446869},{"_id":"source/.obsidian/workspace","hash":"8689e8647828c61b18a59277c7b0ea7349e92973","modified":1652264825328},{"_id":"source/.obsidian/hotkeys.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1647848737086},{"_id":"source/_daily/2022-03-21.md","hash":"fde7774a31cb0fd27a497f5fe565d0bc1e4db8d8","modified":1647849033272},{"_id":"source/.obsidian/themes/Yin and Yang.css","hash":"30e35dce2b2e05f4f020206451a22a2940afca45","modified":1647848798170},{"_id":"source/_posts/2022-03-week-4.md","hash":"8e86276b033eccd1ac6ae45f39dd096131805198","modified":1649514780804},{"_id":"source/_posts/2022-04-week-1.md","hash":"7eac86c5539c9711131f2850ffc1922e1e3d4e27","modified":1651214944552},{"_id":"source/_posts/2022-04-week-2.md","hash":"8e8d82a2f46d79b38e830d4edba70265b1f22732","modified":1651214944553},{"_id":"source/.obsidian/themes/Solarized.css","hash":"10003851b6838b754d450df7ef0532f91d818533","modified":1649515032050},{"_id":"source/.obsidian/themes/80s Neon.css","hash":"e67b7053c5443d116462b731232c698782b1fd43","modified":1649514981470},{"_id":"source/_drafts/2022-04-week-3.md","hash":"27e71aef4e139a45b2dc328ed0233841c99710a4","modified":1649662598697},{"_id":"source/_posts/我读《寻路中国》.md","hash":"477999a8a8122579003bb1754436277a3a3cb73c","modified":1651395215573},{"_id":"source/_posts/2022-04-week-3.md","hash":"de4c847ce0dea070adcbf06b7deb980e4037a0f1","modified":1651214944553},{"_id":"source/_daily/2022-04-19.md","hash":"5c55093e948b85aadfdef5ba9006263210fd80bd","modified":1651405234599},{"_id":"source/_posts/2022-04-week-4.md","hash":"bb073b9e96fe66304d3e04a36e0b0fd36d6b5d4b","modified":1651214944553},{"_id":"source/_drafts/2022-05-week-1.md","hash":"284bde265034ec7b48005bed4947ea5574833dee","modified":1651214944550},{"_id":"themes/anatole/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1651396556110},{"_id":"themes/anatole/.DS_Store","hash":"ee051942dc1f959646b4297ac675626b40102306","modified":1651394711220},{"_id":"themes/anatole/source/.DS_Store","hash":"118f2f7544d6d287a65477eda8879b6b5e45363a","modified":1651401901279},{"_id":"themes/anatole/source/css/fontawesome.min.css","hash":"b99bf76101373776c140fb991cf014694f85bf94","modified":1651400662277},{"_id":"themes/anatole/source/css/brands.min.css","hash":"2bfa6cf5dacf2265452921bc5f803d04c7c136b9","modified":1651401350426},{"_id":"themes/anatole/source/css/v4-shims.min.css","hash":"09abca933462e3814a8a790ece24f3427405602f","modified":1651401947692},{"_id":"themes/anatole/source/webfonts/fa-regular-400.ttf","hash":"a14023c43173628d93858c0f3fc90cf54b18a28e","modified":1651402101865},{"_id":"themes/anatole/source/webfonts/fa-regular-400.woff2","hash":"379ca48f70f3d4f79f8bf1079881c7c5af4f44a4","modified":1651402101872},{"_id":"themes/anatole/source/webfonts/fa-v4compatibility.ttf","hash":"e688e02012b9e5269a09809b0d666edc87527cb2","modified":1651402101919},{"_id":"themes/anatole/source/webfonts/fa-v4compatibility.woff2","hash":"951ded71094a52e249ac52799fac7cbb68368270","modified":1651402101934},{"_id":"themes/anatole/source/webfonts/fa-brands-400.woff2","hash":"a280ecdddd14695fad22599301ab03adfe5224c0","modified":1651402101850},{"_id":"themes/anatole/source/webfonts/fa-brands-400.ttf","hash":"acc07d5e1ab5b96b23fabb53b1f4e416c7c0a46d","modified":1651402101843},{"_id":"themes/anatole/source/webfonts/fa-solid-900.woff2","hash":"2717f3f58271f2f2e6120d9937c7227002656d34","modified":1651402101902},{"_id":"themes/anatole/source/webfonts/fa-solid-900.ttf","hash":"9225d6cb428fce41704cab29b8bb43b76c67f8b4","modified":1651402101887},{"_id":"themes/anatole/source/css/v4-font-face.min.css","hash":"812082c5a6dbd062fa73020bed21cb64471ac60c","modified":1651402301710},{"_id":"themes/anatole/source/css/v4-shims.css","hash":"1b994295c85cd8ff981a5285a76c0114bb98a2f7","modified":1651402233431},{"_id":"public/baidusitemap.xml","hash":"24020caeb440fcbff40fc210d886e0b2e3214cac","modified":1651404132181},{"_id":"public/atom.xml","hash":"aef69df9ce1d5c727adcbd3df174011a6a0ca7d5","modified":1651404132181},{"_id":"public/sitemap.xml","hash":"dcb374d163c364911c4645ec8f7fe3a1a7489ca5","modified":1651404132181},{"_id":"public/about/index.html","hash":"eba5813f3acdd0611b35eb1cef3478c53e1fc370","modified":1651404132181},{"_id":"public/categories/index.html","hash":"e5e8a01faf9d8cfa4e66bbb80ba607ad9a7b1974","modified":1651404132181},{"_id":"public/tags/index.html","hash":"20405cc49c2070465948613920556f41324ac2d2","modified":1651404132181},{"_id":"public/country-driving/index.html","hash":"15ffe3255f2ecba181cd654a38c7d54d55ed02e2","modified":1651404132181},{"_id":"public/not-today/index.html","hash":"f858497856e277e938b0893df38b22c5d6243b2d","modified":1651404132181},{"_id":"public/food-delivery-problem/index.html","hash":"df0a8d64297bc5ef052f92596f2f82b99125ce0c","modified":1651404132181},{"_id":"public/writing-tips/index.html","hash":"9c7a34535716abd20b07c7187ecd241f7d3d81cb","modified":1651404132181},{"_id":"public/qingming/index.html","hash":"bad6f1f352a94fd3ba78cbf6d24778f86dc4ffd7","modified":1651404132181},{"_id":"public/2022-03-week-4/index.html","hash":"142ea058ce3e5fdcf8e7affad1ebd3b38a290e7c","modified":1651404132181},{"_id":"public/2022-03-week-3/index.html","hash":"ce23e4c12c9094867bc0bdc1e44b6586bd4b882f","modified":1651404132181},{"_id":"public/2022-03-week-2/index.html","hash":"2a9aff411828a3bba6398a0f0364c57dbf335aec","modified":1651404132181},{"_id":"public/2022-03-week-1/index.html","hash":"ab508da5f5f5f7071e0a66a07e4c226f2abc3b12","modified":1651404132181},{"_id":"public/read-bytedance/index.html","hash":"0985e9706828a1645fbe46e62e422a87a79e6b6c","modified":1651404132181},{"_id":"public/couple-house/index.html","hash":"dbc6ebc339ad88a1110ea50dc1d635ff8c81f3cb","modified":1651404132181},{"_id":"public/read-liangjing-fifteen-days/index.html","hash":"c822164c474edd8935e882e527eee2e94a6e5aae","modified":1651404132181},{"_id":"public/tokyo-girls/index.html","hash":"1eb5b5da898df3fe0ca3f33e52cd3df1e7d4cd9c","modified":1651404132181},{"_id":"public/801a1f00/index.html","hash":"139010cdb29d5359bb904836d218590c3f2fd9a5","modified":1651404132181},{"_id":"public/4989ceb5/index.html","hash":"7089e2a1578b37f239ba42d453331b4daf645719","modified":1651404132181},{"_id":"public/e7498c6f/index.html","hash":"5c9a7f65a499c29c6126b60bd851e3778277d832","modified":1651404132181},{"_id":"public/7171b58c/index.html","hash":"478968f8dcf4f4faa30ffabb41c026539a8456cd","modified":1651404132181},{"_id":"public/fcbbfd3c/index.html","hash":"f65937311f0a1d622d7965a110cc98a4c04759bd","modified":1651404132181},{"_id":"public/387a3740/index.html","hash":"2cccb6e818a403a4facfe0d137fda2d7051f5d5d","modified":1651404132181},{"_id":"public/3052b9d9/index.html","hash":"dbe2b20edfce78af075f115da15d88b9870de7e0","modified":1651404132181},{"_id":"public/23a06402/index.html","hash":"4b108f32d800d00bc357fc3a649811fd14eeaaa1","modified":1651404132181},{"_id":"public/46cfbd3d/index.html","hash":"57dc1a984d9478936a3a16ee10fe69e7aa02c9a2","modified":1651404132181},{"_id":"public/26feb4d9/index.html","hash":"9ac931252fa3376adc9466e977d89354c6740489","modified":1651404132181},{"_id":"public/1cc7585a/index.html","hash":"fb5d3d8bf81e74723d9d61e70d1814d14d7ae538","modified":1651404132181},{"_id":"public/9dd3c30c/index.html","hash":"1df143d13a6256ee8e666b5c7fe2e5cc34cfe44a","modified":1651404132181},{"_id":"public/3a5fe83c/index.html","hash":"50b55a2bda1d534a6d02b9ff654c83b833df3728","modified":1651404132181},{"_id":"public/de881473/index.html","hash":"f0565dc14e9fb35664c764250c3874ab8df96771","modified":1651404132181},{"_id":"public/66075a24/index.html","hash":"654af09d4c32fcf5e2dc4197d52a2bf9688ad041","modified":1651404132181},{"_id":"public/9e29172c/index.html","hash":"6f98401a6cf0eba24b06048c4a50e26f6d977c49","modified":1651404132181},{"_id":"public/966a6548/index.html","hash":"3835379f1a4298dc53c43818de02d09ded3c9ee3","modified":1651404132181},{"_id":"public/23ae8ddc/index.html","hash":"44b7929905983a18e09805d951b8d266376dcfc7","modified":1651404132181},{"_id":"public/6fb9a62a/index.html","hash":"40a1d1f280c801a578d9a392939d615993b414f2","modified":1651404132181},{"_id":"public/38799c5f/index.html","hash":"d230b24dba8cccf92530eba6cc80c681b471e18a","modified":1651404132181},{"_id":"public/ec9f837c/index.html","hash":"1f2924a1c1d905cbdaa9b756412aad1d9f090640","modified":1651404132181},{"_id":"public/89c05b44/index.html","hash":"11720cdf660c73be2a5ce425fe92e6a886b16671","modified":1651404132181},{"_id":"public/d1698058/index.html","hash":"70e5c675daaa0d29155f26ef3f0c8f91e552a8d8","modified":1651404132181},{"_id":"public/8d1d7da4/index.html","hash":"24300915005ea12ec3cecad5556bb49fdea77792","modified":1651404132181},{"_id":"public/96058034/index.html","hash":"1e3961ff6115cfda7b7f63a173faa34b4083d69d","modified":1651404132181},{"_id":"public/3cf64c81/index.html","hash":"5b6dd2413ab15baa0c7bed5e5eb4a38af9849796","modified":1651404132181},{"_id":"public/eaf5670e/index.html","hash":"2188d18035e443c6d3c3031f3646c982cd6b7750","modified":1651404132181},{"_id":"public/b18b9540/index.html","hash":"a4b1055964cd8483edc479af8948c8f6d0f33cb8","modified":1651404132181},{"_id":"public/543d8669/index.html","hash":"b42ff15fa3b0c6637aa4ecb3d535329a6895b93e","modified":1651404132181},{"_id":"public/a183496f/index.html","hash":"c0bd31e5d2a81439cc1a4cf8b1a3f1d9d0ef9834","modified":1651404132181},{"_id":"public/fe5ddefd/index.html","hash":"c185ab08f9f3fdd20bfbf18956b2aeabb4f5db6e","modified":1651404132181},{"_id":"public/f822c036/index.html","hash":"27ff843c07f5ac1c0e47af5ea1e41ca290b24b07","modified":1651404132181},{"_id":"public/archives/index.html","hash":"c1bf6fee7f68ab5195a23ae6f7314d72982867d2","modified":1651404132181},{"_id":"public/categories/life/index.html","hash":"1c4b359bffc66d208e7776265c2b1f6db1f15693","modified":1651404132181},{"_id":"public/categories/life/page/2/index.html","hash":"6c8e583d24e845380c678440238e79b30e551c62","modified":1651404132181},{"_id":"public/categories/life/page/3/index.html","hash":"705ab3d129311d0a551b5f33be902e6e3db448a8","modified":1651404132181},{"_id":"public/categories/tech/index.html","hash":"9ed91c4b98a2e9060726c39c35bb7d198c693189","modified":1651404132181},{"_id":"public/categories/web/index.html","hash":"adedfa076b06f714c28cb1ab4c1a64d53b9c3856","modified":1651404132181},{"_id":"public/categories/web/page/2/index.html","hash":"da58225762ec7b2d39313b7e5dad37917a7a5602","modified":1651404132181},{"_id":"public/categories/生活随笔/index.html","hash":"a80cbba98fc13f2a6fce14d6542d4fd25338fe76","modified":1651404132181},{"_id":"public/categories/life/reading/index.html","hash":"92b0ef84145f39b066e43b194c6aefd38f9ac132","modified":1651404132181},{"_id":"public/categories/reading/index.html","hash":"15c600f78e4ce48b374719cd835ca72577209ffb","modified":1651404132181},{"_id":"public/categories/life/summary/index.html","hash":"e71350c555de8df604d709af89f4fa6ac65dc15a","modified":1651404132181},{"_id":"public/categories/fiction/index.html","hash":"62d76da74969c27ea007a66e7b4595653bcbb02d","modified":1651404132181},{"_id":"public/categories/non-fiction/index.html","hash":"fe70305415b4eb6f300b57f13fa1bae28638df3d","modified":1651404132181},{"_id":"public/categories/non-fiction/reading/index.html","hash":"fe70305415b4eb6f300b57f13fa1bae28638df3d","modified":1651404132181},{"_id":"public/categories/report/index.html","hash":"7d5bf2146910aae78062f93592b277dc1abddbb4","modified":1651404132181},{"_id":"public/index.html","hash":"ff44f3240f5b9d2f6aac1aafdc0d093a01555b62","modified":1651404132181},{"_id":"public/page/2/index.html","hash":"2d657c9b3b812e4c1a2be681bd5870cdb36370a5","modified":1651404132181},{"_id":"public/page/3/index.html","hash":"6fa01602b10f09efbc8f6b25aab64ff5ca880cd2","modified":1651404132181},{"_id":"public/page/4/index.html","hash":"bc11d2acaf9c72fcc7c1f9e109cd29fc6b240ca5","modified":1651404132181},{"_id":"public/page/5/index.html","hash":"10168ebaea330c10753a3e6dee380830d720fa0a","modified":1651404132181},{"_id":"public/page/6/index.html","hash":"75a47e8d65042196b0a347d46da5817146342ad1","modified":1651404132181},{"_id":"public/tags/hexo/index.html","hash":"c63b3a44daf454512fedc6566a689e3f0b34676f","modified":1651404132181},{"_id":"public/tags/blog/index.html","hash":"c63b3a44daf454512fedc6566a689e3f0b34676f","modified":1651404132181},{"_id":"public/tags/github/index.html","hash":"c63b3a44daf454512fedc6566a689e3f0b34676f","modified":1651404132181},{"_id":"public/tags/resolution/index.html","hash":"48a0aeb234c15d51b02b42beddd3cff8e6b27e8b","modified":1651404132181},{"_id":"public/tags/ECMAScript2015/index.html","hash":"6e723d0b6695586803b739bfe3049a18c7b7685f","modified":1651404132181},{"_id":"public/tags/es6/index.html","hash":"6e723d0b6695586803b739bfe3049a18c7b7685f","modified":1651404132181},{"_id":"public/tags/var/index.html","hash":"1ddd9f9d5f00658ef79c5aa14abdb8aa6b1ebc57","modified":1651404132181},{"_id":"public/tags/let/index.html","hash":"1ddd9f9d5f00658ef79c5aa14abdb8aa6b1ebc57","modified":1651404132181},{"_id":"public/tags/const/index.html","hash":"1ddd9f9d5f00658ef79c5aa14abdb8aa6b1ebc57","modified":1651404132181},{"_id":"public/tags/block-binding/index.html","hash":"1ddd9f9d5f00658ef79c5aa14abdb8aa6b1ebc57","modified":1651404132181},{"_id":"public/tags/hoisting/index.html","hash":"1ddd9f9d5f00658ef79c5aa14abdb8aa6b1ebc57","modified":1651404132181},{"_id":"public/tags/ECMAScript2016/index.html","hash":"8413dcc54cf58a6d3ee19bb1af66fe8f67642ffb","modified":1651404132181},{"_id":"public/tags/es7/index.html","hash":"8413dcc54cf58a6d3ee19bb1af66fe8f67642ffb","modified":1651404132181},{"_id":"public/tags/decorator/index.html","hash":"8413dcc54cf58a6d3ee19bb1af66fe8f67642ffb","modified":1651404132181},{"_id":"public/tags/javascript/index.html","hash":"89a85044da0cae74e6e06b69955e61a535688a63","modified":1651404132181},{"_id":"public/tags/react/index.html","hash":"f0d9c8e35a9c63f9a8aab24e31b57b018016765d","modified":1651404132181},{"_id":"public/tags/react-native/index.html","hash":"f0d9c8e35a9c63f9a8aab24e31b57b018016765d","modified":1651404132181},{"_id":"public/tags/Xcode/index.html","hash":"f0d9c8e35a9c63f9a8aab24e31b57b018016765d","modified":1651404132181},{"_id":"public/tags/module/index.html","hash":"198a8fa37b614a4a5901aab6a9a64321ad5d9f39","modified":1651404132181},{"_id":"public/tags/Flutter/index.html","hash":"ab7f7bd3c0e7a8c11c5e50137fcb33f9aa447104","modified":1651404132181},{"_id":"public/tags/setup/index.html","hash":"ab7f7bd3c0e7a8c11c5e50137fcb33f9aa447104","modified":1651404132181},{"_id":"public/tags/books/index.html","hash":"d40b6d38d23d9af2d524e210ad87fb44be3cd5a4","modified":1651404132181},{"_id":"public/tags/reading/index.html","hash":"5d7e760aeb57a3aafd41e0fa9e9864d84676bf24","modified":1651404132181},{"_id":"public/tags/setTimeout/index.html","hash":"06e3884a1c7d4da6d24b5651b553d69da8b12752","modified":1651404132181},{"_id":"public/tags/setInterval/index.html","hash":"06e3884a1c7d4da6d24b5651b553d69da8b12752","modified":1651404132181},{"_id":"public/tags/window/index.html","hash":"c15939d57af0ca460e37167f9abe9bba1750deed","modified":1651404132181},{"_id":"public/tags/events/index.html","hash":"c15939d57af0ca460e37167f9abe9bba1750deed","modified":1651404132181},{"_id":"public/tags/capture-bubbling/index.html","hash":"c15939d57af0ca460e37167f9abe9bba1750deed","modified":1651404132181},{"_id":"public/tags/delegate/index.html","hash":"c15939d57af0ca460e37167f9abe9bba1750deed","modified":1651404132181},{"_id":"public/tags/nodejs/index.html","hash":"55fc072d208c943dd2517bbb17ee13f0745231d8","modified":1651404132181},{"_id":"public/tags/modules/index.html","hash":"f5afe2efb40b2e5e277d63fc27b57859575bfd3c","modified":1651404132181},{"_id":"public/tags/exports/index.html","hash":"f5afe2efb40b2e5e277d63fc27b57859575bfd3c","modified":1651404132181},{"_id":"public/tags/iterators/index.html","hash":"c0c3fffd5b034b2396c72815b118b22464ee1936","modified":1651404132181},{"_id":"public/tags/generators/index.html","hash":"c0c3fffd5b034b2396c72815b118b22464ee1936","modified":1651404132181},{"_id":"public/tags/investment/index.html","hash":"0901d8cdc0753c5ec97991241bf32232b98148c5","modified":1651404132181},{"_id":"public/tags/promise/index.html","hash":"0486672fba6d9a2510c08a1ac8634d89cc2caf10","modified":1651404132181},{"_id":"public/tags/Observables/index.html","hash":"0486672fba6d9a2510c08a1ac8634d89cc2caf10","modified":1651404132181},{"_id":"public/tags/subscription/index.html","hash":"0486672fba6d9a2510c08a1ac8634d89cc2caf10","modified":1651404132181},{"_id":"public/tags/subscribe/index.html","hash":"0486672fba6d9a2510c08a1ac8634d89cc2caf10","modified":1651404132181},{"_id":"public/tags/frontend/index.html","hash":"58c973f6b1ed0a618e0e783d88265e83c2667bb1","modified":1651404132181},{"_id":"public/tags/前端工程化/index.html","hash":"58c973f6b1ed0a618e0e783d88265e83c2667bb1","modified":1651404132181},{"_id":"public/tags/echarts/index.html","hash":"067b291a926bcd90519d31adcbca5696b4824f38","modified":1651404132181},{"_id":"public/tags/zrender/index.html","hash":"067b291a926bcd90519d31adcbca5696b4824f38","modified":1651404132181},{"_id":"public/tags/tooltip/index.html","hash":"067b291a926bcd90519d31adcbca5696b4824f38","modified":1651404132181},{"_id":"public/tags/confine/index.html","hash":"067b291a926bcd90519d31adcbca5696b4824f38","modified":1651404132181},{"_id":"public/tags/curry/index.html","hash":"00b95d8cb03b7eef22fc6ea5f4b7e0c479e2d5ab","modified":1651404132181},{"_id":"public/tags/closure/index.html","hash":"00b95d8cb03b7eef22fc6ea5f4b7e0c479e2d5ab","modified":1651404132181},{"_id":"public/tags/event-loop/index.html","hash":"0013351d6ecdf46e8998c7b290f8ad42d02d57e8","modified":1651404132181},{"_id":"public/tags/browser/index.html","hash":"0013351d6ecdf46e8998c7b290f8ad42d02d57e8","modified":1651404132181},{"_id":"public/tags/leadership/index.html","hash":"9c3684170e4b054c84a3ca4587558d52f145e64a","modified":1651404132181},{"_id":"public/tags/history/index.html","hash":"4b01a3916dbf109a925936191857bd3feaa0ba3b","modified":1651404132181},{"_id":"public/tags/收纳/index.html","hash":"de047c0940a6911abc129043f71003ead19fc754","modified":1651404132181},{"_id":"public/tags/马伯庸/index.html","hash":"62d76da74969c27ea007a66e7b4595653bcbb02d","modified":1651404132181},{"_id":"public/tags/bytedance/index.html","hash":"fe70305415b4eb6f300b57f13fa1bae28638df3d","modified":1651404132181},{"_id":"public/tags/tiktok/index.html","hash":"fe70305415b4eb6f300b57f13fa1bae28638df3d","modified":1651404132181},{"_id":"public/tags/week/index.html","hash":"7d5bf2146910aae78062f93592b277dc1abddbb4","modified":1651404132181},{"_id":"public/23651091/index.html","hash":"1bd0fdc21e8cda35314dd12bb01ccbb647527605","modified":1651404132181},{"_id":"public/282aa8cf/index.html","hash":"176776a803d8518a2b1c2efc0a48f2c4a37abe12","modified":1651404132181},{"_id":"public/9176cb10/index.html","hash":"92eba8c18c334fd2980e8fdc97d3910a534313e2","modified":1651404132181},{"_id":"public/c505c167/index.html","hash":"50e465f9f9a1e9b4a765f4a0bb6a1e8fcd0ef896","modified":1651404132181},{"_id":"public/24019ac5/index.html","hash":"0994a92527150a45c8626c1443ad23cf7241ed3b","modified":1651404132181},{"_id":"public/f1b3125a/index.html","hash":"b3fbd18a8693dd38f42b8d9cebb05c1574002a4d","modified":1651404132181},{"_id":"public/646f8dec/index.html","hash":"eb03ecc6e4aaf2376374b5e6a2f0ac74577d18df","modified":1651404132181},{"_id":"public/robots.txt","hash":"99276e2a5485017b35cd46124e3d21b84b41904c","modified":1651404132181},{"_id":"public/css/style.scss","hash":"7fd8b6532c2a34a42933264b57ce4b549274fef2","modified":1651404132181},{"_id":"public/CNAME","hash":"71c95774de16f2039ec0188b41e1ba5bab1f5bda","modified":1651404132181},{"_id":"public/images/favicon.png","hash":"a9a5f6e5ff829d106bc4a90a8e2f2ffc643fa9fb","modified":1651404132181},{"_id":"public/images/logo.png","hash":"c60a35a1abbba36f5fb34fbfb6773edbce6d4cf6","modified":1651404132181},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1651404132181},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1651404132181},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1651404132181},{"_id":"public/css/blog_basic.css","hash":"75a4b1ef676668141e38fb3c42f1f139fa44a1ee","modified":1651404132181},{"_id":"public/css/style.css","hash":"043b146a2d5692fb05edee9a5e36e2da95c01800","modified":1651404132181},{"_id":"public/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1651404132181},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1651404132181},{"_id":"source/_drafts/2022-apr-w5.md","hash":"9457a3417cca6e1697feff41d74b14c6098baa5e","modified":1651722356350},{"_id":"source/_drafts/2022-may-w2.md","hash":"2a22a3db76d7078243f90b76b3986cf3d51c5e17","modified":1652063898210},{"_id":"source/_posts/2022-apr-w5.md","hash":"9a4736ab3502e68a0364390547e928506959fc95","modified":1651930697431},{"_id":"source/_posts/2022-may-w1.md","hash":"012c80a6f5259273c9a249187fe2e1485186de25","modified":1652017002153},{"_id":"source/_daily/2022-05-11.md","hash":"90c3e8e029914c0ca559f517002f6ea7214466f8","modified":1652264822792},{"_id":"themes/anatole/source/images/favicon.ico","hash":"cee79e29f227a20aa2f469fad69423fd432e09c4","modified":1652458835346}],"Category":[{"name":"life","_id":"cka6xu71l000d8cmhgxsizk8u"},{"name":"tech","_id":"cka6xu71t000j8cmhil1ge6ke"},{"name":"web","_id":"cka6xu720000r8cmhrml3wvur"},{"name":"algorithm","_id":"cka6xu72p001v8cmhlhp2zhd7"},{"name":"生活随笔","_id":"ckg5appth0000ckmhcdf86z93"},{"name":"reading","parent":"cka6xu71l000d8cmhgxsizk8u","_id":"ckq0coeo90003b4fy0nr0gc85"},{"name":"reading","_id":"ckzlahszl0002e2s6hwqn3xg2"},{"name":"summary","parent":"cka6xu71l000d8cmhgxsizk8u","_id":"ckzlahszr0004e2s62ttb1lc3"},{"name":"fiction","_id":"ckzlaqiu50006fys6106khxu4"},{"name":"nonfiction","_id":"ckzlar97p000afys62lg92zh3"},{"name":"non-fiction","_id":"cl0d7wq8s0000bomh1ymrhcay"},{"name":"reading","parent":"cl0d7wq8s0000bomh1ymrhcay","_id":"cl0d7wqak0003bomhcchyfepg"},{"name":"report","_id":"cl0l4ii6r0001ixfyetnfh3du"}],"Data":[],"Page":[{"title":"about","date":"2017-04-08T10:23:22.000Z","_content":"This is about page.\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-08 03:23:22\n---\nThis is about page.\n","updated":"2021-09-14T11:40:19.910Z","path":"about/index.html","_id":"cka6xu71k000c8cmhnju8ai8r","comments":1,"layout":"page","content":"<p>This is about page.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is about page.</p>\n"},{"title":"categories","date":"2017-04-10T07:03:14.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-04-10 00:03:14\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-09-14T11:40:19.911Z","path":"categories/index.html","_id":"cka6xu71r000g8cmhj7sddfnp","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-04-10T07:03:21.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-10 00:03:21\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-09-14T11:40:19.911Z","path":"tags/index.html","_id":"cka6xu71s000i8cmhqphv53k9","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2017年中总结","abbrlink":"543d8669","date":"2017-06-07T06:20:20.000Z","_content":"\n最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。\n\n时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。\n\n回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。\n\n对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。\n\n说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。\n\n第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。\n\n总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。\n\n2017/06/06\n","source":"_posts/2017-mid-year-summary.md","raw":"---\ntitle: 2017年中总结\ncategories:\n  - life\n  - summary\nabbrlink: 543d8669\ndate: 2017-06-06 23:20:20\ntags:\n---\n\n最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。\n\n时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。\n\n回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。\n\n对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。\n\n说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。\n\n第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。\n\n总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。\n\n2017/06/06\n","slug":"2017-mid-year-summary","published":1,"updated":"2022-02-13T13:13:58.106Z","_id":"cka6xu6wg00008cmhsarcszuz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。</p>\n<p>时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。</p>\n<p>回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。</p>\n<p>对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。</p>\n<p>说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。</p>\n<p>第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。</p>\n<p>总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。</p>\n<p>2017&#x2F;06&#x2F;06</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。</p>\n<p>时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。</p>\n<p>回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。</p>\n<p>对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。</p>\n<p>说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。</p>\n<p>第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。</p>\n<p>总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。</p>\n<p>2017&#x2F;06&#x2F;06</p>\n"},{"title":"Build a Personal Blog With Hexo","abbrlink":"a183496f","date":"2017-04-10T05:50:50.000Z","_content":"\nAfter spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I'm going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.\n\nBefore we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.\n\nThis article has five sections as follows:\n\n- Install Hexo\n- Deploy on Github\n- Add new layouts\n- Decorate with new Theme\n- Add Busuanzi & Disqus & Google Analytics\n\n#### Install Hexo\n\n```bash\nnpm install hexo-cli -g\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\nAfter the npm installation, you can now run the server:\n\n```bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\nAt this time, go to `localhost:4000`, and you should see your blog now has a \"Hello World\" article with default theme.\n\n#### Deploy on Github\n\nYou can follow [Github Pages](https://pages.github.com/) to create a repo in your github. After that, you can `git clone` with your https or ssh url to your local.\nThen back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\nThen update the `_config.yaml` file by adding these code in the bottom:\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: <your blog repo ssh or https url>\n  branch: master\n```\n\nAt this time, we can deploy the source code to the github repo:\n\n```bash\nhexo deploy\n```\n\n**TIP**: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:\n\n```bash\nhexo clean\n```\n\nThis command will clean the cache file (`db.json`) and generate files (`public`).\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\nNow, you can take a look at your blog in your browser.\n\n#### Add new layouts\n\n```bash\nhexo new post <title>\n```\n\nif met this fatal error:\n\n```bash\nError: fatal: in unpopulated submodule '.deploy_git'\n```\n\ntry install `hexo-deployer-git` again.\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n#### Publish\n\n```bash\nrm -rf .deploy_git\nhexo g\nhexo d\nhexo clean\n```\n\n#### CNAME\n\nstore the `CNAME` file in source so it won't be deleted automatically.\n","source":"_posts/Build-a-Personal-Blog-With-Hexo.md","raw":"---\ntitle: Build a Personal Blog With Hexo\ncategories:\n  - tech\ntags:\n  - hexo\n  - blog\n  - github\nabbrlink: a183496f\ndate: 2017-04-09 22:50:50\n---\n\nAfter spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I'm going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.\n\nBefore we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.\n\nThis article has five sections as follows:\n\n- Install Hexo\n- Deploy on Github\n- Add new layouts\n- Decorate with new Theme\n- Add Busuanzi & Disqus & Google Analytics\n\n#### Install Hexo\n\n```bash\nnpm install hexo-cli -g\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\nAfter the npm installation, you can now run the server:\n\n```bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\nAt this time, go to `localhost:4000`, and you should see your blog now has a \"Hello World\" article with default theme.\n\n#### Deploy on Github\n\nYou can follow [Github Pages](https://pages.github.com/) to create a repo in your github. After that, you can `git clone` with your https or ssh url to your local.\nThen back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\nThen update the `_config.yaml` file by adding these code in the bottom:\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: <your blog repo ssh or https url>\n  branch: master\n```\n\nAt this time, we can deploy the source code to the github repo:\n\n```bash\nhexo deploy\n```\n\n**TIP**: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:\n\n```bash\nhexo clean\n```\n\nThis command will clean the cache file (`db.json`) and generate files (`public`).\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\nNow, you can take a look at your blog in your browser.\n\n#### Add new layouts\n\n```bash\nhexo new post <title>\n```\n\nif met this fatal error:\n\n```bash\nError: fatal: in unpopulated submodule '.deploy_git'\n```\n\ntry install `hexo-deployer-git` again.\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n#### Publish\n\n```bash\nrm -rf .deploy_git\nhexo g\nhexo d\nhexo clean\n```\n\n#### CNAME\n\nstore the `CNAME` file in source so it won't be deleted automatically.\n","slug":"Build-a-Personal-Blog-With-Hexo","published":1,"updated":"2021-09-14T11:40:19.902Z","_id":"cka6xu6wl00018cmhsar3t6i2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>After spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I’m going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.</p>\n<p>Before we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.</p>\n<p>This article has five sections as follows:</p>\n<ul>\n<li>Install Hexo</li>\n<li>Deploy on Github</li>\n<li>Add new layouts</li>\n<li>Decorate with new Theme</li>\n<li>Add Busuanzi &amp; Disqus &amp; Google Analytics</li>\n</ul>\n<h4 id=\"Install-Hexo\"><a href=\"#Install-Hexo\" class=\"headerlink\" title=\"Install Hexo\"></a>Install Hexo</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>After the npm installation, you can now run the server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<p>At this time, go to <code>localhost:4000</code>, and you should see your blog now has a “Hello World” article with default theme.</p>\n<h4 id=\"Deploy-on-Github\"><a href=\"#Deploy-on-Github\" class=\"headerlink\" title=\"Deploy on Github\"></a>Deploy on Github</h4><p>You can follow <a href=\"https://pages.github.com/\">Github Pages</a> to create a repo in your github. After that, you can <code>git clone</code> with your https or ssh url to your local.<br>Then back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>Then update the <code>_config.yaml</code> file by adding these code in the bottom:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;your blog repo ssh or https url&gt;</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>At this time, we can deploy the source code to the github repo:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p><strong>TIP</strong>: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>This command will clean the cache file (<code>db.json</code>) and generate files (<code>public</code>).</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n<p>Now, you can take a look at your blog in your browser.</p>\n<h4 id=\"Add-new-layouts\"><a href=\"#Add-new-layouts\" class=\"headerlink\" title=\"Add new layouts\"></a>Add new layouts</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>if met this fatal error:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">&#x27;.deploy_git&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>try install <code>hexo-deployer-git</code> again.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Publish\"><a href=\"#Publish\" class=\"headerlink\" title=\"Publish\"></a>Publish</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CNAME\"><a href=\"#CNAME\" class=\"headerlink\" title=\"CNAME\"></a>CNAME</h4><p>store the <code>CNAME</code> file in source so it won’t be deleted automatically.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>After spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I’m going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.</p>\n<p>Before we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.</p>\n<p>This article has five sections as follows:</p>\n<ul>\n<li>Install Hexo</li>\n<li>Deploy on Github</li>\n<li>Add new layouts</li>\n<li>Decorate with new Theme</li>\n<li>Add Busuanzi &amp; Disqus &amp; Google Analytics</li>\n</ul>\n<h4 id=\"Install-Hexo\"><a href=\"#Install-Hexo\" class=\"headerlink\" title=\"Install Hexo\"></a>Install Hexo</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>After the npm installation, you can now run the server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<p>At this time, go to <code>localhost:4000</code>, and you should see your blog now has a “Hello World” article with default theme.</p>\n<h4 id=\"Deploy-on-Github\"><a href=\"#Deploy-on-Github\" class=\"headerlink\" title=\"Deploy on Github\"></a>Deploy on Github</h4><p>You can follow <a href=\"https://pages.github.com/\">Github Pages</a> to create a repo in your github. After that, you can <code>git clone</code> with your https or ssh url to your local.<br>Then back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>Then update the <code>_config.yaml</code> file by adding these code in the bottom:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;your blog repo ssh or https url&gt;</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>At this time, we can deploy the source code to the github repo:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p><strong>TIP</strong>: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>This command will clean the cache file (<code>db.json</code>) and generate files (<code>public</code>).</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n<p>Now, you can take a look at your blog in your browser.</p>\n<h4 id=\"Add-new-layouts\"><a href=\"#Add-new-layouts\" class=\"headerlink\" title=\"Add new layouts\"></a>Add new layouts</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>if met this fatal error:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">&#x27;.deploy_git&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>try install <code>hexo-deployer-git</code> again.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Publish\"><a href=\"#Publish\" class=\"headerlink\" title=\"Publish\"></a>Publish</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CNAME\"><a href=\"#CNAME\" class=\"headerlink\" title=\"CNAME\"></a>CNAME</h4><p>store the <code>CNAME</code> file in source so it won’t be deleted automatically.</p>\n"},{"title":"2020 Resolution","abbrlink":"38799c5f","date":"2020-01-15T01:03:28.000Z","_content":"\n说来十分惭愧，为自己的行动力感到汗颜。本打算年初的时候做一个总结，然后制定新年的计划，结果一下子就晃荡到了三月。\n\n我一直是这么看待拖延症，究其原因，还是能力不足导致不愿迈出第一歩，所以迟迟不愿开始。好多事情拖着拖着就没有想去做的念头了。今年首先要改的就是拖延，凡事想到就立刻去做。如果手头正有事，就插入队列中，上一件事完成之后立刻消费掉。比如该回的消息立刻就回复，突然出现的想法随手记录下来，看完了书和电影有感而发就写一段短评。虽然可以预想在开始阶段肯定不会得心应手，先试一段时间再看看。\n\n说回计划，往年可能会说，要读多少书，看多少电影。但是近来隐约有些担心自己的逻辑表达，逐渐陷入碎片化的泥沼。所以今年给自己定了一个小目标，希望多思考，然后落到纸上。最近看了阿乙的《寡人》，书怎么样另说，但是形式给我提供了一个思路。时不时的写上一段，记录下自己的想法，日后再看，或许可以提供一些不同的见解和反思。不敢把目标定得太高，希望年末的时候可以有两万字，来记下我这一年的思考和心得。\n\n除了开始练习写作，阅读也不能落下。在美国的时候，我只看有用的书，技术相关的，不看无用的书。后来想想，这样容易钻牛角尖，整个人就仿佛一台机器，一刻不停歇。无法从工作和一成不变的生活中抽离出来，无法反思，无法思考。现在知道了，不仅要看技术的书，也需要看小说，看传记，看科普类读物，无他，提供另一种生活，另一种思想。这样人才不会故步自封，止步于前。\n\n在技术方面，说起来既羞愧又自责，最近每天早上起来坐在电脑前，第一件事是刷刷微博、知乎，而去年年初时，每天早上到公司第一件事是看 medium 上推送的技术文章。现在想想，过去一年几乎完全没有进步。也很清楚原因——工作上的消极深刻影响到了自己学习的积极性。今年需要纠正过来，找几个方向好好钻研一下，保持每天阅读技术文章的习惯。刷题也得继续，前段时间一直码业务，最近公司不太乐观，还是得多准备准备，保持对算法的熟练程度。\n\n生活方面，希望能早睡早起，现在每天记录自己的起床时间，争取每天早起十分钟，直到稳定到八点钟。年纪大了，感觉新陈代谢也没有年轻时旺盛，呆久了就感觉很是萎靡，虽然说也有最近疫情的影响，每天宅在家中。日常锻炼不可少，每天波比跳不能停。\n\n最后，希望可以找个女朋友，这也算是今年最大的愿望了吧，如果顺利，再养只猫猫狗狗，就再好不过了。\n","source":"_posts/2020-resolution.md","raw":"---\ntitle: 2020 Resolution\ncategories:\n  - life\n  - summary\ntags:\n  - resolution\nabbrlink: 38799c5f\ndate: 2020-01-14 17:03:28\n---\n\n说来十分惭愧，为自己的行动力感到汗颜。本打算年初的时候做一个总结，然后制定新年的计划，结果一下子就晃荡到了三月。\n\n我一直是这么看待拖延症，究其原因，还是能力不足导致不愿迈出第一歩，所以迟迟不愿开始。好多事情拖着拖着就没有想去做的念头了。今年首先要改的就是拖延，凡事想到就立刻去做。如果手头正有事，就插入队列中，上一件事完成之后立刻消费掉。比如该回的消息立刻就回复，突然出现的想法随手记录下来，看完了书和电影有感而发就写一段短评。虽然可以预想在开始阶段肯定不会得心应手，先试一段时间再看看。\n\n说回计划，往年可能会说，要读多少书，看多少电影。但是近来隐约有些担心自己的逻辑表达，逐渐陷入碎片化的泥沼。所以今年给自己定了一个小目标，希望多思考，然后落到纸上。最近看了阿乙的《寡人》，书怎么样另说，但是形式给我提供了一个思路。时不时的写上一段，记录下自己的想法，日后再看，或许可以提供一些不同的见解和反思。不敢把目标定得太高，希望年末的时候可以有两万字，来记下我这一年的思考和心得。\n\n除了开始练习写作，阅读也不能落下。在美国的时候，我只看有用的书，技术相关的，不看无用的书。后来想想，这样容易钻牛角尖，整个人就仿佛一台机器，一刻不停歇。无法从工作和一成不变的生活中抽离出来，无法反思，无法思考。现在知道了，不仅要看技术的书，也需要看小说，看传记，看科普类读物，无他，提供另一种生活，另一种思想。这样人才不会故步自封，止步于前。\n\n在技术方面，说起来既羞愧又自责，最近每天早上起来坐在电脑前，第一件事是刷刷微博、知乎，而去年年初时，每天早上到公司第一件事是看 medium 上推送的技术文章。现在想想，过去一年几乎完全没有进步。也很清楚原因——工作上的消极深刻影响到了自己学习的积极性。今年需要纠正过来，找几个方向好好钻研一下，保持每天阅读技术文章的习惯。刷题也得继续，前段时间一直码业务，最近公司不太乐观，还是得多准备准备，保持对算法的熟练程度。\n\n生活方面，希望能早睡早起，现在每天记录自己的起床时间，争取每天早起十分钟，直到稳定到八点钟。年纪大了，感觉新陈代谢也没有年轻时旺盛，呆久了就感觉很是萎靡，虽然说也有最近疫情的影响，每天宅在家中。日常锻炼不可少，每天波比跳不能停。\n\n最后，希望可以找个女朋友，这也算是今年最大的愿望了吧，如果顺利，再养只猫猫狗狗，就再好不过了。\n","slug":"2020-resolution","published":1,"updated":"2022-02-13T13:13:58.106Z","_id":"cka6xu6wm00028cmhavmctd7d","comments":1,"layout":"post","photos":[],"link":"","content":"<p>说来十分惭愧，为自己的行动力感到汗颜。本打算年初的时候做一个总结，然后制定新年的计划，结果一下子就晃荡到了三月。</p>\n<p>我一直是这么看待拖延症，究其原因，还是能力不足导致不愿迈出第一歩，所以迟迟不愿开始。好多事情拖着拖着就没有想去做的念头了。今年首先要改的就是拖延，凡事想到就立刻去做。如果手头正有事，就插入队列中，上一件事完成之后立刻消费掉。比如该回的消息立刻就回复，突然出现的想法随手记录下来，看完了书和电影有感而发就写一段短评。虽然可以预想在开始阶段肯定不会得心应手，先试一段时间再看看。</p>\n<p>说回计划，往年可能会说，要读多少书，看多少电影。但是近来隐约有些担心自己的逻辑表达，逐渐陷入碎片化的泥沼。所以今年给自己定了一个小目标，希望多思考，然后落到纸上。最近看了阿乙的《寡人》，书怎么样另说，但是形式给我提供了一个思路。时不时的写上一段，记录下自己的想法，日后再看，或许可以提供一些不同的见解和反思。不敢把目标定得太高，希望年末的时候可以有两万字，来记下我这一年的思考和心得。</p>\n<p>除了开始练习写作，阅读也不能落下。在美国的时候，我只看有用的书，技术相关的，不看无用的书。后来想想，这样容易钻牛角尖，整个人就仿佛一台机器，一刻不停歇。无法从工作和一成不变的生活中抽离出来，无法反思，无法思考。现在知道了，不仅要看技术的书，也需要看小说，看传记，看科普类读物，无他，提供另一种生活，另一种思想。这样人才不会故步自封，止步于前。</p>\n<p>在技术方面，说起来既羞愧又自责，最近每天早上起来坐在电脑前，第一件事是刷刷微博、知乎，而去年年初时，每天早上到公司第一件事是看 medium 上推送的技术文章。现在想想，过去一年几乎完全没有进步。也很清楚原因——工作上的消极深刻影响到了自己学习的积极性。今年需要纠正过来，找几个方向好好钻研一下，保持每天阅读技术文章的习惯。刷题也得继续，前段时间一直码业务，最近公司不太乐观，还是得多准备准备，保持对算法的熟练程度。</p>\n<p>生活方面，希望能早睡早起，现在每天记录自己的起床时间，争取每天早起十分钟，直到稳定到八点钟。年纪大了，感觉新陈代谢也没有年轻时旺盛，呆久了就感觉很是萎靡，虽然说也有最近疫情的影响，每天宅在家中。日常锻炼不可少，每天波比跳不能停。</p>\n<p>最后，希望可以找个女朋友，这也算是今年最大的愿望了吧，如果顺利，再养只猫猫狗狗，就再好不过了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>说来十分惭愧，为自己的行动力感到汗颜。本打算年初的时候做一个总结，然后制定新年的计划，结果一下子就晃荡到了三月。</p>\n<p>我一直是这么看待拖延症，究其原因，还是能力不足导致不愿迈出第一歩，所以迟迟不愿开始。好多事情拖着拖着就没有想去做的念头了。今年首先要改的就是拖延，凡事想到就立刻去做。如果手头正有事，就插入队列中，上一件事完成之后立刻消费掉。比如该回的消息立刻就回复，突然出现的想法随手记录下来，看完了书和电影有感而发就写一段短评。虽然可以预想在开始阶段肯定不会得心应手，先试一段时间再看看。</p>\n<p>说回计划，往年可能会说，要读多少书，看多少电影。但是近来隐约有些担心自己的逻辑表达，逐渐陷入碎片化的泥沼。所以今年给自己定了一个小目标，希望多思考，然后落到纸上。最近看了阿乙的《寡人》，书怎么样另说，但是形式给我提供了一个思路。时不时的写上一段，记录下自己的想法，日后再看，或许可以提供一些不同的见解和反思。不敢把目标定得太高，希望年末的时候可以有两万字，来记下我这一年的思考和心得。</p>\n<p>除了开始练习写作，阅读也不能落下。在美国的时候，我只看有用的书，技术相关的，不看无用的书。后来想想，这样容易钻牛角尖，整个人就仿佛一台机器，一刻不停歇。无法从工作和一成不变的生活中抽离出来，无法反思，无法思考。现在知道了，不仅要看技术的书，也需要看小说，看传记，看科普类读物，无他，提供另一种生活，另一种思想。这样人才不会故步自封，止步于前。</p>\n<p>在技术方面，说起来既羞愧又自责，最近每天早上起来坐在电脑前，第一件事是刷刷微博、知乎，而去年年初时，每天早上到公司第一件事是看 medium 上推送的技术文章。现在想想，过去一年几乎完全没有进步。也很清楚原因——工作上的消极深刻影响到了自己学习的积极性。今年需要纠正过来，找几个方向好好钻研一下，保持每天阅读技术文章的习惯。刷题也得继续，前段时间一直码业务，最近公司不太乐观，还是得多准备准备，保持对算法的熟练程度。</p>\n<p>生活方面，希望能早睡早起，现在每天记录自己的起床时间，争取每天早起十分钟，直到稳定到八点钟。年纪大了，感觉新陈代谢也没有年轻时旺盛，呆久了就感觉很是萎靡，虽然说也有最近疫情的影响，每天宅在家中。日常锻炼不可少，每天波比跳不能停。</p>\n<p>最后，希望可以找个女朋友，这也算是今年最大的愿望了吧，如果顺利，再养只猫猫狗狗，就再好不过了。</p>\n"},{"title":"ES6 Block Binding","abbrlink":"8d1d7da4","date":"2018-05-03T07:07:52.000Z","_content":"\n#### Var declaration and hoisting\n\nHoisting: Variable declarations using `var` are treated as if they are at the top of the **function** (or **global** scope, if declared outside of a function) regardless of where the actual declaration occurs.\n\n#### Block-level Declarartion\n\nBlock-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:\n\n1.  Inside of a function\n2.  Inside of a block (indicated by the `{` and `}` characters)\n\n##### Let\n\n`let` declarations are not hoisted to the top of the enclosing block.\n\n##### No Redeclaration\n\n```js\nvar count = 30;\n// Syntax error\nlet count = 40;\n```\n\nBut in a block, let ccan be use to declare an variable with same name.\n\n```js\nvar count = 30;\n// Does not throw an error\nif (condition) {\n  let count = 40;\n  // more code\n}\n```\n\n##### Const\n\n`const`, like `let` declarations, are block-level declarations.\n\n```js\nif (condition) {\n  const maxItems = 5;\n  // more code\n}\n// maxItems isn't accessible here\n```\n\n`const` cannot re-declaration as well.\n\n`const` cannot re-assign.\n\n```js\nconst maxItems = 5;\nmaxItems = 6; // throws error\n```\n\n##### Declaring Objects with const\n\nA `const` declaration prevents modification of the binding and not of the value itself.\n\n```js\nconst person = {\n  name: 'Nicholas',\n};\n\n// works\nperson.name = 'Greg';\n\n// throws an error\nperson = {\n  name: 'Greg',\n};\n```\n\n`const` prevents modification of the binding, not modification of the bound value.\n\n#### The Temporal Dead Zone(TDZ)\n\nA variable declared with either `let` or `const` cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the `typeof` operation.\n\n```js\nif (condition) {\n  console.log(typeof value); // ReferenceError!\n  let value = 'blue';\n}\n\nconsole.log(typeof value); // \"undefined\"\n\nif (condition) {\n  let value = 'blue';\n}\n```\n","source":"_posts/ES6-Block-Binding.md","raw":"---\ntitle: ES6 Block Binding\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - var\n  - let\n  - const\n  - block binding\n  - hoisting\nabbrlink: 8d1d7da4\ndate: 2018-05-03 00:07:52\n---\n\n#### Var declaration and hoisting\n\nHoisting: Variable declarations using `var` are treated as if they are at the top of the **function** (or **global** scope, if declared outside of a function) regardless of where the actual declaration occurs.\n\n#### Block-level Declarartion\n\nBlock-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:\n\n1.  Inside of a function\n2.  Inside of a block (indicated by the `{` and `}` characters)\n\n##### Let\n\n`let` declarations are not hoisted to the top of the enclosing block.\n\n##### No Redeclaration\n\n```js\nvar count = 30;\n// Syntax error\nlet count = 40;\n```\n\nBut in a block, let ccan be use to declare an variable with same name.\n\n```js\nvar count = 30;\n// Does not throw an error\nif (condition) {\n  let count = 40;\n  // more code\n}\n```\n\n##### Const\n\n`const`, like `let` declarations, are block-level declarations.\n\n```js\nif (condition) {\n  const maxItems = 5;\n  // more code\n}\n// maxItems isn't accessible here\n```\n\n`const` cannot re-declaration as well.\n\n`const` cannot re-assign.\n\n```js\nconst maxItems = 5;\nmaxItems = 6; // throws error\n```\n\n##### Declaring Objects with const\n\nA `const` declaration prevents modification of the binding and not of the value itself.\n\n```js\nconst person = {\n  name: 'Nicholas',\n};\n\n// works\nperson.name = 'Greg';\n\n// throws an error\nperson = {\n  name: 'Greg',\n};\n```\n\n`const` prevents modification of the binding, not modification of the bound value.\n\n#### The Temporal Dead Zone(TDZ)\n\nA variable declared with either `let` or `const` cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the `typeof` operation.\n\n```js\nif (condition) {\n  console.log(typeof value); // ReferenceError!\n  let value = 'blue';\n}\n\nconsole.log(typeof value); // \"undefined\"\n\nif (condition) {\n  let value = 'blue';\n}\n```\n","slug":"ES6-Block-Binding","published":1,"updated":"2021-09-14T11:40:19.903Z","_id":"cka6xu6wn00038cmh7ujpku0k","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Var-declaration-and-hoisting\"><a href=\"#Var-declaration-and-hoisting\" class=\"headerlink\" title=\"Var declaration and hoisting\"></a>Var declaration and hoisting</h4><p>Hoisting: Variable declarations using <code>var</code> are treated as if they are at the top of the <strong>function</strong> (or <strong>global</strong> scope, if declared outside of a function) regardless of where the actual declaration occurs.</p>\n<h4 id=\"Block-level-Declarartion\"><a href=\"#Block-level-Declarartion\" class=\"headerlink\" title=\"Block-level Declarartion\"></a>Block-level Declarartion</h4><p>Block-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:</p>\n<ol>\n<li>Inside of a function</li>\n<li>Inside of a block (indicated by the <code>&#123;</code> and <code>&#125;</code> characters)</li>\n</ol>\n<h5 id=\"Let\"><a href=\"#Let\" class=\"headerlink\" title=\"Let\"></a>Let</h5><p><code>let</code> declarations are not hoisted to the top of the enclosing block.</p>\n<h5 id=\"No-Redeclaration\"><a href=\"#No-Redeclaration\" class=\"headerlink\" title=\"No Redeclaration\"></a>No Redeclaration</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Syntax error</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br></pre></td></tr></table></figure>\n\n<p>But in a block, let ccan be use to declare an variable with same name.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Does not throw an error</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const\"></a>Const</h5><p><code>const</code>, like <code>let</code> declarations, are block-level declarations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// maxItems isn&#x27;t accessible here</span></span><br></pre></td></tr></table></figure>\n\n<p><code>const</code> cannot re-declaration as well.</p>\n<p><code>const</code> cannot re-assign.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">maxItems = <span class=\"number\">6</span>; <span class=\"comment\">// throws error</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Declaring-Objects-with-const\"><a href=\"#Declaring-Objects-with-const\" class=\"headerlink\" title=\"Declaring Objects with const\"></a>Declaring Objects with const</h5><p>A <code>const</code> declaration prevents modification of the binding and not of the value itself.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Nicholas&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// works</span></span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Greg&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// throws an error</span></span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Greg&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>const</code> prevents modification of the binding, not modification of the bound value.</p>\n<h4 id=\"The-Temporal-Dead-Zone-TDZ\"><a href=\"#The-Temporal-Dead-Zone-TDZ\" class=\"headerlink\" title=\"The Temporal Dead Zone(TDZ)\"></a>The Temporal Dead Zone(TDZ)</h4><p>A variable declared with either <code>let</code> or <code>const</code> cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the <code>typeof</code> operation.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// ReferenceError!</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">&#x27;blue&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">&#x27;blue&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Var-declaration-and-hoisting\"><a href=\"#Var-declaration-and-hoisting\" class=\"headerlink\" title=\"Var declaration and hoisting\"></a>Var declaration and hoisting</h4><p>Hoisting: Variable declarations using <code>var</code> are treated as if they are at the top of the <strong>function</strong> (or <strong>global</strong> scope, if declared outside of a function) regardless of where the actual declaration occurs.</p>\n<h4 id=\"Block-level-Declarartion\"><a href=\"#Block-level-Declarartion\" class=\"headerlink\" title=\"Block-level Declarartion\"></a>Block-level Declarartion</h4><p>Block-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:</p>\n<ol>\n<li>Inside of a function</li>\n<li>Inside of a block (indicated by the <code>&#123;</code> and <code>&#125;</code> characters)</li>\n</ol>\n<h5 id=\"Let\"><a href=\"#Let\" class=\"headerlink\" title=\"Let\"></a>Let</h5><p><code>let</code> declarations are not hoisted to the top of the enclosing block.</p>\n<h5 id=\"No-Redeclaration\"><a href=\"#No-Redeclaration\" class=\"headerlink\" title=\"No Redeclaration\"></a>No Redeclaration</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Syntax error</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br></pre></td></tr></table></figure>\n\n<p>But in a block, let ccan be use to declare an variable with same name.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Does not throw an error</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const\"></a>Const</h5><p><code>const</code>, like <code>let</code> declarations, are block-level declarations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// maxItems isn&#x27;t accessible here</span></span><br></pre></td></tr></table></figure>\n\n<p><code>const</code> cannot re-declaration as well.</p>\n<p><code>const</code> cannot re-assign.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">maxItems = <span class=\"number\">6</span>; <span class=\"comment\">// throws error</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Declaring-Objects-with-const\"><a href=\"#Declaring-Objects-with-const\" class=\"headerlink\" title=\"Declaring Objects with const\"></a>Declaring Objects with const</h5><p>A <code>const</code> declaration prevents modification of the binding and not of the value itself.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Nicholas&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// works</span></span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Greg&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// throws an error</span></span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Greg&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>const</code> prevents modification of the binding, not modification of the bound value.</p>\n<h4 id=\"The-Temporal-Dead-Zone-TDZ\"><a href=\"#The-Temporal-Dead-Zone-TDZ\" class=\"headerlink\" title=\"The Temporal Dead Zone(TDZ)\"></a>The Temporal Dead Zone(TDZ)</h4><p>A variable declared with either <code>let</code> or <code>const</code> cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the <code>typeof</code> operation.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// ReferenceError!</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">&#x27;blue&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">&#x27;blue&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Decorators in JavaScript","abbrlink":"89c05b44","date":"2018-10-21T00:14:24.000Z","_content":"\n#### Decorators in Python\n\nIn Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.\n\n```python\ndef identity(ob):\n    return ob\n\n@identity\ndef myfunc():\n    print \"my function\"\n\nmyfunc()\nprint myfunc\n```\n\n```shell\nmy function\n<function myfunc at 0xb76db17c>\n```\n\n#### ES2016 Decorators\n\nAn ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.\n\n##### Syntax\n\n```js\n// es5\nvar person = { name: 'John' };\n\nfunction addAge(age) {\n  return function(person) {\n    return {\n      age: age,\n      name: person.name,\n    };\n  };\n}\n\nvar newPerson = addAge(30)(person);\nconsole.log(newPerson);\n\n// es6 (babel)\n// this is the decorator factory\nfunction addAgeDecorator(age) {\n  // this is the decorator\n  return function(targetClass) {\n    // do something with 'target' and 'value'...\n    return class {\n      name = new targetClass().name;\n      age = age;\n    };\n  };\n}\n\n@addAgeDecorator(30)\nclass Person {\n  name = 'John';\n}\n\nconsole.log(new Person());\n```\n\n### Decorating a property\n\n```js\nclass Cat {\n  @readonly\n  meow() {\n    console.log(`Meow!`);\n  }\n\n  sing() {\n    console.log(`soft kitty~`);\n  }\n}\n\nfunction readonly(target, name, descriptor) {\n  descriptor.writable = false;\n  return descriptor;\n}\n\nvar Garfield = new Cat();\nGarfield.meow = function() {\n  console.log('I want lasagne!');\n};\nGarfield.sing = function() {\n  console.log(\"Let's rock\");\n};\n\nGarfield.meow();\nGarfield.sing();\n// http://jsfiddle.net/minhuizheng/0h45utcd/5/\n```\n\nexplanation:\n\ntarget — class that the property is a part of  \nname — the name of the property the decorator is modifying  \ndescriptor — property descriptor. Think: object passed to Object.defineProperty\n\n#### Reference and Reading\n\n1. [Exploring EcmaScript Decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841)\n\n2. [Javascript Decorators](https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3)\n\n3. [Decorators](https://www.typescriptlang.org/docs/handbook/decorators.html)\n\n4. [JavaScript Decorators: What They Are and When to Use Them](https://www.sitepoint.com/javascript-decorators-what-they-are/)\n\n5. [React DnD](http://react-dnd.github.io/react-dnd/)\n","source":"_posts/Decorator-in-JavaScript.md","raw":"---\ntitle: Decorators in JavaScript\ncategories:\n  - web\ntags:\n  - ECMAScript2016\n  - es7\n  - decorator\n  - javascript\nabbrlink: 89c05b44\ndate: 2018-10-20 17:14:24\n---\n\n#### Decorators in Python\n\nIn Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.\n\n```python\ndef identity(ob):\n    return ob\n\n@identity\ndef myfunc():\n    print \"my function\"\n\nmyfunc()\nprint myfunc\n```\n\n```shell\nmy function\n<function myfunc at 0xb76db17c>\n```\n\n#### ES2016 Decorators\n\nAn ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.\n\n##### Syntax\n\n```js\n// es5\nvar person = { name: 'John' };\n\nfunction addAge(age) {\n  return function(person) {\n    return {\n      age: age,\n      name: person.name,\n    };\n  };\n}\n\nvar newPerson = addAge(30)(person);\nconsole.log(newPerson);\n\n// es6 (babel)\n// this is the decorator factory\nfunction addAgeDecorator(age) {\n  // this is the decorator\n  return function(targetClass) {\n    // do something with 'target' and 'value'...\n    return class {\n      name = new targetClass().name;\n      age = age;\n    };\n  };\n}\n\n@addAgeDecorator(30)\nclass Person {\n  name = 'John';\n}\n\nconsole.log(new Person());\n```\n\n### Decorating a property\n\n```js\nclass Cat {\n  @readonly\n  meow() {\n    console.log(`Meow!`);\n  }\n\n  sing() {\n    console.log(`soft kitty~`);\n  }\n}\n\nfunction readonly(target, name, descriptor) {\n  descriptor.writable = false;\n  return descriptor;\n}\n\nvar Garfield = new Cat();\nGarfield.meow = function() {\n  console.log('I want lasagne!');\n};\nGarfield.sing = function() {\n  console.log(\"Let's rock\");\n};\n\nGarfield.meow();\nGarfield.sing();\n// http://jsfiddle.net/minhuizheng/0h45utcd/5/\n```\n\nexplanation:\n\ntarget — class that the property is a part of  \nname — the name of the property the decorator is modifying  \ndescriptor — property descriptor. Think: object passed to Object.defineProperty\n\n#### Reference and Reading\n\n1. [Exploring EcmaScript Decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841)\n\n2. [Javascript Decorators](https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3)\n\n3. [Decorators](https://www.typescriptlang.org/docs/handbook/decorators.html)\n\n4. [JavaScript Decorators: What They Are and When to Use Them](https://www.sitepoint.com/javascript-decorators-what-they-are/)\n\n5. [React DnD](http://react-dnd.github.io/react-dnd/)\n","slug":"Decorator-in-JavaScript","published":1,"updated":"2021-09-14T11:40:19.902Z","_id":"cka6xu6wo00048cmhtl5j1nlr","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Decorators-in-Python\"><a href=\"#Decorators-in-Python\" class=\"headerlink\" title=\"Decorators in Python\"></a>Decorators in Python</h4><p>In Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">identity</span>(<span class=\"params\">ob</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ob</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@identity</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">myfunc</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;my function&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">myfunc()</span><br><span class=\"line\"><span class=\"built_in\">print</span> myfunc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my function</span><br><span class=\"line\">&lt;function myfunc at 0xb76db17c&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ES2016-Decorators\"><a href=\"#ES2016-Decorators\" class=\"headerlink\" title=\"ES2016 Decorators\"></a>ES2016 Decorators</h4><p>An ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.</p>\n<h5 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addAge</span>(<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">person</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">age</span>: age,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: person.<span class=\"property\">name</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newPerson = <span class=\"title function_\">addAge</span>(<span class=\"number\">30</span>)(person);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newPerson);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6 (babel)</span></span><br><span class=\"line\"><span class=\"comment\">// this is the decorator factory</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addAgeDecorator</span>(<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// this is the decorator</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">targetClass</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something with &#x27;target&#x27; and &#x27;value&#x27;...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">      name = <span class=\"keyword\">new</span> <span class=\"title function_\">targetClass</span>().<span class=\"property\">name</span>;</span><br><span class=\"line\">      age = age;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"title function_\">addAgeDecorator</span>(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&#x27;John&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Decorating-a-property\"><a href=\"#Decorating-a-property\" class=\"headerlink\" title=\"Decorating a property\"></a>Decorating a property</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> &#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  <span class=\"title function_\">meow</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Meow!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">sing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`soft kitty~`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">readonly</span>(<span class=\"params\">target, name, descriptor</span>) &#123;</span><br><span class=\"line\">  descriptor.<span class=\"property\">writable</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Garfield</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\"><span class=\"title class_\">Garfield</span>.<span class=\"property\">meow</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I want lasagne!&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Garfield</span>.<span class=\"property\">sing</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Let&#x27;s rock&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Garfield</span>.<span class=\"title function_\">meow</span>();</span><br><span class=\"line\"><span class=\"title class_\">Garfield</span>.<span class=\"title function_\">sing</span>();</span><br><span class=\"line\"><span class=\"comment\">// http://jsfiddle.net/minhuizheng/0h45utcd/5/</span></span><br></pre></td></tr></table></figure>\n\n<p>explanation:</p>\n<p>target — class that the property is a part of<br>name — the name of the property the decorator is modifying<br>descriptor — property descriptor. Think: object passed to Object.defineProperty</p>\n<h4 id=\"Reference-and-Reading\"><a href=\"#Reference-and-Reading\" class=\"headerlink\" title=\"Reference and Reading\"></a>Reference and Reading</h4><ol>\n<li><p><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841\">Exploring EcmaScript Decorators</a></p>\n</li>\n<li><p><a href=\"https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3\">Javascript Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\">Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.sitepoint.com/javascript-decorators-what-they-are/\">JavaScript Decorators: What They Are and When to Use Them</a></p>\n</li>\n<li><p><a href=\"http://react-dnd.github.io/react-dnd/\">React DnD</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Decorators-in-Python\"><a href=\"#Decorators-in-Python\" class=\"headerlink\" title=\"Decorators in Python\"></a>Decorators in Python</h4><p>In Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">identity</span>(<span class=\"params\">ob</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ob</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@identity</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">myfunc</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;my function&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">myfunc()</span><br><span class=\"line\"><span class=\"built_in\">print</span> myfunc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my function</span><br><span class=\"line\">&lt;function myfunc at 0xb76db17c&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ES2016-Decorators\"><a href=\"#ES2016-Decorators\" class=\"headerlink\" title=\"ES2016 Decorators\"></a>ES2016 Decorators</h4><p>An ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.</p>\n<h5 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addAge</span>(<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">person</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">age</span>: age,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: person.<span class=\"property\">name</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newPerson = <span class=\"title function_\">addAge</span>(<span class=\"number\">30</span>)(person);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newPerson);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6 (babel)</span></span><br><span class=\"line\"><span class=\"comment\">// this is the decorator factory</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addAgeDecorator</span>(<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// this is the decorator</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">targetClass</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something with &#x27;target&#x27; and &#x27;value&#x27;...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">      name = <span class=\"keyword\">new</span> <span class=\"title function_\">targetClass</span>().<span class=\"property\">name</span>;</span><br><span class=\"line\">      age = age;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"title function_\">addAgeDecorator</span>(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&#x27;John&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Decorating-a-property\"><a href=\"#Decorating-a-property\" class=\"headerlink\" title=\"Decorating a property\"></a>Decorating a property</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> &#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  <span class=\"title function_\">meow</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Meow!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">sing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`soft kitty~`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">readonly</span>(<span class=\"params\">target, name, descriptor</span>) &#123;</span><br><span class=\"line\">  descriptor.<span class=\"property\">writable</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Garfield</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\"><span class=\"title class_\">Garfield</span>.<span class=\"property\">meow</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I want lasagne!&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Garfield</span>.<span class=\"property\">sing</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Let&#x27;s rock&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Garfield</span>.<span class=\"title function_\">meow</span>();</span><br><span class=\"line\"><span class=\"title class_\">Garfield</span>.<span class=\"title function_\">sing</span>();</span><br><span class=\"line\"><span class=\"comment\">// http://jsfiddle.net/minhuizheng/0h45utcd/5/</span></span><br></pre></td></tr></table></figure>\n\n<p>explanation:</p>\n<p>target — class that the property is a part of<br>name — the name of the property the decorator is modifying<br>descriptor — property descriptor. Think: object passed to Object.defineProperty</p>\n<h4 id=\"Reference-and-Reading\"><a href=\"#Reference-and-Reading\" class=\"headerlink\" title=\"Reference and Reading\"></a>Reference and Reading</h4><ol>\n<li><p><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841\">Exploring EcmaScript Decorators</a></p>\n</li>\n<li><p><a href=\"https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3\">Javascript Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\">Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.sitepoint.com/javascript-decorators-what-they-are/\">JavaScript Decorators: What They Are and When to Use Them</a></p>\n</li>\n<li><p><a href=\"http://react-dnd.github.io/react-dnd/\">React DnD</a></p>\n</li>\n</ol>\n"},{"title":"Regret Minimization and Multi-task Serially","abbrlink":"eaf5670e","date":"2018-02-24T01:29:46.000Z","_content":"\n前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。\n\n第一个就是之前听他说的 \"regret minimization\"。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 \"a better idea for someone who didn't have a good job\"。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 \"path not taken\" 而后悔。\n\n我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。\n\n第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，\"be doing whatever I'm doing\"。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，\"multi-task serially\"，按顺序的多任务。\n\n关于这点，我近年来也算是感触很深了。原来总觉得自己聪明（其实都是耍小聪明罢了），喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。\n\n现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。\n\n最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。\n\n目前就想到这么多吧，希望时刻能督促自己。\n","source":"_posts/Regret-Minimization-and-Multi-task-Serially.md","raw":"---\ntitle: Regret Minimization and Multi-task Serially\ncategories:\n  - life\nabbrlink: eaf5670e\ndate: 2018-02-23 17:29:46\ntags:\n---\n\n前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。\n\n第一个就是之前听他说的 \"regret minimization\"。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 \"a better idea for someone who didn't have a good job\"。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 \"path not taken\" 而后悔。\n\n我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。\n\n第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，\"be doing whatever I'm doing\"。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，\"multi-task serially\"，按顺序的多任务。\n\n关于这点，我近年来也算是感触很深了。原来总觉得自己聪明（其实都是耍小聪明罢了），喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。\n\n现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。\n\n最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。\n\n目前就想到这么多吧，希望时刻能督促自己。\n","slug":"Regret-Minimization-and-Multi-task-Serially","published":1,"updated":"2021-09-14T11:40:19.903Z","_id":"cka6xu6wo00058cmhz0xol66m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。</p>\n<p>第一个就是之前听他说的 “regret minimization”。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 “a better idea for someone who didn’t have a good job”。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 “path not taken” 而后悔。</p>\n<p>我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。</p>\n<p>第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，”be doing whatever I’m doing”。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，”multi-task serially”，按顺序的多任务。</p>\n<p>关于这点，我近年来也算是感触很深了。原来总觉得自己聪明（其实都是耍小聪明罢了），喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。</p>\n<p>现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。</p>\n<p>最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。</p>\n<p>目前就想到这么多吧，希望时刻能督促自己。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。</p>\n<p>第一个就是之前听他说的 “regret minimization”。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 “a better idea for someone who didn’t have a good job”。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 “path not taken” 而后悔。</p>\n<p>我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。</p>\n<p>第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，”be doing whatever I’m doing”。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，”multi-task serially”，按顺序的多任务。</p>\n<p>关于这点，我近年来也算是感触很深了。原来总觉得自己聪明（其实都是耍小聪明罢了），喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。</p>\n<p>现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。</p>\n<p>最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。</p>\n<p>目前就想到这么多吧，希望时刻能督促自己。</p>\n"},{"title":"Run React Native App on Mac","abbrlink":"b18b9540","date":"2018-02-05T09:05:04.000Z","_content":"\n1. make sure installed LATEST Xcode on your mac. Be make sure check your app store to upgrade your Xcode to latest version.\n2. install homebrew or nvm, so you can install node and manage your nodejs version.\n3. install nodejs and npm\n4. install watchman\n5. install react native cli such as `react-native-cli`\n6. create your react native project using `react-native init <project-name>`\n\nAfter installing these tools, use `react-native run-ios` to start your simulator.\n\nAnd in case if you met this error code when you run `react-native run-ios [--simulator=\"iPhone X\"]`\n\n```shell\nFound Xcode project TestProject.xcodeproj\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n\nCommand failed: xcrun instruments -s\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n```\n\nthis is because you did not set your xcode's command line tools, so your can go to `preference -> locations -> Command Line Tools` to select.\n\n![xcode command line tools](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/760e08710688460499ed894397ed156a~tplv-k3u1fbpfcp-watermark.image)\n","source":"_posts/Run-react-native-app-on-Mac.md","raw":"---\ntitle: Run React Native App on Mac\ncategories:\n  - web\ntags:\n  - react\n  - react native\n  - Xcode\nabbrlink: b18b9540\ndate: 2018-02-05 01:05:04\n---\n\n1. make sure installed LATEST Xcode on your mac. Be make sure check your app store to upgrade your Xcode to latest version.\n2. install homebrew or nvm, so you can install node and manage your nodejs version.\n3. install nodejs and npm\n4. install watchman\n5. install react native cli such as `react-native-cli`\n6. create your react native project using `react-native init <project-name>`\n\nAfter installing these tools, use `react-native run-ios` to start your simulator.\n\nAnd in case if you met this error code when you run `react-native run-ios [--simulator=\"iPhone X\"]`\n\n```shell\nFound Xcode project TestProject.xcodeproj\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n\nCommand failed: xcrun instruments -s\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n```\n\nthis is because you did not set your xcode's command line tools, so your can go to `preference -> locations -> Command Line Tools` to select.\n\n![xcode command line tools](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/760e08710688460499ed894397ed156a~tplv-k3u1fbpfcp-watermark.image)\n","slug":"Run-react-native-app-on-Mac","published":1,"updated":"2021-09-14T11:40:19.903Z","_id":"cka6xu6wp00068cmhbtds9u3a","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li>make sure installed LATEST Xcode on your mac. Be make sure check your app store to upgrade your Xcode to latest version.</li>\n<li>install homebrew or nvm, so you can install node and manage your nodejs version.</li>\n<li>install nodejs and npm</li>\n<li>install watchman</li>\n<li>install react native cli such as <code>react-native-cli</code></li>\n<li>create your react native project using <code>react-native init &lt;project-name&gt;</code></li>\n</ol>\n<p>After installing these tools, use <code>react-native run-ios</code> to start your simulator.</p>\n<p>And in case if you met this error code when you run <code>react-native run-ios [--simulator=&quot;iPhone X&quot;]</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found Xcode project TestProject.xcodeproj</span><br><span class=\"line\">xcrun: error: unable to find utility &quot;instruments&quot;, not a developer</span><br><span class=\"line\">tool or in PATH</span><br><span class=\"line\"></span><br><span class=\"line\">Command failed: xcrun instruments -s</span><br><span class=\"line\">xcrun: error: unable to find utility &quot;instruments&quot;, not a developer</span><br><span class=\"line\">tool or in PATH</span><br></pre></td></tr></table></figure>\n\n<p>this is because you did not set your xcode’s command line tools, so your can go to <code>preference -&gt; locations -&gt; Command Line Tools</code> to select.</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/760e08710688460499ed894397ed156a~tplv-k3u1fbpfcp-watermark.image\" alt=\"xcode command line tools\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>make sure installed LATEST Xcode on your mac. Be make sure check your app store to upgrade your Xcode to latest version.</li>\n<li>install homebrew or nvm, so you can install node and manage your nodejs version.</li>\n<li>install nodejs and npm</li>\n<li>install watchman</li>\n<li>install react native cli such as <code>react-native-cli</code></li>\n<li>create your react native project using <code>react-native init &lt;project-name&gt;</code></li>\n</ol>\n<p>After installing these tools, use <code>react-native run-ios</code> to start your simulator.</p>\n<p>And in case if you met this error code when you run <code>react-native run-ios [--simulator=&quot;iPhone X&quot;]</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found Xcode project TestProject.xcodeproj</span><br><span class=\"line\">xcrun: error: unable to find utility &quot;instruments&quot;, not a developer</span><br><span class=\"line\">tool or in PATH</span><br><span class=\"line\"></span><br><span class=\"line\">Command failed: xcrun instruments -s</span><br><span class=\"line\">xcrun: error: unable to find utility &quot;instruments&quot;, not a developer</span><br><span class=\"line\">tool or in PATH</span><br></pre></td></tr></table></figure>\n\n<p>this is because you did not set your xcode’s command line tools, so your can go to <code>preference -&gt; locations -&gt; Command Line Tools</code> to select.</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/760e08710688460499ed894397ed156a~tplv-k3u1fbpfcp-watermark.image\" alt=\"xcode command line tools\"></p>\n"},{"title":"ECMAScript2015 modules","abbrlink":"646f8dec","date":"2018-04-08T00:30:40.000Z","_content":"\nA module is Javascript code that automatically runs in **strict** mode with no way opt out.\n\nmodule and script are not the same.\n\n#### import and export\n\n##### 1. named export (several per module)\n\n```javascript\n//------ lib.js ------\nexport const sqrt = Math.sqrt;\nexport function square(x) {\n  return x * x;\n}\nexport function diag(x, y) {\n  return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\n\nimport { square, diag } from './lib.js';\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n\n// can not reassign imported bindings\nsuqare = 2; // throw an error\n\n// or\n\n//------ main.js ------\nimport * as lib from 'lib';\nconsole.log(lib.square(11)); // 121\nconsole.log(lib.diag(4, 3)); // 5\n```\n\n- syntax: import { identifiers } from './example.js' -> module specifier\n\n- the list of binding to imports is not a destructured object\n\n- the last one this is called _namespace_ import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.\n\n- Be sure to include /, ./ or ../ at the beginning of the string representing the file for the best compatibility across browsers and node.js.\n\n- lib.js is only execute once, no matter how many import statements have been declared. After the code to import the module executes, the instantiated module is kept in **memory** and reused whenever another import statement reference to it. e.g.\n\n```javascript\n// just execute lib.js once\nimport { diag } from './lib.js';\nimport { square } from './lib.js';\n```\n\n- import/export must be used outside condition statement or functions.\n\n```javascript\nif (flag) {\n    export flag; // syntax error\n}\n\nfunction tryImport() {\nimport { diag } from './lib.js'; // syntax error\n}\n```\n\n- ES6 import statement create _read-only_ bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.\n\n```javascript\nexport var name = 'Nico';\nexport function setName(x) {\n  name = x;\n}\n\nimport { name, setName } from './lib.js';\nconsole.log(name); // Nico\nsetName('Jack');\nconsole.log(name); // Jack\n\n// can not reassign imported bindings\nname = 'Nico'; // throw an error\n```\n\n- renaming export and import\n\n```javascript\nexport {sum as add};\nimport {add} form './example.js';\n\n// or\nimport { add as sum } from './example.js';\nconsole.log(typeof add); // udefined\n```\n\n##### 2. default export (one per module)\n\n```javascript\n//------ myFunc.js ------\nexport default function () { ··· } // no semicolon!\n\n//------ main1.js ------\nimport myFunc from 'myFunc';\nmyFunc();\n\n// or\nfunction sum () { ... }\nexport default sum;\n\n// or\nexport sum2() { ... }\nexport {sum as default}\n\n// Or a class:\n\n//------ MyClass.js ------\nexport default class { ··· } // no semicolon!\n\n//------ main2.js ------\nimport MyClass from 'MyClass';\nconst inst = new MyClass();\n```\n\n##### 3. combine\n\nyou can use named export and default together\n\nnote: the default must come before the non-defaults in import statement.\n\n```js\nexport var name = 'Nico';\nexport default function () { ··· }\n\nimport sum, { name } from './example.js';\n\n// or\nimport { default as sum, name } from './example.js';\n```\n\n##### 4. re-exporting\n\n```js\nimport {add} form './example.js';\nexport add;\n\n// or short\nexport { add } from './example.js';\n\n// export with different name\nexport { add as sum } from './example.js';\n\n// export everything\nexport * from './example.js';\n```\n\nnote: by exporting everything, you're including default as well as any named exports.\n\n##### 5. importing without bindings\n\nSome modules may not export anthing; instead they might only modify object in the gloabal scope. _Import without bindings are most likely to be used to create polyfills and shims_.\n\n```js\n// example.js\nArray.prototype.somethingFancy = function () { ...}\n\n// main.js\nimport './example.js'\nlet arr = [];\narr.somethingFancy();\n```\n\n#### loading modules\n\n##### 1. use <\bscript> as `defer`\n\n```html\n<!-- load a module JavaScript file -->\n<script type=\"module\" src=\"module.js\"></script>\n\n<!-- include a module inline -->\n<script type=\"module\">\n  import { sum } from './example.js';\n\n  let result = sum(1, 2);\n</script>\n```\n\n- 'module' is not a content type like 'text/javascript', and browsers ignore `<script>` elements when type is unrecognized, providing good backwards-compatibility.\n\n- in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.\n\n- module sequence; `<script type=\"module\">` always acts as if the `defer` attribute is applied.\n\n```html\n<!-- this will execute first -->\n<script type=\"module\" src=\"module1.js\"></script>\n\n<!-- this will execute second -->\n<script type=\"module\">\n  import { sum } from './example.js';\n\n  let result = sum(1, 2);\n</script>\n```\n\n- synchronies and sequential: **modules are parsed completely first to dientify all `import`, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.**\n\ni. download and parse `module1.js` , recursive download and parse import in `module1.js`;\n\nii. parse inline module\n\nonce loading complete\n\niiii. recursive execute `import` source in `module1.js`, then execute `module1.js`\n\niiiii. recursive execute `import` source in inline module, then execute inline module\n\n##### 2. use <\bscript> as `async`\n\n```html\n<!-- no guarantee which one of these will execute first -->\n<script type=\"module\" async src=\"module1.js\"></script>\n<script type=\"module\" async src=\"module2.js\"></script>\n```\n\nthe `async` causes the script file to be executed as soon as the file is completed downloaded and parsed. the order in document does not affect the order in which the scripts are executed. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.\n\n##### 3. use `Worker`\n\n```js\n// load script.js as a script\nlet worker = new Worker('script.js');\n\n// load module.js as a module\nlet worker = new Worker('module.js', { type: 'module' });\n```\n\n#### related reading material\n\n1. Nicholas C. Zakas, [Understanding ECMAScript 6](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n2. Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n\n3. nodejs document, [Modules](https://nodejs.org/api/modules.html)\n","source":"_posts/ecmascript2015-modules.md","raw":"---\ntitle: ECMAScript2015 modules\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - module\nabbrlink: 646f8dec\ndate: 2018-04-07 17:30:40\n---\n\nA module is Javascript code that automatically runs in **strict** mode with no way opt out.\n\nmodule and script are not the same.\n\n#### import and export\n\n##### 1. named export (several per module)\n\n```javascript\n//------ lib.js ------\nexport const sqrt = Math.sqrt;\nexport function square(x) {\n  return x * x;\n}\nexport function diag(x, y) {\n  return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\n\nimport { square, diag } from './lib.js';\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n\n// can not reassign imported bindings\nsuqare = 2; // throw an error\n\n// or\n\n//------ main.js ------\nimport * as lib from 'lib';\nconsole.log(lib.square(11)); // 121\nconsole.log(lib.diag(4, 3)); // 5\n```\n\n- syntax: import { identifiers } from './example.js' -> module specifier\n\n- the list of binding to imports is not a destructured object\n\n- the last one this is called _namespace_ import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.\n\n- Be sure to include /, ./ or ../ at the beginning of the string representing the file for the best compatibility across browsers and node.js.\n\n- lib.js is only execute once, no matter how many import statements have been declared. After the code to import the module executes, the instantiated module is kept in **memory** and reused whenever another import statement reference to it. e.g.\n\n```javascript\n// just execute lib.js once\nimport { diag } from './lib.js';\nimport { square } from './lib.js';\n```\n\n- import/export must be used outside condition statement or functions.\n\n```javascript\nif (flag) {\n    export flag; // syntax error\n}\n\nfunction tryImport() {\nimport { diag } from './lib.js'; // syntax error\n}\n```\n\n- ES6 import statement create _read-only_ bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.\n\n```javascript\nexport var name = 'Nico';\nexport function setName(x) {\n  name = x;\n}\n\nimport { name, setName } from './lib.js';\nconsole.log(name); // Nico\nsetName('Jack');\nconsole.log(name); // Jack\n\n// can not reassign imported bindings\nname = 'Nico'; // throw an error\n```\n\n- renaming export and import\n\n```javascript\nexport {sum as add};\nimport {add} form './example.js';\n\n// or\nimport { add as sum } from './example.js';\nconsole.log(typeof add); // udefined\n```\n\n##### 2. default export (one per module)\n\n```javascript\n//------ myFunc.js ------\nexport default function () { ··· } // no semicolon!\n\n//------ main1.js ------\nimport myFunc from 'myFunc';\nmyFunc();\n\n// or\nfunction sum () { ... }\nexport default sum;\n\n// or\nexport sum2() { ... }\nexport {sum as default}\n\n// Or a class:\n\n//------ MyClass.js ------\nexport default class { ··· } // no semicolon!\n\n//------ main2.js ------\nimport MyClass from 'MyClass';\nconst inst = new MyClass();\n```\n\n##### 3. combine\n\nyou can use named export and default together\n\nnote: the default must come before the non-defaults in import statement.\n\n```js\nexport var name = 'Nico';\nexport default function () { ··· }\n\nimport sum, { name } from './example.js';\n\n// or\nimport { default as sum, name } from './example.js';\n```\n\n##### 4. re-exporting\n\n```js\nimport {add} form './example.js';\nexport add;\n\n// or short\nexport { add } from './example.js';\n\n// export with different name\nexport { add as sum } from './example.js';\n\n// export everything\nexport * from './example.js';\n```\n\nnote: by exporting everything, you're including default as well as any named exports.\n\n##### 5. importing without bindings\n\nSome modules may not export anthing; instead they might only modify object in the gloabal scope. _Import without bindings are most likely to be used to create polyfills and shims_.\n\n```js\n// example.js\nArray.prototype.somethingFancy = function () { ...}\n\n// main.js\nimport './example.js'\nlet arr = [];\narr.somethingFancy();\n```\n\n#### loading modules\n\n##### 1. use <\bscript> as `defer`\n\n```html\n<!-- load a module JavaScript file -->\n<script type=\"module\" src=\"module.js\"></script>\n\n<!-- include a module inline -->\n<script type=\"module\">\n  import { sum } from './example.js';\n\n  let result = sum(1, 2);\n</script>\n```\n\n- 'module' is not a content type like 'text/javascript', and browsers ignore `<script>` elements when type is unrecognized, providing good backwards-compatibility.\n\n- in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.\n\n- module sequence; `<script type=\"module\">` always acts as if the `defer` attribute is applied.\n\n```html\n<!-- this will execute first -->\n<script type=\"module\" src=\"module1.js\"></script>\n\n<!-- this will execute second -->\n<script type=\"module\">\n  import { sum } from './example.js';\n\n  let result = sum(1, 2);\n</script>\n```\n\n- synchronies and sequential: **modules are parsed completely first to dientify all `import`, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.**\n\ni. download and parse `module1.js` , recursive download and parse import in `module1.js`;\n\nii. parse inline module\n\nonce loading complete\n\niiii. recursive execute `import` source in `module1.js`, then execute `module1.js`\n\niiiii. recursive execute `import` source in inline module, then execute inline module\n\n##### 2. use <\bscript> as `async`\n\n```html\n<!-- no guarantee which one of these will execute first -->\n<script type=\"module\" async src=\"module1.js\"></script>\n<script type=\"module\" async src=\"module2.js\"></script>\n```\n\nthe `async` causes the script file to be executed as soon as the file is completed downloaded and parsed. the order in document does not affect the order in which the scripts are executed. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.\n\n##### 3. use `Worker`\n\n```js\n// load script.js as a script\nlet worker = new Worker('script.js');\n\n// load module.js as a module\nlet worker = new Worker('module.js', { type: 'module' });\n```\n\n#### related reading material\n\n1. Nicholas C. Zakas, [Understanding ECMAScript 6](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n2. Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n\n3. nodejs document, [Modules](https://nodejs.org/api/modules.html)\n","slug":"ecmascript2015-modules","published":1,"updated":"2021-09-14T11:40:19.904Z","_id":"cka6xu6wq00078cmhqkys3a96","comments":1,"layout":"post","photos":[],"link":"","content":"<p>A module is Javascript code that automatically runs in <strong>strict</strong> mode with no way opt out.</p>\n<p>module and script are not the same.</p>\n<h4 id=\"import-and-export\"><a href=\"#import-and-export\" class=\"headerlink\" title=\"import and export\"></a>import and export</h4><h5 id=\"1-named-export-several-per-module\"><a href=\"#1-named-export-several-per-module\" class=\"headerlink\" title=\"1. named export (several per module)\"></a>1. named export (several per module)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ lib.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> sqrt = <span class=\"title class_\">Math</span>.<span class=\"property\">sqrt</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">square</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">diag</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">sqrt</span>(<span class=\"title function_\">square</span>(x) + <span class=\"title function_\">square</span>(y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square, diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">square</span>(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">diag</span>(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">suqare = <span class=\"number\">2</span>; <span class=\"comment\">// throw an error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lib <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lib&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(lib.<span class=\"title function_\">square</span>(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(lib.<span class=\"title function_\">diag</span>(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>syntax: import { identifiers } from ‘.&#x2F;example.js’ -&gt; module specifier</p>\n</li>\n<li><p>the list of binding to imports is not a destructured object</p>\n</li>\n<li><p>the last one this is called <em>namespace</em> import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.</p>\n</li>\n<li><p>Be sure to include &#x2F;, .&#x2F; or ..&#x2F; at the beginning of the string representing the file for the best compatibility across browsers and node.js.</p>\n</li>\n<li><p>lib.js is only execute once, no matter how many import statements have been declared. After the code to import the module executes, the instantiated module is kept in <strong>memory</strong> and reused whenever another import statement reference to it. e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// just execute lib.js once</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib.js&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>import&#x2F;export must be used outside condition statement or functions.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> flag; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">tryImport</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib.js&#x27;</span>; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ES6 import statement create <em>read-only</em> bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Nico&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">setName</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  name = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, setName &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Nico</span></span><br><span class=\"line\"><span class=\"title function_\">setName</span>(<span class=\"string\">&#x27;Jack&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">name = <span class=\"string\">&#x27;Nico&#x27;</span>; <span class=\"comment\">// throw an error</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>renaming export and import</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> add&#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> add); <span class=\"comment\">// udefined</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-default-export-one-per-module\"><a href=\"#2-default-export-one-per-module\" class=\"headerlink\" title=\"2. default export (one per module)\"></a>2. default export (one per module)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ myFunc.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main1.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myFunc <span class=\"keyword\">from</span> <span class=\"string\">&#x27;myFunc&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">myFunc</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span> () &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"title function_\">sum2</span>(<span class=\"params\"></span>) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or a class:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ MyClass.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> &#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main2.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;MyClass&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> inst = <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-combine\"><a href=\"#3-combine\" class=\"headerlink\" title=\"3. combine\"></a>3. combine</h5><p>you can use named export and default together</p>\n<p>note: the default must come before the non-defaults in import statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Nico&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ··· &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum, &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> sum, name &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-re-exporting\"><a href=\"#4-re-exporting\" class=\"headerlink\" title=\"4. re-exporting\"></a>4. re-exporting</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or short</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export with different name</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export everything</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>note: by exporting everything, you’re including default as well as any named exports.</p>\n<h5 id=\"5-importing-without-bindings\"><a href=\"#5-importing-without-bindings\" class=\"headerlink\" title=\"5. importing without bindings\"></a>5. importing without bindings</h5><p>Some modules may not export anthing; instead they might only modify object in the gloabal scope. <em>Import without bindings are most likely to be used to create polyfills and shims</em>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.js</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">somethingFancy</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./example.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">arr.<span class=\"title function_\">somethingFancy</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"loading-modules\"><a href=\"#loading-modules\" class=\"headerlink\" title=\"loading modules\"></a>loading modules</h4><h5 id=\"1-use-lt-script-gt-as-defer\"><a href=\"#1-use-lt-script-gt-as-defer\" class=\"headerlink\" title=\"1. use &lt;\bscript&gt; as defer\"></a>1. use &lt;\bscript&gt; as <code>defer</code></h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- load a module JavaScript file --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;module.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- include a module inline --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> result = <span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>‘module’ is not a content type like ‘text&#x2F;javascript’, and browsers ignore <code>&lt;script&gt;</code> elements when type is unrecognized, providing good backwards-compatibility.</p>\n</li>\n<li><p>in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.</p>\n</li>\n<li><p>module sequence; <code>&lt;script type=&quot;module&quot;&gt;</code> always acts as if the <code>defer</code> attribute is applied.</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;module1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute second --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> result = <span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>synchronies and sequential: <strong>modules are parsed completely first to dientify all <code>import</code>, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.</strong></li>\n</ul>\n<p>i. download and parse <code>module1.js</code> , recursive download and parse import in <code>module1.js</code>;</p>\n<p>ii. parse inline module</p>\n<p>once loading complete</p>\n<p>iiii. recursive execute <code>import</code> source in <code>module1.js</code>, then execute <code>module1.js</code></p>\n<p>iiiii. recursive execute <code>import</code> source in inline module, then execute inline module</p>\n<h5 id=\"2-use-lt-script-gt-as-async\"><a href=\"#2-use-lt-script-gt-as-async\" class=\"headerlink\" title=\"2. use &lt;\bscript&gt; as async\"></a>2. use &lt;\bscript&gt; as <code>async</code></h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- no guarantee which one of these will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;module1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;module2.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>the <code>async</code> causes the script file to be executed as soon as the file is completed downloaded and parsed. the order in document does not affect the order in which the scripts are executed. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.</p>\n<h5 id=\"3-use-Worker\"><a href=\"#3-use-Worker\" class=\"headerlink\" title=\"3. use Worker\"></a>3. use <code>Worker</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load script.js as a script</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&#x27;script.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load module.js as a module</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&#x27;module.js&#x27;</span>, &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;module&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules\">Understanding ECMAScript 6</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\">Exploring ES6</a></p>\n</li>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\">Modules</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>A module is Javascript code that automatically runs in <strong>strict</strong> mode with no way opt out.</p>\n<p>module and script are not the same.</p>\n<h4 id=\"import-and-export\"><a href=\"#import-and-export\" class=\"headerlink\" title=\"import and export\"></a>import and export</h4><h5 id=\"1-named-export-several-per-module\"><a href=\"#1-named-export-several-per-module\" class=\"headerlink\" title=\"1. named export (several per module)\"></a>1. named export (several per module)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ lib.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> sqrt = <span class=\"title class_\">Math</span>.<span class=\"property\">sqrt</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">square</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">diag</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">sqrt</span>(<span class=\"title function_\">square</span>(x) + <span class=\"title function_\">square</span>(y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square, diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">square</span>(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">diag</span>(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">suqare = <span class=\"number\">2</span>; <span class=\"comment\">// throw an error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lib <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lib&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(lib.<span class=\"title function_\">square</span>(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(lib.<span class=\"title function_\">diag</span>(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>syntax: import { identifiers } from ‘.&#x2F;example.js’ -&gt; module specifier</p>\n</li>\n<li><p>the list of binding to imports is not a destructured object</p>\n</li>\n<li><p>the last one this is called <em>namespace</em> import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.</p>\n</li>\n<li><p>Be sure to include &#x2F;, .&#x2F; or ..&#x2F; at the beginning of the string representing the file for the best compatibility across browsers and node.js.</p>\n</li>\n<li><p>lib.js is only execute once, no matter how many import statements have been declared. After the code to import the module executes, the instantiated module is kept in <strong>memory</strong> and reused whenever another import statement reference to it. e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// just execute lib.js once</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib.js&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>import&#x2F;export must be used outside condition statement or functions.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> flag; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">tryImport</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib.js&#x27;</span>; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ES6 import statement create <em>read-only</em> bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Nico&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">setName</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  name = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, setName &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Nico</span></span><br><span class=\"line\"><span class=\"title function_\">setName</span>(<span class=\"string\">&#x27;Jack&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">name = <span class=\"string\">&#x27;Nico&#x27;</span>; <span class=\"comment\">// throw an error</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>renaming export and import</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> add&#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> add); <span class=\"comment\">// udefined</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-default-export-one-per-module\"><a href=\"#2-default-export-one-per-module\" class=\"headerlink\" title=\"2. default export (one per module)\"></a>2. default export (one per module)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ myFunc.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main1.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myFunc <span class=\"keyword\">from</span> <span class=\"string\">&#x27;myFunc&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">myFunc</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span> () &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"title function_\">sum2</span>(<span class=\"params\"></span>) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or a class:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ MyClass.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> &#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main2.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;MyClass&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> inst = <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-combine\"><a href=\"#3-combine\" class=\"headerlink\" title=\"3. combine\"></a>3. combine</h5><p>you can use named export and default together</p>\n<p>note: the default must come before the non-defaults in import statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Nico&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ··· &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum, &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> sum, name &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-re-exporting\"><a href=\"#4-re-exporting\" class=\"headerlink\" title=\"4. re-exporting\"></a>4. re-exporting</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or short</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export with different name</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export everything</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>note: by exporting everything, you’re including default as well as any named exports.</p>\n<h5 id=\"5-importing-without-bindings\"><a href=\"#5-importing-without-bindings\" class=\"headerlink\" title=\"5. importing without bindings\"></a>5. importing without bindings</h5><p>Some modules may not export anthing; instead they might only modify object in the gloabal scope. <em>Import without bindings are most likely to be used to create polyfills and shims</em>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.js</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">somethingFancy</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./example.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">arr.<span class=\"title function_\">somethingFancy</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"loading-modules\"><a href=\"#loading-modules\" class=\"headerlink\" title=\"loading modules\"></a>loading modules</h4><h5 id=\"1-use-lt-script-gt-as-defer\"><a href=\"#1-use-lt-script-gt-as-defer\" class=\"headerlink\" title=\"1. use &lt;\bscript&gt; as defer\"></a>1. use &lt;\bscript&gt; as <code>defer</code></h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- load a module JavaScript file --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;module.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- include a module inline --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> result = <span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>‘module’ is not a content type like ‘text&#x2F;javascript’, and browsers ignore <code>&lt;script&gt;</code> elements when type is unrecognized, providing good backwards-compatibility.</p>\n</li>\n<li><p>in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.</p>\n</li>\n<li><p>module sequence; <code>&lt;script type=&quot;module&quot;&gt;</code> always acts as if the <code>defer</code> attribute is applied.</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;module1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute second --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./example.js&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> result = <span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>synchronies and sequential: <strong>modules are parsed completely first to dientify all <code>import</code>, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.</strong></li>\n</ul>\n<p>i. download and parse <code>module1.js</code> , recursive download and parse import in <code>module1.js</code>;</p>\n<p>ii. parse inline module</p>\n<p>once loading complete</p>\n<p>iiii. recursive execute <code>import</code> source in <code>module1.js</code>, then execute <code>module1.js</code></p>\n<p>iiiii. recursive execute <code>import</code> source in inline module, then execute inline module</p>\n<h5 id=\"2-use-lt-script-gt-as-async\"><a href=\"#2-use-lt-script-gt-as-async\" class=\"headerlink\" title=\"2. use &lt;\bscript&gt; as async\"></a>2. use &lt;\bscript&gt; as <code>async</code></h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- no guarantee which one of these will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;module1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;module2.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>the <code>async</code> causes the script file to be executed as soon as the file is completed downloaded and parsed. the order in document does not affect the order in which the scripts are executed. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.</p>\n<h5 id=\"3-use-Worker\"><a href=\"#3-use-Worker\" class=\"headerlink\" title=\"3. use Worker\"></a>3. use <code>Worker</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load script.js as a script</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&#x27;script.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load module.js as a module</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&#x27;module.js&#x27;</span>, &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;module&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules\">Understanding ECMAScript 6</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\">Exploring ES6</a></p>\n</li>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\">Modules</a></p>\n</li>\n</ol>\n"},{"title":"搭建 Flutter 环境","abbrlink":"ec9f837c","date":"2020-01-17T06:09:18.000Z","_content":"今年计划学习的新技术栈一个是 vue.js，等 3.0版本发布以后准备尝试一下。 另一个就是flutter。今天看了一下官方文档，按照文档在本机上把环境跑起来了。这里先记录一下搭建环境的步骤，也算是学习过程的一个记录。\n\n这篇文章基本按照 https://flutter.dev/docs/get-started/install/macos 页面的指引一步步操作下来就可以在 mac 和 iphone 上运行 flutter demo 了。我把关键的命令和操作记录下来，过滤掉一些解释性的和暂时无关的文字，方便下次自己回顾，也可以当做一份汉化文档，方便初学者快速搭建环境排除掉一些其他的干扰。\n\n### Flutter SDK ###\n\n首先下载最新的 Flutter SDK，大约 1g 左右。下载完成之后，cd 到开发文件夹，执行 unzip 操作。\n\n```bash\n$ cd ~/development\n$ unzip ~/Downloads/flutter_macos_v1.12.13+hotfix.5-stable.zip\n```\n\n如果不想使用固定版本的话，可以直接使用 git 操作，从 github 拉取最新的 flutter 源码。\n\n```bash\n git clone https://github.com/flutter/flutter.git\n```\n\n之后将 `flutter` 操作添加到 path。\n\n```bash\n$ export PATH=\"$PATH:`pwd`/flutter/bin\"\n```\n\n这只是临时添加到当前的 terminal 窗口，如果需要永久添加，可以阅读官方文档。这里我不想跑题，暂时不做展开，以后再讲。\n\n### Run flutter doctor ###\n\n进行完这三步之后，我们就可以跑一下命令行来看 flutter 是否安装完成。\n\n```bash\n$ flutter doctor\n```\n\n稍等片刻之后，会有一份 Doctor summary。在我的电脑上，因为没有安装 Android toolchain 和 Android Studio，所以这两项之前显示的是×。除此之外， Flutter，Xcode，VS Code， Connected Device 都是√，表明Flutter 已经配置好了。\n\n### iOS setup ###\n\n接下来我们就可以来针对 ios 配置一下开发环境。\n\n首先安装最新版的 Xcode，如果不是最新版可以通过 mac app store 升级。\n\n安装好之后，需要配置一下 Xcode 的命令行工具。执行如下操作\n\n```bash\n$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n$ sudo xcodebuild -runFirstLaunch\n```\n\n最后需要确保同意 Xcode 证书。首次打开Xcode 或者在命令行执行一条语句都可以。\n\n```bash\n$ sudo xcodebuild -license\n```\n\n接下来我们在来配置 iOS 模拟器。\n\n### iOS Simulator ###\n\n命令行输入\n\n```bash\n$ open -a Simulator\n```\n\n该命令会默认打开最新的 iOS 机器，如果想换其他型号的 iphone 或者其他设备，可以从 Hardware > Device 下来选择你想要的机型。\n\n### Create and run a flutter app ###\n\n接下来我们创建一个官方的 demo 项目，并且把它跑起来。先保证 ios 模拟请还在运行，然后分别执行以下三条命令行。\n\n```bash\n$ flutter create my_app\n$ cd my_app\n$ flutter run\n```\n\n这时候我们就可以看到官方的 demo 跑起来了。\n\n### Deploy to iOS devices\n\n如果我们想在自己的 iOS 手机上运行 demo，可以通过 Xcode 来部署。\n\n首先安装 CocoaPods。\n\n```bash\n$ sudo gem install cocoapods\n$ pod setup\n```\n\n然后 cd 到 demo 的文件夹，执行\n\n```bash\n$ open ios/Runner.xcworkspace\n```\n\n打开之后，在 Xcode 左侧边栏选择 Runner项目。接下来我们来配置 Development Team。在 Runner 的配置页面，首先关注 Signing & Capabilities > Team。下来选择 Team，如果没有，可以使用自己的 Apple ID 创建一个 Personal Team， 不花钱，免费。创建完之后，我们需要修改一下 Bundle Identifier，这里的这个 identifier 需要保证)唯一性。\n\n\n这里我遇到一个问题，The app ID \"com.example.myapp\" cannot be registered to your development team. Change your bundle identifier to a unique string to try again.  详情可以参见 https://github.com/flutter/flutter/issues/19498 。 \n\n![github-issue](https://user-gold-cdn.xitu.io/2020/1/16/16faea496ad567c6?w=2526&h=1156&f=png&s=203465)\n\n我解决的方法就是修改自动生成的 Bundle Identifier，按上图的例子，修改 example 或者 myapp 都可以解决问题。\n\n最后可以通过flutter run 或者 点击 Xcode 上方的 build and run 按钮部署 demo app。\n\n部署完之后，还需最后一步，在手机上添加信任 settings > general > profiles & device management ，找到 developer  app 下的自己开发账号的 app，点击 trust。\n\n到此为止我们就完成了 flutter 开发环境的搭建，可以在电脑和自己的上运行 flutter 应用了。\n\n我们下次再会。\n","source":"_posts/flutter-setup.md","raw":"---\ntitle: 搭建 Flutter 环境\ncategories:\n  - web\ntags:\n  - Flutter\n  - setup\nabbrlink: ec9f837c\ndate: 2020-01-16 22:09:18\n---\n今年计划学习的新技术栈一个是 vue.js，等 3.0版本发布以后准备尝试一下。 另一个就是flutter。今天看了一下官方文档，按照文档在本机上把环境跑起来了。这里先记录一下搭建环境的步骤，也算是学习过程的一个记录。\n\n这篇文章基本按照 https://flutter.dev/docs/get-started/install/macos 页面的指引一步步操作下来就可以在 mac 和 iphone 上运行 flutter demo 了。我把关键的命令和操作记录下来，过滤掉一些解释性的和暂时无关的文字，方便下次自己回顾，也可以当做一份汉化文档，方便初学者快速搭建环境排除掉一些其他的干扰。\n\n### Flutter SDK ###\n\n首先下载最新的 Flutter SDK，大约 1g 左右。下载完成之后，cd 到开发文件夹，执行 unzip 操作。\n\n```bash\n$ cd ~/development\n$ unzip ~/Downloads/flutter_macos_v1.12.13+hotfix.5-stable.zip\n```\n\n如果不想使用固定版本的话，可以直接使用 git 操作，从 github 拉取最新的 flutter 源码。\n\n```bash\n git clone https://github.com/flutter/flutter.git\n```\n\n之后将 `flutter` 操作添加到 path。\n\n```bash\n$ export PATH=\"$PATH:`pwd`/flutter/bin\"\n```\n\n这只是临时添加到当前的 terminal 窗口，如果需要永久添加，可以阅读官方文档。这里我不想跑题，暂时不做展开，以后再讲。\n\n### Run flutter doctor ###\n\n进行完这三步之后，我们就可以跑一下命令行来看 flutter 是否安装完成。\n\n```bash\n$ flutter doctor\n```\n\n稍等片刻之后，会有一份 Doctor summary。在我的电脑上，因为没有安装 Android toolchain 和 Android Studio，所以这两项之前显示的是×。除此之外， Flutter，Xcode，VS Code， Connected Device 都是√，表明Flutter 已经配置好了。\n\n### iOS setup ###\n\n接下来我们就可以来针对 ios 配置一下开发环境。\n\n首先安装最新版的 Xcode，如果不是最新版可以通过 mac app store 升级。\n\n安装好之后，需要配置一下 Xcode 的命令行工具。执行如下操作\n\n```bash\n$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n$ sudo xcodebuild -runFirstLaunch\n```\n\n最后需要确保同意 Xcode 证书。首次打开Xcode 或者在命令行执行一条语句都可以。\n\n```bash\n$ sudo xcodebuild -license\n```\n\n接下来我们在来配置 iOS 模拟器。\n\n### iOS Simulator ###\n\n命令行输入\n\n```bash\n$ open -a Simulator\n```\n\n该命令会默认打开最新的 iOS 机器，如果想换其他型号的 iphone 或者其他设备，可以从 Hardware > Device 下来选择你想要的机型。\n\n### Create and run a flutter app ###\n\n接下来我们创建一个官方的 demo 项目，并且把它跑起来。先保证 ios 模拟请还在运行，然后分别执行以下三条命令行。\n\n```bash\n$ flutter create my_app\n$ cd my_app\n$ flutter run\n```\n\n这时候我们就可以看到官方的 demo 跑起来了。\n\n### Deploy to iOS devices\n\n如果我们想在自己的 iOS 手机上运行 demo，可以通过 Xcode 来部署。\n\n首先安装 CocoaPods。\n\n```bash\n$ sudo gem install cocoapods\n$ pod setup\n```\n\n然后 cd 到 demo 的文件夹，执行\n\n```bash\n$ open ios/Runner.xcworkspace\n```\n\n打开之后，在 Xcode 左侧边栏选择 Runner项目。接下来我们来配置 Development Team。在 Runner 的配置页面，首先关注 Signing & Capabilities > Team。下来选择 Team，如果没有，可以使用自己的 Apple ID 创建一个 Personal Team， 不花钱，免费。创建完之后，我们需要修改一下 Bundle Identifier，这里的这个 identifier 需要保证)唯一性。\n\n\n这里我遇到一个问题，The app ID \"com.example.myapp\" cannot be registered to your development team. Change your bundle identifier to a unique string to try again.  详情可以参见 https://github.com/flutter/flutter/issues/19498 。 \n\n![github-issue](https://user-gold-cdn.xitu.io/2020/1/16/16faea496ad567c6?w=2526&h=1156&f=png&s=203465)\n\n我解决的方法就是修改自动生成的 Bundle Identifier，按上图的例子，修改 example 或者 myapp 都可以解决问题。\n\n最后可以通过flutter run 或者 点击 Xcode 上方的 build and run 按钮部署 demo app。\n\n部署完之后，还需最后一步，在手机上添加信任 settings > general > profiles & device management ，找到 developer  app 下的自己开发账号的 app，点击 trust。\n\n到此为止我们就完成了 flutter 开发环境的搭建，可以在电脑和自己的上运行 flutter 应用了。\n\n我们下次再会。\n","slug":"flutter-setup","published":1,"updated":"2021-09-14T11:40:19.904Z","_id":"cka6xu6wq00088cmhlnb6tc3m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今年计划学习的新技术栈一个是 vue.js，等 3.0版本发布以后准备尝试一下。 另一个就是flutter。今天看了一下官方文档，按照文档在本机上把环境跑起来了。这里先记录一下搭建环境的步骤，也算是学习过程的一个记录。</p>\n<p>这篇文章基本按照 <a href=\"https://flutter.dev/docs/get-started/install/macos\">https://flutter.dev/docs/get-started/install/macos</a> 页面的指引一步步操作下来就可以在 mac 和 iphone 上运行 flutter demo 了。我把关键的命令和操作记录下来，过滤掉一些解释性的和暂时无关的文字，方便下次自己回顾，也可以当做一份汉化文档，方便初学者快速搭建环境排除掉一些其他的干扰。</p>\n<h3 id=\"Flutter-SDK\"><a href=\"#Flutter-SDK\" class=\"headerlink\" title=\"Flutter SDK\"></a>Flutter SDK</h3><p>首先下载最新的 Flutter SDK，大约 1g 左右。下载完成之后，cd 到开发文件夹，执行 unzip 操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/development</span><br><span class=\"line\">$ unzip ~/Downloads/flutter_macos_v1.12.13+hotfix.5-stable.zip</span><br></pre></td></tr></table></figure>\n\n<p>如果不想使用固定版本的话，可以直接使用 git 操作，从 github 拉取最新的 flutter 源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure>\n\n<p>之后将 <code>flutter</code> 操作添加到 path。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> PATH=<span class=\"string\">&quot;<span class=\"variable\">$PATH</span>:`pwd`/flutter/bin&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这只是临时添加到当前的 terminal 窗口，如果需要永久添加，可以阅读官方文档。这里我不想跑题，暂时不做展开，以后再讲。</p>\n<h3 id=\"Run-flutter-doctor\"><a href=\"#Run-flutter-doctor\" class=\"headerlink\" title=\"Run flutter doctor\"></a>Run flutter doctor</h3><p>进行完这三步之后，我们就可以跑一下命令行来看 flutter 是否安装完成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flutter doctor</span><br></pre></td></tr></table></figure>\n\n<p>稍等片刻之后，会有一份 Doctor summary。在我的电脑上，因为没有安装 Android toolchain 和 Android Studio，所以这两项之前显示的是×。除此之外， Flutter，Xcode，VS Code， Connected Device 都是√，表明Flutter 已经配置好了。</p>\n<h3 id=\"iOS-setup\"><a href=\"#iOS-setup\" class=\"headerlink\" title=\"iOS setup\"></a>iOS setup</h3><p>接下来我们就可以来针对 ios 配置一下开发环境。</p>\n<p>首先安装最新版的 Xcode，如果不是最新版可以通过 mac app store 升级。</p>\n<p>安装好之后，需要配置一下 Xcode 的命令行工具。执行如下操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br><span class=\"line\">$ sudo xcodebuild -runFirstLaunch</span><br></pre></td></tr></table></figure>\n\n<p>最后需要确保同意 Xcode 证书。首次打开Xcode 或者在命令行执行一条语句都可以。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo xcodebuild -license</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们在来配置 iOS 模拟器。</p>\n<h3 id=\"iOS-Simulator\"><a href=\"#iOS-Simulator\" class=\"headerlink\" title=\"iOS Simulator\"></a>iOS Simulator</h3><p>命令行输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open -a Simulator</span><br></pre></td></tr></table></figure>\n\n<p>该命令会默认打开最新的 iOS 机器，如果想换其他型号的 iphone 或者其他设备，可以从 Hardware &gt; Device 下来选择你想要的机型。</p>\n<h3 id=\"Create-and-run-a-flutter-app\"><a href=\"#Create-and-run-a-flutter-app\" class=\"headerlink\" title=\"Create and run a flutter app\"></a>Create and run a flutter app</h3><p>接下来我们创建一个官方的 demo 项目，并且把它跑起来。先保证 ios 模拟请还在运行，然后分别执行以下三条命令行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flutter create my_app</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my_app</span><br><span class=\"line\">$ flutter run</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们就可以看到官方的 demo 跑起来了。</p>\n<h3 id=\"Deploy-to-iOS-devices\"><a href=\"#Deploy-to-iOS-devices\" class=\"headerlink\" title=\"Deploy to iOS devices\"></a>Deploy to iOS devices</h3><p>如果我们想在自己的 iOS 手机上运行 demo，可以通过 Xcode 来部署。</p>\n<p>首先安装 CocoaPods。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure>\n\n<p>然后 cd 到 demo 的文件夹，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open ios/Runner.xcworkspace</span><br></pre></td></tr></table></figure>\n\n<p>打开之后，在 Xcode 左侧边栏选择 Runner项目。接下来我们来配置 Development Team。在 Runner 的配置页面，首先关注 Signing &amp; Capabilities &gt; Team。下来选择 Team，如果没有，可以使用自己的 Apple ID 创建一个 Personal Team， 不花钱，免费。创建完之后，我们需要修改一下 Bundle Identifier，这里的这个 identifier 需要保证)唯一性。</p>\n<p>这里我遇到一个问题，The app ID “com.example.myapp” cannot be registered to your development team. Change your bundle identifier to a unique string to try again.  详情可以参见 <a href=\"https://github.com/flutter/flutter/issues/19498\">https://github.com/flutter/flutter/issues/19498</a> 。 </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/16/16faea496ad567c6?w=2526&h=1156&f=png&s=203465\" alt=\"github-issue\"></p>\n<p>我解决的方法就是修改自动生成的 Bundle Identifier，按上图的例子，修改 example 或者 myapp 都可以解决问题。</p>\n<p>最后可以通过flutter run 或者 点击 Xcode 上方的 build and run 按钮部署 demo app。</p>\n<p>部署完之后，还需最后一步，在手机上添加信任 settings &gt; general &gt; profiles &amp; device management ，找到 developer  app 下的自己开发账号的 app，点击 trust。</p>\n<p>到此为止我们就完成了 flutter 开发环境的搭建，可以在电脑和自己的上运行 flutter 应用了。</p>\n<p>我们下次再会。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今年计划学习的新技术栈一个是 vue.js，等 3.0版本发布以后准备尝试一下。 另一个就是flutter。今天看了一下官方文档，按照文档在本机上把环境跑起来了。这里先记录一下搭建环境的步骤，也算是学习过程的一个记录。</p>\n<p>这篇文章基本按照 <a href=\"https://flutter.dev/docs/get-started/install/macos\">https://flutter.dev/docs/get-started/install/macos</a> 页面的指引一步步操作下来就可以在 mac 和 iphone 上运行 flutter demo 了。我把关键的命令和操作记录下来，过滤掉一些解释性的和暂时无关的文字，方便下次自己回顾，也可以当做一份汉化文档，方便初学者快速搭建环境排除掉一些其他的干扰。</p>\n<h3 id=\"Flutter-SDK\"><a href=\"#Flutter-SDK\" class=\"headerlink\" title=\"Flutter SDK\"></a>Flutter SDK</h3><p>首先下载最新的 Flutter SDK，大约 1g 左右。下载完成之后，cd 到开发文件夹，执行 unzip 操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/development</span><br><span class=\"line\">$ unzip ~/Downloads/flutter_macos_v1.12.13+hotfix.5-stable.zip</span><br></pre></td></tr></table></figure>\n\n<p>如果不想使用固定版本的话，可以直接使用 git 操作，从 github 拉取最新的 flutter 源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure>\n\n<p>之后将 <code>flutter</code> 操作添加到 path。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> PATH=<span class=\"string\">&quot;<span class=\"variable\">$PATH</span>:`pwd`/flutter/bin&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这只是临时添加到当前的 terminal 窗口，如果需要永久添加，可以阅读官方文档。这里我不想跑题，暂时不做展开，以后再讲。</p>\n<h3 id=\"Run-flutter-doctor\"><a href=\"#Run-flutter-doctor\" class=\"headerlink\" title=\"Run flutter doctor\"></a>Run flutter doctor</h3><p>进行完这三步之后，我们就可以跑一下命令行来看 flutter 是否安装完成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flutter doctor</span><br></pre></td></tr></table></figure>\n\n<p>稍等片刻之后，会有一份 Doctor summary。在我的电脑上，因为没有安装 Android toolchain 和 Android Studio，所以这两项之前显示的是×。除此之外， Flutter，Xcode，VS Code， Connected Device 都是√，表明Flutter 已经配置好了。</p>\n<h3 id=\"iOS-setup\"><a href=\"#iOS-setup\" class=\"headerlink\" title=\"iOS setup\"></a>iOS setup</h3><p>接下来我们就可以来针对 ios 配置一下开发环境。</p>\n<p>首先安装最新版的 Xcode，如果不是最新版可以通过 mac app store 升级。</p>\n<p>安装好之后，需要配置一下 Xcode 的命令行工具。执行如下操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br><span class=\"line\">$ sudo xcodebuild -runFirstLaunch</span><br></pre></td></tr></table></figure>\n\n<p>最后需要确保同意 Xcode 证书。首次打开Xcode 或者在命令行执行一条语句都可以。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo xcodebuild -license</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们在来配置 iOS 模拟器。</p>\n<h3 id=\"iOS-Simulator\"><a href=\"#iOS-Simulator\" class=\"headerlink\" title=\"iOS Simulator\"></a>iOS Simulator</h3><p>命令行输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open -a Simulator</span><br></pre></td></tr></table></figure>\n\n<p>该命令会默认打开最新的 iOS 机器，如果想换其他型号的 iphone 或者其他设备，可以从 Hardware &gt; Device 下来选择你想要的机型。</p>\n<h3 id=\"Create-and-run-a-flutter-app\"><a href=\"#Create-and-run-a-flutter-app\" class=\"headerlink\" title=\"Create and run a flutter app\"></a>Create and run a flutter app</h3><p>接下来我们创建一个官方的 demo 项目，并且把它跑起来。先保证 ios 模拟请还在运行，然后分别执行以下三条命令行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flutter create my_app</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my_app</span><br><span class=\"line\">$ flutter run</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们就可以看到官方的 demo 跑起来了。</p>\n<h3 id=\"Deploy-to-iOS-devices\"><a href=\"#Deploy-to-iOS-devices\" class=\"headerlink\" title=\"Deploy to iOS devices\"></a>Deploy to iOS devices</h3><p>如果我们想在自己的 iOS 手机上运行 demo，可以通过 Xcode 来部署。</p>\n<p>首先安装 CocoaPods。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure>\n\n<p>然后 cd 到 demo 的文件夹，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open ios/Runner.xcworkspace</span><br></pre></td></tr></table></figure>\n\n<p>打开之后，在 Xcode 左侧边栏选择 Runner项目。接下来我们来配置 Development Team。在 Runner 的配置页面，首先关注 Signing &amp; Capabilities &gt; Team。下来选择 Team，如果没有，可以使用自己的 Apple ID 创建一个 Personal Team， 不花钱，免费。创建完之后，我们需要修改一下 Bundle Identifier，这里的这个 identifier 需要保证)唯一性。</p>\n<p>这里我遇到一个问题，The app ID “com.example.myapp” cannot be registered to your development team. Change your bundle identifier to a unique string to try again.  详情可以参见 <a href=\"https://github.com/flutter/flutter/issues/19498\">https://github.com/flutter/flutter/issues/19498</a> 。 </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/16/16faea496ad567c6?w=2526&h=1156&f=png&s=203465\" alt=\"github-issue\"></p>\n<p>我解决的方法就是修改自动生成的 Bundle Identifier，按上图的例子，修改 example 或者 myapp 都可以解决问题。</p>\n<p>最后可以通过flutter run 或者 点击 Xcode 上方的 build and run 按钮部署 demo app。</p>\n<p>部署完之后，还需最后一步，在手机上添加信任 settings &gt; general &gt; profiles &amp; device management ，找到 developer  app 下的自己开发账号的 app，点击 trust。</p>\n<p>到此为止我们就完成了 flutter 开发环境的搭建，可以在电脑和自己的上运行 flutter 应用了。</p>\n<p>我们下次再会。</p>\n"},{"title":"我读 Effective JavaScript","abbrlink":"6fb9a62a","date":"2020-04-02T06:44:32.000Z","_content":"\n![Effective JavaScript](https://user-gold-cdn.xitu.io/2020/4/2/171392fedd81055b?w=270&h=354&f=jpeg&s=20991)\n\n\n我是17年6月买的这本书，当时在 HW 工作刚三个月。为了确定一下，我还专门去博客看我17年的年中总结，生活的苦楚又历历在目。我记得那时候开发很紧，从国内派人来湾区，导致我们美研也开始按国内的工作时间来。早上九点半到，二十分钟站会，每个人说昨天做了什么，今天打算做什么，开发联调进度，有没有阻碍。然后一干干到晚上十一点才下班回家。实在不知道是怎么熬过来的。我估摸是业务代码写的扛不住了，就想准备准备，一方面提升提升，再一方面年底拿了签证好跑路，所以就买了几本 JavaScript 的书。结果人算不如天算，事不如人意，书也没看完。\n\n上周刚好休年假，心想也不能天天在家打游戏，还是得搞搞学习，所以这才抽出来这本书开始看。我是从后往前翻的，因为对最后一章并发比较感兴趣。花了三天一口气看完，相见恨晚，后悔要是能早点读读就好了。看的过程中记起很多经历过的面试题目，想起没回答上来的尴尬时刻，有点羞愧和惋惜。\n\n接下来说说这本书。首先在2020年这个时间点，我觉得这本书不太适合初学者看，更适合有过一两年经验的朋友去学习。先不提那些已经过时的知识点，初学者因为没有见太多所谓的好的代码和坏的代码，很难深刻认识到书里提到的 Best Practice 存在的意义，没有比较就没有进步。对于有一些经验的朋友，书中的一些例子可能会让你想起某段自己写的笨比代码，然后去琢磨作者的良苦用心。\n\n回到书的内容，因为这本书出版于12年，距离ES5正式发行才刚刚过去三年，前端领域还有大量项目是跑在非严格环境。所以作者花了不少篇幅来介绍一些特性在strict 和 non strict 环境的区别，以及一些对于现今开发者来说不再是问题的问题。比如逗号插入，现在已经有了比较完善的 Lint 工具来解决这类问题。还有类似 with，eval，caller，callee 等概念，随着 ES 的逐步规范和框架的引入，现在开发中基本不再触碰这类知识了。又如第五章中实现的 Dict，现在已经有成为标准的 Set， Map等对象可供直接调用了。\n\n另一方面，阅读这边书可以帮助我们快速梳理一遍知识点。比如书中提到的prototype inheritance，IIFE，closure 保存私有变量，call apply 的使用场景，arguements 的使用，defineProperty 的使用等等，都是日常开发以及面试常问的问题。所以在面试之前，重点看下第三、四、五章，是个很不错的复习思路。我想起当年去 ebay 面试，第一面印度小姐姐出的第一题是写一个pub-sub，第二题就是自己实现一个Iterator，可以对一个数组调用 next 方法，直到最后没有了打印完成。现在看到书上的 Item 24 就是原题，实在可惜。\n\n书的第六、七章 ，Library 和 API 设计，以及并发，我觉得非常值得阅读，里面提供的一些接口设计规范和代码示例，在日常工作中使用的还是比较多的。就在前不久，大家在讨论中间层如何设计权限接口的问题，这也是当下 BFF 中比较火热的一个话题吧。看完这一章，我有了些新的想法。比如说对于公共接口，应该做好 defensive programming (Item 59)，对于特殊值，边界值，应该抛错让接入方知道。还有比如说提到 options object (Item 55)，大家肯定不会陌生这样的代码:\n\n```js\n// positional arguments \nfunction getAuth(a,b,c,d,e) {\n    // do something\n}\n```\n\n更可怕的是，随着业务的增长，形参的长度还在增加，以至于每次调用都心惊胆战，这是传到第几个参数了。上面这是一个极端情况，还有一种情况，就是提供的接口什么都不传，返回全部信息。甭管你要不要，一把全倒给你：\n\n```js\nfunction getAuth() {\n    return {\n        city: [],\n        region: [],\n        role: [],\n        // more and more fields\n    }\n}\n```\n\n这是另一个极端，图一时之省事。下次业务增长了，我们只需要往 payload 里无脑加数据就好了。一个接口服务公司，也不管别人需不需某个字段。\n\n看过书以后，我想只需再多走一步就可以优化这个接口。当入参为空时，我们返回所有数据，满足当前简单的业务需求。当接入方多了以后，用户只传他们关心的字段，我们就返回子集。这样的接口粒度更小，便于拓展，可以真正的作为提供方去满足业务方的需求:\n\n```js\nfunction getAuth() {\n  // return all\n}\n\nfunction getAuth({ city }) {\n    return {\n        city: []\n    }\n}\n\nfunction getAuth({ notInTheDoc }) {\n   // throw ArgumentsError\n}\n```\n\n这是我看书过程中的一点粗浅的思考。关于接口安全和接口设计，我了解的不够系统和深入，也是今年希望补习的一个领域。\n\n现在看来，作者不愧是 TC39 成员，书中提到的 Iterator，Promise 等概念均在后来的 JS 正式版本中标准化了，我甚至还有点期望能出第二版。此外，明显感到看英文的速度下降，没有原来顺溜。接下来还要多看英文材料，这项技能不能丢。\n\n最后，昨天得知司徒正美猝然离世，大家聊起都唏嘘不已。这两年加班不少，收益无多，身体也不如从前。有些感慨，人生短短数十年，抓紧时间做些开心的事，读些无用的书，爱些可爱的人，足矣。\n\n2020 年 4 月 1 日\n","source":"_posts/effective-javascript.md","raw":"---\ntitle: 我读 Effective JavaScript\ncategories:\n  - life\ntags:\n  - books\n  - reading\n  - javascript\nabbrlink: 6fb9a62a\ndate: 2020-04-01 23:44:32\n---\n\n![Effective JavaScript](https://user-gold-cdn.xitu.io/2020/4/2/171392fedd81055b?w=270&h=354&f=jpeg&s=20991)\n\n\n我是17年6月买的这本书，当时在 HW 工作刚三个月。为了确定一下，我还专门去博客看我17年的年中总结，生活的苦楚又历历在目。我记得那时候开发很紧，从国内派人来湾区，导致我们美研也开始按国内的工作时间来。早上九点半到，二十分钟站会，每个人说昨天做了什么，今天打算做什么，开发联调进度，有没有阻碍。然后一干干到晚上十一点才下班回家。实在不知道是怎么熬过来的。我估摸是业务代码写的扛不住了，就想准备准备，一方面提升提升，再一方面年底拿了签证好跑路，所以就买了几本 JavaScript 的书。结果人算不如天算，事不如人意，书也没看完。\n\n上周刚好休年假，心想也不能天天在家打游戏，还是得搞搞学习，所以这才抽出来这本书开始看。我是从后往前翻的，因为对最后一章并发比较感兴趣。花了三天一口气看完，相见恨晚，后悔要是能早点读读就好了。看的过程中记起很多经历过的面试题目，想起没回答上来的尴尬时刻，有点羞愧和惋惜。\n\n接下来说说这本书。首先在2020年这个时间点，我觉得这本书不太适合初学者看，更适合有过一两年经验的朋友去学习。先不提那些已经过时的知识点，初学者因为没有见太多所谓的好的代码和坏的代码，很难深刻认识到书里提到的 Best Practice 存在的意义，没有比较就没有进步。对于有一些经验的朋友，书中的一些例子可能会让你想起某段自己写的笨比代码，然后去琢磨作者的良苦用心。\n\n回到书的内容，因为这本书出版于12年，距离ES5正式发行才刚刚过去三年，前端领域还有大量项目是跑在非严格环境。所以作者花了不少篇幅来介绍一些特性在strict 和 non strict 环境的区别，以及一些对于现今开发者来说不再是问题的问题。比如逗号插入，现在已经有了比较完善的 Lint 工具来解决这类问题。还有类似 with，eval，caller，callee 等概念，随着 ES 的逐步规范和框架的引入，现在开发中基本不再触碰这类知识了。又如第五章中实现的 Dict，现在已经有成为标准的 Set， Map等对象可供直接调用了。\n\n另一方面，阅读这边书可以帮助我们快速梳理一遍知识点。比如书中提到的prototype inheritance，IIFE，closure 保存私有变量，call apply 的使用场景，arguements 的使用，defineProperty 的使用等等，都是日常开发以及面试常问的问题。所以在面试之前，重点看下第三、四、五章，是个很不错的复习思路。我想起当年去 ebay 面试，第一面印度小姐姐出的第一题是写一个pub-sub，第二题就是自己实现一个Iterator，可以对一个数组调用 next 方法，直到最后没有了打印完成。现在看到书上的 Item 24 就是原题，实在可惜。\n\n书的第六、七章 ，Library 和 API 设计，以及并发，我觉得非常值得阅读，里面提供的一些接口设计规范和代码示例，在日常工作中使用的还是比较多的。就在前不久，大家在讨论中间层如何设计权限接口的问题，这也是当下 BFF 中比较火热的一个话题吧。看完这一章，我有了些新的想法。比如说对于公共接口，应该做好 defensive programming (Item 59)，对于特殊值，边界值，应该抛错让接入方知道。还有比如说提到 options object (Item 55)，大家肯定不会陌生这样的代码:\n\n```js\n// positional arguments \nfunction getAuth(a,b,c,d,e) {\n    // do something\n}\n```\n\n更可怕的是，随着业务的增长，形参的长度还在增加，以至于每次调用都心惊胆战，这是传到第几个参数了。上面这是一个极端情况，还有一种情况，就是提供的接口什么都不传，返回全部信息。甭管你要不要，一把全倒给你：\n\n```js\nfunction getAuth() {\n    return {\n        city: [],\n        region: [],\n        role: [],\n        // more and more fields\n    }\n}\n```\n\n这是另一个极端，图一时之省事。下次业务增长了，我们只需要往 payload 里无脑加数据就好了。一个接口服务公司，也不管别人需不需某个字段。\n\n看过书以后，我想只需再多走一步就可以优化这个接口。当入参为空时，我们返回所有数据，满足当前简单的业务需求。当接入方多了以后，用户只传他们关心的字段，我们就返回子集。这样的接口粒度更小，便于拓展，可以真正的作为提供方去满足业务方的需求:\n\n```js\nfunction getAuth() {\n  // return all\n}\n\nfunction getAuth({ city }) {\n    return {\n        city: []\n    }\n}\n\nfunction getAuth({ notInTheDoc }) {\n   // throw ArgumentsError\n}\n```\n\n这是我看书过程中的一点粗浅的思考。关于接口安全和接口设计，我了解的不够系统和深入，也是今年希望补习的一个领域。\n\n现在看来，作者不愧是 TC39 成员，书中提到的 Iterator，Promise 等概念均在后来的 JS 正式版本中标准化了，我甚至还有点期望能出第二版。此外，明显感到看英文的速度下降，没有原来顺溜。接下来还要多看英文材料，这项技能不能丢。\n\n最后，昨天得知司徒正美猝然离世，大家聊起都唏嘘不已。这两年加班不少，收益无多，身体也不如从前。有些感慨，人生短短数十年，抓紧时间做些开心的事，读些无用的书，爱些可爱的人，足矣。\n\n2020 年 4 月 1 日\n","slug":"effective-javascript","published":1,"updated":"2021-09-14T11:40:19.904Z","_id":"cka6xu6wr00098cmhjkyxr1bz","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/2/171392fedd81055b?w=270&h=354&f=jpeg&s=20991\" alt=\"Effective JavaScript\"></p>\n<p>我是17年6月买的这本书，当时在 HW 工作刚三个月。为了确定一下，我还专门去博客看我17年的年中总结，生活的苦楚又历历在目。我记得那时候开发很紧，从国内派人来湾区，导致我们美研也开始按国内的工作时间来。早上九点半到，二十分钟站会，每个人说昨天做了什么，今天打算做什么，开发联调进度，有没有阻碍。然后一干干到晚上十一点才下班回家。实在不知道是怎么熬过来的。我估摸是业务代码写的扛不住了，就想准备准备，一方面提升提升，再一方面年底拿了签证好跑路，所以就买了几本 JavaScript 的书。结果人算不如天算，事不如人意，书也没看完。</p>\n<p>上周刚好休年假，心想也不能天天在家打游戏，还是得搞搞学习，所以这才抽出来这本书开始看。我是从后往前翻的，因为对最后一章并发比较感兴趣。花了三天一口气看完，相见恨晚，后悔要是能早点读读就好了。看的过程中记起很多经历过的面试题目，想起没回答上来的尴尬时刻，有点羞愧和惋惜。</p>\n<p>接下来说说这本书。首先在2020年这个时间点，我觉得这本书不太适合初学者看，更适合有过一两年经验的朋友去学习。先不提那些已经过时的知识点，初学者因为没有见太多所谓的好的代码和坏的代码，很难深刻认识到书里提到的 Best Practice 存在的意义，没有比较就没有进步。对于有一些经验的朋友，书中的一些例子可能会让你想起某段自己写的笨比代码，然后去琢磨作者的良苦用心。</p>\n<p>回到书的内容，因为这本书出版于12年，距离ES5正式发行才刚刚过去三年，前端领域还有大量项目是跑在非严格环境。所以作者花了不少篇幅来介绍一些特性在strict 和 non strict 环境的区别，以及一些对于现今开发者来说不再是问题的问题。比如逗号插入，现在已经有了比较完善的 Lint 工具来解决这类问题。还有类似 with，eval，caller，callee 等概念，随着 ES 的逐步规范和框架的引入，现在开发中基本不再触碰这类知识了。又如第五章中实现的 Dict，现在已经有成为标准的 Set， Map等对象可供直接调用了。</p>\n<p>另一方面，阅读这边书可以帮助我们快速梳理一遍知识点。比如书中提到的prototype inheritance，IIFE，closure 保存私有变量，call apply 的使用场景，arguements 的使用，defineProperty 的使用等等，都是日常开发以及面试常问的问题。所以在面试之前，重点看下第三、四、五章，是个很不错的复习思路。我想起当年去 ebay 面试，第一面印度小姐姐出的第一题是写一个pub-sub，第二题就是自己实现一个Iterator，可以对一个数组调用 next 方法，直到最后没有了打印完成。现在看到书上的 Item 24 就是原题，实在可惜。</p>\n<p>书的第六、七章 ，Library 和 API 设计，以及并发，我觉得非常值得阅读，里面提供的一些接口设计规范和代码示例，在日常工作中使用的还是比较多的。就在前不久，大家在讨论中间层如何设计权限接口的问题，这也是当下 BFF 中比较火热的一个话题吧。看完这一章，我有了些新的想法。比如说对于公共接口，应该做好 defensive programming (Item 59)，对于特殊值，边界值，应该抛错让接入方知道。还有比如说提到 options object (Item 55)，大家肯定不会陌生这样的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// positional arguments </span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAuth</span>(<span class=\"params\">a,b,c,d,e</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更可怕的是，随着业务的增长，形参的长度还在增加，以至于每次调用都心惊胆战，这是传到第几个参数了。上面这是一个极端情况，还有一种情况，就是提供的接口什么都不传，返回全部信息。甭管你要不要，一把全倒给你：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAuth</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">city</span>: [],</span><br><span class=\"line\">        <span class=\"attr\">region</span>: [],</span><br><span class=\"line\">        <span class=\"attr\">role</span>: [],</span><br><span class=\"line\">        <span class=\"comment\">// more and more fields</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是另一个极端，图一时之省事。下次业务增长了，我们只需要往 payload 里无脑加数据就好了。一个接口服务公司，也不管别人需不需某个字段。</p>\n<p>看过书以后，我想只需再多走一步就可以优化这个接口。当入参为空时，我们返回所有数据，满足当前简单的业务需求。当接入方多了以后，用户只传他们关心的字段，我们就返回子集。这样的接口粒度更小，便于拓展，可以真正的作为提供方去满足业务方的需求:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAuth</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// return all</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAuth</span>(<span class=\"params\">&#123; city &#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">city</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAuth</span>(<span class=\"params\">&#123; notInTheDoc &#125;</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// throw ArgumentsError</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是我看书过程中的一点粗浅的思考。关于接口安全和接口设计，我了解的不够系统和深入，也是今年希望补习的一个领域。</p>\n<p>现在看来，作者不愧是 TC39 成员，书中提到的 Iterator，Promise 等概念均在后来的 JS 正式版本中标准化了，我甚至还有点期望能出第二版。此外，明显感到看英文的速度下降，没有原来顺溜。接下来还要多看英文材料，这项技能不能丢。</p>\n<p>最后，昨天得知司徒正美猝然离世，大家聊起都唏嘘不已。这两年加班不少，收益无多，身体也不如从前。有些感慨，人生短短数十年，抓紧时间做些开心的事，读些无用的书，爱些可爱的人，足矣。</p>\n<p>2020 年 4 月 1 日</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/2/171392fedd81055b?w=270&h=354&f=jpeg&s=20991\" alt=\"Effective JavaScript\"></p>\n<p>我是17年6月买的这本书，当时在 HW 工作刚三个月。为了确定一下，我还专门去博客看我17年的年中总结，生活的苦楚又历历在目。我记得那时候开发很紧，从国内派人来湾区，导致我们美研也开始按国内的工作时间来。早上九点半到，二十分钟站会，每个人说昨天做了什么，今天打算做什么，开发联调进度，有没有阻碍。然后一干干到晚上十一点才下班回家。实在不知道是怎么熬过来的。我估摸是业务代码写的扛不住了，就想准备准备，一方面提升提升，再一方面年底拿了签证好跑路，所以就买了几本 JavaScript 的书。结果人算不如天算，事不如人意，书也没看完。</p>\n<p>上周刚好休年假，心想也不能天天在家打游戏，还是得搞搞学习，所以这才抽出来这本书开始看。我是从后往前翻的，因为对最后一章并发比较感兴趣。花了三天一口气看完，相见恨晚，后悔要是能早点读读就好了。看的过程中记起很多经历过的面试题目，想起没回答上来的尴尬时刻，有点羞愧和惋惜。</p>\n<p>接下来说说这本书。首先在2020年这个时间点，我觉得这本书不太适合初学者看，更适合有过一两年经验的朋友去学习。先不提那些已经过时的知识点，初学者因为没有见太多所谓的好的代码和坏的代码，很难深刻认识到书里提到的 Best Practice 存在的意义，没有比较就没有进步。对于有一些经验的朋友，书中的一些例子可能会让你想起某段自己写的笨比代码，然后去琢磨作者的良苦用心。</p>\n<p>回到书的内容，因为这本书出版于12年，距离ES5正式发行才刚刚过去三年，前端领域还有大量项目是跑在非严格环境。所以作者花了不少篇幅来介绍一些特性在strict 和 non strict 环境的区别，以及一些对于现今开发者来说不再是问题的问题。比如逗号插入，现在已经有了比较完善的 Lint 工具来解决这类问题。还有类似 with，eval，caller，callee 等概念，随着 ES 的逐步规范和框架的引入，现在开发中基本不再触碰这类知识了。又如第五章中实现的 Dict，现在已经有成为标准的 Set， Map等对象可供直接调用了。</p>\n<p>另一方面，阅读这边书可以帮助我们快速梳理一遍知识点。比如书中提到的prototype inheritance，IIFE，closure 保存私有变量，call apply 的使用场景，arguements 的使用，defineProperty 的使用等等，都是日常开发以及面试常问的问题。所以在面试之前，重点看下第三、四、五章，是个很不错的复习思路。我想起当年去 ebay 面试，第一面印度小姐姐出的第一题是写一个pub-sub，第二题就是自己实现一个Iterator，可以对一个数组调用 next 方法，直到最后没有了打印完成。现在看到书上的 Item 24 就是原题，实在可惜。</p>\n<p>书的第六、七章 ，Library 和 API 设计，以及并发，我觉得非常值得阅读，里面提供的一些接口设计规范和代码示例，在日常工作中使用的还是比较多的。就在前不久，大家在讨论中间层如何设计权限接口的问题，这也是当下 BFF 中比较火热的一个话题吧。看完这一章，我有了些新的想法。比如说对于公共接口，应该做好 defensive programming (Item 59)，对于特殊值，边界值，应该抛错让接入方知道。还有比如说提到 options object (Item 55)，大家肯定不会陌生这样的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// positional arguments </span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAuth</span>(<span class=\"params\">a,b,c,d,e</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更可怕的是，随着业务的增长，形参的长度还在增加，以至于每次调用都心惊胆战，这是传到第几个参数了。上面这是一个极端情况，还有一种情况，就是提供的接口什么都不传，返回全部信息。甭管你要不要，一把全倒给你：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAuth</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">city</span>: [],</span><br><span class=\"line\">        <span class=\"attr\">region</span>: [],</span><br><span class=\"line\">        <span class=\"attr\">role</span>: [],</span><br><span class=\"line\">        <span class=\"comment\">// more and more fields</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是另一个极端，图一时之省事。下次业务增长了，我们只需要往 payload 里无脑加数据就好了。一个接口服务公司，也不管别人需不需某个字段。</p>\n<p>看过书以后，我想只需再多走一步就可以优化这个接口。当入参为空时，我们返回所有数据，满足当前简单的业务需求。当接入方多了以后，用户只传他们关心的字段，我们就返回子集。这样的接口粒度更小，便于拓展，可以真正的作为提供方去满足业务方的需求:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAuth</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// return all</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAuth</span>(<span class=\"params\">&#123; city &#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">city</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAuth</span>(<span class=\"params\">&#123; notInTheDoc &#125;</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// throw ArgumentsError</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是我看书过程中的一点粗浅的思考。关于接口安全和接口设计，我了解的不够系统和深入，也是今年希望补习的一个领域。</p>\n<p>现在看来，作者不愧是 TC39 成员，书中提到的 Iterator，Promise 等概念均在后来的 JS 正式版本中标准化了，我甚至还有点期望能出第二版。此外，明显感到看英文的速度下降，没有原来顺溜。接下来还要多看英文材料，这项技能不能丢。</p>\n<p>最后，昨天得知司徒正美猝然离世，大家聊起都唏嘘不已。这两年加班不少，收益无多，身体也不如从前。有些感慨，人生短短数十年，抓紧时间做些开心的事，读些无用的书，爱些可爱的人，足矣。</p>\n<p>2020 年 4 月 1 日</p>\n"},{"title":"Timers in JavaScript","abbrlink":"d1698058","date":"2018-10-20T23:55:28.000Z","_content":"\n#### Challenge 1\n\nprint the following 2 messages after their corresponding delays.\n\n- Print the message “_Hello after 4 seconds_” after 4 seconds\n- Print the message “_Hello after 8 seconds_” after 8 seconds.\n\n**Constraints**:\nYou can define only a single function in your solution, which includes inline functions. This means many `setTimeout` calls will have to use the exact same function.\n\n```javascript\nconst func = (time) => {\n  console.log(`Hello after ${time} seconds`);\n};\nsetTimeout(func, 4000, 4);\nsetTimeout(func, 8000, 8);\n```\n\nsetTimeout clearTimeout;\n\nsetInterval clearInterval\n\nsetImmediate clearImmediate\n\ndelay is not guarantee\n\n```js\nsetTimeout(() => console.log('Hello after 0.5 seconds. MAYBE!'), 500);\nfor (let i = 0; i < 1e10; i++) {\n  // Block Things Synchronously\n}\n```\n\n#### Challenge 2\n\nWrite a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.\n\n```js\nlet count = 0;\nconst itv = setInterval(() => {\n  console.log('hello world');\n  count += 1;\n  if (count === 5) {\n    console.log('done');\n    clearInterval(itv);\n  }\n}, 1000);\n```\n\n#### Challenge 3\n\nonly use `const`, can't use `let` or `var`.\n\nWrite a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.\n\nprint\n\nHello World. 1\nHello World. 2\nHello World. 3\n...\n\n```js\nconst recur = (delay) => {\n  setTimeout(() => {\n    console.log('Hello World.', delay);\n    recur(delay + 1);\n  }, delay * 1000);\n};\nrecur(1);\n```\n\n#### Challenge 4\n\nWrite a script to continuously print the message “_Hello World_” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.\n\nprint\n\n```\nHello World. 100  // At 100ms\nHello World. 100  // At 200ms\nHello World. 100  // At 300ms\nHello World. 100  // At 400ms\nHello World. 100  // At 500ms\nHello World. 200  // At 700ms\nHello World. 200  // At 900ms\nHello World. 200  // At 1100ms\n...\n```\n\n**Constraints:** You can use only `setInterval` calls (not `setTimeout`) and you can use only ONE if statement.\n\n```js\nlet lastIntervalId,\n  counter = 5;\nconst greeting = (delay) => {\n  if (counter === 5) {\n    clearInterval(lastIntervalId);\n    lastIntervalId = setInterval(() => {\n      console.log('Hello World. ', delay);\n      greeting(delay + 100);\n    }, delay);\n    counter = 0;\n  }\n  counter += 1;\n};\ngreeting(100);\n```\n\n#### original Article\n\n[JavaScript Timers: Everything you need to know](https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162)\n","source":"_posts/Timers-in-JavaScript.md","raw":"---\ntitle: Timers in JavaScript\ncategories:\n  - tech\ntags:\n  - javascript\n  - setTimeout\n  - setInterval\nabbrlink: d1698058\ndate: 2018-10-20 16:55:28\n---\n\n#### Challenge 1\n\nprint the following 2 messages after their corresponding delays.\n\n- Print the message “_Hello after 4 seconds_” after 4 seconds\n- Print the message “_Hello after 8 seconds_” after 8 seconds.\n\n**Constraints**:\nYou can define only a single function in your solution, which includes inline functions. This means many `setTimeout` calls will have to use the exact same function.\n\n```javascript\nconst func = (time) => {\n  console.log(`Hello after ${time} seconds`);\n};\nsetTimeout(func, 4000, 4);\nsetTimeout(func, 8000, 8);\n```\n\nsetTimeout clearTimeout;\n\nsetInterval clearInterval\n\nsetImmediate clearImmediate\n\ndelay is not guarantee\n\n```js\nsetTimeout(() => console.log('Hello after 0.5 seconds. MAYBE!'), 500);\nfor (let i = 0; i < 1e10; i++) {\n  // Block Things Synchronously\n}\n```\n\n#### Challenge 2\n\nWrite a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.\n\n```js\nlet count = 0;\nconst itv = setInterval(() => {\n  console.log('hello world');\n  count += 1;\n  if (count === 5) {\n    console.log('done');\n    clearInterval(itv);\n  }\n}, 1000);\n```\n\n#### Challenge 3\n\nonly use `const`, can't use `let` or `var`.\n\nWrite a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.\n\nprint\n\nHello World. 1\nHello World. 2\nHello World. 3\n...\n\n```js\nconst recur = (delay) => {\n  setTimeout(() => {\n    console.log('Hello World.', delay);\n    recur(delay + 1);\n  }, delay * 1000);\n};\nrecur(1);\n```\n\n#### Challenge 4\n\nWrite a script to continuously print the message “_Hello World_” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.\n\nprint\n\n```\nHello World. 100  // At 100ms\nHello World. 100  // At 200ms\nHello World. 100  // At 300ms\nHello World. 100  // At 400ms\nHello World. 100  // At 500ms\nHello World. 200  // At 700ms\nHello World. 200  // At 900ms\nHello World. 200  // At 1100ms\n...\n```\n\n**Constraints:** You can use only `setInterval` calls (not `setTimeout`) and you can use only ONE if statement.\n\n```js\nlet lastIntervalId,\n  counter = 5;\nconst greeting = (delay) => {\n  if (counter === 5) {\n    clearInterval(lastIntervalId);\n    lastIntervalId = setInterval(() => {\n      console.log('Hello World. ', delay);\n      greeting(delay + 100);\n    }, delay);\n    counter = 0;\n  }\n  counter += 1;\n};\ngreeting(100);\n```\n\n#### original Article\n\n[JavaScript Timers: Everything you need to know](https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162)\n","slug":"Timers-in-JavaScript","published":1,"updated":"2021-09-14T11:40:19.904Z","_id":"cka6xu6ws000a8cmhqojtklpq","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Challenge-1\"><a href=\"#Challenge-1\" class=\"headerlink\" title=\"Challenge 1\"></a>Challenge 1</h4><p>print the following 2 messages after their corresponding delays.</p>\n<ul>\n<li>Print the message “_Hello after 4 seconds_” after 4 seconds</li>\n<li>Print the message “_Hello after 8 seconds_” after 8 seconds.</li>\n</ul>\n<p><strong>Constraints</strong>:<br>You can define only a single function in your solution, which includes inline functions. This means many <code>setTimeout</code> calls will have to use the exact same function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">func</span> = (<span class=\"params\">time</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello after <span class=\"subst\">$&#123;time&#125;</span> seconds`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(func, <span class=\"number\">4000</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(func, <span class=\"number\">8000</span>, <span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure>\n\n<p>setTimeout clearTimeout;</p>\n<p>setInterval clearInterval</p>\n<p>setImmediate clearImmediate</p>\n<p>delay is not guarantee</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello after 0.5 seconds. MAYBE!&#x27;</span>), <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Block Things Synchronously</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Challenge-2\"><a href=\"#Challenge-2\" class=\"headerlink\" title=\"Challenge 2\"></a>Challenge 2</h4><p>Write a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> itv = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello world&#x27;</span>);</span><br><span class=\"line\">  count += <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;done&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(itv);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Challenge-3\"><a href=\"#Challenge-3\" class=\"headerlink\" title=\"Challenge 3\"></a>Challenge 3</h4><p>only use <code>const</code>, can’t use <code>let</code> or <code>var</code>.</p>\n<p>Write a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.</p>\n<p>print</p>\n<p>Hello World. 1<br>Hello World. 2<br>Hello World. 3<br>…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">recur</span> = (<span class=\"params\">delay</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello World.&#x27;</span>, delay);</span><br><span class=\"line\">    <span class=\"title function_\">recur</span>(delay + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;, delay * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">recur</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Challenge-4\"><a href=\"#Challenge-4\" class=\"headerlink\" title=\"Challenge 4\"></a>Challenge 4</h4><p>Write a script to continuously print the message “_Hello World_” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.</p>\n<p>print</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World. 100  // At 100ms</span><br><span class=\"line\">Hello World. 100  // At 200ms</span><br><span class=\"line\">Hello World. 100  // At 300ms</span><br><span class=\"line\">Hello World. 100  // At 400ms</span><br><span class=\"line\">Hello World. 100  // At 500ms</span><br><span class=\"line\">Hello World. 200  // At 700ms</span><br><span class=\"line\">Hello World. 200  // At 900ms</span><br><span class=\"line\">Hello World. 200  // At 1100ms</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>Constraints:</strong> You can use only <code>setInterval</code> calls (not <code>setTimeout</code>) and you can use only ONE if statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastIntervalId,</span><br><span class=\"line\">  counter = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">greeting</span> = (<span class=\"params\">delay</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (counter === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(lastIntervalId);</span><br><span class=\"line\">    lastIntervalId = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello World. &#x27;</span>, delay);</span><br><span class=\"line\">      <span class=\"title function_\">greeting</span>(delay + <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">    counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  counter += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">greeting</span>(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"original-Article\"><a href=\"#original-Article\" class=\"headerlink\" title=\"original Article\"></a>original Article</h4><p><a href=\"https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162\">JavaScript Timers: Everything you need to know</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Challenge-1\"><a href=\"#Challenge-1\" class=\"headerlink\" title=\"Challenge 1\"></a>Challenge 1</h4><p>print the following 2 messages after their corresponding delays.</p>\n<ul>\n<li>Print the message “_Hello after 4 seconds_” after 4 seconds</li>\n<li>Print the message “_Hello after 8 seconds_” after 8 seconds.</li>\n</ul>\n<p><strong>Constraints</strong>:<br>You can define only a single function in your solution, which includes inline functions. This means many <code>setTimeout</code> calls will have to use the exact same function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">func</span> = (<span class=\"params\">time</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello after <span class=\"subst\">$&#123;time&#125;</span> seconds`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(func, <span class=\"number\">4000</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(func, <span class=\"number\">8000</span>, <span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure>\n\n<p>setTimeout clearTimeout;</p>\n<p>setInterval clearInterval</p>\n<p>setImmediate clearImmediate</p>\n<p>delay is not guarantee</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello after 0.5 seconds. MAYBE!&#x27;</span>), <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Block Things Synchronously</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Challenge-2\"><a href=\"#Challenge-2\" class=\"headerlink\" title=\"Challenge 2\"></a>Challenge 2</h4><p>Write a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> itv = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello world&#x27;</span>);</span><br><span class=\"line\">  count += <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;done&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(itv);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Challenge-3\"><a href=\"#Challenge-3\" class=\"headerlink\" title=\"Challenge 3\"></a>Challenge 3</h4><p>only use <code>const</code>, can’t use <code>let</code> or <code>var</code>.</p>\n<p>Write a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.</p>\n<p>print</p>\n<p>Hello World. 1<br>Hello World. 2<br>Hello World. 3<br>…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">recur</span> = (<span class=\"params\">delay</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello World.&#x27;</span>, delay);</span><br><span class=\"line\">    <span class=\"title function_\">recur</span>(delay + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;, delay * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">recur</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Challenge-4\"><a href=\"#Challenge-4\" class=\"headerlink\" title=\"Challenge 4\"></a>Challenge 4</h4><p>Write a script to continuously print the message “_Hello World_” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.</p>\n<p>print</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World. 100  // At 100ms</span><br><span class=\"line\">Hello World. 100  // At 200ms</span><br><span class=\"line\">Hello World. 100  // At 300ms</span><br><span class=\"line\">Hello World. 100  // At 400ms</span><br><span class=\"line\">Hello World. 100  // At 500ms</span><br><span class=\"line\">Hello World. 200  // At 700ms</span><br><span class=\"line\">Hello World. 200  // At 900ms</span><br><span class=\"line\">Hello World. 200  // At 1100ms</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>Constraints:</strong> You can use only <code>setInterval</code> calls (not <code>setTimeout</code>) and you can use only ONE if statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastIntervalId,</span><br><span class=\"line\">  counter = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">greeting</span> = (<span class=\"params\">delay</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (counter === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(lastIntervalId);</span><br><span class=\"line\">    lastIntervalId = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello World. &#x27;</span>, delay);</span><br><span class=\"line\">      <span class=\"title function_\">greeting</span>(delay + <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">    counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  counter += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">greeting</span>(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"original-Article\"><a href=\"#original-Article\" class=\"headerlink\" title=\"original Article\"></a>original Article</h4><p><a href=\"https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162\">JavaScript Timers: Everything you need to know</a></p>\n"},{"title":"华为面试","abbrlink":"f822c036","date":"2017-01-23T23:53:12.000Z","_content":"\n上周过的有点胆战心惊。\n\n周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。\n\n总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k 的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。\n\n其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。\n\n最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。\n","source":"_posts/interview-with-huawei.md","raw":"---\ntitle: 华为面试\ncategories:\n  - life\nabbrlink: f822c036\ndate: 2017-01-23 15:53:12\ntags:\n---\n\n上周过的有点胆战心惊。\n\n周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。\n\n总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k 的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。\n\n其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。\n\n最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。\n","slug":"interview-with-huawei","published":1,"updated":"2021-09-14T11:40:19.904Z","_id":"cka6xu71j000b8cmhp430j98e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上周过的有点胆战心惊。</p>\n<p>周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。</p>\n<p>总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k 的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。</p>\n<p>其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。</p>\n<p>最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上周过的有点胆战心惊。</p>\n<p>周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。</p>\n<p>总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k 的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。</p>\n<p>其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。</p>\n<p>最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。</p>\n"},{"title":"三月总结","abbrlink":"3cf64c81","date":"2018-04-02T16:24:38.000Z","_content":"\n时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。\n\n今天看 medium，发现关于成功有个观点写的特别好。It's not a  goal, it's a lifestyle. It's not something they do sometimes. It's something they do all the time -- because it's part of who they are.\n\n反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。\n\n之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。\n\n所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.\n\nAnyway, 首先思想得转变过来，再来谈如何训练自己的习惯。\n\n四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。\n\n第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。\n\n最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。\n\n就先这样。\n","source":"_posts/march-summary.md","raw":"---\ntitle: 三月总结\ncategories:\n  - life\nabbrlink: 3cf64c81\ndate: 2018-04-02 09:24:38\ntags:\n---\n\n时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。\n\n今天看 medium，发现关于成功有个观点写的特别好。It's not a  goal, it's a lifestyle. It's not something they do sometimes. It's something they do all the time -- because it's part of who they are.\n\n反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。\n\n之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。\n\n所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.\n\nAnyway, 首先思想得转变过来，再来谈如何训练自己的习惯。\n\n四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。\n\n第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。\n\n最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。\n\n就先这样。\n","slug":"march-summary","published":1,"updated":"2021-09-14T11:40:19.905Z","_id":"cka6xu71u000l8cmhi4wlksh7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。</p>\n<p>今天看 medium，发现关于成功有个观点写的特别好。It’s not a  goal, it’s a lifestyle. It’s not something they do sometimes. It’s something they do all the time – because it’s part of who they are.</p>\n<p>反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。</p>\n<p>之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。</p>\n<p>所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.</p>\n<p>Anyway, 首先思想得转变过来，再来谈如何训练自己的习惯。</p>\n<p>四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。</p>\n<p>第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。</p>\n<p>最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。</p>\n<p>就先这样。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。</p>\n<p>今天看 medium，发现关于成功有个观点写的特别好。It’s not a  goal, it’s a lifestyle. It’s not something they do sometimes. It’s something they do all the time – because it’s part of who they are.</p>\n<p>反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。</p>\n<p>之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。</p>\n<p>所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.</p>\n<p>Anyway, 首先思想得转变过来，再来谈如何训练自己的习惯。</p>\n<p>四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。</p>\n<p>第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。</p>\n<p>最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。</p>\n<p>就先这样。</p>\n"},{"title":"新工作","abbrlink":"fe5ddefd","date":"2017-02-05T23:49:30.000Z","_content":"\n终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。\n\n新的工作还是要居安思危。从明天开始，得好好刷刷题。\n","source":"_posts/new-job.md","raw":"---\ntitle: 新工作\ncategories:\n  - life\nabbrlink: fe5ddefd\ndate: 2017-02-05 15:49:30\ntags:\n---\n\n终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。\n\n新的工作还是要居安思危。从明天开始，得好好刷刷题。\n","slug":"new-job","published":1,"updated":"2021-09-14T11:40:19.905Z","_id":"cka6xu71w000m8cmh56i2oa8i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。</p>\n<p>新的工作还是要居安思危。从明天开始，得好好刷刷题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。</p>\n<p>新的工作还是要居安思危。从明天开始，得好好刷刷题。</p>\n"},{"title":"Node.js modules","abbrlink":"c505c167","date":"2019-02-19T01:11:02.000Z","_content":"\n#### `module.exports` and `exports`\n\n`exports` is a reference to the module.exports that is shorter to type.\n\nThe `exports` variable is available within a module's file-level scope, and is assigned the value of `module.exports` before the module is evaluated.\n\nIt allows a shortcut, so that `module.exports.f = ...` can be written more succinctly as `exports.f = ...`. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to `module.exports`:\n\n```js\n// a.js\nfunction foo() {\n  console.log('foo');\n}\n\nfunction bar() {\n  console.log('bar');\n}\n\nexports.foo = foo;\nexports.bar = bar;\n\n// or\nmodule.exports = {\n  foo: foo,\n  bar: bar,\n};\n\n// This won't work! It assigned a new reference to exports variable\nexports = {\n  foo: foo,\n  bar: bar,\n};\n```\n\n#### Import\n\nWhen loaded via `import` these modules will provide a single `default` export representing the value of module.exports at the time they finished evaluating.\n\n```js\n// foo.js\nmodule.exports = { one: 1 };\n\n// bar.mjs\nimport foo from './foo.js';\nfoo.one === 1; // true\n```\n\n#### Caching\n\nModules are cached after the first time they are loaded. This means (among other things) that every call to `require('foo')` will get exactly the same object returned, if it would resolve to the same file.\n\nProvided `require.cache` is not modified, multiple calls to `require('foo')` will not cause the module code to be executed multiple times.\n\nTo have a module execute code multiple times, export a function, and call that function.\n\n##### Caveats\n\nModules are cached based on their resolved filename.\n\nCaching is case-sensitive. For example, `require('./foo')` and `require('./FOO')` return two different objects, irrespective of whether or not `./foo` and `./FOO` are the same file.\n\n#### Cycles\n\n##### why support\n\n> Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.\n>\n> -- <cite>Axel Rauschmayer</cite>\n\nI think this example from nodejs document can clearly explain cyclic dependencies. <https://nodejs.org/api/modules.html#modules_cycles>\n\n```js\n// a.js\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n\n// b.js\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n\n// main.js\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done = %j, b.done = %j', a.done, b.done);\n```\n\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`. At that point, `b.js` tries to load `a.js`. In order to prevent an **infinite loop**, an **unfinished copy** of the `a.js` exports object is returned to the `b.js` module. `b.js` then finishes loading, and its exports object is provided to the `a.js` module.\n\nThe output is\n\n```bash\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\n```\n\n#### related reading material\n\n1. nodejs document, [Modules](https://nodejs.org/api/modules.html)\n\n2. Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n","source":"_posts/node-modules.md","raw":"---\ntitle: Node.js modules\ncategories:\n  - web\ntags:\n  - nodejs\n  - modules\n  - exports\n  - javascript\nabbrlink: c505c167\ndate: 2019-02-18 17:11:02\n---\n\n#### `module.exports` and `exports`\n\n`exports` is a reference to the module.exports that is shorter to type.\n\nThe `exports` variable is available within a module's file-level scope, and is assigned the value of `module.exports` before the module is evaluated.\n\nIt allows a shortcut, so that `module.exports.f = ...` can be written more succinctly as `exports.f = ...`. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to `module.exports`:\n\n```js\n// a.js\nfunction foo() {\n  console.log('foo');\n}\n\nfunction bar() {\n  console.log('bar');\n}\n\nexports.foo = foo;\nexports.bar = bar;\n\n// or\nmodule.exports = {\n  foo: foo,\n  bar: bar,\n};\n\n// This won't work! It assigned a new reference to exports variable\nexports = {\n  foo: foo,\n  bar: bar,\n};\n```\n\n#### Import\n\nWhen loaded via `import` these modules will provide a single `default` export representing the value of module.exports at the time they finished evaluating.\n\n```js\n// foo.js\nmodule.exports = { one: 1 };\n\n// bar.mjs\nimport foo from './foo.js';\nfoo.one === 1; // true\n```\n\n#### Caching\n\nModules are cached after the first time they are loaded. This means (among other things) that every call to `require('foo')` will get exactly the same object returned, if it would resolve to the same file.\n\nProvided `require.cache` is not modified, multiple calls to `require('foo')` will not cause the module code to be executed multiple times.\n\nTo have a module execute code multiple times, export a function, and call that function.\n\n##### Caveats\n\nModules are cached based on their resolved filename.\n\nCaching is case-sensitive. For example, `require('./foo')` and `require('./FOO')` return two different objects, irrespective of whether or not `./foo` and `./FOO` are the same file.\n\n#### Cycles\n\n##### why support\n\n> Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.\n>\n> -- <cite>Axel Rauschmayer</cite>\n\nI think this example from nodejs document can clearly explain cyclic dependencies. <https://nodejs.org/api/modules.html#modules_cycles>\n\n```js\n// a.js\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n\n// b.js\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n\n// main.js\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done = %j, b.done = %j', a.done, b.done);\n```\n\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`. At that point, `b.js` tries to load `a.js`. In order to prevent an **infinite loop**, an **unfinished copy** of the `a.js` exports object is returned to the `b.js` module. `b.js` then finishes loading, and its exports object is provided to the `a.js` module.\n\nThe output is\n\n```bash\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\n```\n\n#### related reading material\n\n1. nodejs document, [Modules](https://nodejs.org/api/modules.html)\n\n2. Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n","slug":"node-modules","published":1,"updated":"2021-09-14T11:40:19.905Z","_id":"cka6xu71y000p8cmhie3hdsvx","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"module-exports-and-exports\"><a href=\"#module-exports-and-exports\" class=\"headerlink\" title=\"module.exports and exports\"></a><code>module.exports</code> and <code>exports</code></h4><p><code>exports</code> is a reference to the module.exports that is shorter to type.</p>\n<p>The <code>exports</code> variable is available within a module’s file-level scope, and is assigned the value of <code>module.exports</code> before the module is evaluated.</p>\n<p>It allows a shortcut, so that <code>module.exports.f = ...</code> can be written more succinctly as <code>exports.f = ...</code>. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to <code>module.exports</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;bar&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">foo</span> = foo;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">bar</span> = bar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: foo,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: bar,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This won&#x27;t work! It assigned a new reference to exports variable</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: foo,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: bar,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"Import\"></a>Import</h4><p>When loaded via <code>import</code> these modules will provide a single <code>default</code> export representing the value of module.exports at the time they finished evaluating.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; <span class=\"attr\">one</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bar.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./foo.js&#x27;</span>;</span><br><span class=\"line\">foo.<span class=\"property\">one</span> === <span class=\"number\">1</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h4><p>Modules are cached after the first time they are loaded. This means (among other things) that every call to <code>require(&#39;foo&#39;)</code> will get exactly the same object returned, if it would resolve to the same file.</p>\n<p>Provided <code>require.cache</code> is not modified, multiple calls to <code>require(&#39;foo&#39;)</code> will not cause the module code to be executed multiple times.</p>\n<p>To have a module execute code multiple times, export a function, and call that function.</p>\n<h5 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats\"></a>Caveats</h5><p>Modules are cached based on their resolved filename.</p>\n<p>Caching is case-sensitive. For example, <code>require(&#39;./foo&#39;)</code> and <code>require(&#39;./FOO&#39;)</code> return two different objects, irrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>\n<h4 id=\"Cycles\"><a href=\"#Cycles\" class=\"headerlink\" title=\"Cycles\"></a>Cycles</h4><h5 id=\"why-support\"><a href=\"#why-support\" class=\"headerlink\" title=\"why support\"></a>why support</h5><blockquote>\n<p>Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.</p>\n<p>– <cite>Axel Rauschmayer</cite></p>\n</blockquote>\n<p>I think this example from nodejs document can clearly explain cyclic dependencies. <a href=\"https://nodejs.org/api/modules.html#modules_cycles\">https://nodejs.org/api/modules.html#modules_cycles</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a starting&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">done</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./b.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in a, b.done = %j&#x27;</span>, b.<span class=\"property\">done</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">done</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a done&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b starting&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">done</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in b, a.done = %j&#x27;</span>, a.<span class=\"property\">done</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">done</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b done&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;main starting&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./b.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in main, a.done = %j, b.done = %j&#x27;</span>, a.<span class=\"property\">done</span>, b.<span class=\"property\">done</span>);</span><br></pre></td></tr></table></figure>\n\n<p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an <strong>infinite loop</strong>, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its exports object is provided to the <code>a.js</code> module.</p>\n<p>The output is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">main starting</span><br><span class=\"line\">a starting</span><br><span class=\"line\">b starting</span><br><span class=\"line\"><span class=\"keyword\">in</span> b, a.done = <span class=\"literal\">false</span></span><br><span class=\"line\">b <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> a, b.done = <span class=\"literal\">true</span></span><br><span class=\"line\">a <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> main, a.done = <span class=\"literal\">true</span>, b.done = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\">Modules</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\">Exploring ES6</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"module-exports-and-exports\"><a href=\"#module-exports-and-exports\" class=\"headerlink\" title=\"module.exports and exports\"></a><code>module.exports</code> and <code>exports</code></h4><p><code>exports</code> is a reference to the module.exports that is shorter to type.</p>\n<p>The <code>exports</code> variable is available within a module’s file-level scope, and is assigned the value of <code>module.exports</code> before the module is evaluated.</p>\n<p>It allows a shortcut, so that <code>module.exports.f = ...</code> can be written more succinctly as <code>exports.f = ...</code>. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to <code>module.exports</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;bar&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">foo</span> = foo;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">bar</span> = bar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: foo,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: bar,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This won&#x27;t work! It assigned a new reference to exports variable</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: foo,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: bar,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"Import\"></a>Import</h4><p>When loaded via <code>import</code> these modules will provide a single <code>default</code> export representing the value of module.exports at the time they finished evaluating.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; <span class=\"attr\">one</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bar.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./foo.js&#x27;</span>;</span><br><span class=\"line\">foo.<span class=\"property\">one</span> === <span class=\"number\">1</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h4><p>Modules are cached after the first time they are loaded. This means (among other things) that every call to <code>require(&#39;foo&#39;)</code> will get exactly the same object returned, if it would resolve to the same file.</p>\n<p>Provided <code>require.cache</code> is not modified, multiple calls to <code>require(&#39;foo&#39;)</code> will not cause the module code to be executed multiple times.</p>\n<p>To have a module execute code multiple times, export a function, and call that function.</p>\n<h5 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats\"></a>Caveats</h5><p>Modules are cached based on their resolved filename.</p>\n<p>Caching is case-sensitive. For example, <code>require(&#39;./foo&#39;)</code> and <code>require(&#39;./FOO&#39;)</code> return two different objects, irrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>\n<h4 id=\"Cycles\"><a href=\"#Cycles\" class=\"headerlink\" title=\"Cycles\"></a>Cycles</h4><h5 id=\"why-support\"><a href=\"#why-support\" class=\"headerlink\" title=\"why support\"></a>why support</h5><blockquote>\n<p>Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.</p>\n<p>– <cite>Axel Rauschmayer</cite></p>\n</blockquote>\n<p>I think this example from nodejs document can clearly explain cyclic dependencies. <a href=\"https://nodejs.org/api/modules.html#modules_cycles\">https://nodejs.org/api/modules.html#modules_cycles</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a starting&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">done</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./b.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in a, b.done = %j&#x27;</span>, b.<span class=\"property\">done</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">done</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a done&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b starting&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">done</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in b, a.done = %j&#x27;</span>, a.<span class=\"property\">done</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">done</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b done&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;main starting&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./b.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;in main, a.done = %j, b.done = %j&#x27;</span>, a.<span class=\"property\">done</span>, b.<span class=\"property\">done</span>);</span><br></pre></td></tr></table></figure>\n\n<p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an <strong>infinite loop</strong>, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its exports object is provided to the <code>a.js</code> module.</p>\n<p>The output is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">main starting</span><br><span class=\"line\">a starting</span><br><span class=\"line\">b starting</span><br><span class=\"line\"><span class=\"keyword\">in</span> b, a.done = <span class=\"literal\">false</span></span><br><span class=\"line\">b <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> a, b.done = <span class=\"literal\">true</span></span><br><span class=\"line\">a <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> main, a.done = <span class=\"literal\">true</span>, b.done = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\">Modules</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\">Exploring ES6</a></p>\n</li>\n</ol>\n"},{"title":"Iterators and generators","abbrlink":"f1b3125a","date":"2018-05-01T08:19:28.000Z","_content":"\n#### Iterators\n\nIterators are objects with a specific interface designed for iteration.\n\nIn JavaScript an iterator is an object that provides a `next()` method which returns the next item in the sequence. This method returns an object with two properties: `done` and `value`.\n\nBelow is an implementation of iterator in ES5.\n\n```js\nfunction createIterator(items) {\n  var i = 0;\n  return {\n    next: function() {\n      var done = i >= items.length;\n      var value = !done ? items[i++] : undefined;\n\n      return {\n        done: done,\n        value: value,\n      };\n    },\n  };\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { done: false, value: 1 }\nconsole.log(iterator.next()); // { done: false, value: 2 }\nconsole.log(iterator.next()); // { done: false, value: 3 }\nconsole.log(iterator.next()); // { done: true, value: undefined }\n```\n\n#### Generators\n\nA generator is a function that returns an iterator. Generator functions are indicated by an asterisk (_) after the `function` key word and use the `yield` keyword. It doesn't matter how many whitespace between `function` and `_`. On MDN, the`_`is right next to`function`, however in Zakas's book, the`_` is just before the function name.\n\nGenerators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\n\n> you can use `yield` only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.\n\n```js\n// method 1: function declaration\nfunction* createIterator1(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n}\n\n// method 2: function expression\nlet createIterator2 = function*(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n};\n\nconst iterator = createIterator2([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n> create an arrow function that is also a generator is not possible.\n\n#### Generator Object Method\n\nSince generators are just functions. You can add generators to objects.\n\n```js\n// method 1: es5 style object literal\nlet obj1 = {\n  createIterator: function*(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\n// method 2: es6 shorthand\nlet obj2 = {\n  *createIterator(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\nconst iterator = obj2.createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n#### Iterable and for-of loops\n\n`iterable protocol`: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a `for..of` construct.\n\nAn iterable is an object with a `Symbol.iterator` property.\n\nThese are iterables:\n\n- Arrays and TypedArrays\n- Maps\n- Sets\n- Strings\n- `arguments`\n- DOM Elements `NodeList`\n\n> All iterators created by generators are also iterables, because generators assign the `Symbol.iterator` property by default.\n\n##### Accessing the default Iterator\n\n```js\nlet values = [1, 2, 3];\n\n// same process happens behind the scene when using for-of loop\nlet iterator = values[Symbol.iterator]();\n\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\n\n// check\nfunction isIterable(object) {\n  return typeof object[Symbol.iterator] === 'function';\n}\n\nconsole.log(isIterable([1, 2, 3])); // true\nconsole.log(isIterable('Hello')); // true\nconsole.log(isIterable(new Map())); // true\nconsole.log(isIterable(new Set())); // true\nconsole.log(isIterable(new WeakMap())); // false\nconsole.log(isIterable(new WeakSet())); // false\n```\n\n#### Creating Iterator\n\n```js\nlet collection = {\n  items: [],\n  *[Symbol.iterator]() {\n    for (let item of this.items) {\n      yield item;\n    }\n  },\n};\n\ncollection.items.push(1);\ncollection.items.push(2);\ncollection.items.push(3);\n\nfor (let x of collection) {\n  console.log(x);\n}\n\n// 1\n// 2\n// 3\n```\n\n#### Built-in Iterators\n\n#### collection iterators\n\n- `entries()`\n- `values()`\n- `keys()`\n\n##### `entries()`\n\n- array: [index, value]\n- set: [value, value]\n- map: [key, value]\n\n##### `values()`\n\n- array: value\n- set: value\n- map: value\n\n##### `keys()`\n\n- array: index\n- set: value\n- map: key\n\n#### Default Iterators for Collection Types\n\n- array: `values()`\n- set: `values()`\n- map: `entries()`\n\n```js\n// destructuring and for-of loop\nlet data = new Map();\n\ndata.set('title', 'Understanding ECMAScript 6');\ndata.set('format', 'ebook');\n\n// same as using data.entries()\nfor (let [key, value] of data) {\n  console.log(key + '=' + value);\n}\n```\n\n- NodeList\n\n```js\nvar divs = document.getElementsByTagName('div');\n\nfor (let div of divs) {\n  console.log(div.id);\n}\n```\n\n#### Constructs accept iterables\n\nSome other constructs in JS that use iterables are:\n\n- `for-of`\n- Destructuring of Arrays\n- The spread operator (`…`)\n- `Promise.all` and `Promise.race` accept iterables over Promises.\n- Maps and Sets\n\n```js\nconst map = new Map([[1, 'one'], [2, 'two']]);\nmap.get(1)\n// one\nconst set = new Set(['a', 'b', 'c]);\nset.has('c');\n// true\n```\n\n#### Advanced Iterator Functionality\n\n##### passing arguments to Iterators\n\nThe `next()` method also accepts a value which can be used to modify the internal state of the generator. A value passed to `next()` will be treated as the result of the last yield expression that paused the generator.\n\n```js\nfunction* createIterator() {\n  let first = yield 1;\n  let second = yield first + 2; // 4 + 2\n  yield second + 3; // 5 + 3\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next(4)); // \"{ value: 6, done: false }\"\nconsole.log(iterator.next(5)); // \"{ value: 8, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n#### Throw and Return\n\n- throw\n\nResume the execution of a generator by throwing an error into it and returns an object with two properties done and value.\n\n```js\nfunction* gen() {\n  while (true) {\n    try {\n      yield 42;\n    } catch (e) {\n      console.log('Error caught!');\n    }\n  }\n}\n\nvar g = gen();\ng.next();\n// { value: 42, done: false }\ng.throw(new Error('Something went wrong'));\n// \"Error caught!\"\n// { value: 42, done: false }\n```\n\n- return\n\nReturn the given value and finishes the generator.\n\n```js\nfunction* createIterator() {\n  yield 1;\n  return;\n  yield 2;\n  yield 3;\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n#### Delegating generators\n\n```js\nfunction* g1() {\n  yield 1;\n  yield 2;\n}\n\nfunction* g2() {\n  yield 0;\n  yield* g1();\n  yield* [3, 4];\n  yield* '56';\n  yield* Array.from(arguments);\n}\n\nvar iterator = g2(7, 8);\n\nconsole.log(iterator.next()); // {value: 0, done: false}\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: 4, done: false}\nconsole.log(iterator.next()); // {value: '5', done: false}\nconsole.log(iterator.next()); // {value: '6', done: false}\nconsole.log(iterator.next()); // {value: 7, done: false}\nconsole.log(iterator.next()); // {value: 8, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```\n\n`yield*` is an expression, not a statement, so it evaluates to a value.\n\n```js\nfunction* g4() {\n  yield* [1, 2, 3];\n  return 'foo';\n}\n\nvar result;\n\nfunction* g5() {\n  result = yield* g4();\n}\n\nvar iterator = g5();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true},\n// g4() returned {value: 'foo', done: true} at this point\n\nconsole.log(result); // \"foo\"\n```\n\n#### Asynchronous Task Running\n\n##### tradition callback\n\n```js\nlet fs = require('fs');\n\nfs.readFile('config.json', function(err, contents) {\n  if (err) {\n    throw err;\n  }\n\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n#### Asynchronous task runner\n\n```js\nfunction run(taskDef) {\n  // create the iterator, make available elsewhere\n  let task = taskDef();\n\n  // start the task\n  let result = task.next();\n\n  // recursive function to keep calling next()\n  function step() {\n    // if there's more to do\n    if (!result.done) {\n      if (typeof result.value === 'function') {\n        result.value(function(err, data) {\n          if (err) {\n            result = task.throw(err);\n            return;\n          }\n\n          result = task.next(data);\n          step();\n        });\n      } else {\n        result = task.next(result.value);\n        step();\n      }\n    }\n  }\n\n  // start the process\n  step();\n}\n\nlet fs = require('fs');\n\nfunction readFile(filename) {\n  return function(callback) {\n    fs.readFile(filename, callback);\n  };\n}\n\nrun(function*() {\n  let contents = yield readFile('config.json');\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n#### Pros and Cons\n\nPros:\n\n- Lazy Evaluation: It is calculated as we demand it;\n- Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.\n\nCons:\n\n- Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.\n- Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.\n\n#### Related Reading\n\n1.  Nicholas C. Zakas, [Iterators and Generators](https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators)\n\n2.  Axel Rauschmayer, [Iterables and iterators](http://exploringjs.com/es6/ch_iteration.html)\n\n3.  Axel Rauschmayer, [Generators](http://exploringjs.com/es6/ch_generators.html)\n\n4.  Brandon Morelli, [A Simple Guide to ES6 Iterators in JavaScript with Examples](https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e)\n\n5.  Arfat Salman, [Understanding Generators in ES6 JavaScript with Examples](https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5)\n\n6.  MDN, [Iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n\n7.  MDN, [Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n","source":"_posts/Iterators-and-generators.md","raw":"---\ntitle: Iterators and generators\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - iterators\n  - generators\nabbrlink: f1b3125a\ndate: 2018-05-01 01:19:28\n---\n\n#### Iterators\n\nIterators are objects with a specific interface designed for iteration.\n\nIn JavaScript an iterator is an object that provides a `next()` method which returns the next item in the sequence. This method returns an object with two properties: `done` and `value`.\n\nBelow is an implementation of iterator in ES5.\n\n```js\nfunction createIterator(items) {\n  var i = 0;\n  return {\n    next: function() {\n      var done = i >= items.length;\n      var value = !done ? items[i++] : undefined;\n\n      return {\n        done: done,\n        value: value,\n      };\n    },\n  };\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { done: false, value: 1 }\nconsole.log(iterator.next()); // { done: false, value: 2 }\nconsole.log(iterator.next()); // { done: false, value: 3 }\nconsole.log(iterator.next()); // { done: true, value: undefined }\n```\n\n#### Generators\n\nA generator is a function that returns an iterator. Generator functions are indicated by an asterisk (_) after the `function` key word and use the `yield` keyword. It doesn't matter how many whitespace between `function` and `_`. On MDN, the`_`is right next to`function`, however in Zakas's book, the`_` is just before the function name.\n\nGenerators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\n\n> you can use `yield` only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.\n\n```js\n// method 1: function declaration\nfunction* createIterator1(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n}\n\n// method 2: function expression\nlet createIterator2 = function*(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n};\n\nconst iterator = createIterator2([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n> create an arrow function that is also a generator is not possible.\n\n#### Generator Object Method\n\nSince generators are just functions. You can add generators to objects.\n\n```js\n// method 1: es5 style object literal\nlet obj1 = {\n  createIterator: function*(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\n// method 2: es6 shorthand\nlet obj2 = {\n  *createIterator(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\nconst iterator = obj2.createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n#### Iterable and for-of loops\n\n`iterable protocol`: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a `for..of` construct.\n\nAn iterable is an object with a `Symbol.iterator` property.\n\nThese are iterables:\n\n- Arrays and TypedArrays\n- Maps\n- Sets\n- Strings\n- `arguments`\n- DOM Elements `NodeList`\n\n> All iterators created by generators are also iterables, because generators assign the `Symbol.iterator` property by default.\n\n##### Accessing the default Iterator\n\n```js\nlet values = [1, 2, 3];\n\n// same process happens behind the scene when using for-of loop\nlet iterator = values[Symbol.iterator]();\n\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\n\n// check\nfunction isIterable(object) {\n  return typeof object[Symbol.iterator] === 'function';\n}\n\nconsole.log(isIterable([1, 2, 3])); // true\nconsole.log(isIterable('Hello')); // true\nconsole.log(isIterable(new Map())); // true\nconsole.log(isIterable(new Set())); // true\nconsole.log(isIterable(new WeakMap())); // false\nconsole.log(isIterable(new WeakSet())); // false\n```\n\n#### Creating Iterator\n\n```js\nlet collection = {\n  items: [],\n  *[Symbol.iterator]() {\n    for (let item of this.items) {\n      yield item;\n    }\n  },\n};\n\ncollection.items.push(1);\ncollection.items.push(2);\ncollection.items.push(3);\n\nfor (let x of collection) {\n  console.log(x);\n}\n\n// 1\n// 2\n// 3\n```\n\n#### Built-in Iterators\n\n#### collection iterators\n\n- `entries()`\n- `values()`\n- `keys()`\n\n##### `entries()`\n\n- array: [index, value]\n- set: [value, value]\n- map: [key, value]\n\n##### `values()`\n\n- array: value\n- set: value\n- map: value\n\n##### `keys()`\n\n- array: index\n- set: value\n- map: key\n\n#### Default Iterators for Collection Types\n\n- array: `values()`\n- set: `values()`\n- map: `entries()`\n\n```js\n// destructuring and for-of loop\nlet data = new Map();\n\ndata.set('title', 'Understanding ECMAScript 6');\ndata.set('format', 'ebook');\n\n// same as using data.entries()\nfor (let [key, value] of data) {\n  console.log(key + '=' + value);\n}\n```\n\n- NodeList\n\n```js\nvar divs = document.getElementsByTagName('div');\n\nfor (let div of divs) {\n  console.log(div.id);\n}\n```\n\n#### Constructs accept iterables\n\nSome other constructs in JS that use iterables are:\n\n- `for-of`\n- Destructuring of Arrays\n- The spread operator (`…`)\n- `Promise.all` and `Promise.race` accept iterables over Promises.\n- Maps and Sets\n\n```js\nconst map = new Map([[1, 'one'], [2, 'two']]);\nmap.get(1)\n// one\nconst set = new Set(['a', 'b', 'c]);\nset.has('c');\n// true\n```\n\n#### Advanced Iterator Functionality\n\n##### passing arguments to Iterators\n\nThe `next()` method also accepts a value which can be used to modify the internal state of the generator. A value passed to `next()` will be treated as the result of the last yield expression that paused the generator.\n\n```js\nfunction* createIterator() {\n  let first = yield 1;\n  let second = yield first + 2; // 4 + 2\n  yield second + 3; // 5 + 3\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next(4)); // \"{ value: 6, done: false }\"\nconsole.log(iterator.next(5)); // \"{ value: 8, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n#### Throw and Return\n\n- throw\n\nResume the execution of a generator by throwing an error into it and returns an object with two properties done and value.\n\n```js\nfunction* gen() {\n  while (true) {\n    try {\n      yield 42;\n    } catch (e) {\n      console.log('Error caught!');\n    }\n  }\n}\n\nvar g = gen();\ng.next();\n// { value: 42, done: false }\ng.throw(new Error('Something went wrong'));\n// \"Error caught!\"\n// { value: 42, done: false }\n```\n\n- return\n\nReturn the given value and finishes the generator.\n\n```js\nfunction* createIterator() {\n  yield 1;\n  return;\n  yield 2;\n  yield 3;\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n#### Delegating generators\n\n```js\nfunction* g1() {\n  yield 1;\n  yield 2;\n}\n\nfunction* g2() {\n  yield 0;\n  yield* g1();\n  yield* [3, 4];\n  yield* '56';\n  yield* Array.from(arguments);\n}\n\nvar iterator = g2(7, 8);\n\nconsole.log(iterator.next()); // {value: 0, done: false}\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: 4, done: false}\nconsole.log(iterator.next()); // {value: '5', done: false}\nconsole.log(iterator.next()); // {value: '6', done: false}\nconsole.log(iterator.next()); // {value: 7, done: false}\nconsole.log(iterator.next()); // {value: 8, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```\n\n`yield*` is an expression, not a statement, so it evaluates to a value.\n\n```js\nfunction* g4() {\n  yield* [1, 2, 3];\n  return 'foo';\n}\n\nvar result;\n\nfunction* g5() {\n  result = yield* g4();\n}\n\nvar iterator = g5();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true},\n// g4() returned {value: 'foo', done: true} at this point\n\nconsole.log(result); // \"foo\"\n```\n\n#### Asynchronous Task Running\n\n##### tradition callback\n\n```js\nlet fs = require('fs');\n\nfs.readFile('config.json', function(err, contents) {\n  if (err) {\n    throw err;\n  }\n\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n#### Asynchronous task runner\n\n```js\nfunction run(taskDef) {\n  // create the iterator, make available elsewhere\n  let task = taskDef();\n\n  // start the task\n  let result = task.next();\n\n  // recursive function to keep calling next()\n  function step() {\n    // if there's more to do\n    if (!result.done) {\n      if (typeof result.value === 'function') {\n        result.value(function(err, data) {\n          if (err) {\n            result = task.throw(err);\n            return;\n          }\n\n          result = task.next(data);\n          step();\n        });\n      } else {\n        result = task.next(result.value);\n        step();\n      }\n    }\n  }\n\n  // start the process\n  step();\n}\n\nlet fs = require('fs');\n\nfunction readFile(filename) {\n  return function(callback) {\n    fs.readFile(filename, callback);\n  };\n}\n\nrun(function*() {\n  let contents = yield readFile('config.json');\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n#### Pros and Cons\n\nPros:\n\n- Lazy Evaluation: It is calculated as we demand it;\n- Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.\n\nCons:\n\n- Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.\n- Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.\n\n#### Related Reading\n\n1.  Nicholas C. Zakas, [Iterators and Generators](https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators)\n\n2.  Axel Rauschmayer, [Iterables and iterators](http://exploringjs.com/es6/ch_iteration.html)\n\n3.  Axel Rauschmayer, [Generators](http://exploringjs.com/es6/ch_generators.html)\n\n4.  Brandon Morelli, [A Simple Guide to ES6 Iterators in JavaScript with Examples](https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e)\n\n5.  Arfat Salman, [Understanding Generators in ES6 JavaScript with Examples](https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5)\n\n6.  MDN, [Iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n\n7.  MDN, [Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n","slug":"Iterators-and-generators","published":1,"updated":"2021-09-14T11:40:19.903Z","_id":"cka6xu71z000q8cmhgb6in46l","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Iterators\"><a href=\"#Iterators\" class=\"headerlink\" title=\"Iterators\"></a>Iterators</h4><p>Iterators are objects with a specific interface designed for iteration.</p>\n<p>In JavaScript an iterator is an object that provides a <code>next()</code> method which returns the next item in the sequence. This method returns an object with two properties: <code>done</code> and <code>value</code>.</p>\n<p>Below is an implementation of iterator in ES5.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createIterator</span>(<span class=\"params\">items</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> done = i &gt;= items.<span class=\"property\">length</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = !done ? items[i++] : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">done</span>: done,</span><br><span class=\"line\">        <span class=\"attr\">value</span>: value,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = <span class=\"title function_\">createIterator</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; done: false, value: 1 &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; done: false, value: 2 &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; done: false, value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h4><p>A generator is a function that returns an iterator. Generator functions are indicated by an asterisk (_) after the <code>function</code> key word and use the <code>yield</code> keyword. It doesn’t matter how many whitespace between <code>function</code> and <code>_</code>. On MDN, the<code>_</code>is right next to<code>function</code>, however in Zakas’s book, the<code>_</code> is just before the function name.</p>\n<p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p>\n<blockquote>\n<p>you can use <code>yield</code> only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: function declaration</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">createIterator1</span>(<span class=\"params\">items</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: function expression</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createIterator2 = <span class=\"keyword\">function</span>*(items) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = <span class=\"title function_\">createIterator2</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>create an arrow function that is also a generator is not possible.</p>\n</blockquote>\n<h4 id=\"Generator-Object-Method\"><a href=\"#Generator-Object-Method\" class=\"headerlink\" title=\"Generator Object Method\"></a>Generator Object Method</h4><p>Since generators are just functions. You can add generators to objects.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: es5 style object literal</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">createIterator</span>: <span class=\"keyword\">function</span>*(items) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: es6 shorthand</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  *<span class=\"title function_\">createIterator</span>(<span class=\"params\">items</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = obj2.<span class=\"title function_\">createIterator</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Iterable-and-for-of-loops\"><a href=\"#Iterable-and-for-of-loops\" class=\"headerlink\" title=\"Iterable and for-of loops\"></a>Iterable and for-of loops</h4><p><code>iterable protocol</code>: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a <code>for..of</code> construct.</p>\n<p>An iterable is an object with a <code>Symbol.iterator</code> property.</p>\n<p>These are iterables:</p>\n<ul>\n<li>Arrays and TypedArrays</li>\n<li>Maps</li>\n<li>Sets</li>\n<li>Strings</li>\n<li><code>arguments</code></li>\n<li>DOM Elements <code>NodeList</code></li>\n</ul>\n<blockquote>\n<p>All iterators created by generators are also iterables, because generators assign the <code>Symbol.iterator</code> property by default.</p>\n</blockquote>\n<h5 id=\"Accessing-the-default-Iterator\"><a href=\"#Accessing-the-default-Iterator\" class=\"headerlink\" title=\"Accessing the default Iterator\"></a>Accessing the default Iterator</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same process happens behind the scene when using for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = values[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isIterable</span>(<span class=\"params\">object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> object[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] === <span class=\"string\">&#x27;function&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isIterable</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isIterable</span>(<span class=\"string\">&#x27;Hello&#x27;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isIterable</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isIterable</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isIterable</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">WeakMap</span>())); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isIterable</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">WeakSet</span>())); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Creating-Iterator\"><a href=\"#Creating-Iterator\" class=\"headerlink\" title=\"Creating Iterator\"></a>Creating Iterator</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> collection = &#123;</span><br><span class=\"line\">  <span class=\"attr\">items</span>: [],</span><br><span class=\"line\">  *[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">collection.<span class=\"property\">items</span>.<span class=\"title function_\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">collection.<span class=\"property\">items</span>.<span class=\"title function_\">push</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">collection.<span class=\"property\">items</span>.<span class=\"title function_\">push</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> collection) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Built-in-Iterators\"><a href=\"#Built-in-Iterators\" class=\"headerlink\" title=\"Built-in Iterators\"></a>Built-in Iterators</h4><h4 id=\"collection-iterators\"><a href=\"#collection-iterators\" class=\"headerlink\" title=\"collection iterators\"></a>collection iterators</h4><ul>\n<li><code>entries()</code></li>\n<li><code>values()</code></li>\n<li><code>keys()</code></li>\n</ul>\n<h5 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a><code>entries()</code></h5><ul>\n<li>array: [index, value]</li>\n<li>set: [value, value]</li>\n<li>map: [key, value]</li>\n</ul>\n<h5 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a><code>values()</code></h5><ul>\n<li>array: value</li>\n<li>set: value</li>\n<li>map: value</li>\n</ul>\n<h5 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a><code>keys()</code></h5><ul>\n<li>array: index</li>\n<li>set: value</li>\n<li>map: key</li>\n</ul>\n<h4 id=\"Default-Iterators-for-Collection-Types\"><a href=\"#Default-Iterators-for-Collection-Types\" class=\"headerlink\" title=\"Default Iterators for Collection Types\"></a>Default Iterators for Collection Types</h4><ul>\n<li>array: <code>values()</code></li>\n<li>set: <code>values()</code></li>\n<li>map: <code>entries()</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// destructuring and for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">data.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;Understanding ECMAScript 6&#x27;</span>);</span><br><span class=\"line\">data.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;format&#x27;</span>, <span class=\"string\">&#x27;ebook&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same as using data.entries()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key + <span class=\"string\">&#x27;=&#x27;</span> + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NodeList</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> div <span class=\"keyword\">of</span> divs) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">id</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Constructs-accept-iterables\"><a href=\"#Constructs-accept-iterables\" class=\"headerlink\" title=\"Constructs accept iterables\"></a>Constructs accept iterables</h4><p>Some other constructs in JS that use iterables are:</p>\n<ul>\n<li><code>for-of</code></li>\n<li>Destructuring of Arrays</li>\n<li>The spread operator (<code>…</code>)</li>\n<li><code>Promise.all</code> and <code>Promise.race</code> accept iterables over Promises.</li>\n<li>Maps and Sets</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">&#x27;one&#x27;</span>], [<span class=\"number\">2</span>, <span class=\"string\">&#x27;two&#x27;</span>]]);</span><br><span class=\"line\">map.<span class=\"title function_\">get</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c]);</span></span><br><span class=\"line\"><span class=\"string\">set.has(&#x27;</span>c<span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Advanced-Iterator-Functionality\"><a href=\"#Advanced-Iterator-Functionality\" class=\"headerlink\" title=\"Advanced Iterator Functionality\"></a>Advanced Iterator Functionality</h4><h5 id=\"passing-arguments-to-Iterators\"><a href=\"#passing-arguments-to-Iterators\" class=\"headerlink\" title=\"passing arguments to Iterators\"></a>passing arguments to Iterators</h5><p>The <code>next()</code> method also accepts a value which can be used to modify the internal state of the generator. A value passed to <code>next()</code> will be treated as the result of the last yield expression that paused the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">createIterator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> second = <span class=\"keyword\">yield</span> first + <span class=\"number\">2</span>; <span class=\"comment\">// 4 + 2</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> second + <span class=\"number\">3</span>; <span class=\"comment\">// 5 + 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = <span class=\"title function_\">createIterator</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &quot;&#123; value: 1, done: false &#125;&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>(<span class=\"number\">4</span>)); <span class=\"comment\">// &quot;&#123; value: 6, done: false &#125;&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>(<span class=\"number\">5</span>)); <span class=\"comment\">// &quot;&#123; value: 8, done: false &#125;&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &quot;&#123; value: undefined, done: true &#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Throw-and-Return\"><a href=\"#Throw-and-Return\" class=\"headerlink\" title=\"Throw and Return\"></a>Throw and Return</h4><ul>\n<li>throw</li>\n</ul>\n<p>Resume the execution of a generator by throwing an error into it and returns an object with two properties done and value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">gen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error caught!&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\">g.<span class=\"title function_\">next</span>();</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br><span class=\"line\">g.<span class=\"keyword\">throw</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Something went wrong&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">// &quot;Error caught!&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>return</li>\n</ul>\n<p>Return the given value and finishes the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">createIterator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = <span class=\"title function_\">createIterator</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &quot;&#123; value: 1, done: false &#125;&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &quot;&#123; value: undefined, done: true &#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Delegating-generators\"><a href=\"#Delegating-generators\" class=\"headerlink\" title=\"Delegating generators\"></a>Delegating generators</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"title function_\">g1</span>();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"string\">&#x27;56&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = <span class=\"title function_\">g2</span>(<span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 4, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: &#x27;5&#x27;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: &#x27;6&#x27;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 7, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 8, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>yield*</code> is an expression, not a statement, so it evaluates to a value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g4</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g5</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  result = <span class=\"keyword\">yield</span>* <span class=\"title function_\">g4</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = <span class=\"title function_\">g5</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// g4() returned &#123;value: &#x27;foo&#x27;, done: true&#125; at this point</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Asynchronous-Task-Running\"><a href=\"#Asynchronous-Task-Running\" class=\"headerlink\" title=\"Asynchronous Task Running\"></a>Asynchronous Task Running</h4><h5 id=\"tradition-callback\"><a href=\"#tradition-callback\" class=\"headerlink\" title=\"tradition callback\"></a>tradition callback</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;config.json&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">doSomethingWith</span>(contents);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Done&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Asynchronous-task-runner\"><a href=\"#Asynchronous-task-runner\" class=\"headerlink\" title=\"Asynchronous task runner\"></a>Asynchronous task runner</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">taskDef</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// create the iterator, make available elsewhere</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> task = <span class=\"title function_\">taskDef</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the task</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = task.<span class=\"title function_\">next</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// recursive function to keep calling next()</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">step</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// if there&#x27;s more to do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result.<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result.<span class=\"property\">value</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        result.<span class=\"title function_\">value</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            result = task.<span class=\"keyword\">throw</span>(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          result = task.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">          <span class=\"title function_\">step</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = task.<span class=\"title function_\">next</span>(result.<span class=\"property\">value</span>);</span><br><span class=\"line\">        <span class=\"title function_\">step</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the process</span></span><br><span class=\"line\">  <span class=\"title function_\">step</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">readFile</span>(<span class=\"params\">filename</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFile</span>(filename, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">run</span>(<span class=\"keyword\">function</span>*() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> contents = <span class=\"keyword\">yield</span> <span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;config.json&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">doSomethingWith</span>(contents);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Done&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h4><p>Pros:</p>\n<ul>\n<li>Lazy Evaluation: It is calculated as we demand it;</li>\n<li>Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.</li>\n<li>Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.</li>\n</ul>\n<h4 id=\"Related-Reading\"><a href=\"#Related-Reading\" class=\"headerlink\" title=\"Related Reading\"></a>Related Reading</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators\">Iterators and Generators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_iteration.html\">Iterables and iterators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_generators.html\">Generators</a></p>\n</li>\n<li><p>Brandon Morelli, <a href=\"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e\">A Simple Guide to ES6 Iterators in JavaScript with Examples</a></p>\n</li>\n<li><p>Arfat Salman, <a href=\"https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5\">Understanding Generators in ES6 JavaScript with Examples</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\">Iterators and generators</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\">Iteration protocols</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Iterators\"><a href=\"#Iterators\" class=\"headerlink\" title=\"Iterators\"></a>Iterators</h4><p>Iterators are objects with a specific interface designed for iteration.</p>\n<p>In JavaScript an iterator is an object that provides a <code>next()</code> method which returns the next item in the sequence. This method returns an object with two properties: <code>done</code> and <code>value</code>.</p>\n<p>Below is an implementation of iterator in ES5.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createIterator</span>(<span class=\"params\">items</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> done = i &gt;= items.<span class=\"property\">length</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = !done ? items[i++] : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">done</span>: done,</span><br><span class=\"line\">        <span class=\"attr\">value</span>: value,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = <span class=\"title function_\">createIterator</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; done: false, value: 1 &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; done: false, value: 2 &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; done: false, value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h4><p>A generator is a function that returns an iterator. Generator functions are indicated by an asterisk (_) after the <code>function</code> key word and use the <code>yield</code> keyword. It doesn’t matter how many whitespace between <code>function</code> and <code>_</code>. On MDN, the<code>_</code>is right next to<code>function</code>, however in Zakas’s book, the<code>_</code> is just before the function name.</p>\n<p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p>\n<blockquote>\n<p>you can use <code>yield</code> only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: function declaration</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">createIterator1</span>(<span class=\"params\">items</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: function expression</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createIterator2 = <span class=\"keyword\">function</span>*(items) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = <span class=\"title function_\">createIterator2</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>create an arrow function that is also a generator is not possible.</p>\n</blockquote>\n<h4 id=\"Generator-Object-Method\"><a href=\"#Generator-Object-Method\" class=\"headerlink\" title=\"Generator Object Method\"></a>Generator Object Method</h4><p>Since generators are just functions. You can add generators to objects.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: es5 style object literal</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">createIterator</span>: <span class=\"keyword\">function</span>*(items) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: es6 shorthand</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  *<span class=\"title function_\">createIterator</span>(<span class=\"params\">items</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = obj2.<span class=\"title function_\">createIterator</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Iterable-and-for-of-loops\"><a href=\"#Iterable-and-for-of-loops\" class=\"headerlink\" title=\"Iterable and for-of loops\"></a>Iterable and for-of loops</h4><p><code>iterable protocol</code>: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a <code>for..of</code> construct.</p>\n<p>An iterable is an object with a <code>Symbol.iterator</code> property.</p>\n<p>These are iterables:</p>\n<ul>\n<li>Arrays and TypedArrays</li>\n<li>Maps</li>\n<li>Sets</li>\n<li>Strings</li>\n<li><code>arguments</code></li>\n<li>DOM Elements <code>NodeList</code></li>\n</ul>\n<blockquote>\n<p>All iterators created by generators are also iterables, because generators assign the <code>Symbol.iterator</code> property by default.</p>\n</blockquote>\n<h5 id=\"Accessing-the-default-Iterator\"><a href=\"#Accessing-the-default-Iterator\" class=\"headerlink\" title=\"Accessing the default Iterator\"></a>Accessing the default Iterator</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same process happens behind the scene when using for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = values[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isIterable</span>(<span class=\"params\">object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> object[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] === <span class=\"string\">&#x27;function&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isIterable</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isIterable</span>(<span class=\"string\">&#x27;Hello&#x27;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isIterable</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isIterable</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isIterable</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">WeakMap</span>())); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isIterable</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">WeakSet</span>())); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Creating-Iterator\"><a href=\"#Creating-Iterator\" class=\"headerlink\" title=\"Creating Iterator\"></a>Creating Iterator</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> collection = &#123;</span><br><span class=\"line\">  <span class=\"attr\">items</span>: [],</span><br><span class=\"line\">  *[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">collection.<span class=\"property\">items</span>.<span class=\"title function_\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">collection.<span class=\"property\">items</span>.<span class=\"title function_\">push</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">collection.<span class=\"property\">items</span>.<span class=\"title function_\">push</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> collection) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Built-in-Iterators\"><a href=\"#Built-in-Iterators\" class=\"headerlink\" title=\"Built-in Iterators\"></a>Built-in Iterators</h4><h4 id=\"collection-iterators\"><a href=\"#collection-iterators\" class=\"headerlink\" title=\"collection iterators\"></a>collection iterators</h4><ul>\n<li><code>entries()</code></li>\n<li><code>values()</code></li>\n<li><code>keys()</code></li>\n</ul>\n<h5 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a><code>entries()</code></h5><ul>\n<li>array: [index, value]</li>\n<li>set: [value, value]</li>\n<li>map: [key, value]</li>\n</ul>\n<h5 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a><code>values()</code></h5><ul>\n<li>array: value</li>\n<li>set: value</li>\n<li>map: value</li>\n</ul>\n<h5 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a><code>keys()</code></h5><ul>\n<li>array: index</li>\n<li>set: value</li>\n<li>map: key</li>\n</ul>\n<h4 id=\"Default-Iterators-for-Collection-Types\"><a href=\"#Default-Iterators-for-Collection-Types\" class=\"headerlink\" title=\"Default Iterators for Collection Types\"></a>Default Iterators for Collection Types</h4><ul>\n<li>array: <code>values()</code></li>\n<li>set: <code>values()</code></li>\n<li>map: <code>entries()</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// destructuring and for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">data.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;Understanding ECMAScript 6&#x27;</span>);</span><br><span class=\"line\">data.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;format&#x27;</span>, <span class=\"string\">&#x27;ebook&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same as using data.entries()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key + <span class=\"string\">&#x27;=&#x27;</span> + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NodeList</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> div <span class=\"keyword\">of</span> divs) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">id</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Constructs-accept-iterables\"><a href=\"#Constructs-accept-iterables\" class=\"headerlink\" title=\"Constructs accept iterables\"></a>Constructs accept iterables</h4><p>Some other constructs in JS that use iterables are:</p>\n<ul>\n<li><code>for-of</code></li>\n<li>Destructuring of Arrays</li>\n<li>The spread operator (<code>…</code>)</li>\n<li><code>Promise.all</code> and <code>Promise.race</code> accept iterables over Promises.</li>\n<li>Maps and Sets</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">&#x27;one&#x27;</span>], [<span class=\"number\">2</span>, <span class=\"string\">&#x27;two&#x27;</span>]]);</span><br><span class=\"line\">map.<span class=\"title function_\">get</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c]);</span></span><br><span class=\"line\"><span class=\"string\">set.has(&#x27;</span>c<span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Advanced-Iterator-Functionality\"><a href=\"#Advanced-Iterator-Functionality\" class=\"headerlink\" title=\"Advanced Iterator Functionality\"></a>Advanced Iterator Functionality</h4><h5 id=\"passing-arguments-to-Iterators\"><a href=\"#passing-arguments-to-Iterators\" class=\"headerlink\" title=\"passing arguments to Iterators\"></a>passing arguments to Iterators</h5><p>The <code>next()</code> method also accepts a value which can be used to modify the internal state of the generator. A value passed to <code>next()</code> will be treated as the result of the last yield expression that paused the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">createIterator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> second = <span class=\"keyword\">yield</span> first + <span class=\"number\">2</span>; <span class=\"comment\">// 4 + 2</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> second + <span class=\"number\">3</span>; <span class=\"comment\">// 5 + 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = <span class=\"title function_\">createIterator</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &quot;&#123; value: 1, done: false &#125;&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>(<span class=\"number\">4</span>)); <span class=\"comment\">// &quot;&#123; value: 6, done: false &#125;&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>(<span class=\"number\">5</span>)); <span class=\"comment\">// &quot;&#123; value: 8, done: false &#125;&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &quot;&#123; value: undefined, done: true &#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Throw-and-Return\"><a href=\"#Throw-and-Return\" class=\"headerlink\" title=\"Throw and Return\"></a>Throw and Return</h4><ul>\n<li>throw</li>\n</ul>\n<p>Resume the execution of a generator by throwing an error into it and returns an object with two properties done and value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">gen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error caught!&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\">g.<span class=\"title function_\">next</span>();</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br><span class=\"line\">g.<span class=\"keyword\">throw</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Something went wrong&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">// &quot;Error caught!&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>return</li>\n</ul>\n<p>Return the given value and finishes the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">createIterator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = <span class=\"title function_\">createIterator</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &quot;&#123; value: 1, done: false &#125;&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &quot;&#123; value: undefined, done: true &#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Delegating-generators\"><a href=\"#Delegating-generators\" class=\"headerlink\" title=\"Delegating generators\"></a>Delegating generators</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"title function_\">g1</span>();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"string\">&#x27;56&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = <span class=\"title function_\">g2</span>(<span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 4, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: &#x27;5&#x27;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: &#x27;6&#x27;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 7, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 8, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>yield*</code> is an expression, not a statement, so it evaluates to a value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g4</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g5</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  result = <span class=\"keyword\">yield</span>* <span class=\"title function_\">g4</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = <span class=\"title function_\">g5</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// g4() returned &#123;value: &#x27;foo&#x27;, done: true&#125; at this point</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Asynchronous-Task-Running\"><a href=\"#Asynchronous-Task-Running\" class=\"headerlink\" title=\"Asynchronous Task Running\"></a>Asynchronous Task Running</h4><h5 id=\"tradition-callback\"><a href=\"#tradition-callback\" class=\"headerlink\" title=\"tradition callback\"></a>tradition callback</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;config.json&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">doSomethingWith</span>(contents);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Done&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Asynchronous-task-runner\"><a href=\"#Asynchronous-task-runner\" class=\"headerlink\" title=\"Asynchronous task runner\"></a>Asynchronous task runner</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">taskDef</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// create the iterator, make available elsewhere</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> task = <span class=\"title function_\">taskDef</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the task</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = task.<span class=\"title function_\">next</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// recursive function to keep calling next()</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">step</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// if there&#x27;s more to do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result.<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result.<span class=\"property\">value</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        result.<span class=\"title function_\">value</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            result = task.<span class=\"keyword\">throw</span>(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          result = task.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">          <span class=\"title function_\">step</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = task.<span class=\"title function_\">next</span>(result.<span class=\"property\">value</span>);</span><br><span class=\"line\">        <span class=\"title function_\">step</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the process</span></span><br><span class=\"line\">  <span class=\"title function_\">step</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">readFile</span>(<span class=\"params\">filename</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFile</span>(filename, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">run</span>(<span class=\"keyword\">function</span>*() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> contents = <span class=\"keyword\">yield</span> <span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;config.json&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">doSomethingWith</span>(contents);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Done&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h4><p>Pros:</p>\n<ul>\n<li>Lazy Evaluation: It is calculated as we demand it;</li>\n<li>Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.</li>\n<li>Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.</li>\n</ul>\n<h4 id=\"Related-Reading\"><a href=\"#Related-Reading\" class=\"headerlink\" title=\"Related Reading\"></a>Related Reading</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators\">Iterators and Generators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_iteration.html\">Iterables and iterators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_generators.html\">Generators</a></p>\n</li>\n<li><p>Brandon Morelli, <a href=\"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e\">A Simple Guide to ES6 Iterators in JavaScript with Examples</a></p>\n</li>\n<li><p>Arfat Salman, <a href=\"https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5\">Understanding Generators in ES6 JavaScript with Examples</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\">Iterators and generators</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\">Iteration protocols</a></p>\n</li>\n</ol>\n"},{"title":"三月读书","abbrlink":"23ae8ddc","date":"2020-04-09T02:16:56.000Z","_content":"\n<!-- ![三月计划](https://wxt.sinaimg.cn/mw1024/71dc9500ly1gdmb5hhs7jj20iw0e6wg9.jpg) -->\n\n三月的计划，完成四分之三，除了《剑指 offer》。现在每天刷题，刷到对应的话题，过来把书上内容扫一遍。书上的例子是 C++实现的，对我的帮助不大（看不太懂）。\n\nEffective JavaScript 这本非常好，相见恨晚。虽然出版较早，内容有些过时，但是里面提到的 best practice，结合日常开发，给我很多思考，常看常新。\n\n万维钢这本科普读物感觉一般，如果读者也保持每天浏览 medium 或者科技媒体的话，可以发现书中有很多话题都有老生常谈的感觉。此外感觉讲物理的第七章与书的其他章节的水平上的差距，毕竟是物理专业，明显更深入，读的过瘾，其他的章节有点泛泛而谈。\n\n读《周期》的时候正逢美股四次熔断，看起来别有一番风味，仿佛一边读书一边见证历史，而这段历史又是书中反复提及，反复发生的事情。前半章节有点啰嗦，从中间开始读起比较合适。\n","source":"_posts/reading-march.md","raw":"---\ntitle: 三月读书\ncategories:\n  - life\n  - reading\ntags:\n  - books\n  - javascript\n  - investment\nabbrlink: 23ae8ddc\ndate: 2020-04-08 19:16:56\n---\n\n<!-- ![三月计划](https://wxt.sinaimg.cn/mw1024/71dc9500ly1gdmb5hhs7jj20iw0e6wg9.jpg) -->\n\n三月的计划，完成四分之三，除了《剑指 offer》。现在每天刷题，刷到对应的话题，过来把书上内容扫一遍。书上的例子是 C++实现的，对我的帮助不大（看不太懂）。\n\nEffective JavaScript 这本非常好，相见恨晚。虽然出版较早，内容有些过时，但是里面提到的 best practice，结合日常开发，给我很多思考，常看常新。\n\n万维钢这本科普读物感觉一般，如果读者也保持每天浏览 medium 或者科技媒体的话，可以发现书中有很多话题都有老生常谈的感觉。此外感觉讲物理的第七章与书的其他章节的水平上的差距，毕竟是物理专业，明显更深入，读的过瘾，其他的章节有点泛泛而谈。\n\n读《周期》的时候正逢美股四次熔断，看起来别有一番风味，仿佛一边读书一边见证历史，而这段历史又是书中反复提及，反复发生的事情。前半章节有点啰嗦，从中间开始读起比较合适。\n","slug":"reading-march","published":1,"updated":"2022-04-17T07:09:50.122Z","_id":"cka6xu721000t8cmhfvynhiv5","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- ![三月计划](https://wxt.sinaimg.cn/mw1024/71dc9500ly1gdmb5hhs7jj20iw0e6wg9.jpg) -->\n\n<p>三月的计划，完成四分之三，除了《剑指 offer》。现在每天刷题，刷到对应的话题，过来把书上内容扫一遍。书上的例子是 C++实现的，对我的帮助不大（看不太懂）。</p>\n<p>Effective JavaScript 这本非常好，相见恨晚。虽然出版较早，内容有些过时，但是里面提到的 best practice，结合日常开发，给我很多思考，常看常新。</p>\n<p>万维钢这本科普读物感觉一般，如果读者也保持每天浏览 medium 或者科技媒体的话，可以发现书中有很多话题都有老生常谈的感觉。此外感觉讲物理的第七章与书的其他章节的水平上的差距，毕竟是物理专业，明显更深入，读的过瘾，其他的章节有点泛泛而谈。</p>\n<p>读《周期》的时候正逢美股四次熔断，看起来别有一番风味，仿佛一边读书一边见证历史，而这段历史又是书中反复提及，反复发生的事情。前半章节有点啰嗦，从中间开始读起比较合适。</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- ![三月计划](https://wxt.sinaimg.cn/mw1024/71dc9500ly1gdmb5hhs7jj20iw0e6wg9.jpg) -->\n\n<p>三月的计划，完成四分之三，除了《剑指 offer》。现在每天刷题，刷到对应的话题，过来把书上内容扫一遍。书上的例子是 C++实现的，对我的帮助不大（看不太懂）。</p>\n<p>Effective JavaScript 这本非常好，相见恨晚。虽然出版较早，内容有些过时，但是里面提到的 best practice，结合日常开发，给我很多思考，常看常新。</p>\n<p>万维钢这本科普读物感觉一般，如果读者也保持每天浏览 medium 或者科技媒体的话，可以发现书中有很多话题都有老生常谈的感觉。此外感觉讲物理的第七章与书的其他章节的水平上的差距，毕竟是物理专业，明显更深入，读的过瘾，其他的章节有点泛泛而谈。</p>\n<p>读《周期》的时候正逢美股四次熔断，看起来别有一番风味，仿佛一边读书一边见证历史，而这段历史又是书中反复提及，反复发生的事情。前半章节有点啰嗦，从中间开始读起比较合适。</p>\n"},{"title":"Promise vs Observables","abbrlink":"24019ac5","date":"2019-01-27T09:37:04.000Z","_content":"\n## Difference\n\n* Single value vs multiple values\n* Eager vs lazy\n* Not cancellable vs cancellable\n* Multicast vs either unicast or multicast\n* Always asynchronous vs possibly asynchronous\n\n## Single value vs multiple values\n\n```js\n// promise\nconst numberPromise = new Promise((resolve) => {\n    resolve(5);\n    resolve(10);\n});\n\n// prints only 5\nnumberPromise.then(value => console.log(value));\n\n// observable\nconst numberObservable = new Observable((observer) => {\n    observer.next(5);\n    observer.next(10);\n});\n\n// prints 5 and 10\nnumberObservable.subscribe(value => console.log(value));\n```\n\nWrapping `setInterval` in Observable: \n\n```js\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n});\n\nsecondsObservable.subscribe(value => console.log(value));\n// logs:\n// 0\n// 1\n// 2\n// and so on, every second\n```\n\n## Eager vs lazy\n\nFor `Promise`, the `executor` function is executed immediately by the Promise implementation, passing `resolve` and `reject` functions.\n\nFor `Observable`, functions passed to `Observable` constructor gets called only when someone actually subscribe to an Observable.\n\n```js\n// promise print immediately\nconst promise = new Promise(() => {\n    console.log('I was called!');\n});\n\nconst observable = new Observable(() => {\n    console.log('I was called!');\n});\n// nothing happens here\n\nobservable.subscribe();\n// just now \"I was called!\" gets printed\n\n\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n});\n```\n\nThanks to laziness, `setInterval` is not called at this point and even `i` variable is not initiated.\n\n## Not cancellable vs cancellable\n\nES6 promise do not support `cancel` method. Some Promise libraries like Bluebird support `cancel` method.\n\n```js\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    const token = setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n  \n    return () => clearInterval(token);\n});\n\nconst subscription = \n    secondsObservable.subscribe(value => console.log(value));\n\nsubscription.unsubscribe();\n```\n\n`subscribe` doesn’t return Observable! This means you cannot chain several subscribe calls like you would chain `then` calls in Promises. `subscribe` returns a Subscription for given Observable. This Subscription has only one method  -- `unsubscribe`  -- which you can call, when you decide you don’t want to listen to certain Observable anymore.\n\n## Multicast vs either unicast or multicast\n\nPromises (because of their eager nature) are always “multicast”. Function passed to Promise constructor is called only when Promise is created and never again (unless you create brand new Promise with that function of course). \n\n```js\n\nconst waitOneSecondPromise = new Promise((resolve) => {\n    console.log('I was called!');\n    setTimeout(() => resolve(), 1000);\n});\n\nwaitOneSecondPromise.then(doSomething);\n\n// 500ms passes\n\nwaitOneSecondPromise.then(doSomethingElse);\n// the console will print only once, and doSomethingElse will be called after only half second.\n\n```\n\nThat person would naturally expect doSomethingElse to be called exactly one second from the moment it was passed to then, but in that case it would be called after half a second.\n\n```js\nconst waitOneSecondObservable = new Observable((observer) => {\n    console.log('I was called');\n  \n    setTimeout(() => observer.next(), 1000);\n});\n\nwaitOneSecondObservable.subscribe(doSomething);\n\n// 500 ms\n\nwaitOneSecondObservable.subscribe(doSomethingElse)\n```\n\nHere every call to `subscribe` will start it’s own clock. Both doSomething and doSomethingElse functions will be called one second from the moment they were passed to `subscribe`. If you look in the console, you will see `\"I was called!\"` printed to console twice, which shows that function passed to `Observable` constructor was indeed called twice and two instances of `setTimeout` timer were created.\n\n\nBy using `share` operator, you can make the `Observable` perform only once and then share between subscribers.\n\n```js\nconst sharedWaitOneSecondObservable =\n    waitOneSecondObservable.share();\n\nsharedWaitOneSecondObservable.subscribe(doSomething);\n\n// 500 ms passes\n\nsharedWaitOneSecondObservable.subscribe(doSomethingElse);\n```\n\nIf Observable shares a result between many subscribers, we say it is “multicast”, since it casts single value to multiple entities.\n\n## Always asynchronous vs possibly asynchronous\n\nPromise is asynchronous even we call `resolve` synchronously.\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(5);\n});\n\npromise.then(value => console.log(value + '!'));\n\nconsole.log('And now we are here.');\n```\n\nFirst `\"And now we are here.\"` is logged and just then `\"5!\"`\n\nObservable may emit values synchronously.\n\n```js\nconst observable = new Observable((observer) => {\n    observer.next(5);\n});\n\nobservable.subscribe(value => console.log(value + '!'));\n\nconsole.log('And now we are here.');\n```\n\n`\"5!\"` appears first and just then we see `\"And now we are here.\"`.\n\n## Reference\n\n1. [promises-vs-observables](https://medium.com/@mpodlasin/promises-vs-observables-4c123c51fe13)\n","source":"_posts/promise-vs-observables.md","raw":"---\ntitle: Promise vs Observables\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - promise\n  - Observables\n  - subscription\n  - subscribe\nabbrlink: 24019ac5\ndate: 2019-01-27 01:37:04\n---\n\n## Difference\n\n* Single value vs multiple values\n* Eager vs lazy\n* Not cancellable vs cancellable\n* Multicast vs either unicast or multicast\n* Always asynchronous vs possibly asynchronous\n\n## Single value vs multiple values\n\n```js\n// promise\nconst numberPromise = new Promise((resolve) => {\n    resolve(5);\n    resolve(10);\n});\n\n// prints only 5\nnumberPromise.then(value => console.log(value));\n\n// observable\nconst numberObservable = new Observable((observer) => {\n    observer.next(5);\n    observer.next(10);\n});\n\n// prints 5 and 10\nnumberObservable.subscribe(value => console.log(value));\n```\n\nWrapping `setInterval` in Observable: \n\n```js\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n});\n\nsecondsObservable.subscribe(value => console.log(value));\n// logs:\n// 0\n// 1\n// 2\n// and so on, every second\n```\n\n## Eager vs lazy\n\nFor `Promise`, the `executor` function is executed immediately by the Promise implementation, passing `resolve` and `reject` functions.\n\nFor `Observable`, functions passed to `Observable` constructor gets called only when someone actually subscribe to an Observable.\n\n```js\n// promise print immediately\nconst promise = new Promise(() => {\n    console.log('I was called!');\n});\n\nconst observable = new Observable(() => {\n    console.log('I was called!');\n});\n// nothing happens here\n\nobservable.subscribe();\n// just now \"I was called!\" gets printed\n\n\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n});\n```\n\nThanks to laziness, `setInterval` is not called at this point and even `i` variable is not initiated.\n\n## Not cancellable vs cancellable\n\nES6 promise do not support `cancel` method. Some Promise libraries like Bluebird support `cancel` method.\n\n```js\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    const token = setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n  \n    return () => clearInterval(token);\n});\n\nconst subscription = \n    secondsObservable.subscribe(value => console.log(value));\n\nsubscription.unsubscribe();\n```\n\n`subscribe` doesn’t return Observable! This means you cannot chain several subscribe calls like you would chain `then` calls in Promises. `subscribe` returns a Subscription for given Observable. This Subscription has only one method  -- `unsubscribe`  -- which you can call, when you decide you don’t want to listen to certain Observable anymore.\n\n## Multicast vs either unicast or multicast\n\nPromises (because of their eager nature) are always “multicast”. Function passed to Promise constructor is called only when Promise is created and never again (unless you create brand new Promise with that function of course). \n\n```js\n\nconst waitOneSecondPromise = new Promise((resolve) => {\n    console.log('I was called!');\n    setTimeout(() => resolve(), 1000);\n});\n\nwaitOneSecondPromise.then(doSomething);\n\n// 500ms passes\n\nwaitOneSecondPromise.then(doSomethingElse);\n// the console will print only once, and doSomethingElse will be called after only half second.\n\n```\n\nThat person would naturally expect doSomethingElse to be called exactly one second from the moment it was passed to then, but in that case it would be called after half a second.\n\n```js\nconst waitOneSecondObservable = new Observable((observer) => {\n    console.log('I was called');\n  \n    setTimeout(() => observer.next(), 1000);\n});\n\nwaitOneSecondObservable.subscribe(doSomething);\n\n// 500 ms\n\nwaitOneSecondObservable.subscribe(doSomethingElse)\n```\n\nHere every call to `subscribe` will start it’s own clock. Both doSomething and doSomethingElse functions will be called one second from the moment they were passed to `subscribe`. If you look in the console, you will see `\"I was called!\"` printed to console twice, which shows that function passed to `Observable` constructor was indeed called twice and two instances of `setTimeout` timer were created.\n\n\nBy using `share` operator, you can make the `Observable` perform only once and then share between subscribers.\n\n```js\nconst sharedWaitOneSecondObservable =\n    waitOneSecondObservable.share();\n\nsharedWaitOneSecondObservable.subscribe(doSomething);\n\n// 500 ms passes\n\nsharedWaitOneSecondObservable.subscribe(doSomethingElse);\n```\n\nIf Observable shares a result between many subscribers, we say it is “multicast”, since it casts single value to multiple entities.\n\n## Always asynchronous vs possibly asynchronous\n\nPromise is asynchronous even we call `resolve` synchronously.\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(5);\n});\n\npromise.then(value => console.log(value + '!'));\n\nconsole.log('And now we are here.');\n```\n\nFirst `\"And now we are here.\"` is logged and just then `\"5!\"`\n\nObservable may emit values synchronously.\n\n```js\nconst observable = new Observable((observer) => {\n    observer.next(5);\n});\n\nobservable.subscribe(value => console.log(value + '!'));\n\nconsole.log('And now we are here.');\n```\n\n`\"5!\"` appears first and just then we see `\"And now we are here.\"`.\n\n## Reference\n\n1. [promises-vs-observables](https://medium.com/@mpodlasin/promises-vs-observables-4c123c51fe13)\n","slug":"promise-vs-observables","published":1,"updated":"2021-09-14T11:40:19.905Z","_id":"cka6xu721000u8cmhnqhiyvd2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Difference\"><a href=\"#Difference\" class=\"headerlink\" title=\"Difference\"></a>Difference</h2><ul>\n<li>Single value vs multiple values</li>\n<li>Eager vs lazy</li>\n<li>Not cancellable vs cancellable</li>\n<li>Multicast vs either unicast or multicast</li>\n<li>Always asynchronous vs possibly asynchronous</li>\n</ul>\n<h2 id=\"Single-value-vs-multiple-values\"><a href=\"#Single-value-vs-multiple-values\" class=\"headerlink\" title=\"Single value vs multiple values\"></a>Single value vs multiple values</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numberPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints only 5</span></span><br><span class=\"line\">numberPromise.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// observable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numberObservable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.<span class=\"title function_\">next</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">    observer.<span class=\"title function_\">next</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints 5 and 10</span></span><br><span class=\"line\">numberObservable.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value));</span><br></pre></td></tr></table></figure>\n\n<p>Wrapping <code>setInterval</code> in Observable: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        observer.<span class=\"title function_\">next</span>(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">secondsObservable.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value));</span><br><span class=\"line\"><span class=\"comment\">// logs:</span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// and so on, every second</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Eager-vs-lazy\"><a href=\"#Eager-vs-lazy\" class=\"headerlink\" title=\"Eager vs lazy\"></a>Eager vs lazy</h2><p>For <code>Promise</code>, the <code>executor</code> function is executed immediately by the Promise implementation, passing <code>resolve</code> and <code>reject</code> functions.</p>\n<p>For <code>Observable</code>, functions passed to <code>Observable</code> constructor gets called only when someone actually subscribe to an Observable.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise print immediately</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I was called!&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I was called!&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// nothing happens here</span></span><br><span class=\"line\"></span><br><span class=\"line\">observable.<span class=\"title function_\">subscribe</span>();</span><br><span class=\"line\"><span class=\"comment\">// just now &quot;I was called!&quot; gets printed</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        observer.<span class=\"title function_\">next</span>(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Thanks to laziness, <code>setInterval</code> is not called at this point and even <code>i</code> variable is not initiated.</p>\n<h2 id=\"Not-cancellable-vs-cancellable\"><a href=\"#Not-cancellable-vs-cancellable\" class=\"headerlink\" title=\"Not cancellable vs cancellable\"></a>Not cancellable vs cancellable</h2><p>ES6 promise do not support <code>cancel</code> method. Some Promise libraries like Bluebird support <code>cancel</code> method.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        observer.<span class=\"title function_\">next</span>(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"built_in\">clearInterval</span>(token);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> subscription = </span><br><span class=\"line\">    secondsObservable.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value));</span><br><span class=\"line\"></span><br><span class=\"line\">subscription.<span class=\"title function_\">unsubscribe</span>();</span><br></pre></td></tr></table></figure>\n\n<p><code>subscribe</code> doesn’t return Observable! This means you cannot chain several subscribe calls like you would chain <code>then</code> calls in Promises. <code>subscribe</code> returns a Subscription for given Observable. This Subscription has only one method  – <code>unsubscribe</code>  – which you can call, when you decide you don’t want to listen to certain Observable anymore.</p>\n<h2 id=\"Multicast-vs-either-unicast-or-multicast\"><a href=\"#Multicast-vs-either-unicast-or-multicast\" class=\"headerlink\" title=\"Multicast vs either unicast or multicast\"></a>Multicast vs either unicast or multicast</h2><p>Promises (because of their eager nature) are always “multicast”. Function passed to Promise constructor is called only when Promise is created and never again (unless you create brand new Promise with that function of course). </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> waitOneSecondPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I was called!&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.<span class=\"title function_\">then</span>(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500ms passes</span></span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.<span class=\"title function_\">then</span>(doSomethingElse);</span><br><span class=\"line\"><span class=\"comment\">// the console will print only once, and doSomethingElse will be called after only half second.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>That person would naturally expect doSomethingElse to be called exactly one second from the moment it was passed to then, but in that case it would be called after half a second.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> waitOneSecondObservable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I was called&#x27;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> observer.<span class=\"title function_\">next</span>(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.<span class=\"title function_\">subscribe</span>(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500 ms</span></span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.<span class=\"title function_\">subscribe</span>(doSomethingElse)</span><br></pre></td></tr></table></figure>\n\n<p>Here every call to <code>subscribe</code> will start it’s own clock. Both doSomething and doSomethingElse functions will be called one second from the moment they were passed to <code>subscribe</code>. If you look in the console, you will see <code>&quot;I was called!&quot;</code> printed to console twice, which shows that function passed to <code>Observable</code> constructor was indeed called twice and two instances of <code>setTimeout</code> timer were created.</p>\n<p>By using <code>share</code> operator, you can make the <code>Observable</code> perform only once and then share between subscribers.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sharedWaitOneSecondObservable =</span><br><span class=\"line\">    waitOneSecondObservable.<span class=\"title function_\">share</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">sharedWaitOneSecondObservable.<span class=\"title function_\">subscribe</span>(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500 ms passes</span></span><br><span class=\"line\"></span><br><span class=\"line\">sharedWaitOneSecondObservable.<span class=\"title function_\">subscribe</span>(doSomethingElse);</span><br></pre></td></tr></table></figure>\n\n<p>If Observable shares a result between many subscribers, we say it is “multicast”, since it casts single value to multiple entities.</p>\n<h2 id=\"Always-asynchronous-vs-possibly-asynchronous\"><a href=\"#Always-asynchronous-vs-possibly-asynchronous\" class=\"headerlink\" title=\"Always asynchronous vs possibly asynchronous\"></a>Always asynchronous vs possibly asynchronous</h2><p>Promise is asynchronous even we call <code>resolve</code> synchronously.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27;!&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;And now we are here.&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>First <code>&quot;And now we are here.&quot;</code> is logged and just then <code>&quot;5!&quot;</code></p>\n<p>Observable may emit values synchronously.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.<span class=\"title function_\">next</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observable.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27;!&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;And now we are here.&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>&quot;5!&quot;</code> appears first and just then we see <code>&quot;And now we are here.&quot;</code>.</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://medium.com/@mpodlasin/promises-vs-observables-4c123c51fe13\">promises-vs-observables</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Difference\"><a href=\"#Difference\" class=\"headerlink\" title=\"Difference\"></a>Difference</h2><ul>\n<li>Single value vs multiple values</li>\n<li>Eager vs lazy</li>\n<li>Not cancellable vs cancellable</li>\n<li>Multicast vs either unicast or multicast</li>\n<li>Always asynchronous vs possibly asynchronous</li>\n</ul>\n<h2 id=\"Single-value-vs-multiple-values\"><a href=\"#Single-value-vs-multiple-values\" class=\"headerlink\" title=\"Single value vs multiple values\"></a>Single value vs multiple values</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numberPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints only 5</span></span><br><span class=\"line\">numberPromise.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// observable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numberObservable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.<span class=\"title function_\">next</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">    observer.<span class=\"title function_\">next</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints 5 and 10</span></span><br><span class=\"line\">numberObservable.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value));</span><br></pre></td></tr></table></figure>\n\n<p>Wrapping <code>setInterval</code> in Observable: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        observer.<span class=\"title function_\">next</span>(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">secondsObservable.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value));</span><br><span class=\"line\"><span class=\"comment\">// logs:</span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// and so on, every second</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Eager-vs-lazy\"><a href=\"#Eager-vs-lazy\" class=\"headerlink\" title=\"Eager vs lazy\"></a>Eager vs lazy</h2><p>For <code>Promise</code>, the <code>executor</code> function is executed immediately by the Promise implementation, passing <code>resolve</code> and <code>reject</code> functions.</p>\n<p>For <code>Observable</code>, functions passed to <code>Observable</code> constructor gets called only when someone actually subscribe to an Observable.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise print immediately</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I was called!&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I was called!&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// nothing happens here</span></span><br><span class=\"line\"></span><br><span class=\"line\">observable.<span class=\"title function_\">subscribe</span>();</span><br><span class=\"line\"><span class=\"comment\">// just now &quot;I was called!&quot; gets printed</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        observer.<span class=\"title function_\">next</span>(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Thanks to laziness, <code>setInterval</code> is not called at this point and even <code>i</code> variable is not initiated.</p>\n<h2 id=\"Not-cancellable-vs-cancellable\"><a href=\"#Not-cancellable-vs-cancellable\" class=\"headerlink\" title=\"Not cancellable vs cancellable\"></a>Not cancellable vs cancellable</h2><p>ES6 promise do not support <code>cancel</code> method. Some Promise libraries like Bluebird support <code>cancel</code> method.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        observer.<span class=\"title function_\">next</span>(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"built_in\">clearInterval</span>(token);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> subscription = </span><br><span class=\"line\">    secondsObservable.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value));</span><br><span class=\"line\"></span><br><span class=\"line\">subscription.<span class=\"title function_\">unsubscribe</span>();</span><br></pre></td></tr></table></figure>\n\n<p><code>subscribe</code> doesn’t return Observable! This means you cannot chain several subscribe calls like you would chain <code>then</code> calls in Promises. <code>subscribe</code> returns a Subscription for given Observable. This Subscription has only one method  – <code>unsubscribe</code>  – which you can call, when you decide you don’t want to listen to certain Observable anymore.</p>\n<h2 id=\"Multicast-vs-either-unicast-or-multicast\"><a href=\"#Multicast-vs-either-unicast-or-multicast\" class=\"headerlink\" title=\"Multicast vs either unicast or multicast\"></a>Multicast vs either unicast or multicast</h2><p>Promises (because of their eager nature) are always “multicast”. Function passed to Promise constructor is called only when Promise is created and never again (unless you create brand new Promise with that function of course). </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> waitOneSecondPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I was called!&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.<span class=\"title function_\">then</span>(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500ms passes</span></span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.<span class=\"title function_\">then</span>(doSomethingElse);</span><br><span class=\"line\"><span class=\"comment\">// the console will print only once, and doSomethingElse will be called after only half second.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>That person would naturally expect doSomethingElse to be called exactly one second from the moment it was passed to then, but in that case it would be called after half a second.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> waitOneSecondObservable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I was called&#x27;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> observer.<span class=\"title function_\">next</span>(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.<span class=\"title function_\">subscribe</span>(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500 ms</span></span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.<span class=\"title function_\">subscribe</span>(doSomethingElse)</span><br></pre></td></tr></table></figure>\n\n<p>Here every call to <code>subscribe</code> will start it’s own clock. Both doSomething and doSomethingElse functions will be called one second from the moment they were passed to <code>subscribe</code>. If you look in the console, you will see <code>&quot;I was called!&quot;</code> printed to console twice, which shows that function passed to <code>Observable</code> constructor was indeed called twice and two instances of <code>setTimeout</code> timer were created.</p>\n<p>By using <code>share</code> operator, you can make the <code>Observable</code> perform only once and then share between subscribers.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sharedWaitOneSecondObservable =</span><br><span class=\"line\">    waitOneSecondObservable.<span class=\"title function_\">share</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">sharedWaitOneSecondObservable.<span class=\"title function_\">subscribe</span>(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500 ms passes</span></span><br><span class=\"line\"></span><br><span class=\"line\">sharedWaitOneSecondObservable.<span class=\"title function_\">subscribe</span>(doSomethingElse);</span><br></pre></td></tr></table></figure>\n\n<p>If Observable shares a result between many subscribers, we say it is “multicast”, since it casts single value to multiple entities.</p>\n<h2 id=\"Always-asynchronous-vs-possibly-asynchronous\"><a href=\"#Always-asynchronous-vs-possibly-asynchronous\" class=\"headerlink\" title=\"Always asynchronous vs possibly asynchronous\"></a>Always asynchronous vs possibly asynchronous</h2><p>Promise is asynchronous even we call <code>resolve</code> synchronously.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27;!&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;And now we are here.&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>First <code>&quot;And now we are here.&quot;</code> is logged and just then <code>&quot;5!&quot;</code></p>\n<p>Observable may emit values synchronously.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.<span class=\"title function_\">next</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observable.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27;!&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;And now we are here.&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>&quot;5!&quot;</code> appears first and just then we see <code>&quot;And now we are here.&quot;</code>.</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://medium.com/@mpodlasin/promises-vs-observables-4c123c51fe13\">promises-vs-observables</a></li>\n</ol>\n"},{"title":"下班","abbrlink":"9e29172c","date":"2020-05-15T06:33:39.000Z","_content":"\n晚上八点多了，我决定搭公交回去。\n\n出发的时候，在高德的实时公交上看有一辆车刚刚经过，我心想不紧不慢走过去这段时间下一辆怎么也来了。没想到走到车站一看，下一辆车还迟迟不发车。站着等了十多分钟，已经快九点了，后悔还不如老实在工位坐一下再打车呢。但是走都走了，总不能再回去吧，越想越气，这么等也不是办法，我决定骑车回去。\n\n离开车站往前走了大概四五十米，找到一辆青桔单车，打开 App 准备解锁，鬼使神差回头一看，我要坐的公交车进站了。我拿着手机站在路边陷入了迷茫，想起去年冬天狂奔五十米追车，司机在我面前一个身位开走的惨痛经历。思考了三秒钟，那是漫长的三秒钟，思考的结果是我决定再尝试一次。我一边招手一边迎面向车站跑去。在我距离车头大约十米的地方，司机打着转向灯驶离了车站。\n\n在那一霎那，我觉得时间过得很慢，不知怎的，我突然想到阮籍的穷途之哭，这时马路对面广场舞的音乐显得格外刺耳。\n\n我伫立了一会，又返回到那辆单车前，手机上还提示着是否解锁，我狠狠的按下确定。\n","source":"_posts/下班.md","raw":"---\ntitle: 下班\ncategories:\n  - life\nabbrlink: 9e29172c\ndate: 2020-05-14 23:33:39\ntags:\n---\n\n晚上八点多了，我决定搭公交回去。\n\n出发的时候，在高德的实时公交上看有一辆车刚刚经过，我心想不紧不慢走过去这段时间下一辆怎么也来了。没想到走到车站一看，下一辆车还迟迟不发车。站着等了十多分钟，已经快九点了，后悔还不如老实在工位坐一下再打车呢。但是走都走了，总不能再回去吧，越想越气，这么等也不是办法，我决定骑车回去。\n\n离开车站往前走了大概四五十米，找到一辆青桔单车，打开 App 准备解锁，鬼使神差回头一看，我要坐的公交车进站了。我拿着手机站在路边陷入了迷茫，想起去年冬天狂奔五十米追车，司机在我面前一个身位开走的惨痛经历。思考了三秒钟，那是漫长的三秒钟，思考的结果是我决定再尝试一次。我一边招手一边迎面向车站跑去。在我距离车头大约十米的地方，司机打着转向灯驶离了车站。\n\n在那一霎那，我觉得时间过得很慢，不知怎的，我突然想到阮籍的穷途之哭，这时马路对面广场舞的音乐显得格外刺耳。\n\n我伫立了一会，又返回到那辆单车前，手机上还提示着是否解锁，我狠狠的按下确定。\n","slug":"下班","published":1,"updated":"2021-09-14T11:40:19.906Z","_id":"cka6xu722000w8cmhnzm5ghan","comments":1,"layout":"post","photos":[],"link":"","content":"<p>晚上八点多了，我决定搭公交回去。</p>\n<p>出发的时候，在高德的实时公交上看有一辆车刚刚经过，我心想不紧不慢走过去这段时间下一辆怎么也来了。没想到走到车站一看，下一辆车还迟迟不发车。站着等了十多分钟，已经快九点了，后悔还不如老实在工位坐一下再打车呢。但是走都走了，总不能再回去吧，越想越气，这么等也不是办法，我决定骑车回去。</p>\n<p>离开车站往前走了大概四五十米，找到一辆青桔单车，打开 App 准备解锁，鬼使神差回头一看，我要坐的公交车进站了。我拿着手机站在路边陷入了迷茫，想起去年冬天狂奔五十米追车，司机在我面前一个身位开走的惨痛经历。思考了三秒钟，那是漫长的三秒钟，思考的结果是我决定再尝试一次。我一边招手一边迎面向车站跑去。在我距离车头大约十米的地方，司机打着转向灯驶离了车站。</p>\n<p>在那一霎那，我觉得时间过得很慢，不知怎的，我突然想到阮籍的穷途之哭，这时马路对面广场舞的音乐显得格外刺耳。</p>\n<p>我伫立了一会，又返回到那辆单车前，手机上还提示着是否解锁，我狠狠的按下确定。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>晚上八点多了，我决定搭公交回去。</p>\n<p>出发的时候，在高德的实时公交上看有一辆车刚刚经过，我心想不紧不慢走过去这段时间下一辆怎么也来了。没想到走到车站一看，下一辆车还迟迟不发车。站着等了十多分钟，已经快九点了，后悔还不如老实在工位坐一下再打车呢。但是走都走了，总不能再回去吧，越想越气，这么等也不是办法，我决定骑车回去。</p>\n<p>离开车站往前走了大概四五十米，找到一辆青桔单车，打开 App 准备解锁，鬼使神差回头一看，我要坐的公交车进站了。我拿着手机站在路边陷入了迷茫，想起去年冬天狂奔五十米追车，司机在我面前一个身位开走的惨痛经历。思考了三秒钟，那是漫长的三秒钟，思考的结果是我决定再尝试一次。我一边招手一边迎面向车站跑去。在我距离车头大约十米的地方，司机打着转向灯驶离了车站。</p>\n<p>在那一霎那，我觉得时间过得很慢，不知怎的，我突然想到阮籍的穷途之哭，这时马路对面广场舞的音乐显得格外刺耳。</p>\n<p>我伫立了一会，又返回到那辆单车前，手机上还提示着是否解锁，我狠狠的按下确定。</p>\n"},{"title":"通过 confine 研究 tooltip 的实现过程 -- eCharts 源码解读","abbrlink":"9176cb10","date":"2019-11-06T07:09:13.000Z","_content":"\n实现业务需求时发现 tooltip 中呈现的内容比较多，当出现在边界时会出现一部分在可视范围以外。所幸 echarts 提供了一个 confine 配置给 tooltip，当为 true 时，可以强制使 tooltip 出现在 view 视图中。\n\n接下来来看看源码中是怎样实现 confine 功能的。\n\n首先可以看到，confine 是在 `src/component/tooltip/TooltipModel.js` 中定义，默认值是 `false`\n\n```js\n// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\nexport default echarts.extendComponentModel({\n  type: 'tooltip',\n\n  dependencies: ['axisPointer'],\n\n  defaultOption: {\n    // ...\n    // 'trigger' only works on coordinate system.\n    // 'item' | 'axis' | 'none'\n    trigger: 'item',\n    // 'click' | 'mousemove' | 'none'\n    triggerOn: 'mousemove|click',\n    // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n    confine: false,\n\n    // ...\n  },\n});\n```\n\n接下来，可以看到在同级目录下的 `TooltipView.js` 文件，这里负责定义了 TooltipView 相关的显示、隐藏、更新位置等的方法。在该文件中搜索 confine，发现相关代码主要是两处，一处是 `confineTooltipPosion` function，这里很好理解，通过计算当前 x、y 值，和当前的可视范围的宽高 viewWidth, viewHeight 比较，得到 confine 之后新的 x、y 值。 另一处则是调用`confineTooltipPosion`的 `_updatePosition` 方法.\n\n在这里，一共定义了三种 showTooltip 方法，对应不同的对象。分别是 \\_showAxisTooltip, \\_showComponentItemTooltip 和 \\_showSeriesItemTooltip . 我们只关注 series 中 item 的 tooltip， 至于 AxisTooltip 和 ComponentItemTooltip，在原理上基本一致。\n\n梳理一番之后发现，在该类中，方法的调用链是 `confineTooltipPosion` -> `_updatePosition` -> `_showTooltipContent` -> `_showSeriesItemTooltip` -> `_tryShow` -> `_initGlobalListener` -> `render`. 执行顺序是从右至左。\n\n理清了思路，接下来我们来看代码是如何实现 confine 的过程。\n\n弄清了执行顺序后，就很好理解 tooltip 的渲染过程了。在生命周期 render 函数中，调用了 `_initGlobalListener`，在该方法中， 可以获取到一个共享的全局监听器 `globalListener`. 这个监听器具体实现和属性可参见`src/component/axisPointer/globalListener.js`。 这里我们先关注暴露出来的 `register`方法，他接受三个 arguments: `function register(key, api, handler)`; 所以这里就很好理解了，在初始化阶段，判断 tooltip 的触发条件（triggerOn:'click' | 'mousemove' | 'none' ）， 如果不是`none`， 则 globalListener 给`itemTooltip` 注册了回调 handler。当 `currTrigger`是 `click`或`mousemove` 时，调用 `_tryShow` 显示 tooltip，当 leave 时调用 `_hide`。\n\n```js\n// _initGlobalListener\nvar tooltipModel = this._tooltipModel;\nvar triggerOn = tooltipModel.get('triggerOn');\n\nglobalListener.register(\n  'itemTooltip',\n  this._api,\n  bind(function(currTrigger, e, dispatchAction) {\n    // If 'none', it is not controlled by mouse totally.\n    if (triggerOn !== 'none') {\n      if (triggerOn.indexOf(currTrigger) >= 0) {\n        this._tryShow(e, dispatchAction);\n      } else if (currTrigger === 'leave') {\n        this._hide(dispatchAction);\n      }\n    }\n  }, this),\n);\n```\n\ntryShow 调用后, 我们可以看到这个方法实现非常直观，根据条件来判断显示 series、component 还是 axis 的 tooltip。我们重点关注\\_showSeriesItemTooltip.\n\n走到\\_showSeriesItemTooltip，这个函数声明并计算了一系列的变量，都是为了 function \\_showTooltipContent 的参数做准备。我们可以看到\n\n```js\nthis._showOrMove(tooltipModel, function() {\n  this._showTooltipContent(\n    tooltipModel,\n    defaultHtml,\n    params,\n    asyncTicket,\n    e.offsetX,\n    e.offsetY,\n    e.position,\n    e.target,\n    markers,\n  );\n});\n```\n\n结合 echarts tooltip 的文档和 tooltipModel 来看，我们可以传入一个配置参数 showDelay，如果 delay 大于 0 则 setTimeout，若干秒后执行回调函数，在这里则是显示 toolTip（ \\_showTooltipContent）；否则立即执行 callback。不过官方文档并不建议设置 delay。 所以我们可以认为\\_showOrMove 是个定时器，到了时间后显示 tooltip。\\_showOrMove 实现如下。\n\n```js\n//_showOrMove\n// showDelay is used in this case: tooltip.enterable is set\n// as true. User intent to move mouse into tooltip and click\n// something. `showDelay` makes it easyer to enter the content\n// but tooltip do not move immediately.\nvar delay = tooltipModel.get('showDelay');\ncb = zrUtil.bind(cb, this);\nclearTimeout(this._showTimout);\ndelay > 0 ? (this._showTimout = setTimeout(cb, delay)) : cb();\n```\n\n回到\\_showTooltipContent， 在这个方法里我们知道了 echarts 如何兼容 formatter，传入 string 和 function 时不同的处理方法。通过 typeof 判断后，如果是 string， 则通过 `formatUtil.formatTpl` 直接 replace, return 一个 tpl<string>; 如果 typeof 是 function， 则通过 `.innerHTML` 插入一段新的 string.\n\n关键代码如下, 实现逻辑在这里就不过多关注了。\n\n```js\n// is string formatTpl\n/**\n * Template formatter\n * @param {string} tpl\n * @param {Array.<Object>|Object} paramsList\n * @param {boolean} [encode=false]\n * @return {string}\n */\nexport function formatTpl(tpl, paramsList, encode) {\n  if (!zrUtil.isArray(paramsList)) {\n    paramsList = [paramsList];\n  }\n  var seriesLen = paramsList.length;\n  if (!seriesLen) {\n    return '';\n  }\n\n  var $vars = paramsList[0].$vars || [];\n  for (var i = 0; i < $vars.length; i++) {\n    var alias = TPL_VAR_ALIAS[i];\n    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));\n  }\n  for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n    for (var k = 0; k < $vars.length; k++) {\n      var val = paramsList[seriesIdx][$vars[k]];\n      tpl = tpl.replace(\n        wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n        encode ? encodeHTML(val) : val,\n      );\n    }\n  }\n\n  return tpl;\n}\n```\n\n```js\n// is function, setContent\nsetContent: function (content) {\n  this.el.innerHTML = content == null ? '' : content;\n},\n```\n\n这里插一个题外话， HTML5 规范中表示 `<script>` tag 中的内容在使用 `innerHTML` 插入时是不应该被执行的\n\n```js\nname = \"<script>alert('I am John in an annoying alert!')</script>\";\n el.innerHTML = name; // harmless in this case\n```\n\n但是当不使用 `<script>` tag 并使用 innerHTML 插入 string 时，则会有 croos-site scripting attact 风险\n\n```js\nconst name = \"<img src='x' onerror='alert(1)'>\";\nel.innerHTML = name; // shows the alert\n```\n\n基于这个原因，推荐使用 `Node.textContent` 而不是使用 `innerHTML`\n\n好了，终于生成了 content，和需要的坐标、参数等，这个时候调用了 \\_updatePosition. 在\\_updatePosition 中我们看到 echats 是如何去做当 position 字段传入 string, array 和 function 时的处理方法的。如果对这里感兴趣可以关注一下。 在这个方法的最后，我们看到了对 confine 的判断，如果为 true，则再次调用 confineTooltipPosition, 返回新的 x，y 坐标。然后将 content 移动到新的坐标位置。\n\n```js\nvar viewWidth = this._api.getWidth();\nvar viewHeight = this._api.getHeight();\n\n// ...\n\nif (tooltipModel.get('confine')) {\n  var pos = confineTooltipPosition(x, y, content, viewWidth, viewHeight);\n  x = pos[0];\n  y = pos[1];\n}\n\ncontent.moveTo(x, y);\n```\n\n这里看到 echarts 获取可视范围的高宽，是通过封装在内的 \\_api 内的方法获得。这里涉及到更底层的关于 echarts 调用 zrender 生成 root 绘图容器的过程，基本原理是先获取绘图区域实例，根据该实例再获取高宽。具体过程在此不作赘述。留个记录，有机会再来解析那一部分。具体代码可以参考 `zrender/src/Painter.js`.\n\n回到 `confineTooltipPosition` 方法， 根据前面方法的定义，这里的 x，y 是 e.offsetX 和 e.offsetY. 表示事件发生时鼠标 pointer 到 target node 的 padding 的距离。 而 width 和 height 分别是 clientWidth 和 clientHeight 加上 borderWidth. 通过位置的大小比较，可以保证新的 content 处于可视区域内。第一个 x 判断是否右边溢出，第二个 x 判断是否左边溢出。\n\n```js\nfunction confineTooltipPosition(x, y, content, viewWidth, viewHeight) {\n  var size = content.getOuterSize();\n  var width = size.width;\n  var height = size.height;\n\n  x = Math.min(x + width, viewWidth) - width;\n  y = Math.min(y + height, viewHeight) - height;\n  x = Math.max(x, 0);\n  y = Math.max(y, 0);\n\n  return [x, y];\n}\n\ngetOuterSize: function () {\n    var width = this.el.clientWidth;\n    var height = this.el.clientHeight;\n\n    // Consider browser compatibility.\n    // IE8 does not support getComputedStyle.\n    if (document.defaultView && document.defaultView.getComputedStyle) {\n        var stl = document.defaultView.getComputedStyle(this.el);\n        if (stl) {\n            width += parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);\n            height += parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);\n        }\n    }\n\n    return {width: width, height: height};\n}\n```\n\n然后把 content 移动到新生成的坐标上，至此就完成了 confine 的功能。\n\n最后说一个看代码的心得，平常在实现一些公共 sdk 时，经常需要暴露一些 api，有的时候看到直接定义的是一个 array，然后调用方使用 `array[index]` 去获取某个方法。这样的坏处一个是数组的顺序无法保证，增、删之后 index 可能会变，给调用方造成影响。另外一个是，通过 index 获取时，对调用的方法名感知不到，不能确保使用的方法是否正确。 echarts 中的这个实现比较优雅，apiList 和真正暴露使用的 api 对象解耦。通过遍历 apiList， 产生一个包含 apiList 元素为 key 的对象，调用这个对象时，使用函数名，更直观，更友好，值得学习。\n\n```js\nimport * as zrUtil from 'zrender/src/core/util';\n\nvar echartsAPIList = [\n  'getDom',\n  'getZr',\n  'getWidth',\n  'getHeight',\n  'getDevicePixelRatio',\n  'dispatchAction',\n  'isDisposed',\n  'on',\n  'off',\n  'getDataURL',\n  'getConnectedDataURL',\n  'getModel',\n  'getOption',\n  'getViewOfComponentModel',\n  'getViewOfSeriesModel',\n];\n// And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js\n\nfunction ExtensionAPI(chartInstance) {\n  zrUtil.each(\n    echartsAPIList,\n    function(name) {\n      this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n    },\n    this,\n  );\n}\n\nexport default ExtensionAPI;\n```\n","source":"_posts/tooltip-in-echars.md","raw":"---\ntitle: 通过 confine 研究 tooltip 的实现过程 -- eCharts 源码解读\ncategories:\n  - web\ntags:\n  - echarts\n  - zrender\n  - tooltip\n  - confine\nabbrlink: 9176cb10\ndate: 2019-11-05 23:09:13\n---\n\n实现业务需求时发现 tooltip 中呈现的内容比较多，当出现在边界时会出现一部分在可视范围以外。所幸 echarts 提供了一个 confine 配置给 tooltip，当为 true 时，可以强制使 tooltip 出现在 view 视图中。\n\n接下来来看看源码中是怎样实现 confine 功能的。\n\n首先可以看到，confine 是在 `src/component/tooltip/TooltipModel.js` 中定义，默认值是 `false`\n\n```js\n// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\nexport default echarts.extendComponentModel({\n  type: 'tooltip',\n\n  dependencies: ['axisPointer'],\n\n  defaultOption: {\n    // ...\n    // 'trigger' only works on coordinate system.\n    // 'item' | 'axis' | 'none'\n    trigger: 'item',\n    // 'click' | 'mousemove' | 'none'\n    triggerOn: 'mousemove|click',\n    // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n    confine: false,\n\n    // ...\n  },\n});\n```\n\n接下来，可以看到在同级目录下的 `TooltipView.js` 文件，这里负责定义了 TooltipView 相关的显示、隐藏、更新位置等的方法。在该文件中搜索 confine，发现相关代码主要是两处，一处是 `confineTooltipPosion` function，这里很好理解，通过计算当前 x、y 值，和当前的可视范围的宽高 viewWidth, viewHeight 比较，得到 confine 之后新的 x、y 值。 另一处则是调用`confineTooltipPosion`的 `_updatePosition` 方法.\n\n在这里，一共定义了三种 showTooltip 方法，对应不同的对象。分别是 \\_showAxisTooltip, \\_showComponentItemTooltip 和 \\_showSeriesItemTooltip . 我们只关注 series 中 item 的 tooltip， 至于 AxisTooltip 和 ComponentItemTooltip，在原理上基本一致。\n\n梳理一番之后发现，在该类中，方法的调用链是 `confineTooltipPosion` -> `_updatePosition` -> `_showTooltipContent` -> `_showSeriesItemTooltip` -> `_tryShow` -> `_initGlobalListener` -> `render`. 执行顺序是从右至左。\n\n理清了思路，接下来我们来看代码是如何实现 confine 的过程。\n\n弄清了执行顺序后，就很好理解 tooltip 的渲染过程了。在生命周期 render 函数中，调用了 `_initGlobalListener`，在该方法中， 可以获取到一个共享的全局监听器 `globalListener`. 这个监听器具体实现和属性可参见`src/component/axisPointer/globalListener.js`。 这里我们先关注暴露出来的 `register`方法，他接受三个 arguments: `function register(key, api, handler)`; 所以这里就很好理解了，在初始化阶段，判断 tooltip 的触发条件（triggerOn:'click' | 'mousemove' | 'none' ）， 如果不是`none`， 则 globalListener 给`itemTooltip` 注册了回调 handler。当 `currTrigger`是 `click`或`mousemove` 时，调用 `_tryShow` 显示 tooltip，当 leave 时调用 `_hide`。\n\n```js\n// _initGlobalListener\nvar tooltipModel = this._tooltipModel;\nvar triggerOn = tooltipModel.get('triggerOn');\n\nglobalListener.register(\n  'itemTooltip',\n  this._api,\n  bind(function(currTrigger, e, dispatchAction) {\n    // If 'none', it is not controlled by mouse totally.\n    if (triggerOn !== 'none') {\n      if (triggerOn.indexOf(currTrigger) >= 0) {\n        this._tryShow(e, dispatchAction);\n      } else if (currTrigger === 'leave') {\n        this._hide(dispatchAction);\n      }\n    }\n  }, this),\n);\n```\n\ntryShow 调用后, 我们可以看到这个方法实现非常直观，根据条件来判断显示 series、component 还是 axis 的 tooltip。我们重点关注\\_showSeriesItemTooltip.\n\n走到\\_showSeriesItemTooltip，这个函数声明并计算了一系列的变量，都是为了 function \\_showTooltipContent 的参数做准备。我们可以看到\n\n```js\nthis._showOrMove(tooltipModel, function() {\n  this._showTooltipContent(\n    tooltipModel,\n    defaultHtml,\n    params,\n    asyncTicket,\n    e.offsetX,\n    e.offsetY,\n    e.position,\n    e.target,\n    markers,\n  );\n});\n```\n\n结合 echarts tooltip 的文档和 tooltipModel 来看，我们可以传入一个配置参数 showDelay，如果 delay 大于 0 则 setTimeout，若干秒后执行回调函数，在这里则是显示 toolTip（ \\_showTooltipContent）；否则立即执行 callback。不过官方文档并不建议设置 delay。 所以我们可以认为\\_showOrMove 是个定时器，到了时间后显示 tooltip。\\_showOrMove 实现如下。\n\n```js\n//_showOrMove\n// showDelay is used in this case: tooltip.enterable is set\n// as true. User intent to move mouse into tooltip and click\n// something. `showDelay` makes it easyer to enter the content\n// but tooltip do not move immediately.\nvar delay = tooltipModel.get('showDelay');\ncb = zrUtil.bind(cb, this);\nclearTimeout(this._showTimout);\ndelay > 0 ? (this._showTimout = setTimeout(cb, delay)) : cb();\n```\n\n回到\\_showTooltipContent， 在这个方法里我们知道了 echarts 如何兼容 formatter，传入 string 和 function 时不同的处理方法。通过 typeof 判断后，如果是 string， 则通过 `formatUtil.formatTpl` 直接 replace, return 一个 tpl<string>; 如果 typeof 是 function， 则通过 `.innerHTML` 插入一段新的 string.\n\n关键代码如下, 实现逻辑在这里就不过多关注了。\n\n```js\n// is string formatTpl\n/**\n * Template formatter\n * @param {string} tpl\n * @param {Array.<Object>|Object} paramsList\n * @param {boolean} [encode=false]\n * @return {string}\n */\nexport function formatTpl(tpl, paramsList, encode) {\n  if (!zrUtil.isArray(paramsList)) {\n    paramsList = [paramsList];\n  }\n  var seriesLen = paramsList.length;\n  if (!seriesLen) {\n    return '';\n  }\n\n  var $vars = paramsList[0].$vars || [];\n  for (var i = 0; i < $vars.length; i++) {\n    var alias = TPL_VAR_ALIAS[i];\n    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));\n  }\n  for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n    for (var k = 0; k < $vars.length; k++) {\n      var val = paramsList[seriesIdx][$vars[k]];\n      tpl = tpl.replace(\n        wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n        encode ? encodeHTML(val) : val,\n      );\n    }\n  }\n\n  return tpl;\n}\n```\n\n```js\n// is function, setContent\nsetContent: function (content) {\n  this.el.innerHTML = content == null ? '' : content;\n},\n```\n\n这里插一个题外话， HTML5 规范中表示 `<script>` tag 中的内容在使用 `innerHTML` 插入时是不应该被执行的\n\n```js\nname = \"<script>alert('I am John in an annoying alert!')</script>\";\n el.innerHTML = name; // harmless in this case\n```\n\n但是当不使用 `<script>` tag 并使用 innerHTML 插入 string 时，则会有 croos-site scripting attact 风险\n\n```js\nconst name = \"<img src='x' onerror='alert(1)'>\";\nel.innerHTML = name; // shows the alert\n```\n\n基于这个原因，推荐使用 `Node.textContent` 而不是使用 `innerHTML`\n\n好了，终于生成了 content，和需要的坐标、参数等，这个时候调用了 \\_updatePosition. 在\\_updatePosition 中我们看到 echats 是如何去做当 position 字段传入 string, array 和 function 时的处理方法的。如果对这里感兴趣可以关注一下。 在这个方法的最后，我们看到了对 confine 的判断，如果为 true，则再次调用 confineTooltipPosition, 返回新的 x，y 坐标。然后将 content 移动到新的坐标位置。\n\n```js\nvar viewWidth = this._api.getWidth();\nvar viewHeight = this._api.getHeight();\n\n// ...\n\nif (tooltipModel.get('confine')) {\n  var pos = confineTooltipPosition(x, y, content, viewWidth, viewHeight);\n  x = pos[0];\n  y = pos[1];\n}\n\ncontent.moveTo(x, y);\n```\n\n这里看到 echarts 获取可视范围的高宽，是通过封装在内的 \\_api 内的方法获得。这里涉及到更底层的关于 echarts 调用 zrender 生成 root 绘图容器的过程，基本原理是先获取绘图区域实例，根据该实例再获取高宽。具体过程在此不作赘述。留个记录，有机会再来解析那一部分。具体代码可以参考 `zrender/src/Painter.js`.\n\n回到 `confineTooltipPosition` 方法， 根据前面方法的定义，这里的 x，y 是 e.offsetX 和 e.offsetY. 表示事件发生时鼠标 pointer 到 target node 的 padding 的距离。 而 width 和 height 分别是 clientWidth 和 clientHeight 加上 borderWidth. 通过位置的大小比较，可以保证新的 content 处于可视区域内。第一个 x 判断是否右边溢出，第二个 x 判断是否左边溢出。\n\n```js\nfunction confineTooltipPosition(x, y, content, viewWidth, viewHeight) {\n  var size = content.getOuterSize();\n  var width = size.width;\n  var height = size.height;\n\n  x = Math.min(x + width, viewWidth) - width;\n  y = Math.min(y + height, viewHeight) - height;\n  x = Math.max(x, 0);\n  y = Math.max(y, 0);\n\n  return [x, y];\n}\n\ngetOuterSize: function () {\n    var width = this.el.clientWidth;\n    var height = this.el.clientHeight;\n\n    // Consider browser compatibility.\n    // IE8 does not support getComputedStyle.\n    if (document.defaultView && document.defaultView.getComputedStyle) {\n        var stl = document.defaultView.getComputedStyle(this.el);\n        if (stl) {\n            width += parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);\n            height += parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);\n        }\n    }\n\n    return {width: width, height: height};\n}\n```\n\n然后把 content 移动到新生成的坐标上，至此就完成了 confine 的功能。\n\n最后说一个看代码的心得，平常在实现一些公共 sdk 时，经常需要暴露一些 api，有的时候看到直接定义的是一个 array，然后调用方使用 `array[index]` 去获取某个方法。这样的坏处一个是数组的顺序无法保证，增、删之后 index 可能会变，给调用方造成影响。另外一个是，通过 index 获取时，对调用的方法名感知不到，不能确保使用的方法是否正确。 echarts 中的这个实现比较优雅，apiList 和真正暴露使用的 api 对象解耦。通过遍历 apiList， 产生一个包含 apiList 元素为 key 的对象，调用这个对象时，使用函数名，更直观，更友好，值得学习。\n\n```js\nimport * as zrUtil from 'zrender/src/core/util';\n\nvar echartsAPIList = [\n  'getDom',\n  'getZr',\n  'getWidth',\n  'getHeight',\n  'getDevicePixelRatio',\n  'dispatchAction',\n  'isDisposed',\n  'on',\n  'off',\n  'getDataURL',\n  'getConnectedDataURL',\n  'getModel',\n  'getOption',\n  'getViewOfComponentModel',\n  'getViewOfSeriesModel',\n];\n// And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js\n\nfunction ExtensionAPI(chartInstance) {\n  zrUtil.each(\n    echartsAPIList,\n    function(name) {\n      this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n    },\n    this,\n  );\n}\n\nexport default ExtensionAPI;\n```\n","slug":"tooltip-in-echars","published":1,"updated":"2021-09-14T11:40:19.906Z","_id":"cka6xu72o001t8cmhpsyeqdev","comments":1,"layout":"post","photos":[],"link":"","content":"<p>实现业务需求时发现 tooltip 中呈现的内容比较多，当出现在边界时会出现一部分在可视范围以外。所幸 echarts 提供了一个 confine 配置给 tooltip，当为 true 时，可以强制使 tooltip 出现在 view 视图中。</p>\n<p>接下来来看看源码中是怎样实现 confine 功能的。</p>\n<p>首先可以看到，confine 是在 <code>src/component/tooltip/TooltipModel.js</code> 中定义，默认值是 <code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> echarts.<span class=\"title function_\">extendComponentModel</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;tooltip&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">dependencies</span>: [<span class=\"string\">&#x27;axisPointer&#x27;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">defaultOption</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// &#x27;trigger&#x27; only works on coordinate system.</span></span><br><span class=\"line\">    <span class=\"comment\">// &#x27;item&#x27; | &#x27;axis&#x27; | &#x27;none&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;item&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// &#x27;click&#x27; | &#x27;mousemove&#x27; | &#x27;none&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">triggerOn</span>: <span class=\"string\">&#x27;mousemove|click&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。</span></span><br><span class=\"line\">    <span class=\"attr\">confine</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>接下来，可以看到在同级目录下的 <code>TooltipView.js</code> 文件，这里负责定义了 TooltipView 相关的显示、隐藏、更新位置等的方法。在该文件中搜索 confine，发现相关代码主要是两处，一处是 <code>confineTooltipPosion</code> function，这里很好理解，通过计算当前 x、y 值，和当前的可视范围的宽高 viewWidth, viewHeight 比较，得到 confine 之后新的 x、y 值。 另一处则是调用<code>confineTooltipPosion</code>的 <code>_updatePosition</code> 方法.</p>\n<p>在这里，一共定义了三种 showTooltip 方法，对应不同的对象。分别是 _showAxisTooltip, _showComponentItemTooltip 和 _showSeriesItemTooltip . 我们只关注 series 中 item 的 tooltip， 至于 AxisTooltip 和 ComponentItemTooltip，在原理上基本一致。</p>\n<p>梳理一番之后发现，在该类中，方法的调用链是 <code>confineTooltipPosion</code> -&gt; <code>_updatePosition</code> -&gt; <code>_showTooltipContent</code> -&gt; <code>_showSeriesItemTooltip</code> -&gt; <code>_tryShow</code> -&gt; <code>_initGlobalListener</code> -&gt; <code>render</code>. 执行顺序是从右至左。</p>\n<p>理清了思路，接下来我们来看代码是如何实现 confine 的过程。</p>\n<p>弄清了执行顺序后，就很好理解 tooltip 的渲染过程了。在生命周期 render 函数中，调用了 <code>_initGlobalListener</code>，在该方法中， 可以获取到一个共享的全局监听器 <code>globalListener</code>. 这个监听器具体实现和属性可参见<code>src/component/axisPointer/globalListener.js</code>。 这里我们先关注暴露出来的 <code>register</code>方法，他接受三个 arguments: <code>function register(key, api, handler)</code>; 所以这里就很好理解了，在初始化阶段，判断 tooltip 的触发条件（triggerOn:’click’ | ‘mousemove’ | ‘none’ ）， 如果不是<code>none</code>， 则 globalListener 给<code>itemTooltip</code> 注册了回调 handler。当 <code>currTrigger</code>是 <code>click</code>或<code>mousemove</code> 时，调用 <code>_tryShow</code> 显示 tooltip，当 leave 时调用 <code>_hide</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _initGlobalListener</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tooltipModel = <span class=\"variable language_\">this</span>.<span class=\"property\">_tooltipModel</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> triggerOn = tooltipModel.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;triggerOn&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">globalListener.<span class=\"title function_\">register</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;itemTooltip&#x27;</span>,</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_api</span>,</span><br><span class=\"line\">  <span class=\"title function_\">bind</span>(<span class=\"keyword\">function</span>(<span class=\"params\">currTrigger, e, dispatchAction</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// If &#x27;none&#x27;, it is not controlled by mouse totally.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (triggerOn !== <span class=\"string\">&#x27;none&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (triggerOn.<span class=\"title function_\">indexOf</span>(currTrigger) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_tryShow</span>(e, dispatchAction);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currTrigger === <span class=\"string\">&#x27;leave&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_hide</span>(dispatchAction);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"variable language_\">this</span>),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>tryShow 调用后, 我们可以看到这个方法实现非常直观，根据条件来判断显示 series、component 还是 axis 的 tooltip。我们重点关注_showSeriesItemTooltip.</p>\n<p>走到_showSeriesItemTooltip，这个函数声明并计算了一系列的变量，都是为了 function _showTooltipContent 的参数做准备。我们可以看到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">_showOrMove</span>(tooltipModel, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_showTooltipContent</span>(</span><br><span class=\"line\">    tooltipModel,</span><br><span class=\"line\">    defaultHtml,</span><br><span class=\"line\">    params,</span><br><span class=\"line\">    asyncTicket,</span><br><span class=\"line\">    e.<span class=\"property\">offsetX</span>,</span><br><span class=\"line\">    e.<span class=\"property\">offsetY</span>,</span><br><span class=\"line\">    e.<span class=\"property\">position</span>,</span><br><span class=\"line\">    e.<span class=\"property\">target</span>,</span><br><span class=\"line\">    markers,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>结合 echarts tooltip 的文档和 tooltipModel 来看，我们可以传入一个配置参数 showDelay，如果 delay 大于 0 则 setTimeout，若干秒后执行回调函数，在这里则是显示 toolTip（ _showTooltipContent）；否则立即执行 callback。不过官方文档并不建议设置 delay。 所以我们可以认为_showOrMove 是个定时器，到了时间后显示 tooltip。_showOrMove 实现如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//_showOrMove</span></span><br><span class=\"line\"><span class=\"comment\">// showDelay is used in this case: tooltip.enterable is set</span></span><br><span class=\"line\"><span class=\"comment\">// as true. User intent to move mouse into tooltip and click</span></span><br><span class=\"line\"><span class=\"comment\">// something. `showDelay` makes it easyer to enter the content</span></span><br><span class=\"line\"><span class=\"comment\">// but tooltip do not move immediately.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> delay = tooltipModel.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;showDelay&#x27;</span>);</span><br><span class=\"line\">cb = zrUtil.<span class=\"title function_\">bind</span>(cb, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_showTimout</span>);</span><br><span class=\"line\">delay &gt; <span class=\"number\">0</span> ? (<span class=\"variable language_\">this</span>.<span class=\"property\">_showTimout</span> = <span class=\"built_in\">setTimeout</span>(cb, delay)) : <span class=\"title function_\">cb</span>();</span><br></pre></td></tr></table></figure>\n\n<p>回到_showTooltipContent， 在这个方法里我们知道了 echarts 如何兼容 formatter，传入 string 和 function 时不同的处理方法。通过 typeof 判断后，如果是 string， 则通过 <code>formatUtil.formatTpl</code> 直接 replace, return 一个 tpl<string>; 如果 typeof 是 function， 则通过 <code>.innerHTML</code> 插入一段新的 string.</p>\n<p>关键代码如下, 实现逻辑在这里就不过多关注了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// is string formatTpl</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Template formatter</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">tpl</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Array.&lt;Object&gt;|Object</span>&#125; <span class=\"variable\">paramsList</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">boolean</span>&#125; [encode=false]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">formatTpl</span>(<span class=\"params\">tpl, paramsList, encode</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!zrUtil.<span class=\"title function_\">isArray</span>(paramsList)) &#123;</span><br><span class=\"line\">    paramsList = [paramsList];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> seriesLen = paramsList.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!seriesLen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $vars = paramsList[<span class=\"number\">0</span>].<span class=\"property\">$vars</span> || [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; $vars.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> alias = <span class=\"variable constant_\">TPL_VAR_ALIAS</span>[i];</span><br><span class=\"line\">    tpl = tpl.<span class=\"title function_\">replace</span>(<span class=\"title function_\">wrapVar</span>(alias), <span class=\"title function_\">wrapVar</span>(alias, <span class=\"number\">0</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> seriesIdx = <span class=\"number\">0</span>; seriesIdx &lt; seriesLen; seriesIdx++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; $vars.<span class=\"property\">length</span>; k++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> val = paramsList[seriesIdx][$vars[k]];</span><br><span class=\"line\">      tpl = tpl.<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">        <span class=\"title function_\">wrapVar</span>(<span class=\"variable constant_\">TPL_VAR_ALIAS</span>[k], seriesIdx),</span><br><span class=\"line\">        encode ? <span class=\"title function_\">encodeHTML</span>(val) : val,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tpl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// is function, setContent</span></span><br><span class=\"line\"><span class=\"attr\">setContent</span>: <span class=\"keyword\">function</span> (<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">innerHTML</span> = content == <span class=\"literal\">null</span> ? <span class=\"string\">&#x27;&#x27;</span> : content;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>这里插一个题外话， HTML5 规范中表示 <code>&lt;script&gt;</code> tag 中的内容在使用 <code>innerHTML</code> 插入时是不应该被执行的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;&lt;script&gt;alert(&#x27;I am John in an annoying alert!&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\"> el.<span class=\"property\">innerHTML</span> = name; <span class=\"comment\">// harmless in this case</span></span><br></pre></td></tr></table></figure>\n\n<p>但是当不使用 <code>&lt;script&gt;</code> tag 并使用 innerHTML 插入 string 时，则会有 croos-site scripting attact 风险</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&quot;&lt;img src=&#x27;x&#x27; onerror=&#x27;alert(1)&#x27;&gt;&quot;</span>;</span><br><span class=\"line\">el.<span class=\"property\">innerHTML</span> = name; <span class=\"comment\">// shows the alert</span></span><br></pre></td></tr></table></figure>\n\n<p>基于这个原因，推荐使用 <code>Node.textContent</code> 而不是使用 <code>innerHTML</code></p>\n<p>好了，终于生成了 content，和需要的坐标、参数等，这个时候调用了 _updatePosition. 在_updatePosition 中我们看到 echats 是如何去做当 position 字段传入 string, array 和 function 时的处理方法的。如果对这里感兴趣可以关注一下。 在这个方法的最后，我们看到了对 confine 的判断，如果为 true，则再次调用 confineTooltipPosition, 返回新的 x，y 坐标。然后将 content 移动到新的坐标位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> viewWidth = <span class=\"variable language_\">this</span>.<span class=\"property\">_api</span>.<span class=\"title function_\">getWidth</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> viewHeight = <span class=\"variable language_\">this</span>.<span class=\"property\">_api</span>.<span class=\"title function_\">getHeight</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tooltipModel.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;confine&#x27;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pos = <span class=\"title function_\">confineTooltipPosition</span>(x, y, content, viewWidth, viewHeight);</span><br><span class=\"line\">  x = pos[<span class=\"number\">0</span>];</span><br><span class=\"line\">  y = pos[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">content.<span class=\"title function_\">moveTo</span>(x, y);</span><br></pre></td></tr></table></figure>\n\n<p>这里看到 echarts 获取可视范围的高宽，是通过封装在内的 _api 内的方法获得。这里涉及到更底层的关于 echarts 调用 zrender 生成 root 绘图容器的过程，基本原理是先获取绘图区域实例，根据该实例再获取高宽。具体过程在此不作赘述。留个记录，有机会再来解析那一部分。具体代码可以参考 <code>zrender/src/Painter.js</code>.</p>\n<p>回到 <code>confineTooltipPosition</code> 方法， 根据前面方法的定义，这里的 x，y 是 e.offsetX 和 e.offsetY. 表示事件发生时鼠标 pointer 到 target node 的 padding 的距离。 而 width 和 height 分别是 clientWidth 和 clientHeight 加上 borderWidth. 通过位置的大小比较，可以保证新的 content 处于可视区域内。第一个 x 判断是否右边溢出，第二个 x 判断是否左边溢出。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">confineTooltipPosition</span>(<span class=\"params\">x, y, content, viewWidth, viewHeight</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> size = content.<span class=\"title function_\">getOuterSize</span>();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> width = size.<span class=\"property\">width</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> height = size.<span class=\"property\">height</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  x = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(x + width, viewWidth) - width;</span><br><span class=\"line\">  y = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(y + height, viewHeight) - height;</span><br><span class=\"line\">  x = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">  y = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(y, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">getOuterSize</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">clientWidth</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> height = <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">clientHeight</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Consider browser compatibility.</span></span><br><span class=\"line\">    <span class=\"comment\">// IE8 does not support getComputedStyle.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">defaultView</span> &amp;&amp; <span class=\"variable language_\">document</span>.<span class=\"property\">defaultView</span>.<span class=\"property\">getComputedStyle</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stl = <span class=\"variable language_\">document</span>.<span class=\"property\">defaultView</span>.<span class=\"title function_\">getComputedStyle</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">el</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stl) &#123;</span><br><span class=\"line\">            width += <span class=\"built_in\">parseInt</span>(stl.<span class=\"property\">borderLeftWidth</span>, <span class=\"number\">10</span>) + <span class=\"built_in\">parseInt</span>(stl.<span class=\"property\">borderRightWidth</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">            height += <span class=\"built_in\">parseInt</span>(stl.<span class=\"property\">borderTopWidth</span>, <span class=\"number\">10</span>) + <span class=\"built_in\">parseInt</span>(stl.<span class=\"property\">borderBottomWidth</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">width</span>: width, <span class=\"attr\">height</span>: height&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后把 content 移动到新生成的坐标上，至此就完成了 confine 的功能。</p>\n<p>最后说一个看代码的心得，平常在实现一些公共 sdk 时，经常需要暴露一些 api，有的时候看到直接定义的是一个 array，然后调用方使用 <code>array[index]</code> 去获取某个方法。这样的坏处一个是数组的顺序无法保证，增、删之后 index 可能会变，给调用方造成影响。另外一个是，通过 index 获取时，对调用的方法名感知不到，不能确保使用的方法是否正确。 echarts 中的这个实现比较优雅，apiList 和真正暴露使用的 api 对象解耦。通过遍历 apiList， 产生一个包含 apiList 元素为 key 的对象，调用这个对象时，使用函数名，更直观，更友好，值得学习。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> zrUtil <span class=\"keyword\">from</span> <span class=\"string\">&#x27;zrender/src/core/util&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> echartsAPIList = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;getDom&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getZr&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getWidth&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getHeight&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getDevicePixelRatio&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;dispatchAction&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;isDisposed&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;on&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;off&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getDataURL&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getConnectedDataURL&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getModel&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getOption&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getViewOfComponentModel&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getViewOfSeriesModel&#x27;</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ExtensionAPI</span>(<span class=\"params\">chartInstance</span>) &#123;</span><br><span class=\"line\">  zrUtil.<span class=\"title function_\">each</span>(</span><br><span class=\"line\">    echartsAPIList,</span><br><span class=\"line\">    <span class=\"keyword\">function</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>[name] = zrUtil.<span class=\"title function_\">bind</span>(chartInstance[name], chartInstance);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ExtensionAPI</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>实现业务需求时发现 tooltip 中呈现的内容比较多，当出现在边界时会出现一部分在可视范围以外。所幸 echarts 提供了一个 confine 配置给 tooltip，当为 true 时，可以强制使 tooltip 出现在 view 视图中。</p>\n<p>接下来来看看源码中是怎样实现 confine 功能的。</p>\n<p>首先可以看到，confine 是在 <code>src/component/tooltip/TooltipModel.js</code> 中定义，默认值是 <code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> echarts.<span class=\"title function_\">extendComponentModel</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;tooltip&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">dependencies</span>: [<span class=\"string\">&#x27;axisPointer&#x27;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">defaultOption</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// &#x27;trigger&#x27; only works on coordinate system.</span></span><br><span class=\"line\">    <span class=\"comment\">// &#x27;item&#x27; | &#x27;axis&#x27; | &#x27;none&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;item&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// &#x27;click&#x27; | &#x27;mousemove&#x27; | &#x27;none&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">triggerOn</span>: <span class=\"string\">&#x27;mousemove|click&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。</span></span><br><span class=\"line\">    <span class=\"attr\">confine</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>接下来，可以看到在同级目录下的 <code>TooltipView.js</code> 文件，这里负责定义了 TooltipView 相关的显示、隐藏、更新位置等的方法。在该文件中搜索 confine，发现相关代码主要是两处，一处是 <code>confineTooltipPosion</code> function，这里很好理解，通过计算当前 x、y 值，和当前的可视范围的宽高 viewWidth, viewHeight 比较，得到 confine 之后新的 x、y 值。 另一处则是调用<code>confineTooltipPosion</code>的 <code>_updatePosition</code> 方法.</p>\n<p>在这里，一共定义了三种 showTooltip 方法，对应不同的对象。分别是 _showAxisTooltip, _showComponentItemTooltip 和 _showSeriesItemTooltip . 我们只关注 series 中 item 的 tooltip， 至于 AxisTooltip 和 ComponentItemTooltip，在原理上基本一致。</p>\n<p>梳理一番之后发现，在该类中，方法的调用链是 <code>confineTooltipPosion</code> -&gt; <code>_updatePosition</code> -&gt; <code>_showTooltipContent</code> -&gt; <code>_showSeriesItemTooltip</code> -&gt; <code>_tryShow</code> -&gt; <code>_initGlobalListener</code> -&gt; <code>render</code>. 执行顺序是从右至左。</p>\n<p>理清了思路，接下来我们来看代码是如何实现 confine 的过程。</p>\n<p>弄清了执行顺序后，就很好理解 tooltip 的渲染过程了。在生命周期 render 函数中，调用了 <code>_initGlobalListener</code>，在该方法中， 可以获取到一个共享的全局监听器 <code>globalListener</code>. 这个监听器具体实现和属性可参见<code>src/component/axisPointer/globalListener.js</code>。 这里我们先关注暴露出来的 <code>register</code>方法，他接受三个 arguments: <code>function register(key, api, handler)</code>; 所以这里就很好理解了，在初始化阶段，判断 tooltip 的触发条件（triggerOn:’click’ | ‘mousemove’ | ‘none’ ）， 如果不是<code>none</code>， 则 globalListener 给<code>itemTooltip</code> 注册了回调 handler。当 <code>currTrigger</code>是 <code>click</code>或<code>mousemove</code> 时，调用 <code>_tryShow</code> 显示 tooltip，当 leave 时调用 <code>_hide</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _initGlobalListener</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tooltipModel = <span class=\"variable language_\">this</span>.<span class=\"property\">_tooltipModel</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> triggerOn = tooltipModel.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;triggerOn&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">globalListener.<span class=\"title function_\">register</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;itemTooltip&#x27;</span>,</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_api</span>,</span><br><span class=\"line\">  <span class=\"title function_\">bind</span>(<span class=\"keyword\">function</span>(<span class=\"params\">currTrigger, e, dispatchAction</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// If &#x27;none&#x27;, it is not controlled by mouse totally.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (triggerOn !== <span class=\"string\">&#x27;none&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (triggerOn.<span class=\"title function_\">indexOf</span>(currTrigger) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_tryShow</span>(e, dispatchAction);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currTrigger === <span class=\"string\">&#x27;leave&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_hide</span>(dispatchAction);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"variable language_\">this</span>),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>tryShow 调用后, 我们可以看到这个方法实现非常直观，根据条件来判断显示 series、component 还是 axis 的 tooltip。我们重点关注_showSeriesItemTooltip.</p>\n<p>走到_showSeriesItemTooltip，这个函数声明并计算了一系列的变量，都是为了 function _showTooltipContent 的参数做准备。我们可以看到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">_showOrMove</span>(tooltipModel, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_showTooltipContent</span>(</span><br><span class=\"line\">    tooltipModel,</span><br><span class=\"line\">    defaultHtml,</span><br><span class=\"line\">    params,</span><br><span class=\"line\">    asyncTicket,</span><br><span class=\"line\">    e.<span class=\"property\">offsetX</span>,</span><br><span class=\"line\">    e.<span class=\"property\">offsetY</span>,</span><br><span class=\"line\">    e.<span class=\"property\">position</span>,</span><br><span class=\"line\">    e.<span class=\"property\">target</span>,</span><br><span class=\"line\">    markers,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>结合 echarts tooltip 的文档和 tooltipModel 来看，我们可以传入一个配置参数 showDelay，如果 delay 大于 0 则 setTimeout，若干秒后执行回调函数，在这里则是显示 toolTip（ _showTooltipContent）；否则立即执行 callback。不过官方文档并不建议设置 delay。 所以我们可以认为_showOrMove 是个定时器，到了时间后显示 tooltip。_showOrMove 实现如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//_showOrMove</span></span><br><span class=\"line\"><span class=\"comment\">// showDelay is used in this case: tooltip.enterable is set</span></span><br><span class=\"line\"><span class=\"comment\">// as true. User intent to move mouse into tooltip and click</span></span><br><span class=\"line\"><span class=\"comment\">// something. `showDelay` makes it easyer to enter the content</span></span><br><span class=\"line\"><span class=\"comment\">// but tooltip do not move immediately.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> delay = tooltipModel.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;showDelay&#x27;</span>);</span><br><span class=\"line\">cb = zrUtil.<span class=\"title function_\">bind</span>(cb, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_showTimout</span>);</span><br><span class=\"line\">delay &gt; <span class=\"number\">0</span> ? (<span class=\"variable language_\">this</span>.<span class=\"property\">_showTimout</span> = <span class=\"built_in\">setTimeout</span>(cb, delay)) : <span class=\"title function_\">cb</span>();</span><br></pre></td></tr></table></figure>\n\n<p>回到_showTooltipContent， 在这个方法里我们知道了 echarts 如何兼容 formatter，传入 string 和 function 时不同的处理方法。通过 typeof 判断后，如果是 string， 则通过 <code>formatUtil.formatTpl</code> 直接 replace, return 一个 tpl<string>; 如果 typeof 是 function， 则通过 <code>.innerHTML</code> 插入一段新的 string.</p>\n<p>关键代码如下, 实现逻辑在这里就不过多关注了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// is string formatTpl</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Template formatter</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">tpl</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Array.&lt;Object&gt;|Object</span>&#125; <span class=\"variable\">paramsList</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">boolean</span>&#125; [encode=false]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">formatTpl</span>(<span class=\"params\">tpl, paramsList, encode</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!zrUtil.<span class=\"title function_\">isArray</span>(paramsList)) &#123;</span><br><span class=\"line\">    paramsList = [paramsList];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> seriesLen = paramsList.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!seriesLen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $vars = paramsList[<span class=\"number\">0</span>].<span class=\"property\">$vars</span> || [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; $vars.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> alias = <span class=\"variable constant_\">TPL_VAR_ALIAS</span>[i];</span><br><span class=\"line\">    tpl = tpl.<span class=\"title function_\">replace</span>(<span class=\"title function_\">wrapVar</span>(alias), <span class=\"title function_\">wrapVar</span>(alias, <span class=\"number\">0</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> seriesIdx = <span class=\"number\">0</span>; seriesIdx &lt; seriesLen; seriesIdx++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; $vars.<span class=\"property\">length</span>; k++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> val = paramsList[seriesIdx][$vars[k]];</span><br><span class=\"line\">      tpl = tpl.<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">        <span class=\"title function_\">wrapVar</span>(<span class=\"variable constant_\">TPL_VAR_ALIAS</span>[k], seriesIdx),</span><br><span class=\"line\">        encode ? <span class=\"title function_\">encodeHTML</span>(val) : val,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tpl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// is function, setContent</span></span><br><span class=\"line\"><span class=\"attr\">setContent</span>: <span class=\"keyword\">function</span> (<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">innerHTML</span> = content == <span class=\"literal\">null</span> ? <span class=\"string\">&#x27;&#x27;</span> : content;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>这里插一个题外话， HTML5 规范中表示 <code>&lt;script&gt;</code> tag 中的内容在使用 <code>innerHTML</code> 插入时是不应该被执行的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;&lt;script&gt;alert(&#x27;I am John in an annoying alert!&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\"> el.<span class=\"property\">innerHTML</span> = name; <span class=\"comment\">// harmless in this case</span></span><br></pre></td></tr></table></figure>\n\n<p>但是当不使用 <code>&lt;script&gt;</code> tag 并使用 innerHTML 插入 string 时，则会有 croos-site scripting attact 风险</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&quot;&lt;img src=&#x27;x&#x27; onerror=&#x27;alert(1)&#x27;&gt;&quot;</span>;</span><br><span class=\"line\">el.<span class=\"property\">innerHTML</span> = name; <span class=\"comment\">// shows the alert</span></span><br></pre></td></tr></table></figure>\n\n<p>基于这个原因，推荐使用 <code>Node.textContent</code> 而不是使用 <code>innerHTML</code></p>\n<p>好了，终于生成了 content，和需要的坐标、参数等，这个时候调用了 _updatePosition. 在_updatePosition 中我们看到 echats 是如何去做当 position 字段传入 string, array 和 function 时的处理方法的。如果对这里感兴趣可以关注一下。 在这个方法的最后，我们看到了对 confine 的判断，如果为 true，则再次调用 confineTooltipPosition, 返回新的 x，y 坐标。然后将 content 移动到新的坐标位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> viewWidth = <span class=\"variable language_\">this</span>.<span class=\"property\">_api</span>.<span class=\"title function_\">getWidth</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> viewHeight = <span class=\"variable language_\">this</span>.<span class=\"property\">_api</span>.<span class=\"title function_\">getHeight</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tooltipModel.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;confine&#x27;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pos = <span class=\"title function_\">confineTooltipPosition</span>(x, y, content, viewWidth, viewHeight);</span><br><span class=\"line\">  x = pos[<span class=\"number\">0</span>];</span><br><span class=\"line\">  y = pos[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">content.<span class=\"title function_\">moveTo</span>(x, y);</span><br></pre></td></tr></table></figure>\n\n<p>这里看到 echarts 获取可视范围的高宽，是通过封装在内的 _api 内的方法获得。这里涉及到更底层的关于 echarts 调用 zrender 生成 root 绘图容器的过程，基本原理是先获取绘图区域实例，根据该实例再获取高宽。具体过程在此不作赘述。留个记录，有机会再来解析那一部分。具体代码可以参考 <code>zrender/src/Painter.js</code>.</p>\n<p>回到 <code>confineTooltipPosition</code> 方法， 根据前面方法的定义，这里的 x，y 是 e.offsetX 和 e.offsetY. 表示事件发生时鼠标 pointer 到 target node 的 padding 的距离。 而 width 和 height 分别是 clientWidth 和 clientHeight 加上 borderWidth. 通过位置的大小比较，可以保证新的 content 处于可视区域内。第一个 x 判断是否右边溢出，第二个 x 判断是否左边溢出。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">confineTooltipPosition</span>(<span class=\"params\">x, y, content, viewWidth, viewHeight</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> size = content.<span class=\"title function_\">getOuterSize</span>();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> width = size.<span class=\"property\">width</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> height = size.<span class=\"property\">height</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  x = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(x + width, viewWidth) - width;</span><br><span class=\"line\">  y = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(y + height, viewHeight) - height;</span><br><span class=\"line\">  x = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">  y = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(y, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">getOuterSize</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">clientWidth</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> height = <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">clientHeight</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Consider browser compatibility.</span></span><br><span class=\"line\">    <span class=\"comment\">// IE8 does not support getComputedStyle.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">defaultView</span> &amp;&amp; <span class=\"variable language_\">document</span>.<span class=\"property\">defaultView</span>.<span class=\"property\">getComputedStyle</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stl = <span class=\"variable language_\">document</span>.<span class=\"property\">defaultView</span>.<span class=\"title function_\">getComputedStyle</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">el</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stl) &#123;</span><br><span class=\"line\">            width += <span class=\"built_in\">parseInt</span>(stl.<span class=\"property\">borderLeftWidth</span>, <span class=\"number\">10</span>) + <span class=\"built_in\">parseInt</span>(stl.<span class=\"property\">borderRightWidth</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">            height += <span class=\"built_in\">parseInt</span>(stl.<span class=\"property\">borderTopWidth</span>, <span class=\"number\">10</span>) + <span class=\"built_in\">parseInt</span>(stl.<span class=\"property\">borderBottomWidth</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">width</span>: width, <span class=\"attr\">height</span>: height&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后把 content 移动到新生成的坐标上，至此就完成了 confine 的功能。</p>\n<p>最后说一个看代码的心得，平常在实现一些公共 sdk 时，经常需要暴露一些 api，有的时候看到直接定义的是一个 array，然后调用方使用 <code>array[index]</code> 去获取某个方法。这样的坏处一个是数组的顺序无法保证，增、删之后 index 可能会变，给调用方造成影响。另外一个是，通过 index 获取时，对调用的方法名感知不到，不能确保使用的方法是否正确。 echarts 中的这个实现比较优雅，apiList 和真正暴露使用的 api 对象解耦。通过遍历 apiList， 产生一个包含 apiList 元素为 key 的对象，调用这个对象时，使用函数名，更直观，更友好，值得学习。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> zrUtil <span class=\"keyword\">from</span> <span class=\"string\">&#x27;zrender/src/core/util&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> echartsAPIList = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;getDom&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getZr&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getWidth&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getHeight&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getDevicePixelRatio&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;dispatchAction&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;isDisposed&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;on&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;off&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getDataURL&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getConnectedDataURL&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getModel&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getOption&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getViewOfComponentModel&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;getViewOfSeriesModel&#x27;</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ExtensionAPI</span>(<span class=\"params\">chartInstance</span>) &#123;</span><br><span class=\"line\">  zrUtil.<span class=\"title function_\">each</span>(</span><br><span class=\"line\">    echartsAPIList,</span><br><span class=\"line\">    <span class=\"keyword\">function</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>[name] = zrUtil.<span class=\"title function_\">bind</span>(chartInstance[name], chartInstance);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ExtensionAPI</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"日式吃法","abbrlink":"66075a24","date":"2020-05-22T04:21:22.000Z","_content":"\n天有点热，跟同事去吃兰州拉面。一位同事点了一碗拉面，有汤，比较烫。他用筷子一直扭，把拉面卷到筷子上。大家看着他的表演，他解释道这样凉的更快，是日式吃法，大伙信以为真。紧接着他悠悠地说，这是日照的吃法。\n同事是日照人。\n","source":"_posts/日式吃法.md","raw":"---\ntitle: 日式吃法\ncategories:\n  - life\nabbrlink: 66075a24\ndate: 2020-05-21 21:21:22\ntags:\n---\n\n天有点热，跟同事去吃兰州拉面。一位同事点了一碗拉面，有汤，比较烫。他用筷子一直扭，把拉面卷到筷子上。大家看着他的表演，他解释道这样凉的更快，是日式吃法，大伙信以为真。紧接着他悠悠地说，这是日照的吃法。\n同事是日照人。\n","slug":"日式吃法","published":1,"updated":"2021-09-14T11:40:19.908Z","_id":"ckaguocy200001smh9pqo5umo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>天有点热，跟同事去吃兰州拉面。一位同事点了一碗拉面，有汤，比较烫。他用筷子一直扭，把拉面卷到筷子上。大家看着他的表演，他解释道这样凉的更快，是日式吃法，大伙信以为真。紧接着他悠悠地说，这是日照的吃法。<br>同事是日照人。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>天有点热，跟同事去吃兰州拉面。一位同事点了一碗拉面，有汤，比较烫。他用筷子一直扭，把拉面卷到筷子上。大家看着他的表演，他解释道这样凉的更快，是日式吃法，大伙信以为真。紧接着他悠悠地说，这是日照的吃法。<br>同事是日照人。</p>\n"},{"title":"新还是旧","abbrlink":"de881473","date":"2020-06-05T05:33:22.000Z","_content":"\n今天看了一个崔健的采访。里面有一句话很有感触。“年轻人认为，我看到东西，就是时尚。我看不到的东西都是过时的。”\n\n前段时间，看《世上只有一个京都》的时候，也看到类似的对新和旧的讨论。\n\n在《宗方姐妹》中，姐姐与妹妹似乎就是旧与新的代表。\n\n——“满里，我有那么陈旧吗？那你所谓的崭新又是什么呢？”\n\n——“姐姐去京都，看的是庭园，走的是寺庙。”\n\n——“这些就算是陈旧、腐朽老化的玩意儿吗？我认为不会变老变旧的东西，就是崭新的。真正崭新的东西，就是永远不会变老变旧，不是吗？你所谓的崭新，不过是去年流行的长裙，今年流行的短裙。这些短暂的新鲜事物，你就那么喜欢吗？”\n\n什么是新，什么是旧？值得思考。\n\n补：今天再去看自己转发的那条微博，视频已经被删掉了。意料之外，情理之中。意料之外是因为我感觉整个采访没有聊什么禁忌话题，也没有针对什么部门或者事件，删除的标准或原因实在是难以把握。情理之中是因为前几年，同样是看一个崔健的采访，在对话中谈到政治和音乐的相关话题。过了不知多久再回去看，原视频也被删掉了。可惜当时没有记录下来观点，现在也无从找起了。（2020-06-17）\n","source":"_posts/新还是旧.md","raw":"---\ntitle: 新还是旧\ncategories:\n  - life\nabbrlink: de881473\ndate: 2020-06-04 22:33:22\ntags:\n---\n\n今天看了一个崔健的采访。里面有一句话很有感触。“年轻人认为，我看到东西，就是时尚。我看不到的东西都是过时的。”\n\n前段时间，看《世上只有一个京都》的时候，也看到类似的对新和旧的讨论。\n\n在《宗方姐妹》中，姐姐与妹妹似乎就是旧与新的代表。\n\n——“满里，我有那么陈旧吗？那你所谓的崭新又是什么呢？”\n\n——“姐姐去京都，看的是庭园，走的是寺庙。”\n\n——“这些就算是陈旧、腐朽老化的玩意儿吗？我认为不会变老变旧的东西，就是崭新的。真正崭新的东西，就是永远不会变老变旧，不是吗？你所谓的崭新，不过是去年流行的长裙，今年流行的短裙。这些短暂的新鲜事物，你就那么喜欢吗？”\n\n什么是新，什么是旧？值得思考。\n\n补：今天再去看自己转发的那条微博，视频已经被删掉了。意料之外，情理之中。意料之外是因为我感觉整个采访没有聊什么禁忌话题，也没有针对什么部门或者事件，删除的标准或原因实在是难以把握。情理之中是因为前几年，同样是看一个崔健的采访，在对话中谈到政治和音乐的相关话题。过了不知多久再回去看，原视频也被删掉了。可惜当时没有记录下来观点，现在也无从找起了。（2020-06-17）\n","slug":"新还是旧","published":1,"updated":"2021-09-14T11:40:19.908Z","_id":"ckb6k0nq10000gcmh6etw1hb5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今天看了一个崔健的采访。里面有一句话很有感触。“年轻人认为，我看到东西，就是时尚。我看不到的东西都是过时的。”</p>\n<p>前段时间，看《世上只有一个京都》的时候，也看到类似的对新和旧的讨论。</p>\n<p>在《宗方姐妹》中，姐姐与妹妹似乎就是旧与新的代表。</p>\n<p>——“满里，我有那么陈旧吗？那你所谓的崭新又是什么呢？”</p>\n<p>——“姐姐去京都，看的是庭园，走的是寺庙。”</p>\n<p>——“这些就算是陈旧、腐朽老化的玩意儿吗？我认为不会变老变旧的东西，就是崭新的。真正崭新的东西，就是永远不会变老变旧，不是吗？你所谓的崭新，不过是去年流行的长裙，今年流行的短裙。这些短暂的新鲜事物，你就那么喜欢吗？”</p>\n<p>什么是新，什么是旧？值得思考。</p>\n<p>补：今天再去看自己转发的那条微博，视频已经被删掉了。意料之外，情理之中。意料之外是因为我感觉整个采访没有聊什么禁忌话题，也没有针对什么部门或者事件，删除的标准或原因实在是难以把握。情理之中是因为前几年，同样是看一个崔健的采访，在对话中谈到政治和音乐的相关话题。过了不知多久再回去看，原视频也被删掉了。可惜当时没有记录下来观点，现在也无从找起了。（2020-06-17）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天看了一个崔健的采访。里面有一句话很有感触。“年轻人认为，我看到东西，就是时尚。我看不到的东西都是过时的。”</p>\n<p>前段时间，看《世上只有一个京都》的时候，也看到类似的对新和旧的讨论。</p>\n<p>在《宗方姐妹》中，姐姐与妹妹似乎就是旧与新的代表。</p>\n<p>——“满里，我有那么陈旧吗？那你所谓的崭新又是什么呢？”</p>\n<p>——“姐姐去京都，看的是庭园，走的是寺庙。”</p>\n<p>——“这些就算是陈旧、腐朽老化的玩意儿吗？我认为不会变老变旧的东西，就是崭新的。真正崭新的东西，就是永远不会变老变旧，不是吗？你所谓的崭新，不过是去年流行的长裙，今年流行的短裙。这些短暂的新鲜事物，你就那么喜欢吗？”</p>\n<p>什么是新，什么是旧？值得思考。</p>\n<p>补：今天再去看自己转发的那条微博，视频已经被删掉了。意料之外，情理之中。意料之外是因为我感觉整个采访没有聊什么禁忌话题，也没有针对什么部门或者事件，删除的标准或原因实在是难以把握。情理之中是因为前几年，同样是看一个崔健的采访，在对话中谈到政治和音乐的相关话题。过了不知多久再回去看，原视频也被删掉了。可惜当时没有记录下来观点，现在也无从找起了。（2020-06-17）</p>\n"},{"title":"温度计","abbrlink":"3a5fe83c","date":"2020-06-08T02:27:30.000Z","_content":"\n身体健康的时候测体温，这温度计会不会是坏了？\n发烧了测体温，这温度计会不会是坏了？\n","source":"_posts/温度计.md","raw":"---\ntitle: 温度计\ncategories:\n  - life\nabbrlink: 3a5fe83c\ndate: 2020-06-07 19:27:30\ntags:\n---\n\n身体健康的时候测体温，这温度计会不会是坏了？\n发烧了测体温，这温度计会不会是坏了？\n","slug":"温度计","published":1,"updated":"2020-06-08T13:53:02.024Z","_id":"ckb6k28yh000010mh7yk675vz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>身体健康的时候测体温，这温度计会不会是坏了？<br>发烧了测体温，这温度计会不会是坏了？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>身体健康的时候测体温，这温度计会不会是坏了？<br>发烧了测体温，这温度计会不会是坏了？</p>\n"},{"title":"摆摊","abbrlink":"9dd3c30c","date":"2020-06-09T04:53:45.000Z","_content":"\n最近摆摊这个话题很火。好多公司蹭着这波流量发了些营销活动和视频，朋友圈看到好几个，员工老板齐上阵，支个摊，摆几张打印的 A4 纸，拿个大喇叭喊几句广告口号。不仅互联网公司，不少群众也是跃跃欲试，吆五喝六的表示自己要出去卖点啥啥。虽然绝大部分都是借着这个风头开开玩笑，但也不缺真有此想法的。就跟前两年万众创业，如今风头吹向万众摆摊。\n\n看了不少大伙说的摆摊规划，还没见一个人说我想买什么，一个都没有，全是卖家。我也不记得我上一次走在街上临时起意买东西是什么时候了，瓶装水除外。\n\n起风了，大家蜂拥而至，跑得快的抢得先机，跑得慢的和脑子不聪明的亦步亦趋。风吹往下一个领域，留下一地鸡毛。在这个过程中有两种人挺受伤的，一个是一直干这行的，卖煎饼的卖豆浆的，挣点辛苦钱。大量新人闯进来，挤压了原先这些从业者的生存空间，短期利益可能会下降，撑不过去就死掉了。第二种就是看别人干，自己也去试试的玩票型玩家，成本投入了，时间投入了，一条街上都是同质化商品。卖啥啥不行，摊出来的煎饼只能发发朋友圈，吃下去一言难尽，又吃不了苦，不能起早贪黑，做热干面的活也不行。干这行能说会道的还能赚点，那种看着别人有肉吃就入行的，就只能眼睁睁等死了。\n\n我也干过摆摊。\n\n大二的时候，新生来学校，校方在篮球场上划了一片区域搭了好多遮阳棚，一个棚子下四个摊位。有几个有生意头脑的同学搞定了进货商，同时也通过一些手段，拿到了摊位的经营权。然后再把摊位经营权发给关系要好，或者看得上，信得过的同学。这些拿到经营权的同学，就发动自己认识的同学，老乡，让他们来摊位上购买电话卡和棉被。现在看来这些一级 dealer 们真是即有魄力又有商业头脑，还有组织建设和管理经验，值得学习。当时我与其中一个头头熟络，他做个人情，给我一个摊位。但是两三天的摆摊生涯下来，我感受到了自己的技不如人。摆摊需要会说道，会拉关系。有些学生一个人来的，该怎么卖；有那种家长带着孩子来的，又怎么卖；还有几个学生的小团体，各有门道，不一而论。我们只能接接自己院系的同乡，目标群体大大减少。而且我那时也不太会拉关系（即使现在也不擅长），没法快速忽悠买家，也做不到差异化的营销，可以想象，那么大一片摊位，全卖一样的产品，结果可想而知。后来算下来，业绩十分惨淡，大约赚了几百块，吃了一顿烤鱼，喝了几瓶啤酒。现在回想起来，也是别有一番滋味。\n\n还记得给我摊位的那个朋友姓冯。大学毕业大家各奔前程，他成立了一间公司，在学校旁边开发区租了个办公室。十多年过去了，不知道生意做得怎样了。\n\n后记：前几日北京又有消息说，北京不适合摆摊，想想也是，堂堂首都，摆摊多了市容怎么办。最近北京疫情又爆发，这一波风口暂时算是歇菜，没人提了。2020-06-19。\n","source":"_posts/摆摊.md","raw":"---\ntitle: 摆摊\ncategories:\n  - life\nabbrlink: 9dd3c30c\ndate: 2020-06-08 21:53:45\ntags:\n---\n\n最近摆摊这个话题很火。好多公司蹭着这波流量发了些营销活动和视频，朋友圈看到好几个，员工老板齐上阵，支个摊，摆几张打印的 A4 纸，拿个大喇叭喊几句广告口号。不仅互联网公司，不少群众也是跃跃欲试，吆五喝六的表示自己要出去卖点啥啥。虽然绝大部分都是借着这个风头开开玩笑，但也不缺真有此想法的。就跟前两年万众创业，如今风头吹向万众摆摊。\n\n看了不少大伙说的摆摊规划，还没见一个人说我想买什么，一个都没有，全是卖家。我也不记得我上一次走在街上临时起意买东西是什么时候了，瓶装水除外。\n\n起风了，大家蜂拥而至，跑得快的抢得先机，跑得慢的和脑子不聪明的亦步亦趋。风吹往下一个领域，留下一地鸡毛。在这个过程中有两种人挺受伤的，一个是一直干这行的，卖煎饼的卖豆浆的，挣点辛苦钱。大量新人闯进来，挤压了原先这些从业者的生存空间，短期利益可能会下降，撑不过去就死掉了。第二种就是看别人干，自己也去试试的玩票型玩家，成本投入了，时间投入了，一条街上都是同质化商品。卖啥啥不行，摊出来的煎饼只能发发朋友圈，吃下去一言难尽，又吃不了苦，不能起早贪黑，做热干面的活也不行。干这行能说会道的还能赚点，那种看着别人有肉吃就入行的，就只能眼睁睁等死了。\n\n我也干过摆摊。\n\n大二的时候，新生来学校，校方在篮球场上划了一片区域搭了好多遮阳棚，一个棚子下四个摊位。有几个有生意头脑的同学搞定了进货商，同时也通过一些手段，拿到了摊位的经营权。然后再把摊位经营权发给关系要好，或者看得上，信得过的同学。这些拿到经营权的同学，就发动自己认识的同学，老乡，让他们来摊位上购买电话卡和棉被。现在看来这些一级 dealer 们真是即有魄力又有商业头脑，还有组织建设和管理经验，值得学习。当时我与其中一个头头熟络，他做个人情，给我一个摊位。但是两三天的摆摊生涯下来，我感受到了自己的技不如人。摆摊需要会说道，会拉关系。有些学生一个人来的，该怎么卖；有那种家长带着孩子来的，又怎么卖；还有几个学生的小团体，各有门道，不一而论。我们只能接接自己院系的同乡，目标群体大大减少。而且我那时也不太会拉关系（即使现在也不擅长），没法快速忽悠买家，也做不到差异化的营销，可以想象，那么大一片摊位，全卖一样的产品，结果可想而知。后来算下来，业绩十分惨淡，大约赚了几百块，吃了一顿烤鱼，喝了几瓶啤酒。现在回想起来，也是别有一番滋味。\n\n还记得给我摊位的那个朋友姓冯。大学毕业大家各奔前程，他成立了一间公司，在学校旁边开发区租了个办公室。十多年过去了，不知道生意做得怎样了。\n\n后记：前几日北京又有消息说，北京不适合摆摊，想想也是，堂堂首都，摆摊多了市容怎么办。最近北京疫情又爆发，这一波风口暂时算是歇菜，没人提了。2020-06-19。\n","slug":"摆摊","published":1,"updated":"2021-09-14T11:40:19.908Z","_id":"ckb6k477y0000asmhcqtd62y6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近摆摊这个话题很火。好多公司蹭着这波流量发了些营销活动和视频，朋友圈看到好几个，员工老板齐上阵，支个摊，摆几张打印的 A4 纸，拿个大喇叭喊几句广告口号。不仅互联网公司，不少群众也是跃跃欲试，吆五喝六的表示自己要出去卖点啥啥。虽然绝大部分都是借着这个风头开开玩笑，但也不缺真有此想法的。就跟前两年万众创业，如今风头吹向万众摆摊。</p>\n<p>看了不少大伙说的摆摊规划，还没见一个人说我想买什么，一个都没有，全是卖家。我也不记得我上一次走在街上临时起意买东西是什么时候了，瓶装水除外。</p>\n<p>起风了，大家蜂拥而至，跑得快的抢得先机，跑得慢的和脑子不聪明的亦步亦趋。风吹往下一个领域，留下一地鸡毛。在这个过程中有两种人挺受伤的，一个是一直干这行的，卖煎饼的卖豆浆的，挣点辛苦钱。大量新人闯进来，挤压了原先这些从业者的生存空间，短期利益可能会下降，撑不过去就死掉了。第二种就是看别人干，自己也去试试的玩票型玩家，成本投入了，时间投入了，一条街上都是同质化商品。卖啥啥不行，摊出来的煎饼只能发发朋友圈，吃下去一言难尽，又吃不了苦，不能起早贪黑，做热干面的活也不行。干这行能说会道的还能赚点，那种看着别人有肉吃就入行的，就只能眼睁睁等死了。</p>\n<p>我也干过摆摊。</p>\n<p>大二的时候，新生来学校，校方在篮球场上划了一片区域搭了好多遮阳棚，一个棚子下四个摊位。有几个有生意头脑的同学搞定了进货商，同时也通过一些手段，拿到了摊位的经营权。然后再把摊位经营权发给关系要好，或者看得上，信得过的同学。这些拿到经营权的同学，就发动自己认识的同学，老乡，让他们来摊位上购买电话卡和棉被。现在看来这些一级 dealer 们真是即有魄力又有商业头脑，还有组织建设和管理经验，值得学习。当时我与其中一个头头熟络，他做个人情，给我一个摊位。但是两三天的摆摊生涯下来，我感受到了自己的技不如人。摆摊需要会说道，会拉关系。有些学生一个人来的，该怎么卖；有那种家长带着孩子来的，又怎么卖；还有几个学生的小团体，各有门道，不一而论。我们只能接接自己院系的同乡，目标群体大大减少。而且我那时也不太会拉关系（即使现在也不擅长），没法快速忽悠买家，也做不到差异化的营销，可以想象，那么大一片摊位，全卖一样的产品，结果可想而知。后来算下来，业绩十分惨淡，大约赚了几百块，吃了一顿烤鱼，喝了几瓶啤酒。现在回想起来，也是别有一番滋味。</p>\n<p>还记得给我摊位的那个朋友姓冯。大学毕业大家各奔前程，他成立了一间公司，在学校旁边开发区租了个办公室。十多年过去了，不知道生意做得怎样了。</p>\n<p>后记：前几日北京又有消息说，北京不适合摆摊，想想也是，堂堂首都，摆摊多了市容怎么办。最近北京疫情又爆发，这一波风口暂时算是歇菜，没人提了。2020-06-19。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近摆摊这个话题很火。好多公司蹭着这波流量发了些营销活动和视频，朋友圈看到好几个，员工老板齐上阵，支个摊，摆几张打印的 A4 纸，拿个大喇叭喊几句广告口号。不仅互联网公司，不少群众也是跃跃欲试，吆五喝六的表示自己要出去卖点啥啥。虽然绝大部分都是借着这个风头开开玩笑，但也不缺真有此想法的。就跟前两年万众创业，如今风头吹向万众摆摊。</p>\n<p>看了不少大伙说的摆摊规划，还没见一个人说我想买什么，一个都没有，全是卖家。我也不记得我上一次走在街上临时起意买东西是什么时候了，瓶装水除外。</p>\n<p>起风了，大家蜂拥而至，跑得快的抢得先机，跑得慢的和脑子不聪明的亦步亦趋。风吹往下一个领域，留下一地鸡毛。在这个过程中有两种人挺受伤的，一个是一直干这行的，卖煎饼的卖豆浆的，挣点辛苦钱。大量新人闯进来，挤压了原先这些从业者的生存空间，短期利益可能会下降，撑不过去就死掉了。第二种就是看别人干，自己也去试试的玩票型玩家，成本投入了，时间投入了，一条街上都是同质化商品。卖啥啥不行，摊出来的煎饼只能发发朋友圈，吃下去一言难尽，又吃不了苦，不能起早贪黑，做热干面的活也不行。干这行能说会道的还能赚点，那种看着别人有肉吃就入行的，就只能眼睁睁等死了。</p>\n<p>我也干过摆摊。</p>\n<p>大二的时候，新生来学校，校方在篮球场上划了一片区域搭了好多遮阳棚，一个棚子下四个摊位。有几个有生意头脑的同学搞定了进货商，同时也通过一些手段，拿到了摊位的经营权。然后再把摊位经营权发给关系要好，或者看得上，信得过的同学。这些拿到经营权的同学，就发动自己认识的同学，老乡，让他们来摊位上购买电话卡和棉被。现在看来这些一级 dealer 们真是即有魄力又有商业头脑，还有组织建设和管理经验，值得学习。当时我与其中一个头头熟络，他做个人情，给我一个摊位。但是两三天的摆摊生涯下来，我感受到了自己的技不如人。摆摊需要会说道，会拉关系。有些学生一个人来的，该怎么卖；有那种家长带着孩子来的，又怎么卖；还有几个学生的小团体，各有门道，不一而论。我们只能接接自己院系的同乡，目标群体大大减少。而且我那时也不太会拉关系（即使现在也不擅长），没法快速忽悠买家，也做不到差异化的营销，可以想象，那么大一片摊位，全卖一样的产品，结果可想而知。后来算下来，业绩十分惨淡，大约赚了几百块，吃了一顿烤鱼，喝了几瓶啤酒。现在回想起来，也是别有一番滋味。</p>\n<p>还记得给我摊位的那个朋友姓冯。大学毕业大家各奔前程，他成立了一间公司，在学校旁边开发区租了个办公室。十多年过去了，不知道生意做得怎样了。</p>\n<p>后记：前几日北京又有消息说，北京不适合摆摊，想想也是，堂堂首都，摆摊多了市容怎么办。最近北京疫情又爆发，这一波风口暂时算是歇菜，没人提了。2020-06-19。</p>\n"},{"title":"午夜急诊","abbrlink":"1cc7585a","date":"2020-06-09T18:08:43.000Z","_content":"\n上周放纵了一把，喝了顿大酒。事后感觉难受，头疼牙疼眼睛疼，撑了两天不见消退，朋友建议去医院看看。本计划挂第二天的门诊，朋友又说晚上急诊也可以看，人还少，验血化验不排队。我心想有理，反正可能需要抽血，晚上化验了第二天再给门诊大夫看，省时。于是打车去医院急诊。\n\n到了门诊大楼，因为疫情，门口被几张桌子拦起来，绕出一条路，当中一张桌后坐了一位保安低头玩手机。园区里没什么灯，全靠急诊大厅的灯光照亮，远看仿佛一个山洞，保安如同山大王正坐当中。门外人不多，我一边向门口走去，一边想怎么跟护士描述我的感觉。还没到门口，听见有个女人呻吟，咿呀哎哟的，无法喊出正常的词句，听起来十分痛苦。仔细一看，原来是门右边的黑影里，一个中年妇女坐躺在轮椅上，一个男人站在椅背后，仿佛不知所措，又仿佛无可奈何。那对男女一直在黑影里，我看不出年龄。女子的声音气若游丝，但又真真切切，喊的人心里发毛，虽谈不上害怕，但我还是不自觉地绕开，从门最左边溜进大厅。\n\n进了大厅，里面光亮起来，心里发毛的感觉消失了。一番登记测温，值班护士告诉我医生晚上无法出诊，只能明早挂门诊。于是我退出大厅，准备打车回家。\n\n出到门外，那妇人依旧呻吟不停，于是我走入黑暗里，隔着大门，一边等车一遍远远地观察。妇人身上披着毯子，在这个夏夜显得有些格格不入，她一刻不停的呻吟，有气无力，听不出是喊妈妈还是哎呀。男子此刻盘坐在地上，盯着轮椅发呆，手里夹着一只香烟，烟头的火光如萤火虫一般，在黑夜里忽明忽暗。几米外的停车位，两个黑车司机抽着烟闲聊，有说有笑，对这场面已经见怪不怪。他们手里刷着短视频，时不时传出僵硬的罐头笑声。这笑声在黑夜里，配合着妇人的呻吟，显得尤其阴森恐怖。\n\n车很快到了，我上车之后盯着窗外发呆。那个妇人凄惨的叫声让我有点难受，久久不能忘怀。在那一刹那，我突然有点怀疑北漂的意义，如果今晚那个妇人是我的家人，甚至我自己，我该怎么办，偌大的北京，也不知在哪能弄到一张急诊病床，来一针镇痛药。我感受到个体的渺小，肌体在病痛前不堪一击。我有些怀疑，假使若干年后孤身一人，自己该如何应对今夜的状况。我该怎么去医院，该怎么挂号，疼痛难忍时，该怎么向大夫表述我的感觉。曾经看到一种论调，说婚姻和家庭是个体应对风险的机制（不是唯一的，其他的方式方法包括不仅限医疗，保险等），在这个夜里我有些更深的认识。\n\n我为那位陌生的妇女祈祷，为那位坐在黑影里的男人祝福，虽然我的祈祷并不值钱。\n","source":"_posts/午夜急诊.md","raw":"---\ntitle: 午夜急诊\ncategories:\n  - life\nabbrlink: 1cc7585a\ndate: 2020-06-09 11:08:43\ntags:\n---\n\n上周放纵了一把，喝了顿大酒。事后感觉难受，头疼牙疼眼睛疼，撑了两天不见消退，朋友建议去医院看看。本计划挂第二天的门诊，朋友又说晚上急诊也可以看，人还少，验血化验不排队。我心想有理，反正可能需要抽血，晚上化验了第二天再给门诊大夫看，省时。于是打车去医院急诊。\n\n到了门诊大楼，因为疫情，门口被几张桌子拦起来，绕出一条路，当中一张桌后坐了一位保安低头玩手机。园区里没什么灯，全靠急诊大厅的灯光照亮，远看仿佛一个山洞，保安如同山大王正坐当中。门外人不多，我一边向门口走去，一边想怎么跟护士描述我的感觉。还没到门口，听见有个女人呻吟，咿呀哎哟的，无法喊出正常的词句，听起来十分痛苦。仔细一看，原来是门右边的黑影里，一个中年妇女坐躺在轮椅上，一个男人站在椅背后，仿佛不知所措，又仿佛无可奈何。那对男女一直在黑影里，我看不出年龄。女子的声音气若游丝，但又真真切切，喊的人心里发毛，虽谈不上害怕，但我还是不自觉地绕开，从门最左边溜进大厅。\n\n进了大厅，里面光亮起来，心里发毛的感觉消失了。一番登记测温，值班护士告诉我医生晚上无法出诊，只能明早挂门诊。于是我退出大厅，准备打车回家。\n\n出到门外，那妇人依旧呻吟不停，于是我走入黑暗里，隔着大门，一边等车一遍远远地观察。妇人身上披着毯子，在这个夏夜显得有些格格不入，她一刻不停的呻吟，有气无力，听不出是喊妈妈还是哎呀。男子此刻盘坐在地上，盯着轮椅发呆，手里夹着一只香烟，烟头的火光如萤火虫一般，在黑夜里忽明忽暗。几米外的停车位，两个黑车司机抽着烟闲聊，有说有笑，对这场面已经见怪不怪。他们手里刷着短视频，时不时传出僵硬的罐头笑声。这笑声在黑夜里，配合着妇人的呻吟，显得尤其阴森恐怖。\n\n车很快到了，我上车之后盯着窗外发呆。那个妇人凄惨的叫声让我有点难受，久久不能忘怀。在那一刹那，我突然有点怀疑北漂的意义，如果今晚那个妇人是我的家人，甚至我自己，我该怎么办，偌大的北京，也不知在哪能弄到一张急诊病床，来一针镇痛药。我感受到个体的渺小，肌体在病痛前不堪一击。我有些怀疑，假使若干年后孤身一人，自己该如何应对今夜的状况。我该怎么去医院，该怎么挂号，疼痛难忍时，该怎么向大夫表述我的感觉。曾经看到一种论调，说婚姻和家庭是个体应对风险的机制（不是唯一的，其他的方式方法包括不仅限医疗，保险等），在这个夜里我有些更深的认识。\n\n我为那位陌生的妇女祈祷，为那位坐在黑影里的男人祝福，虽然我的祈祷并不值钱。\n","slug":"午夜急诊","published":1,"updated":"2021-09-14T11:40:19.907Z","_id":"ckb7cj43900004nfyengy8boo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上周放纵了一把，喝了顿大酒。事后感觉难受，头疼牙疼眼睛疼，撑了两天不见消退，朋友建议去医院看看。本计划挂第二天的门诊，朋友又说晚上急诊也可以看，人还少，验血化验不排队。我心想有理，反正可能需要抽血，晚上化验了第二天再给门诊大夫看，省时。于是打车去医院急诊。</p>\n<p>到了门诊大楼，因为疫情，门口被几张桌子拦起来，绕出一条路，当中一张桌后坐了一位保安低头玩手机。园区里没什么灯，全靠急诊大厅的灯光照亮，远看仿佛一个山洞，保安如同山大王正坐当中。门外人不多，我一边向门口走去，一边想怎么跟护士描述我的感觉。还没到门口，听见有个女人呻吟，咿呀哎哟的，无法喊出正常的词句，听起来十分痛苦。仔细一看，原来是门右边的黑影里，一个中年妇女坐躺在轮椅上，一个男人站在椅背后，仿佛不知所措，又仿佛无可奈何。那对男女一直在黑影里，我看不出年龄。女子的声音气若游丝，但又真真切切，喊的人心里发毛，虽谈不上害怕，但我还是不自觉地绕开，从门最左边溜进大厅。</p>\n<p>进了大厅，里面光亮起来，心里发毛的感觉消失了。一番登记测温，值班护士告诉我医生晚上无法出诊，只能明早挂门诊。于是我退出大厅，准备打车回家。</p>\n<p>出到门外，那妇人依旧呻吟不停，于是我走入黑暗里，隔着大门，一边等车一遍远远地观察。妇人身上披着毯子，在这个夏夜显得有些格格不入，她一刻不停的呻吟，有气无力，听不出是喊妈妈还是哎呀。男子此刻盘坐在地上，盯着轮椅发呆，手里夹着一只香烟，烟头的火光如萤火虫一般，在黑夜里忽明忽暗。几米外的停车位，两个黑车司机抽着烟闲聊，有说有笑，对这场面已经见怪不怪。他们手里刷着短视频，时不时传出僵硬的罐头笑声。这笑声在黑夜里，配合着妇人的呻吟，显得尤其阴森恐怖。</p>\n<p>车很快到了，我上车之后盯着窗外发呆。那个妇人凄惨的叫声让我有点难受，久久不能忘怀。在那一刹那，我突然有点怀疑北漂的意义，如果今晚那个妇人是我的家人，甚至我自己，我该怎么办，偌大的北京，也不知在哪能弄到一张急诊病床，来一针镇痛药。我感受到个体的渺小，肌体在病痛前不堪一击。我有些怀疑，假使若干年后孤身一人，自己该如何应对今夜的状况。我该怎么去医院，该怎么挂号，疼痛难忍时，该怎么向大夫表述我的感觉。曾经看到一种论调，说婚姻和家庭是个体应对风险的机制（不是唯一的，其他的方式方法包括不仅限医疗，保险等），在这个夜里我有些更深的认识。</p>\n<p>我为那位陌生的妇女祈祷，为那位坐在黑影里的男人祝福，虽然我的祈祷并不值钱。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上周放纵了一把，喝了顿大酒。事后感觉难受，头疼牙疼眼睛疼，撑了两天不见消退，朋友建议去医院看看。本计划挂第二天的门诊，朋友又说晚上急诊也可以看，人还少，验血化验不排队。我心想有理，反正可能需要抽血，晚上化验了第二天再给门诊大夫看，省时。于是打车去医院急诊。</p>\n<p>到了门诊大楼，因为疫情，门口被几张桌子拦起来，绕出一条路，当中一张桌后坐了一位保安低头玩手机。园区里没什么灯，全靠急诊大厅的灯光照亮，远看仿佛一个山洞，保安如同山大王正坐当中。门外人不多，我一边向门口走去，一边想怎么跟护士描述我的感觉。还没到门口，听见有个女人呻吟，咿呀哎哟的，无法喊出正常的词句，听起来十分痛苦。仔细一看，原来是门右边的黑影里，一个中年妇女坐躺在轮椅上，一个男人站在椅背后，仿佛不知所措，又仿佛无可奈何。那对男女一直在黑影里，我看不出年龄。女子的声音气若游丝，但又真真切切，喊的人心里发毛，虽谈不上害怕，但我还是不自觉地绕开，从门最左边溜进大厅。</p>\n<p>进了大厅，里面光亮起来，心里发毛的感觉消失了。一番登记测温，值班护士告诉我医生晚上无法出诊，只能明早挂门诊。于是我退出大厅，准备打车回家。</p>\n<p>出到门外，那妇人依旧呻吟不停，于是我走入黑暗里，隔着大门，一边等车一遍远远地观察。妇人身上披着毯子，在这个夏夜显得有些格格不入，她一刻不停的呻吟，有气无力，听不出是喊妈妈还是哎呀。男子此刻盘坐在地上，盯着轮椅发呆，手里夹着一只香烟，烟头的火光如萤火虫一般，在黑夜里忽明忽暗。几米外的停车位，两个黑车司机抽着烟闲聊，有说有笑，对这场面已经见怪不怪。他们手里刷着短视频，时不时传出僵硬的罐头笑声。这笑声在黑夜里，配合着妇人的呻吟，显得尤其阴森恐怖。</p>\n<p>车很快到了，我上车之后盯着窗外发呆。那个妇人凄惨的叫声让我有点难受，久久不能忘怀。在那一刹那，我突然有点怀疑北漂的意义，如果今晚那个妇人是我的家人，甚至我自己，我该怎么办，偌大的北京，也不知在哪能弄到一张急诊病床，来一针镇痛药。我感受到个体的渺小，肌体在病痛前不堪一击。我有些怀疑，假使若干年后孤身一人，自己该如何应对今夜的状况。我该怎么去医院，该怎么挂号，疼痛难忍时，该怎么向大夫表述我的感觉。曾经看到一种论调，说婚姻和家庭是个体应对风险的机制（不是唯一的，其他的方式方法包括不仅限医疗，保险等），在这个夜里我有些更深的认识。</p>\n<p>我为那位陌生的妇女祈祷，为那位坐在黑影里的男人祝福，虽然我的祈祷并不值钱。</p>\n"},{"title":"天文课","abbrlink":"26feb4d9","date":"2020-07-09T03:32:03.000Z","_content":"\n晚上去理发，迎面走来四个小男孩儿，约摸五六岁的样子，其中一个抱着篮球，估计刚从球场玩完回家。他们排成一溜，边走边大声说话。\n\n其中一个问，地壳下面是什么？\n\n其中一个回答，地壳下面是地幔！\n\n之前一个小孩紧接着问到，那地幔下面是什么？\n\n还是前面那个小孩道，地幔下面是地核，我上过天文课！\n\n之后我和他们擦肩而过。\n","source":"_posts/天文课.md","raw":"---\ntitle: 天文课\ncategories:\n  - life\nabbrlink: 26feb4d9\ndate: 2020-07-08 20:32:03\ntags:\n---\n\n晚上去理发，迎面走来四个小男孩儿，约摸五六岁的样子，其中一个抱着篮球，估计刚从球场玩完回家。他们排成一溜，边走边大声说话。\n\n其中一个问，地壳下面是什么？\n\n其中一个回答，地壳下面是地幔！\n\n之前一个小孩紧接着问到，那地幔下面是什么？\n\n还是前面那个小孩道，地幔下面是地核，我上过天文课！\n\n之后我和他们擦肩而过。\n","slug":"天文课","published":1,"updated":"2021-09-14T11:40:19.907Z","_id":"ckcdcedex00009nfy3emy4uu1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>晚上去理发，迎面走来四个小男孩儿，约摸五六岁的样子，其中一个抱着篮球，估计刚从球场玩完回家。他们排成一溜，边走边大声说话。</p>\n<p>其中一个问，地壳下面是什么？</p>\n<p>其中一个回答，地壳下面是地幔！</p>\n<p>之前一个小孩紧接着问到，那地幔下面是什么？</p>\n<p>还是前面那个小孩道，地幔下面是地核，我上过天文课！</p>\n<p>之后我和他们擦肩而过。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>晚上去理发，迎面走来四个小男孩儿，约摸五六岁的样子，其中一个抱着篮球，估计刚从球场玩完回家。他们排成一溜，边走边大声说话。</p>\n<p>其中一个问，地壳下面是什么？</p>\n<p>其中一个回答，地壳下面是地幔！</p>\n<p>之前一个小孩紧接着问到，那地幔下面是什么？</p>\n<p>还是前面那个小孩道，地幔下面是地核，我上过天文课！</p>\n<p>之后我和他们擦肩而过。</p>\n"},{"title":"彼得原理","abbrlink":"46cfbd3d","date":"2020-07-21T21:44:40.000Z","_content":"\n最近公司架构有些变化，从原来的三层管理变为了四层。队伍还是那个队伍，老板变多了。当然也是几家欢喜几家愁。虽然对我也有些影响，但是远谈不上冲击，不过在心里倒是有些看法。\n\n公司蓬勃向上的时候，可以选择横向扩展，业务多，蛋糕大，进去之后容易做出成绩，得到反馈也大，有点像占山为王，划地盘。这种通常发生在创业阶段。在这个时候，甚至还会发生职级跟不上职权的情况。可一旦发展速率跟不上了，尤其是业务成熟的部门，蛋糕不够分了，这个时候就没法横向扩展，只能纵向增加，稀释原有的职级，插入新的管理层，原本应该开疆扩土的，只能在切过的蛋糕上继续分割。\n\n企业管理里有一个“彼得原理”：在一个等级制度中，每个员工趋向于上升到他所不能胜任的地位。想来有些道理，公司谋发展，员工也要进步，也需要职级的提升来激励个体，谁不想当领导呢？\n","source":"_posts/彼得原理.md","raw":"---\ntitle: 彼得原理\ncategories:\n  - life\nabbrlink: 46cfbd3d\ndate: 2020-07-21 14:44:40\ntags:\n---\n\n最近公司架构有些变化，从原来的三层管理变为了四层。队伍还是那个队伍，老板变多了。当然也是几家欢喜几家愁。虽然对我也有些影响，但是远谈不上冲击，不过在心里倒是有些看法。\n\n公司蓬勃向上的时候，可以选择横向扩展，业务多，蛋糕大，进去之后容易做出成绩，得到反馈也大，有点像占山为王，划地盘。这种通常发生在创业阶段。在这个时候，甚至还会发生职级跟不上职权的情况。可一旦发展速率跟不上了，尤其是业务成熟的部门，蛋糕不够分了，这个时候就没法横向扩展，只能纵向增加，稀释原有的职级，插入新的管理层，原本应该开疆扩土的，只能在切过的蛋糕上继续分割。\n\n企业管理里有一个“彼得原理”：在一个等级制度中，每个员工趋向于上升到他所不能胜任的地位。想来有些道理，公司谋发展，员工也要进步，也需要职级的提升来激励个体，谁不想当领导呢？\n","slug":"彼得原理","published":1,"updated":"2021-09-14T11:40:19.907Z","_id":"ckcvlqb7z0000bkfybsaaf6kf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近公司架构有些变化，从原来的三层管理变为了四层。队伍还是那个队伍，老板变多了。当然也是几家欢喜几家愁。虽然对我也有些影响，但是远谈不上冲击，不过在心里倒是有些看法。</p>\n<p>公司蓬勃向上的时候，可以选择横向扩展，业务多，蛋糕大，进去之后容易做出成绩，得到反馈也大，有点像占山为王，划地盘。这种通常发生在创业阶段。在这个时候，甚至还会发生职级跟不上职权的情况。可一旦发展速率跟不上了，尤其是业务成熟的部门，蛋糕不够分了，这个时候就没法横向扩展，只能纵向增加，稀释原有的职级，插入新的管理层，原本应该开疆扩土的，只能在切过的蛋糕上继续分割。</p>\n<p>企业管理里有一个“彼得原理”：在一个等级制度中，每个员工趋向于上升到他所不能胜任的地位。想来有些道理，公司谋发展，员工也要进步，也需要职级的提升来激励个体，谁不想当领导呢？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近公司架构有些变化，从原来的三层管理变为了四层。队伍还是那个队伍，老板变多了。当然也是几家欢喜几家愁。虽然对我也有些影响，但是远谈不上冲击，不过在心里倒是有些看法。</p>\n<p>公司蓬勃向上的时候，可以选择横向扩展，业务多，蛋糕大，进去之后容易做出成绩，得到反馈也大，有点像占山为王，划地盘。这种通常发生在创业阶段。在这个时候，甚至还会发生职级跟不上职权的情况。可一旦发展速率跟不上了，尤其是业务成熟的部门，蛋糕不够分了，这个时候就没法横向扩展，只能纵向增加，稀释原有的职级，插入新的管理层，原本应该开疆扩土的，只能在切过的蛋糕上继续分割。</p>\n<p>企业管理里有一个“彼得原理”：在一个等级制度中，每个员工趋向于上升到他所不能胜任的地位。想来有些道理，公司谋发展，员工也要进步，也需要职级的提升来激励个体，谁不想当领导呢？</p>\n"},{"title":"三十而立","abbrlink":"3052b9d9","date":"2020-10-25T07:57:53.000Z","_content":"\n年轻时为赋新词强说愁，年纪大了抽刀断水水更流。现在对中年人不太友好，地位比狗低。动辄打上油腻的标签。再加上现在身边大多是小自己一圈的年轻人，生怕自己不经意间表现得油腻而不自知，年轻人估计面子也不点破。思前想后，总结了几条，引以为戒，也算是行为准则。\n\n第一，戒好为人师。长辈看晚辈不知进取，晚辈叹长辈顽固不化，一代人有一代人的哲学与活法，看不惯就一笑而过。过往的经验也许早就不适应现在的节奏，不用还揣在怀里当宝贝传递给下一代。年轻人见得多，学得快，多向他们学习才是正道。不用再把过去的事情反复提及，当年勇就留在当年的回忆之中。\n\n第二，少喝酒，喝酒少说话。清醒的时候都是言多必失，何况喝了酒，不知道会捅出什么篓子。身体不再年轻了，不像大学时候，喝啤酒像喝水，喝完还能翻墙回宿舍爬上高低床。现在喝酒，适可而止，年轻时逞强抖狠，年纪大了，被社会锤了几回，早都甘拜下风。小聚时品几杯白酒，清谈闲聊，到点回家。谨慎选择喝酒对象，聊得来举几次杯，聊不来找个由头早点溜，自己也不是什么大咖，别把自己太当回事。朋友、同学聚餐，闷声吃就行，少回忆，一回忆就油腻。尤其是在场有年轻姑娘，自觉找个角落闷声歇着。酒局完了多跑步，多吃几天沙拉。\n\n第三，对自己有清醒的认识，别自恋，别戏精。年轻时不受女孩子欢迎，年纪大了被人喜欢的概率为零。和姑娘聊天交往要坦诚，大大方方，合适就合适，不合适别扭捏。算计太多终将一无所获。现代人手机不离身，不回就是默拒，不要强求，留点颜面和尊严。\n\n第四，注意形象，保重身体，抬头挺胸收腹提臀。肚子一定不能有，比票子多不如比腰围小。深蹲跑步不能停，家庭和谐不可少。头发稀疏了就戴个帽子装扮成艺术家。每年置办一两身合适衣物。干净熨帖就行，纯色没有标识最佳。定时体检警示自己，中年人谨防心脑血管疾病，不抽烟，少喝酒，多喝水，多走动。\n\n第五，保持学习，少看手机。如果不能用手机赚大钱，就少看点手机。多读点书，不为孩子做榜样，也让自己充实一点，内心安宁最重要。多研究技术，吃饭的手艺不能丢。也多看看小说，生活循规蹈矩，冷漠的日子里也需要一点温情和浪漫。\n\n第六，发展几个花时间爱好，动起来。人到中年，不会消磨时间可不行。写字钓鱼都可以，活动健康有保障。冬天滑滑雪，刺激一下肾上腺素，在山顶找回一下十八岁的感觉。有机会带着老婆孩子去看看朝霞落日，哪天孩子不听话，内心一边默念不能动手不能动手，一边想想幸福时光，也就忍住了。练练毛笔字，让自己有点安静的时间。跟父亲钓钓鱼，爷俩沉默，话题不多，多些陪伴也好。\n\n第七，莫谈国是。既不在高堂，也不开出租，就少聊政治。不是认识了十年的朋友，少谈政治。认识十年以上的朋友，更少谈政治。前者容易多个敌人，后者容易少个朋友。聊聊花鸟虫鱼，聊聊哪里的少年培训班质量高，哪里的雪场雪质好。生活不易，少谈点沉重的话题。\n\n最近又看了一遍王小波的《三十而立》，原来觉得幽默，现在读出酸楚。如果不是为了生活，谁不愿每天去看母猪配种，无奈工作里尽是病床守夜的活。小时候世界很大，想当科学家。长大了世界很小，我只想早点下班回家。","source":"_posts/三十而立.md","raw":"---\ntitle: 三十而立\ncategories:\n  - life\nabbrlink: 3052b9d9\ndate: 2020-10-25 00:57:53\ntags:\n---\n\n年轻时为赋新词强说愁，年纪大了抽刀断水水更流。现在对中年人不太友好，地位比狗低。动辄打上油腻的标签。再加上现在身边大多是小自己一圈的年轻人，生怕自己不经意间表现得油腻而不自知，年轻人估计面子也不点破。思前想后，总结了几条，引以为戒，也算是行为准则。\n\n第一，戒好为人师。长辈看晚辈不知进取，晚辈叹长辈顽固不化，一代人有一代人的哲学与活法，看不惯就一笑而过。过往的经验也许早就不适应现在的节奏，不用还揣在怀里当宝贝传递给下一代。年轻人见得多，学得快，多向他们学习才是正道。不用再把过去的事情反复提及，当年勇就留在当年的回忆之中。\n\n第二，少喝酒，喝酒少说话。清醒的时候都是言多必失，何况喝了酒，不知道会捅出什么篓子。身体不再年轻了，不像大学时候，喝啤酒像喝水，喝完还能翻墙回宿舍爬上高低床。现在喝酒，适可而止，年轻时逞强抖狠，年纪大了，被社会锤了几回，早都甘拜下风。小聚时品几杯白酒，清谈闲聊，到点回家。谨慎选择喝酒对象，聊得来举几次杯，聊不来找个由头早点溜，自己也不是什么大咖，别把自己太当回事。朋友、同学聚餐，闷声吃就行，少回忆，一回忆就油腻。尤其是在场有年轻姑娘，自觉找个角落闷声歇着。酒局完了多跑步，多吃几天沙拉。\n\n第三，对自己有清醒的认识，别自恋，别戏精。年轻时不受女孩子欢迎，年纪大了被人喜欢的概率为零。和姑娘聊天交往要坦诚，大大方方，合适就合适，不合适别扭捏。算计太多终将一无所获。现代人手机不离身，不回就是默拒，不要强求，留点颜面和尊严。\n\n第四，注意形象，保重身体，抬头挺胸收腹提臀。肚子一定不能有，比票子多不如比腰围小。深蹲跑步不能停，家庭和谐不可少。头发稀疏了就戴个帽子装扮成艺术家。每年置办一两身合适衣物。干净熨帖就行，纯色没有标识最佳。定时体检警示自己，中年人谨防心脑血管疾病，不抽烟，少喝酒，多喝水，多走动。\n\n第五，保持学习，少看手机。如果不能用手机赚大钱，就少看点手机。多读点书，不为孩子做榜样，也让自己充实一点，内心安宁最重要。多研究技术，吃饭的手艺不能丢。也多看看小说，生活循规蹈矩，冷漠的日子里也需要一点温情和浪漫。\n\n第六，发展几个花时间爱好，动起来。人到中年，不会消磨时间可不行。写字钓鱼都可以，活动健康有保障。冬天滑滑雪，刺激一下肾上腺素，在山顶找回一下十八岁的感觉。有机会带着老婆孩子去看看朝霞落日，哪天孩子不听话，内心一边默念不能动手不能动手，一边想想幸福时光，也就忍住了。练练毛笔字，让自己有点安静的时间。跟父亲钓钓鱼，爷俩沉默，话题不多，多些陪伴也好。\n\n第七，莫谈国是。既不在高堂，也不开出租，就少聊政治。不是认识了十年的朋友，少谈政治。认识十年以上的朋友，更少谈政治。前者容易多个敌人，后者容易少个朋友。聊聊花鸟虫鱼，聊聊哪里的少年培训班质量高，哪里的雪场雪质好。生活不易，少谈点沉重的话题。\n\n最近又看了一遍王小波的《三十而立》，原来觉得幽默，现在读出酸楚。如果不是为了生活，谁不愿每天去看母猪配种，无奈工作里尽是病床守夜的活。小时候世界很大，想当科学家。长大了世界很小，我只想早点下班回家。","slug":"三十而立","published":1,"updated":"2021-09-14T11:40:19.906Z","_id":"ckev41f160001jqs6cgxo6fgz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>年轻时为赋新词强说愁，年纪大了抽刀断水水更流。现在对中年人不太友好，地位比狗低。动辄打上油腻的标签。再加上现在身边大多是小自己一圈的年轻人，生怕自己不经意间表现得油腻而不自知，年轻人估计面子也不点破。思前想后，总结了几条，引以为戒，也算是行为准则。</p>\n<p>第一，戒好为人师。长辈看晚辈不知进取，晚辈叹长辈顽固不化，一代人有一代人的哲学与活法，看不惯就一笑而过。过往的经验也许早就不适应现在的节奏，不用还揣在怀里当宝贝传递给下一代。年轻人见得多，学得快，多向他们学习才是正道。不用再把过去的事情反复提及，当年勇就留在当年的回忆之中。</p>\n<p>第二，少喝酒，喝酒少说话。清醒的时候都是言多必失，何况喝了酒，不知道会捅出什么篓子。身体不再年轻了，不像大学时候，喝啤酒像喝水，喝完还能翻墙回宿舍爬上高低床。现在喝酒，适可而止，年轻时逞强抖狠，年纪大了，被社会锤了几回，早都甘拜下风。小聚时品几杯白酒，清谈闲聊，到点回家。谨慎选择喝酒对象，聊得来举几次杯，聊不来找个由头早点溜，自己也不是什么大咖，别把自己太当回事。朋友、同学聚餐，闷声吃就行，少回忆，一回忆就油腻。尤其是在场有年轻姑娘，自觉找个角落闷声歇着。酒局完了多跑步，多吃几天沙拉。</p>\n<p>第三，对自己有清醒的认识，别自恋，别戏精。年轻时不受女孩子欢迎，年纪大了被人喜欢的概率为零。和姑娘聊天交往要坦诚，大大方方，合适就合适，不合适别扭捏。算计太多终将一无所获。现代人手机不离身，不回就是默拒，不要强求，留点颜面和尊严。</p>\n<p>第四，注意形象，保重身体，抬头挺胸收腹提臀。肚子一定不能有，比票子多不如比腰围小。深蹲跑步不能停，家庭和谐不可少。头发稀疏了就戴个帽子装扮成艺术家。每年置办一两身合适衣物。干净熨帖就行，纯色没有标识最佳。定时体检警示自己，中年人谨防心脑血管疾病，不抽烟，少喝酒，多喝水，多走动。</p>\n<p>第五，保持学习，少看手机。如果不能用手机赚大钱，就少看点手机。多读点书，不为孩子做榜样，也让自己充实一点，内心安宁最重要。多研究技术，吃饭的手艺不能丢。也多看看小说，生活循规蹈矩，冷漠的日子里也需要一点温情和浪漫。</p>\n<p>第六，发展几个花时间爱好，动起来。人到中年，不会消磨时间可不行。写字钓鱼都可以，活动健康有保障。冬天滑滑雪，刺激一下肾上腺素，在山顶找回一下十八岁的感觉。有机会带着老婆孩子去看看朝霞落日，哪天孩子不听话，内心一边默念不能动手不能动手，一边想想幸福时光，也就忍住了。练练毛笔字，让自己有点安静的时间。跟父亲钓钓鱼，爷俩沉默，话题不多，多些陪伴也好。</p>\n<p>第七，莫谈国是。既不在高堂，也不开出租，就少聊政治。不是认识了十年的朋友，少谈政治。认识十年以上的朋友，更少谈政治。前者容易多个敌人，后者容易少个朋友。聊聊花鸟虫鱼，聊聊哪里的少年培训班质量高，哪里的雪场雪质好。生活不易，少谈点沉重的话题。</p>\n<p>最近又看了一遍王小波的《三十而立》，原来觉得幽默，现在读出酸楚。如果不是为了生活，谁不愿每天去看母猪配种，无奈工作里尽是病床守夜的活。小时候世界很大，想当科学家。长大了世界很小，我只想早点下班回家。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>年轻时为赋新词强说愁，年纪大了抽刀断水水更流。现在对中年人不太友好，地位比狗低。动辄打上油腻的标签。再加上现在身边大多是小自己一圈的年轻人，生怕自己不经意间表现得油腻而不自知，年轻人估计面子也不点破。思前想后，总结了几条，引以为戒，也算是行为准则。</p>\n<p>第一，戒好为人师。长辈看晚辈不知进取，晚辈叹长辈顽固不化，一代人有一代人的哲学与活法，看不惯就一笑而过。过往的经验也许早就不适应现在的节奏，不用还揣在怀里当宝贝传递给下一代。年轻人见得多，学得快，多向他们学习才是正道。不用再把过去的事情反复提及，当年勇就留在当年的回忆之中。</p>\n<p>第二，少喝酒，喝酒少说话。清醒的时候都是言多必失，何况喝了酒，不知道会捅出什么篓子。身体不再年轻了，不像大学时候，喝啤酒像喝水，喝完还能翻墙回宿舍爬上高低床。现在喝酒，适可而止，年轻时逞强抖狠，年纪大了，被社会锤了几回，早都甘拜下风。小聚时品几杯白酒，清谈闲聊，到点回家。谨慎选择喝酒对象，聊得来举几次杯，聊不来找个由头早点溜，自己也不是什么大咖，别把自己太当回事。朋友、同学聚餐，闷声吃就行，少回忆，一回忆就油腻。尤其是在场有年轻姑娘，自觉找个角落闷声歇着。酒局完了多跑步，多吃几天沙拉。</p>\n<p>第三，对自己有清醒的认识，别自恋，别戏精。年轻时不受女孩子欢迎，年纪大了被人喜欢的概率为零。和姑娘聊天交往要坦诚，大大方方，合适就合适，不合适别扭捏。算计太多终将一无所获。现代人手机不离身，不回就是默拒，不要强求，留点颜面和尊严。</p>\n<p>第四，注意形象，保重身体，抬头挺胸收腹提臀。肚子一定不能有，比票子多不如比腰围小。深蹲跑步不能停，家庭和谐不可少。头发稀疏了就戴个帽子装扮成艺术家。每年置办一两身合适衣物。干净熨帖就行，纯色没有标识最佳。定时体检警示自己，中年人谨防心脑血管疾病，不抽烟，少喝酒，多喝水，多走动。</p>\n<p>第五，保持学习，少看手机。如果不能用手机赚大钱，就少看点手机。多读点书，不为孩子做榜样，也让自己充实一点，内心安宁最重要。多研究技术，吃饭的手艺不能丢。也多看看小说，生活循规蹈矩，冷漠的日子里也需要一点温情和浪漫。</p>\n<p>第六，发展几个花时间爱好，动起来。人到中年，不会消磨时间可不行。写字钓鱼都可以，活动健康有保障。冬天滑滑雪，刺激一下肾上腺素，在山顶找回一下十八岁的感觉。有机会带着老婆孩子去看看朝霞落日，哪天孩子不听话，内心一边默念不能动手不能动手，一边想想幸福时光，也就忍住了。练练毛笔字，让自己有点安静的时间。跟父亲钓钓鱼，爷俩沉默，话题不多，多些陪伴也好。</p>\n<p>第七，莫谈国是。既不在高堂，也不开出租，就少聊政治。不是认识了十年的朋友，少谈政治。认识十年以上的朋友，更少谈政治。前者容易多个敌人，后者容易少个朋友。聊聊花鸟虫鱼，聊聊哪里的少年培训班质量高，哪里的雪场雪质好。生活不易，少谈点沉重的话题。</p>\n<p>最近又看了一遍王小波的《三十而立》，原来觉得幽默，现在读出酸楚。如果不是为了生活，谁不愿每天去看母猪配种，无奈工作里尽是病床守夜的活。小时候世界很大，想当科学家。长大了世界很小，我只想早点下班回家。</p>\n"},{"title":"JavaScript Events","abbrlink":"96058034","date":"2018-04-15T23:47:42.000Z","_content":"\n#### Register\n\n```js\nmyElement.onclick = functionA;\nmyElement.onclick = functionB;\n```\n\nsecond row will overwrite first row\n\n```js\nmyElement.addEventListener('click', functionA);\nmyElement.addEventListener('click', functionB);\n```\n\nboth would run\n\nwhich should use\n\n- inline event handlers `<button onclick=\"bgChange()\">Press me</button>` （don't use）\n- Event handler properties; element.onclick; better cross-browser compatibility (IE8)\n- DOM Level 2 Events; element.addEventListener('click', functionA); (IE9, can register multiple events，can be removed)\n\n#### event objects\n\ne/evt/event\n\nevent.target\n\n#### Preventing default behavior\n\ne.preventDefault();\n\n#### Event bubbling\n\nEvent bubbling and capture are two mechanisms that describe what happens when two handlers\nof the same event type are activated on one element.\n\nIn the capturing phase:\n\nThe browser checks to see if the element's outer-most ancestor (`<html>`) has an onclick event handler registered on it in the capturing phase, and runs it if so.\nThen it moves on to the next element inside `<html>` and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.\n\nIn the bubbling phase, the exact opposite occurs:\n\nThe browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.\nThen it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the `<html>` element.\n\nEvent handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.\n\n```js\nelement1.addEventListener('click', doSomething2, true); // fire at capture phase\nelement2.addEventListener('click', doSomething, false);\n```\n\n#### Event delegation\n\nif you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.\n\n```html\n<ul id=\"parent-list\">\n  <li id=\"post-1\">Item 1</li>\n  <li id=\"post-2\">Item 2</li>\n  <li id=\"post-3\">Item 3</li>\n  <li id=\"post-4\">Item 4</li>\n  <li id=\"post-5\">Item 5</li>\n  <li id=\"post-6\" class=\"endangered\">Item 6</li>\n</ul>\n```\n\n```js\n// Get the element, add a click listener...\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  // e.target is the clicked element!\n  // If it was a list item\n  if (e.target && e.target.nodeName == 'LI') {\n    // List item found!  Output the ID!\n    console.log(\n      'List item ',\n      e.target.id.replace('post-', ''),\n      ' was clicked!',\n    );\n  }\n});\n\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  if (e.target && e.target.matches('li.endangered')) {\n    // List item found!  Output the ID!\n    console.log('The ' + e.target.textContent + ' is endangered!');\n  }\n});\n```\n\n#### related reading\n\nmdn <https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture>\n\nevent order <https://www.quirksmode.org/js/events_order.html>\n\nevent delegate <https://davidwalsh.name/event-delegate>\n\nEvent delegation <https://javascript.info/event-delegation>\n","source":"_posts/javascript-events.md","raw":"---\ntitle: JavaScript Events\ncategories:\n  - web\ntags:\n  - window\n  - events\n  - capture/bubbling\n  - delegate\n  - javascript\nabbrlink: '96058034'\ndate: 2018-04-15 16:47:42\n---\n\n#### Register\n\n```js\nmyElement.onclick = functionA;\nmyElement.onclick = functionB;\n```\n\nsecond row will overwrite first row\n\n```js\nmyElement.addEventListener('click', functionA);\nmyElement.addEventListener('click', functionB);\n```\n\nboth would run\n\nwhich should use\n\n- inline event handlers `<button onclick=\"bgChange()\">Press me</button>` （don't use）\n- Event handler properties; element.onclick; better cross-browser compatibility (IE8)\n- DOM Level 2 Events; element.addEventListener('click', functionA); (IE9, can register multiple events，can be removed)\n\n#### event objects\n\ne/evt/event\n\nevent.target\n\n#### Preventing default behavior\n\ne.preventDefault();\n\n#### Event bubbling\n\nEvent bubbling and capture are two mechanisms that describe what happens when two handlers\nof the same event type are activated on one element.\n\nIn the capturing phase:\n\nThe browser checks to see if the element's outer-most ancestor (`<html>`) has an onclick event handler registered on it in the capturing phase, and runs it if so.\nThen it moves on to the next element inside `<html>` and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.\n\nIn the bubbling phase, the exact opposite occurs:\n\nThe browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.\nThen it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the `<html>` element.\n\nEvent handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.\n\n```js\nelement1.addEventListener('click', doSomething2, true); // fire at capture phase\nelement2.addEventListener('click', doSomething, false);\n```\n\n#### Event delegation\n\nif you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.\n\n```html\n<ul id=\"parent-list\">\n  <li id=\"post-1\">Item 1</li>\n  <li id=\"post-2\">Item 2</li>\n  <li id=\"post-3\">Item 3</li>\n  <li id=\"post-4\">Item 4</li>\n  <li id=\"post-5\">Item 5</li>\n  <li id=\"post-6\" class=\"endangered\">Item 6</li>\n</ul>\n```\n\n```js\n// Get the element, add a click listener...\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  // e.target is the clicked element!\n  // If it was a list item\n  if (e.target && e.target.nodeName == 'LI') {\n    // List item found!  Output the ID!\n    console.log(\n      'List item ',\n      e.target.id.replace('post-', ''),\n      ' was clicked!',\n    );\n  }\n});\n\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  if (e.target && e.target.matches('li.endangered')) {\n    // List item found!  Output the ID!\n    console.log('The ' + e.target.textContent + ' is endangered!');\n  }\n});\n```\n\n#### related reading\n\nmdn <https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture>\n\nevent order <https://www.quirksmode.org/js/events_order.html>\n\nevent delegate <https://davidwalsh.name/event-delegate>\n\nEvent delegation <https://javascript.info/event-delegation>\n","slug":"javascript-events","published":1,"updated":"2021-09-14T11:40:19.905Z","_id":"ckev435fo0000njs6ga936lti","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Register\"><a href=\"#Register\" class=\"headerlink\" title=\"Register\"></a>Register</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.<span class=\"property\">onclick</span> = functionA;</span><br><span class=\"line\">myElement.<span class=\"property\">onclick</span> = functionB;</span><br></pre></td></tr></table></figure>\n\n<p>second row will overwrite first row</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, functionA);</span><br><span class=\"line\">myElement.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, functionB);</span><br></pre></td></tr></table></figure>\n\n<p>both would run</p>\n<p>which should use</p>\n<ul>\n<li>inline event handlers <code>&lt;button onclick=&quot;bgChange()&quot;&gt;Press me&lt;/button&gt;</code> （don’t use）</li>\n<li>Event handler properties; element.onclick; better cross-browser compatibility (IE8)</li>\n<li>DOM Level 2 Events; element.addEventListener(‘click’, functionA); (IE9, can register multiple events，can be removed)</li>\n</ul>\n<h4 id=\"event-objects\"><a href=\"#event-objects\" class=\"headerlink\" title=\"event objects\"></a>event objects</h4><p>e&#x2F;evt&#x2F;event</p>\n<p>event.target</p>\n<h4 id=\"Preventing-default-behavior\"><a href=\"#Preventing-default-behavior\" class=\"headerlink\" title=\"Preventing default behavior\"></a>Preventing default behavior</h4><p>e.preventDefault();</p>\n<h4 id=\"Event-bubbling\"><a href=\"#Event-bubbling\" class=\"headerlink\" title=\"Event bubbling\"></a>Event bubbling</h4><p>Event bubbling and capture are two mechanisms that describe what happens when two handlers<br>of the same event type are activated on one element.</p>\n<p>In the capturing phase:</p>\n<p>The browser checks to see if the element’s outer-most ancestor (<code>&lt;html&gt;</code>) has an onclick event handler registered on it in the capturing phase, and runs it if so.<br>Then it moves on to the next element inside <code>&lt;html&gt;</code> and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.</p>\n<p>In the bubbling phase, the exact opposite occurs:</p>\n<p>The browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.<br>Then it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the <code>&lt;html&gt;</code> element.</p>\n<p>Event handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element1.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, doSomething2, <span class=\"literal\">true</span>); <span class=\"comment\">// fire at capture phase</span></span><br><span class=\"line\">element2.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, doSomething, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Event-delegation\"><a href=\"#Event-delegation\" class=\"headerlink\" title=\"Event delegation\"></a>Event delegation</h4><p>if you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parent-list&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-1&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-2&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-3&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-4&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-5&quot;</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-6&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;endangered&quot;</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the element, add a click listener...</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;parent-list&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// e.target is the clicked element!</span></span><br><span class=\"line\">  <span class=\"comment\">// If it was a list item</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.<span class=\"property\">target</span> &amp;&amp; e.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span> == <span class=\"string\">&#x27;LI&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">      <span class=\"string\">&#x27;List item &#x27;</span>,</span><br><span class=\"line\">      e.<span class=\"property\">target</span>.<span class=\"property\">id</span>.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;post-&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">      <span class=\"string\">&#x27; was clicked!&#x27;</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;parent-list&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.<span class=\"property\">target</span> &amp;&amp; e.<span class=\"property\">target</span>.<span class=\"title function_\">matches</span>(<span class=\"string\">&#x27;li.endangered&#x27;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;The &#x27;</span> + e.<span class=\"property\">target</span>.<span class=\"property\">textContent</span> + <span class=\"string\">&#x27; is endangered!&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"related-reading\"><a href=\"#related-reading\" class=\"headerlink\" title=\"related reading\"></a>related reading</h4><p>mdn <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture</a></p>\n<p>event order <a href=\"https://www.quirksmode.org/js/events_order.html\">https://www.quirksmode.org/js/events_order.html</a></p>\n<p>event delegate <a href=\"https://davidwalsh.name/event-delegate\">https://davidwalsh.name/event-delegate</a></p>\n<p>Event delegation <a href=\"https://javascript.info/event-delegation\">https://javascript.info/event-delegation</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Register\"><a href=\"#Register\" class=\"headerlink\" title=\"Register\"></a>Register</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.<span class=\"property\">onclick</span> = functionA;</span><br><span class=\"line\">myElement.<span class=\"property\">onclick</span> = functionB;</span><br></pre></td></tr></table></figure>\n\n<p>second row will overwrite first row</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, functionA);</span><br><span class=\"line\">myElement.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, functionB);</span><br></pre></td></tr></table></figure>\n\n<p>both would run</p>\n<p>which should use</p>\n<ul>\n<li>inline event handlers <code>&lt;button onclick=&quot;bgChange()&quot;&gt;Press me&lt;/button&gt;</code> （don’t use）</li>\n<li>Event handler properties; element.onclick; better cross-browser compatibility (IE8)</li>\n<li>DOM Level 2 Events; element.addEventListener(‘click’, functionA); (IE9, can register multiple events，can be removed)</li>\n</ul>\n<h4 id=\"event-objects\"><a href=\"#event-objects\" class=\"headerlink\" title=\"event objects\"></a>event objects</h4><p>e&#x2F;evt&#x2F;event</p>\n<p>event.target</p>\n<h4 id=\"Preventing-default-behavior\"><a href=\"#Preventing-default-behavior\" class=\"headerlink\" title=\"Preventing default behavior\"></a>Preventing default behavior</h4><p>e.preventDefault();</p>\n<h4 id=\"Event-bubbling\"><a href=\"#Event-bubbling\" class=\"headerlink\" title=\"Event bubbling\"></a>Event bubbling</h4><p>Event bubbling and capture are two mechanisms that describe what happens when two handlers<br>of the same event type are activated on one element.</p>\n<p>In the capturing phase:</p>\n<p>The browser checks to see if the element’s outer-most ancestor (<code>&lt;html&gt;</code>) has an onclick event handler registered on it in the capturing phase, and runs it if so.<br>Then it moves on to the next element inside <code>&lt;html&gt;</code> and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.</p>\n<p>In the bubbling phase, the exact opposite occurs:</p>\n<p>The browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.<br>Then it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the <code>&lt;html&gt;</code> element.</p>\n<p>Event handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element1.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, doSomething2, <span class=\"literal\">true</span>); <span class=\"comment\">// fire at capture phase</span></span><br><span class=\"line\">element2.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, doSomething, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Event-delegation\"><a href=\"#Event-delegation\" class=\"headerlink\" title=\"Event delegation\"></a>Event delegation</h4><p>if you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parent-list&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-1&quot;</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-2&quot;</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-3&quot;</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-4&quot;</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-5&quot;</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;post-6&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;endangered&quot;</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the element, add a click listener...</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;parent-list&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// e.target is the clicked element!</span></span><br><span class=\"line\">  <span class=\"comment\">// If it was a list item</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.<span class=\"property\">target</span> &amp;&amp; e.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span> == <span class=\"string\">&#x27;LI&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">      <span class=\"string\">&#x27;List item &#x27;</span>,</span><br><span class=\"line\">      e.<span class=\"property\">target</span>.<span class=\"property\">id</span>.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;post-&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">      <span class=\"string\">&#x27; was clicked!&#x27;</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;parent-list&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.<span class=\"property\">target</span> &amp;&amp; e.<span class=\"property\">target</span>.<span class=\"title function_\">matches</span>(<span class=\"string\">&#x27;li.endangered&#x27;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;The &#x27;</span> + e.<span class=\"property\">target</span>.<span class=\"property\">textContent</span> + <span class=\"string\">&#x27; is endangered!&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"related-reading\"><a href=\"#related-reading\" class=\"headerlink\" title=\"related reading\"></a>related reading</h4><p>mdn <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture</a></p>\n<p>event order <a href=\"https://www.quirksmode.org/js/events_order.html\">https://www.quirksmode.org/js/events_order.html</a></p>\n<p>event delegate <a href=\"https://davidwalsh.name/event-delegate\">https://davidwalsh.name/event-delegate</a></p>\n<p>Event delegation <a href=\"https://javascript.info/event-delegation\">https://javascript.info/event-delegation</a></p>\n"},{"title":"游恭王府","abbrlink":"23a06402","date":"2020-10-12T06:13:12.000Z","_content":"\n国庆假期刚过，周末就休一天，闲着无事，恰好今天起了风，吹走前几天的雾霾，天空湛蓝，秋高气爽，于是决定出去走走。\n\n来北京两年多了，总是往外走，爬山徒步之类的。城里没去逛过几次，历史古迹去的少。因为喜欢红楼梦，所以一直想去恭王府看看，感受一番。心想一个人，可走可停，走马观花，无拘无束。于是买票出发。\n\n到了路边下车，游人如织，丝毫不见王府的踪影。跟着指示牌和人流往里走，进入一条胡同，四周都是平房。不过两百米，豁然开朗。\n\n穿过检票口，来到王府正门。朱红的大门，上面悬挂匾额工整书写恭王府三个大字。门上的金钉纵九横七，表名郡王身份。\n\n![gongwangfu](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e43672558134f24b6a0c6c5e5614b73~tplv-k3u1fbpfcp-watermark.image)\n\n关于门钉，还有些说法。明代之前，无明文规定。到了清代，才把门钉数量和等级制度联系起来。天子是横纵各九，亲王纵九横七，世子减亲王七之二，郡王、贝勒、贝子、镇国公和辅国公与世子府同。公门钉纵横皆七，候以下至男递减至五五，均以铁。平民百姓家不能用门钉。另外，大门的漆色也有规定。皇宫和官府红漆门，富家黑漆门，平民为本色门。\n\n![tianxiangtingyuan](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b716e34f5344b7ca51f930cc75fc494~tplv-k3u1fbpfcp-watermark.image)\n\n天香庭院，位于葆光室和锡进堂的中间。据说是康熙之子慎郡王允禧题写。拍照是因为想到《红楼梦》里提到的天香楼。当然这两者有无关系，只能让后人玩味了。\n\n![pingbuqingyunlu](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aed4cc5ff625416da3698852e2c0cb00~tplv-k3u1fbpfcp-watermark.image)\n\n平步青云路，从山两侧的爬山斜廊最下方只有两蹬台阶，再往上则斜坡平坦而无台阶。听讲解器里的小故事解说，据说是因为和珅早年贫寒，地位卑微，二十多岁遇到乾隆皇帝后才平步青云。两蹬台阶寓意早年的艰辛，跨过之后，则是一帆风顺，再无坎坷。\n\n迈上平步青云路，则上到了邀月台。这里是全园的最高处，居高俯览园中，也是主人与家人或亲朋共同赏月的好地方。站在台上，可以想象某个中秋，王府里人们在这里赏月，周边树木森森，底下则是滴翠岩传来的涓涓细流声；又或是一个雪夜，某位王公身披裘衣独立雪中，一声鸣啼，几片残雪从枝头跌落。\n\n现在这里是一个佛堂，几位游客路过时祈福跪拜。游人凭栏歇息，喧喧扰扰。\n\n![fangtangshuixie](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0f7165100b4feebaeb98c8e33bcfda~tplv-k3u1fbpfcp-watermark.image)\n\n最后走到澄怀撷秀，堂前有海棠数株，故又名海棠轩。据说原来是恭亲王奕訢年轻时读书之处。从堂前刚好观赏方塘水榭，四周柳树依依。原本府中并无浮桥，需要乘船登亭。现在海棠轩里成立一个纪念品零售店，原本僻静的读书处挤满了买福字的游客，真是可惜。\n\n![yangjiaodenghutong1](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab016affd476486b84124d28bc55db43~tplv-k3u1fbpfcp-watermark.image)\n\n从王府出来，心想也别原路返回了，绕着另一条羊角灯胡同走出去。胡同扭曲狭窄，让我想起小时候的湾子。虽然都是翻新过的平房，但仿佛依然可以感受到当年住在王府边上人们的生活气息。\n\n![yangjiaodenghutong2](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afaca6e832624677bee589837ad5d5b2~tplv-k3u1fbpfcp-watermark.image)\n\n胡同里安静极了，还能听见风吹过树枝的声音。不知哪家的婴儿啼哭，喊着找妈妈。\n\n从胡同里走出来，地铁站边刚好有个公园。坐在太阳底下放空。两百多年前，是否也有一位读书人在哪晒着太阳发呆呢？\n","source":"_posts/游恭王府.md","raw":"---\ntitle: 游恭王府\nabbrlink: 23a06402\ndate: 2020-10-11 23:13:12\ncategories:\n  - 生活随笔\ntags:\n---\n\n国庆假期刚过，周末就休一天，闲着无事，恰好今天起了风，吹走前几天的雾霾，天空湛蓝，秋高气爽，于是决定出去走走。\n\n来北京两年多了，总是往外走，爬山徒步之类的。城里没去逛过几次，历史古迹去的少。因为喜欢红楼梦，所以一直想去恭王府看看，感受一番。心想一个人，可走可停，走马观花，无拘无束。于是买票出发。\n\n到了路边下车，游人如织，丝毫不见王府的踪影。跟着指示牌和人流往里走，进入一条胡同，四周都是平房。不过两百米，豁然开朗。\n\n穿过检票口，来到王府正门。朱红的大门，上面悬挂匾额工整书写恭王府三个大字。门上的金钉纵九横七，表名郡王身份。\n\n![gongwangfu](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e43672558134f24b6a0c6c5e5614b73~tplv-k3u1fbpfcp-watermark.image)\n\n关于门钉，还有些说法。明代之前，无明文规定。到了清代，才把门钉数量和等级制度联系起来。天子是横纵各九，亲王纵九横七，世子减亲王七之二，郡王、贝勒、贝子、镇国公和辅国公与世子府同。公门钉纵横皆七，候以下至男递减至五五，均以铁。平民百姓家不能用门钉。另外，大门的漆色也有规定。皇宫和官府红漆门，富家黑漆门，平民为本色门。\n\n![tianxiangtingyuan](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b716e34f5344b7ca51f930cc75fc494~tplv-k3u1fbpfcp-watermark.image)\n\n天香庭院，位于葆光室和锡进堂的中间。据说是康熙之子慎郡王允禧题写。拍照是因为想到《红楼梦》里提到的天香楼。当然这两者有无关系，只能让后人玩味了。\n\n![pingbuqingyunlu](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aed4cc5ff625416da3698852e2c0cb00~tplv-k3u1fbpfcp-watermark.image)\n\n平步青云路，从山两侧的爬山斜廊最下方只有两蹬台阶，再往上则斜坡平坦而无台阶。听讲解器里的小故事解说，据说是因为和珅早年贫寒，地位卑微，二十多岁遇到乾隆皇帝后才平步青云。两蹬台阶寓意早年的艰辛，跨过之后，则是一帆风顺，再无坎坷。\n\n迈上平步青云路，则上到了邀月台。这里是全园的最高处，居高俯览园中，也是主人与家人或亲朋共同赏月的好地方。站在台上，可以想象某个中秋，王府里人们在这里赏月，周边树木森森，底下则是滴翠岩传来的涓涓细流声；又或是一个雪夜，某位王公身披裘衣独立雪中，一声鸣啼，几片残雪从枝头跌落。\n\n现在这里是一个佛堂，几位游客路过时祈福跪拜。游人凭栏歇息，喧喧扰扰。\n\n![fangtangshuixie](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0f7165100b4feebaeb98c8e33bcfda~tplv-k3u1fbpfcp-watermark.image)\n\n最后走到澄怀撷秀，堂前有海棠数株，故又名海棠轩。据说原来是恭亲王奕訢年轻时读书之处。从堂前刚好观赏方塘水榭，四周柳树依依。原本府中并无浮桥，需要乘船登亭。现在海棠轩里成立一个纪念品零售店，原本僻静的读书处挤满了买福字的游客，真是可惜。\n\n![yangjiaodenghutong1](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab016affd476486b84124d28bc55db43~tplv-k3u1fbpfcp-watermark.image)\n\n从王府出来，心想也别原路返回了，绕着另一条羊角灯胡同走出去。胡同扭曲狭窄，让我想起小时候的湾子。虽然都是翻新过的平房，但仿佛依然可以感受到当年住在王府边上人们的生活气息。\n\n![yangjiaodenghutong2](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afaca6e832624677bee589837ad5d5b2~tplv-k3u1fbpfcp-watermark.image)\n\n胡同里安静极了，还能听见风吹过树枝的声音。不知哪家的婴儿啼哭，喊着找妈妈。\n\n从胡同里走出来，地铁站边刚好有个公园。坐在太阳底下放空。两百多年前，是否也有一位读书人在哪晒着太阳发呆呢？\n","slug":"游恭王府","published":1,"updated":"2022-05-01T08:42:15.316Z","_id":"ckg59273800001kmh6rla9ivb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>国庆假期刚过，周末就休一天，闲着无事，恰好今天起了风，吹走前几天的雾霾，天空湛蓝，秋高气爽，于是决定出去走走。</p>\n<p>来北京两年多了，总是往外走，爬山徒步之类的。城里没去逛过几次，历史古迹去的少。因为喜欢红楼梦，所以一直想去恭王府看看，感受一番。心想一个人，可走可停，走马观花，无拘无束。于是买票出发。</p>\n<p>到了路边下车，游人如织，丝毫不见王府的踪影。跟着指示牌和人流往里走，进入一条胡同，四周都是平房。不过两百米，豁然开朗。</p>\n<p>穿过检票口，来到王府正门。朱红的大门，上面悬挂匾额工整书写恭王府三个大字。门上的金钉纵九横七，表名郡王身份。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e43672558134f24b6a0c6c5e5614b73~tplv-k3u1fbpfcp-watermark.image\" alt=\"gongwangfu\"></p>\n<p>关于门钉，还有些说法。明代之前，无明文规定。到了清代，才把门钉数量和等级制度联系起来。天子是横纵各九，亲王纵九横七，世子减亲王七之二，郡王、贝勒、贝子、镇国公和辅国公与世子府同。公门钉纵横皆七，候以下至男递减至五五，均以铁。平民百姓家不能用门钉。另外，大门的漆色也有规定。皇宫和官府红漆门，富家黑漆门，平民为本色门。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b716e34f5344b7ca51f930cc75fc494~tplv-k3u1fbpfcp-watermark.image\" alt=\"tianxiangtingyuan\"></p>\n<p>天香庭院，位于葆光室和锡进堂的中间。据说是康熙之子慎郡王允禧题写。拍照是因为想到《红楼梦》里提到的天香楼。当然这两者有无关系，只能让后人玩味了。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aed4cc5ff625416da3698852e2c0cb00~tplv-k3u1fbpfcp-watermark.image\" alt=\"pingbuqingyunlu\"></p>\n<p>平步青云路，从山两侧的爬山斜廊最下方只有两蹬台阶，再往上则斜坡平坦而无台阶。听讲解器里的小故事解说，据说是因为和珅早年贫寒，地位卑微，二十多岁遇到乾隆皇帝后才平步青云。两蹬台阶寓意早年的艰辛，跨过之后，则是一帆风顺，再无坎坷。</p>\n<p>迈上平步青云路，则上到了邀月台。这里是全园的最高处，居高俯览园中，也是主人与家人或亲朋共同赏月的好地方。站在台上，可以想象某个中秋，王府里人们在这里赏月，周边树木森森，底下则是滴翠岩传来的涓涓细流声；又或是一个雪夜，某位王公身披裘衣独立雪中，一声鸣啼，几片残雪从枝头跌落。</p>\n<p>现在这里是一个佛堂，几位游客路过时祈福跪拜。游人凭栏歇息，喧喧扰扰。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0f7165100b4feebaeb98c8e33bcfda~tplv-k3u1fbpfcp-watermark.image\" alt=\"fangtangshuixie\"></p>\n<p>最后走到澄怀撷秀，堂前有海棠数株，故又名海棠轩。据说原来是恭亲王奕訢年轻时读书之处。从堂前刚好观赏方塘水榭，四周柳树依依。原本府中并无浮桥，需要乘船登亭。现在海棠轩里成立一个纪念品零售店，原本僻静的读书处挤满了买福字的游客，真是可惜。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab016affd476486b84124d28bc55db43~tplv-k3u1fbpfcp-watermark.image\" alt=\"yangjiaodenghutong1\"></p>\n<p>从王府出来，心想也别原路返回了，绕着另一条羊角灯胡同走出去。胡同扭曲狭窄，让我想起小时候的湾子。虽然都是翻新过的平房，但仿佛依然可以感受到当年住在王府边上人们的生活气息。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afaca6e832624677bee589837ad5d5b2~tplv-k3u1fbpfcp-watermark.image\" alt=\"yangjiaodenghutong2\"></p>\n<p>胡同里安静极了，还能听见风吹过树枝的声音。不知哪家的婴儿啼哭，喊着找妈妈。</p>\n<p>从胡同里走出来，地铁站边刚好有个公园。坐在太阳底下放空。两百多年前，是否也有一位读书人在哪晒着太阳发呆呢？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>国庆假期刚过，周末就休一天，闲着无事，恰好今天起了风，吹走前几天的雾霾，天空湛蓝，秋高气爽，于是决定出去走走。</p>\n<p>来北京两年多了，总是往外走，爬山徒步之类的。城里没去逛过几次，历史古迹去的少。因为喜欢红楼梦，所以一直想去恭王府看看，感受一番。心想一个人，可走可停，走马观花，无拘无束。于是买票出发。</p>\n<p>到了路边下车，游人如织，丝毫不见王府的踪影。跟着指示牌和人流往里走，进入一条胡同，四周都是平房。不过两百米，豁然开朗。</p>\n<p>穿过检票口，来到王府正门。朱红的大门，上面悬挂匾额工整书写恭王府三个大字。门上的金钉纵九横七，表名郡王身份。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e43672558134f24b6a0c6c5e5614b73~tplv-k3u1fbpfcp-watermark.image\" alt=\"gongwangfu\"></p>\n<p>关于门钉，还有些说法。明代之前，无明文规定。到了清代，才把门钉数量和等级制度联系起来。天子是横纵各九，亲王纵九横七，世子减亲王七之二，郡王、贝勒、贝子、镇国公和辅国公与世子府同。公门钉纵横皆七，候以下至男递减至五五，均以铁。平民百姓家不能用门钉。另外，大门的漆色也有规定。皇宫和官府红漆门，富家黑漆门，平民为本色门。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b716e34f5344b7ca51f930cc75fc494~tplv-k3u1fbpfcp-watermark.image\" alt=\"tianxiangtingyuan\"></p>\n<p>天香庭院，位于葆光室和锡进堂的中间。据说是康熙之子慎郡王允禧题写。拍照是因为想到《红楼梦》里提到的天香楼。当然这两者有无关系，只能让后人玩味了。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aed4cc5ff625416da3698852e2c0cb00~tplv-k3u1fbpfcp-watermark.image\" alt=\"pingbuqingyunlu\"></p>\n<p>平步青云路，从山两侧的爬山斜廊最下方只有两蹬台阶，再往上则斜坡平坦而无台阶。听讲解器里的小故事解说，据说是因为和珅早年贫寒，地位卑微，二十多岁遇到乾隆皇帝后才平步青云。两蹬台阶寓意早年的艰辛，跨过之后，则是一帆风顺，再无坎坷。</p>\n<p>迈上平步青云路，则上到了邀月台。这里是全园的最高处，居高俯览园中，也是主人与家人或亲朋共同赏月的好地方。站在台上，可以想象某个中秋，王府里人们在这里赏月，周边树木森森，底下则是滴翠岩传来的涓涓细流声；又或是一个雪夜，某位王公身披裘衣独立雪中，一声鸣啼，几片残雪从枝头跌落。</p>\n<p>现在这里是一个佛堂，几位游客路过时祈福跪拜。游人凭栏歇息，喧喧扰扰。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0f7165100b4feebaeb98c8e33bcfda~tplv-k3u1fbpfcp-watermark.image\" alt=\"fangtangshuixie\"></p>\n<p>最后走到澄怀撷秀，堂前有海棠数株，故又名海棠轩。据说原来是恭亲王奕訢年轻时读书之处。从堂前刚好观赏方塘水榭，四周柳树依依。原本府中并无浮桥，需要乘船登亭。现在海棠轩里成立一个纪念品零售店，原本僻静的读书处挤满了买福字的游客，真是可惜。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab016affd476486b84124d28bc55db43~tplv-k3u1fbpfcp-watermark.image\" alt=\"yangjiaodenghutong1\"></p>\n<p>从王府出来，心想也别原路返回了，绕着另一条羊角灯胡同走出去。胡同扭曲狭窄，让我想起小时候的湾子。虽然都是翻新过的平房，但仿佛依然可以感受到当年住在王府边上人们的生活气息。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afaca6e832624677bee589837ad5d5b2~tplv-k3u1fbpfcp-watermark.image\" alt=\"yangjiaodenghutong2\"></p>\n<p>胡同里安静极了，还能听见风吹过树枝的声音。不知哪家的婴儿啼哭，喊着找妈妈。</p>\n<p>从胡同里走出来，地铁站边刚好有个公园。坐在太阳底下放空。两百多年前，是否也有一位读书人在哪晒着太阳发呆呢？</p>\n"},{"title":"聊聊柯里化","abbrlink":"23651091","date":"2021-03-24T23:42:44.000Z","_content":"\n最近在看柯里化（currying），发现网上的资料众说纷纭，鱼龙混杂。再加上也算是一道高频面试题，所以也试试实现了一下，顺便记录一下心得。\n\n首先明确一点，currying 的定义，根据 wiki 的解释，柯里化是一种将接受多参数函数转换成一个接受单一序列参数的函数（ currying is the technique of conveting a function that takes multiple arguments into a sequence of functions that each take a single arguments. ）\n\n数学表达式：\n\n```mathematica\nx= f(a,b,c)  becomse :\n\nh = g(a);\n\ni = h(b);\n\nx = i(c);\n\n或者可以链式调用 x = g(a)(b)(c).\n\n```\n\n根据定义我们可以得知，currying 需要函数有一个固定数量入参，这样才能将对应的函数正确的“柯里”。至于非固定的入参，我们后面再讲。\n\n先看一个简单的实现。\n\n我们来实现一个基本的 sum 方法，接受三个参数，返回加和。\n\n```js\nfunction sum(a, b, c) {\n  return a + b + c;\n}\n```\n\n我们再来实现柯里方法。\n\n```js\nfunction curry(fn) {\n  return function curried(...args) {\n    // fn.length 返回需要科里化的方法的 arguments 的长度,\n    // 如果不到这个长度，则说明需要继续接受参数，\n    if (args.length >= fn.length) {\n      return fn.apply(this, args);\n    } else {\n      return function (...args2) {\n        return curried.apply(this, args.concat(args2));\n      };\n    }\n  };\n}\n```\n\n实现比较直观，如果长度不及原始函数规定的入参，则继续 concat，直到满足长度，调用 apply 立刻执行。\n\n使用方法如下。\n\n```js\nconst curried = curry(sum);\n\nconsole.log(\"curried sum result\", curried(1, 2, 3));\nconsole.log(\"curried sum result\", curried(1, 2)(3));\nconsole.log(\"curried sum result\", curried(1)(2)(3));\n```\n\n有三个小点值得注意。\n\n第一是 arguments 对象，是一个 array like object， 它拥有 length 属性，但是想直接调用数组的方法是不行的。\n\n记录一下茴字的四种写法。\n\n```javascript\n\nvar args = Array.prototype.slice.call(arguments)\n\nvar args = [].slice.call(arguments)\n\nvar args = Array.from(arguments)\n\nvar args = [… arguments]\n```\n\n第二个是上面代码里的第 3 行， fn.length， 返回的是原始函数的入参长度。\n\n第三，调用时，不仅可以 `curried(1)(2)(3)`, 还能`curried(1, 2)(3)`。 后者称作 partial function。有机会再聊。\n\n当然市面上会有各种实现方式，配合 es5，es6，检查各种边际条件。查一查会有很多，这里不做赘述。\n\n接下来聊聊柯里化的使用场景。\n\n柯里化提供了一种封装方式，减少代码冗余，增加代码的可读性。\n\n最常见的例子就是 log 函数，比如 log 可以接受 time ，level， message 三个参数。\n\n```js\nfunction log(date, importance, message) {\n  alert(`[${date.getHours()}:${date.getMinutes()}] [${importance}] ${message}`);\n}\n```\n\n如果我想在此基础上封装，logNow ，我可以这么做\n\n```js\nconst curriedLog = _.curry(log);\n\n// logNow will be the partial of log with fixed first argument\nlet logNow = curriedLog(new Date());\n\n// use it\nlogNow(\"INFO\", \"message\"); // [HH:mm] INFO message\n```\n\n或者我们想再进一步，想封装一个 debugNow 函数\n\n```js\nlet debugNow = logNow(\"DEBUG\");\n\ndebugNow(\"message\"); // [HH:mm] DEBUG message\n```\n\n谈完了应用场景，再说说效率。\n\n是的，柯里化很慢，性能损耗很大。为什么？大量的嵌套作用域和闭包，带来了不小的内存占用。至于网上说的， fn.apply 和 fn.call 比直接调用 fn 慢（看上去是的）， 老版本浏览器在 arguments.length 的实现相当慢（不知道），存取 arguments 对象比存取命名参数要慢一些（不确定），这些原因，看上去可能，但是我觉得主要原因还是内存方面。昨晚在看《函数式编程》里面，有做过柯里化和普通函数的性能对比，有空附上结果和页码。\n\n最后说说前面遗留的一个问题，也是面试中常见的一道题，题目如下\n\n```js\nsum(1)();\nsum(1)(2)();\nsum(1)(2)(3)();\n```\n\n题目大致如此，基本就是非固定的入参，求加和。关于这点，我想想说说我的看法。\n\n我认为这道题要往柯里化上靠，有点勉强。放在 closure 门类里，比较合适。\n\n附上我写的一个题解。\n\n```js\n//首先定义一个方法，不限定入参数量\nfunction sum() {\n  return Array.prototype.slice.apply(arguments).reduce((p, c) => {\n    return p + c;\n  }, 0);\n}\n\nconsole.log(\"sum\", sum(1, 2, 3, 4));\n\nfunction curry2(fn) {\n  return function curried(...args) {\n    // 累计保存的 arguments\n    return function (...args2) {\n      // 真正接受的 arguments\n      if (!args2.length) {\n        // 最后传的空，告知返回结果\n        return fn.apply(this, args);\n      } else {\n        // 如果入参不为空， 则继续 concat，返回 curried 方法，等待下一次调用\n        return curried.apply(this, args.concat(args2));\n      }\n    };\n  };\n}\n\nconst curried = curry2(sum);\n\nconsole.log(\"curried sum result\", curried(1)(2)(3)(4)());\n```\n\n除了上述对 arguments 反复摩擦，我觉得基于 closure 的实现更加直接。主要思想就一点，也是闭包的基本概念，内层函数可以访问外层作用域。\n\n实现如下。\n\n```js\nfunction add(n) {\n  let s = n;\n\n  return function fun(m) {\n    if (!m) return s;\n    s += m;\n    return fun;\n  };\n}\n\nconsole.log(add(1)(2)(3)(4)()); //10\n```\n\n这种求和方式，除了最后传入一个空以外，还有各种变体，比如给 sum 对象加一个 toString 方法，通过`+sum(\u00101)` 来进行隐式类型转换（type coercion），那种太 hack 了，我觉得 duck 不必。\n\n最后，Curry 命名不是因为咖喱，而是因为 Haskell Curry。\n\n谢谢阅读。\n","source":"_posts/聊聊柯里化.md","raw":"---\ntitle: 聊聊柯里化\ncategories:\n  - web\ntags:\n  - javascript\n  - curry\n  - closure\nabbrlink: \"23651091\"\ndate: 2021-03-24 16:42:44\n---\n\n最近在看柯里化（currying），发现网上的资料众说纷纭，鱼龙混杂。再加上也算是一道高频面试题，所以也试试实现了一下，顺便记录一下心得。\n\n首先明确一点，currying 的定义，根据 wiki 的解释，柯里化是一种将接受多参数函数转换成一个接受单一序列参数的函数（ currying is the technique of conveting a function that takes multiple arguments into a sequence of functions that each take a single arguments. ）\n\n数学表达式：\n\n```mathematica\nx= f(a,b,c)  becomse :\n\nh = g(a);\n\ni = h(b);\n\nx = i(c);\n\n或者可以链式调用 x = g(a)(b)(c).\n\n```\n\n根据定义我们可以得知，currying 需要函数有一个固定数量入参，这样才能将对应的函数正确的“柯里”。至于非固定的入参，我们后面再讲。\n\n先看一个简单的实现。\n\n我们来实现一个基本的 sum 方法，接受三个参数，返回加和。\n\n```js\nfunction sum(a, b, c) {\n  return a + b + c;\n}\n```\n\n我们再来实现柯里方法。\n\n```js\nfunction curry(fn) {\n  return function curried(...args) {\n    // fn.length 返回需要科里化的方法的 arguments 的长度,\n    // 如果不到这个长度，则说明需要继续接受参数，\n    if (args.length >= fn.length) {\n      return fn.apply(this, args);\n    } else {\n      return function (...args2) {\n        return curried.apply(this, args.concat(args2));\n      };\n    }\n  };\n}\n```\n\n实现比较直观，如果长度不及原始函数规定的入参，则继续 concat，直到满足长度，调用 apply 立刻执行。\n\n使用方法如下。\n\n```js\nconst curried = curry(sum);\n\nconsole.log(\"curried sum result\", curried(1, 2, 3));\nconsole.log(\"curried sum result\", curried(1, 2)(3));\nconsole.log(\"curried sum result\", curried(1)(2)(3));\n```\n\n有三个小点值得注意。\n\n第一是 arguments 对象，是一个 array like object， 它拥有 length 属性，但是想直接调用数组的方法是不行的。\n\n记录一下茴字的四种写法。\n\n```javascript\n\nvar args = Array.prototype.slice.call(arguments)\n\nvar args = [].slice.call(arguments)\n\nvar args = Array.from(arguments)\n\nvar args = [… arguments]\n```\n\n第二个是上面代码里的第 3 行， fn.length， 返回的是原始函数的入参长度。\n\n第三，调用时，不仅可以 `curried(1)(2)(3)`, 还能`curried(1, 2)(3)`。 后者称作 partial function。有机会再聊。\n\n当然市面上会有各种实现方式，配合 es5，es6，检查各种边际条件。查一查会有很多，这里不做赘述。\n\n接下来聊聊柯里化的使用场景。\n\n柯里化提供了一种封装方式，减少代码冗余，增加代码的可读性。\n\n最常见的例子就是 log 函数，比如 log 可以接受 time ，level， message 三个参数。\n\n```js\nfunction log(date, importance, message) {\n  alert(`[${date.getHours()}:${date.getMinutes()}] [${importance}] ${message}`);\n}\n```\n\n如果我想在此基础上封装，logNow ，我可以这么做\n\n```js\nconst curriedLog = _.curry(log);\n\n// logNow will be the partial of log with fixed first argument\nlet logNow = curriedLog(new Date());\n\n// use it\nlogNow(\"INFO\", \"message\"); // [HH:mm] INFO message\n```\n\n或者我们想再进一步，想封装一个 debugNow 函数\n\n```js\nlet debugNow = logNow(\"DEBUG\");\n\ndebugNow(\"message\"); // [HH:mm] DEBUG message\n```\n\n谈完了应用场景，再说说效率。\n\n是的，柯里化很慢，性能损耗很大。为什么？大量的嵌套作用域和闭包，带来了不小的内存占用。至于网上说的， fn.apply 和 fn.call 比直接调用 fn 慢（看上去是的）， 老版本浏览器在 arguments.length 的实现相当慢（不知道），存取 arguments 对象比存取命名参数要慢一些（不确定），这些原因，看上去可能，但是我觉得主要原因还是内存方面。昨晚在看《函数式编程》里面，有做过柯里化和普通函数的性能对比，有空附上结果和页码。\n\n最后说说前面遗留的一个问题，也是面试中常见的一道题，题目如下\n\n```js\nsum(1)();\nsum(1)(2)();\nsum(1)(2)(3)();\n```\n\n题目大致如此，基本就是非固定的入参，求加和。关于这点，我想想说说我的看法。\n\n我认为这道题要往柯里化上靠，有点勉强。放在 closure 门类里，比较合适。\n\n附上我写的一个题解。\n\n```js\n//首先定义一个方法，不限定入参数量\nfunction sum() {\n  return Array.prototype.slice.apply(arguments).reduce((p, c) => {\n    return p + c;\n  }, 0);\n}\n\nconsole.log(\"sum\", sum(1, 2, 3, 4));\n\nfunction curry2(fn) {\n  return function curried(...args) {\n    // 累计保存的 arguments\n    return function (...args2) {\n      // 真正接受的 arguments\n      if (!args2.length) {\n        // 最后传的空，告知返回结果\n        return fn.apply(this, args);\n      } else {\n        // 如果入参不为空， 则继续 concat，返回 curried 方法，等待下一次调用\n        return curried.apply(this, args.concat(args2));\n      }\n    };\n  };\n}\n\nconst curried = curry2(sum);\n\nconsole.log(\"curried sum result\", curried(1)(2)(3)(4)());\n```\n\n除了上述对 arguments 反复摩擦，我觉得基于 closure 的实现更加直接。主要思想就一点，也是闭包的基本概念，内层函数可以访问外层作用域。\n\n实现如下。\n\n```js\nfunction add(n) {\n  let s = n;\n\n  return function fun(m) {\n    if (!m) return s;\n    s += m;\n    return fun;\n  };\n}\n\nconsole.log(add(1)(2)(3)(4)()); //10\n```\n\n这种求和方式，除了最后传入一个空以外，还有各种变体，比如给 sum 对象加一个 toString 方法，通过`+sum(\u00101)` 来进行隐式类型转换（type coercion），那种太 hack 了，我觉得 duck 不必。\n\n最后，Curry 命名不是因为咖喱，而是因为 Haskell Curry。\n\n谢谢阅读。\n","slug":"聊聊柯里化","published":1,"updated":"2021-09-14T11:40:19.910Z","_id":"ckn7220hi00017pfy9j1sae2n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在看柯里化（currying），发现网上的资料众说纷纭，鱼龙混杂。再加上也算是一道高频面试题，所以也试试实现了一下，顺便记录一下心得。</p>\n<p>首先明确一点，currying 的定义，根据 wiki 的解释，柯里化是一种将接受多参数函数转换成一个接受单一序列参数的函数（ currying is the technique of conveting a function that takes multiple arguments into a sequence of functions that each take a single arguments. ）</p>\n<p>数学表达式：</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">x</span><span class=\"operator\">=</span> <span class=\"variable\">f</span><span class=\"punctuation\">(</span><span class=\"variable\">a</span><span class=\"operator\">,</span><span class=\"variable\">b</span><span class=\"operator\">,</span><span class=\"variable\">c</span><span class=\"punctuation\">)</span>  <span class=\"variable\">becomse</span> <span class=\"operator\">:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">h</span> <span class=\"operator\">=</span> <span class=\"variable\">g</span><span class=\"punctuation\">(</span><span class=\"variable\">a</span><span class=\"punctuation\">)</span><span class=\"operator\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"variable\">h</span><span class=\"punctuation\">(</span><span class=\"variable\">b</span><span class=\"punctuation\">)</span><span class=\"operator\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"variable\">i</span><span class=\"punctuation\">(</span><span class=\"variable\">c</span><span class=\"punctuation\">)</span><span class=\"operator\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">或者可以链式调用 <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"variable\">g</span><span class=\"punctuation\">(</span><span class=\"variable\">a</span><span class=\"punctuation\">)</span><span class=\"punctuation\">(</span><span class=\"variable\">b</span><span class=\"punctuation\">)</span><span class=\"punctuation\">(</span><span class=\"variable\">c</span><span class=\"punctuation\">)</span><span class=\"operator\">.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>根据定义我们可以得知，currying 需要函数有一个固定数量入参，这样才能将对应的函数正确的“柯里”。至于非固定的入参，我们后面再讲。</p>\n<p>先看一个简单的实现。</p>\n<p>我们来实现一个基本的 sum 方法，接受三个参数，返回加和。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b, c</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们再来实现柯里方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">curried</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fn.length 返回需要科里化的方法的 arguments 的长度,</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果不到这个长度，则说明需要继续接受参数，</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> &gt;= fn.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curried.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args.<span class=\"title function_\">concat</span>(args2));</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现比较直观，如果长度不及原始函数规定的入参，则继续 concat，直到满足长度，调用 apply 立刻执行。</p>\n<p>使用方法如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> curried = <span class=\"title function_\">curry</span>(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;curried sum result&quot;</span>, <span class=\"title function_\">curried</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;curried sum result&quot;</span>, <span class=\"title function_\">curried</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;curried sum result&quot;</span>, <span class=\"title function_\">curried</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n\n<p>有三个小点值得注意。</p>\n<p>第一是 arguments 对象，是一个 array like object， 它拥有 length 属性，但是想直接调用数组的方法是不行的。</p>\n<p>记录一下茴字的四种写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [].<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [… <span class=\"variable language_\">arguments</span>]</span><br></pre></td></tr></table></figure>\n\n<p>第二个是上面代码里的第 3 行， fn.length， 返回的是原始函数的入参长度。</p>\n<p>第三，调用时，不仅可以 <code>curried(1)(2)(3)</code>, 还能<code>curried(1, 2)(3)</code>。 后者称作 partial function。有机会再聊。</p>\n<p>当然市面上会有各种实现方式，配合 es5，es6，检查各种边际条件。查一查会有很多，这里不做赘述。</p>\n<p>接下来聊聊柯里化的使用场景。</p>\n<p>柯里化提供了一种封装方式，减少代码冗余，增加代码的可读性。</p>\n<p>最常见的例子就是 log 函数，比如 log 可以接受 time ，level， message 三个参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">log</span>(<span class=\"params\">date, importance, message</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">`[<span class=\"subst\">$&#123;date.getHours()&#125;</span>:<span class=\"subst\">$&#123;date.getMinutes()&#125;</span>] [<span class=\"subst\">$&#123;importance&#125;</span>] <span class=\"subst\">$&#123;message&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我想在此基础上封装，logNow ，我可以这么做</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> curriedLog = _.<span class=\"title function_\">curry</span>(log);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logNow will be the partial of log with fixed first argument</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> logNow = <span class=\"title function_\">curriedLog</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use it</span></span><br><span class=\"line\"><span class=\"title function_\">logNow</span>(<span class=\"string\">&quot;INFO&quot;</span>, <span class=\"string\">&quot;message&quot;</span>); <span class=\"comment\">// [HH:mm] INFO message</span></span><br></pre></td></tr></table></figure>\n\n<p>或者我们想再进一步，想封装一个 debugNow 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> debugNow = <span class=\"title function_\">logNow</span>(<span class=\"string\">&quot;DEBUG&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">debugNow</span>(<span class=\"string\">&quot;message&quot;</span>); <span class=\"comment\">// [HH:mm] DEBUG message</span></span><br></pre></td></tr></table></figure>\n\n<p>谈完了应用场景，再说说效率。</p>\n<p>是的，柯里化很慢，性能损耗很大。为什么？大量的嵌套作用域和闭包，带来了不小的内存占用。至于网上说的， fn.apply 和 fn.call 比直接调用 fn 慢（看上去是的）， 老版本浏览器在 arguments.length 的实现相当慢（不知道），存取 arguments 对象比存取命名参数要慢一些（不确定），这些原因，看上去可能，但是我觉得主要原因还是内存方面。昨晚在看《函数式编程》里面，有做过柯里化和普通函数的性能对比，有空附上结果和页码。</p>\n<p>最后说说前面遗留的一个问题，也是面试中常见的一道题，题目如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)();</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)();</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)();</span><br></pre></td></tr></table></figure>\n\n<p>题目大致如此，基本就是非固定的入参，求加和。关于这点，我想想说说我的看法。</p>\n<p>我认为这道题要往柯里化上靠，有点勉强。放在 closure 门类里，比较合适。</p>\n<p>附上我写的一个题解。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先定义一个方法，不限定入参数量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">arguments</span>).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">p, c</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p + c;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;sum&quot;</span>, <span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry2</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">curried</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 累计保存的 arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 真正接受的 arguments</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!args2.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 最后传的空，告知返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果入参不为空， 则继续 concat，返回 curried 方法，等待下一次调用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> curried.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args.<span class=\"title function_\">concat</span>(args2));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> curried = <span class=\"title function_\">curry2</span>(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;curried sum result&quot;</span>, <span class=\"title function_\">curried</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)());</span><br></pre></td></tr></table></figure>\n\n<p>除了上述对 arguments 反复摩擦，我觉得基于 closure 的实现更加直接。主要思想就一点，也是闭包的基本概念，内层函数可以访问外层作用域。</p>\n<p>实现如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = n;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\">m</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!m) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    s += m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fun;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)()); <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n\n<p>这种求和方式，除了最后传入一个空以外，还有各种变体，比如给 sum 对象加一个 toString 方法，通过<code>+sum(\u00101)</code> 来进行隐式类型转换（type coercion），那种太 hack 了，我觉得 duck 不必。</p>\n<p>最后，Curry 命名不是因为咖喱，而是因为 Haskell Curry。</p>\n<p>谢谢阅读。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在看柯里化（currying），发现网上的资料众说纷纭，鱼龙混杂。再加上也算是一道高频面试题，所以也试试实现了一下，顺便记录一下心得。</p>\n<p>首先明确一点，currying 的定义，根据 wiki 的解释，柯里化是一种将接受多参数函数转换成一个接受单一序列参数的函数（ currying is the technique of conveting a function that takes multiple arguments into a sequence of functions that each take a single arguments. ）</p>\n<p>数学表达式：</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">x</span><span class=\"operator\">=</span> <span class=\"variable\">f</span><span class=\"punctuation\">(</span><span class=\"variable\">a</span><span class=\"operator\">,</span><span class=\"variable\">b</span><span class=\"operator\">,</span><span class=\"variable\">c</span><span class=\"punctuation\">)</span>  <span class=\"variable\">becomse</span> <span class=\"operator\">:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">h</span> <span class=\"operator\">=</span> <span class=\"variable\">g</span><span class=\"punctuation\">(</span><span class=\"variable\">a</span><span class=\"punctuation\">)</span><span class=\"operator\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"variable\">h</span><span class=\"punctuation\">(</span><span class=\"variable\">b</span><span class=\"punctuation\">)</span><span class=\"operator\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"variable\">i</span><span class=\"punctuation\">(</span><span class=\"variable\">c</span><span class=\"punctuation\">)</span><span class=\"operator\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">或者可以链式调用 <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"variable\">g</span><span class=\"punctuation\">(</span><span class=\"variable\">a</span><span class=\"punctuation\">)</span><span class=\"punctuation\">(</span><span class=\"variable\">b</span><span class=\"punctuation\">)</span><span class=\"punctuation\">(</span><span class=\"variable\">c</span><span class=\"punctuation\">)</span><span class=\"operator\">.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>根据定义我们可以得知，currying 需要函数有一个固定数量入参，这样才能将对应的函数正确的“柯里”。至于非固定的入参，我们后面再讲。</p>\n<p>先看一个简单的实现。</p>\n<p>我们来实现一个基本的 sum 方法，接受三个参数，返回加和。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b, c</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们再来实现柯里方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">curried</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fn.length 返回需要科里化的方法的 arguments 的长度,</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果不到这个长度，则说明需要继续接受参数，</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> &gt;= fn.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curried.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args.<span class=\"title function_\">concat</span>(args2));</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现比较直观，如果长度不及原始函数规定的入参，则继续 concat，直到满足长度，调用 apply 立刻执行。</p>\n<p>使用方法如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> curried = <span class=\"title function_\">curry</span>(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;curried sum result&quot;</span>, <span class=\"title function_\">curried</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;curried sum result&quot;</span>, <span class=\"title function_\">curried</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;curried sum result&quot;</span>, <span class=\"title function_\">curried</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n\n<p>有三个小点值得注意。</p>\n<p>第一是 arguments 对象，是一个 array like object， 它拥有 length 属性，但是想直接调用数组的方法是不行的。</p>\n<p>记录一下茴字的四种写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [].<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [… <span class=\"variable language_\">arguments</span>]</span><br></pre></td></tr></table></figure>\n\n<p>第二个是上面代码里的第 3 行， fn.length， 返回的是原始函数的入参长度。</p>\n<p>第三，调用时，不仅可以 <code>curried(1)(2)(3)</code>, 还能<code>curried(1, 2)(3)</code>。 后者称作 partial function。有机会再聊。</p>\n<p>当然市面上会有各种实现方式，配合 es5，es6，检查各种边际条件。查一查会有很多，这里不做赘述。</p>\n<p>接下来聊聊柯里化的使用场景。</p>\n<p>柯里化提供了一种封装方式，减少代码冗余，增加代码的可读性。</p>\n<p>最常见的例子就是 log 函数，比如 log 可以接受 time ，level， message 三个参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">log</span>(<span class=\"params\">date, importance, message</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">`[<span class=\"subst\">$&#123;date.getHours()&#125;</span>:<span class=\"subst\">$&#123;date.getMinutes()&#125;</span>] [<span class=\"subst\">$&#123;importance&#125;</span>] <span class=\"subst\">$&#123;message&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我想在此基础上封装，logNow ，我可以这么做</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> curriedLog = _.<span class=\"title function_\">curry</span>(log);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logNow will be the partial of log with fixed first argument</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> logNow = <span class=\"title function_\">curriedLog</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use it</span></span><br><span class=\"line\"><span class=\"title function_\">logNow</span>(<span class=\"string\">&quot;INFO&quot;</span>, <span class=\"string\">&quot;message&quot;</span>); <span class=\"comment\">// [HH:mm] INFO message</span></span><br></pre></td></tr></table></figure>\n\n<p>或者我们想再进一步，想封装一个 debugNow 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> debugNow = <span class=\"title function_\">logNow</span>(<span class=\"string\">&quot;DEBUG&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">debugNow</span>(<span class=\"string\">&quot;message&quot;</span>); <span class=\"comment\">// [HH:mm] DEBUG message</span></span><br></pre></td></tr></table></figure>\n\n<p>谈完了应用场景，再说说效率。</p>\n<p>是的，柯里化很慢，性能损耗很大。为什么？大量的嵌套作用域和闭包，带来了不小的内存占用。至于网上说的， fn.apply 和 fn.call 比直接调用 fn 慢（看上去是的）， 老版本浏览器在 arguments.length 的实现相当慢（不知道），存取 arguments 对象比存取命名参数要慢一些（不确定），这些原因，看上去可能，但是我觉得主要原因还是内存方面。昨晚在看《函数式编程》里面，有做过柯里化和普通函数的性能对比，有空附上结果和页码。</p>\n<p>最后说说前面遗留的一个问题，也是面试中常见的一道题，题目如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)();</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)();</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)();</span><br></pre></td></tr></table></figure>\n\n<p>题目大致如此，基本就是非固定的入参，求加和。关于这点，我想想说说我的看法。</p>\n<p>我认为这道题要往柯里化上靠，有点勉强。放在 closure 门类里，比较合适。</p>\n<p>附上我写的一个题解。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先定义一个方法，不限定入参数量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">arguments</span>).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">p, c</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p + c;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;sum&quot;</span>, <span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry2</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">curried</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 累计保存的 arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 真正接受的 arguments</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!args2.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 最后传的空，告知返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果入参不为空， 则继续 concat，返回 curried 方法，等待下一次调用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> curried.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args.<span class=\"title function_\">concat</span>(args2));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> curried = <span class=\"title function_\">curry2</span>(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;curried sum result&quot;</span>, <span class=\"title function_\">curried</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)());</span><br></pre></td></tr></table></figure>\n\n<p>除了上述对 arguments 反复摩擦，我觉得基于 closure 的实现更加直接。主要思想就一点，也是闭包的基本概念，内层函数可以访问外层作用域。</p>\n<p>实现如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = n;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\">m</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!m) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    s += m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fun;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)()); <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n\n<p>这种求和方式，除了最后传入一个空以外，还有各种变体，比如给 sum 对象加一个 toString 方法，通过<code>+sum(\u00101)</code> 来进行隐式类型转换（type coercion），那种太 hack 了，我觉得 duck 不必。</p>\n<p>最后，Curry 命名不是因为咖喱，而是因为 Haskell Curry。</p>\n<p>谢谢阅读。</p>\n"},{"title":"聊聊事件循环","abbrlink":"282aa8cf","date":"2021-04-07T21:08:30.000Z","_content":"\n大家在面试中经常会被问到，浏览器事件循环和 node 事件循环有什么区别？\n\n好问题。\n\n简短说来，**从执行结果来看**，早期有区别，后来统一了。v11.0.0 (2018.10.23 release) 之后，没区别。\n\n为什么？\n\n看下面这段代码。\n\n```js\nsetTimeout(() => console.log('timeout1'));\nsetTimeout(() => {\n    console.log('timeout2')\n    Promise.resolve().then(() => console.log('promise resolve'))\n});\nsetTimeout(() => console.log('timeout3'));\nsetTimeout(() => console.log('timeout4'));\n```\n\n在浏览器中（chrome v89）\n\n```shell\ntimeout1\ntimeout2\npromise resolve\ntimeout3\ntimeout4\n```\n\n在 node 低于 v11.0.0环境中（在v6.11.2中验证，附赠一个[运行环境连接](https://www.tutorialspoint.com/execute_nodejs_online.php)）。\n\n```sh\ntimeout1\ntimeout2\ntimeout3\ntimeout4\npromise resolve\n```\n\n先看下node 11版本之前，node 是怎么执行的呢？\n\n1. 执行完一个阶段的所有任务\n2. 执行完nextTick队列里的内容\n3. 执行完微任务队列里的内容\n\n所以，可以理解上面的结果，先打完了timeout ，最后才来resolve。\n\n但是这些都已经旧船票了，已经登不上新时代的大船了。\n\n接下来看看浏览器里的执行顺序，也就是node 11以后的执行顺序，从那时起，大伙就是相亲相爱一家人了。\n\n通俗说来，在浏览器环境中，事件循环分3步（第3步就是回到最初的起点）：\n\n1. 运行时在每个事件循环开始时，依次执行task queue 中的每个task，在执行task的过程中，如果又有新的task添加进来怎么办。没办法，先来后到，你只能等下一次循环了。 \n2. 第二步，当每一个 task 结束了，会去检查还有没有待执行的microtask，这里和 task 的显著区别是，他会等到microtask 队列为空才会停止。什么意思，如果一个微任务，不停的往微任务队列里添加新的微任务，那么，这一步骤就会头铁的进行下去。\n3. microtask 执行完了，回到第1歩循环往复。\n\n言归正传，我们再来看下面这个例子（验证环境 chrome 89 & node v14.16.0）。\n\n```js\nconsole.log(1);\nsetTimeout(function () {\n  console.log(2);\n  setTimeout(function () {\n    console.log(3);\n    Promise.resolve(4)\n      .then((res) => {\n        console.log(res); // 4\n        setTimeout(function () {\n          console.log(6);\n        }, 0);\n      })\n      .then((res) => {\n        console.log(res);\n      })\n      .then((res) => {\n        console.log(res);\n      })\n      .then((res) => {\n        console.log(res);\n      });\n  }, 0);\n  setTimeout(function () {\n    console.log(5);\n  }, 0);\n}, 0);\n\n```\n\n为了方便看一点，多 then 了几次。看看结果\n\n```sh\n1\n2\n3\n4\nundefined\nundefined\nundefined\n5\n6\n```\n\n可以看到，我们在then 中不断添加了新的 microtask 时，会继续执行下去，今日事今日毕。但是对于 task，不好意思，您往后稍稍。\n\nv8博客上有张图，挺好。需要注意一点，图中 microtask 描述的是一个动态的过程，他还可以继续往 queue 里添加新的微任务，理解这点很重要。\n\n![micro-tasks-vs-tasks.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b1a464bf2a64aafb65ab790fdbf4bde~tplv-k3u1fbpfcp-watermark.image)\n\n再来看下 node 中的event loop。\n\n在这之前，解释一下为什么文章开头，我加粗的“从执行结果来看”。\n\n本质上，事件循环是由宿主环境来实现，常见的宿主环境有web浏览器，nodejs，还有 Adobe Flash（没错，还有这个老哥，参见高程）。由于不同环境实现的不同，这也产生了这个古老的问题，“浏览器事件循环和 node 事件循环有什么区别？” 对于这种行为，这好吗？这不好。所以为了消除这种宿主环境之间执行的差异， node 11 之后改善了这个问题。\n\n回到 node 官方文档，我们可以看到这么一张图流程图。\n\n```\n   ┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n```\n\n这张图有点抽象，换一张。\n\n![d502f94b-cc6c-4be7-ac8c-172897eefb05-original.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9aa3e314b504fcfb4e4d78d760c44bf~tplv-k3u1fbpfcp-watermark.image)\n\n关于事件循环的解释，网上的解释数不胜数。感觉不少都是把官方文档的内容颠来倒去拼凑一下。除了官方文档以外，还有一篇文章觉得值得一读（上图就是我借来的），同样也附在最后的链接部分。在这里我就不展开，或许下次专门写一篇文章来记录一下自己的阅读心得。\n\n再说点题外话，截止到今天（2021-3-16）， 对于 task, microtask 的官方用词和翻译还是 “任务 task  vs 微任务 microtask”。没有所谓的“宏任务”，也没有“macrotask” 这玩意什么事。用于谦于老爷的话说，这都不挨着。\n\n关于宏任务/ macrotask，打开掘金知乎，包括英文环境，随便搜一搜，大把的文章，到处都在说，到处都在用。但是去查官方文档，mdn，v8 blog，html spec 等等，很难找到这个词出现的源头。一个没有源头的词，出现了人传人现象，在各种文章图片中出现，很有趣。如果有朋友知道这个词的来历，欢迎指点。\n\n好了，文章到此为止，谢谢大家的阅读，欢迎讨论和指正。\n\n接下来补充一些辅助阅读材料。\n\n1. mdn 文档。\n\n   1. https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide\n   2. https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\n\n   一个小彩蛋，英文版的子标题， Run, JavaScript, run 是 Forrest Gump  里的经典台词，Run, Forrest , run!\n\n2. Promise/A+: https://promisesaplus.com/#notes   \n\n   文档中关于 platform code 的解释中有这么一段话 `This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick`。 这也是我为数不多检索到明确使用“macro”的一处，当然还特意加上了引号。\n\n3. html 文档：https://html.spec.whatwg.org/multipage/webappapis.html#concept-agent-event-loop\n4. nodejs 文档：https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/ \n5. nodejs 事件循环：https://www.voidcanvas.com/nodejs-event-loop/ ； 这篇文章的中文翻译：https://zhuanlan.zhihu.com/p/35918797\n6. [What you should know to really understand the Node.js Event Loop](https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c)\n7. v8 博客关于任务，微任务的描述：https://v8.dev/blog/fast-async#tasks-vs.-microtasks\n8. Jake Archibald 关于microtask 的文章：https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n9. 关于task 名称的讨论。\n   1. https://www.zhihu.com/question/302612139\n   2. https://www.zhihu.com/question/362096226\n   3. https://weibo.com/1660579792/IkzWTc7FH\n10. 起因是看到这篇 issue [浏览器和Node 事件循环的区别]( https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/26)\n\n后记：\n\n在写的过程中，看了不少材料，中文的，英文的，都有。发现可能只有1%的文章是经典，值得一读。其余的99%都是机械复制粘贴，不说人话。甚至都不知道写完之后作者自己会不会去看。所以当我整理的过程中，也在思考，怎么尽量把这件事用能被理解的方式，说清楚、讲明白，不仅是方便自己以后可以快速总结、回顾，也为不了解的朋友提供一些资料和思路。这也是写这篇文章的初衷。\n","source":"_posts/聊聊事件循环.md","raw":"---\ntitle: 聊聊事件循环\ncategories:\n  - web\ntags:\n  - javascript\n  - event loop\n  - nodejs\n  - browser\nabbrlink: 282aa8cf\ndate: 2021-04-07 14:08:30\n---\n\n大家在面试中经常会被问到，浏览器事件循环和 node 事件循环有什么区别？\n\n好问题。\n\n简短说来，**从执行结果来看**，早期有区别，后来统一了。v11.0.0 (2018.10.23 release) 之后，没区别。\n\n为什么？\n\n看下面这段代码。\n\n```js\nsetTimeout(() => console.log('timeout1'));\nsetTimeout(() => {\n    console.log('timeout2')\n    Promise.resolve().then(() => console.log('promise resolve'))\n});\nsetTimeout(() => console.log('timeout3'));\nsetTimeout(() => console.log('timeout4'));\n```\n\n在浏览器中（chrome v89）\n\n```shell\ntimeout1\ntimeout2\npromise resolve\ntimeout3\ntimeout4\n```\n\n在 node 低于 v11.0.0环境中（在v6.11.2中验证，附赠一个[运行环境连接](https://www.tutorialspoint.com/execute_nodejs_online.php)）。\n\n```sh\ntimeout1\ntimeout2\ntimeout3\ntimeout4\npromise resolve\n```\n\n先看下node 11版本之前，node 是怎么执行的呢？\n\n1. 执行完一个阶段的所有任务\n2. 执行完nextTick队列里的内容\n3. 执行完微任务队列里的内容\n\n所以，可以理解上面的结果，先打完了timeout ，最后才来resolve。\n\n但是这些都已经旧船票了，已经登不上新时代的大船了。\n\n接下来看看浏览器里的执行顺序，也就是node 11以后的执行顺序，从那时起，大伙就是相亲相爱一家人了。\n\n通俗说来，在浏览器环境中，事件循环分3步（第3步就是回到最初的起点）：\n\n1. 运行时在每个事件循环开始时，依次执行task queue 中的每个task，在执行task的过程中，如果又有新的task添加进来怎么办。没办法，先来后到，你只能等下一次循环了。 \n2. 第二步，当每一个 task 结束了，会去检查还有没有待执行的microtask，这里和 task 的显著区别是，他会等到microtask 队列为空才会停止。什么意思，如果一个微任务，不停的往微任务队列里添加新的微任务，那么，这一步骤就会头铁的进行下去。\n3. microtask 执行完了，回到第1歩循环往复。\n\n言归正传，我们再来看下面这个例子（验证环境 chrome 89 & node v14.16.0）。\n\n```js\nconsole.log(1);\nsetTimeout(function () {\n  console.log(2);\n  setTimeout(function () {\n    console.log(3);\n    Promise.resolve(4)\n      .then((res) => {\n        console.log(res); // 4\n        setTimeout(function () {\n          console.log(6);\n        }, 0);\n      })\n      .then((res) => {\n        console.log(res);\n      })\n      .then((res) => {\n        console.log(res);\n      })\n      .then((res) => {\n        console.log(res);\n      });\n  }, 0);\n  setTimeout(function () {\n    console.log(5);\n  }, 0);\n}, 0);\n\n```\n\n为了方便看一点，多 then 了几次。看看结果\n\n```sh\n1\n2\n3\n4\nundefined\nundefined\nundefined\n5\n6\n```\n\n可以看到，我们在then 中不断添加了新的 microtask 时，会继续执行下去，今日事今日毕。但是对于 task，不好意思，您往后稍稍。\n\nv8博客上有张图，挺好。需要注意一点，图中 microtask 描述的是一个动态的过程，他还可以继续往 queue 里添加新的微任务，理解这点很重要。\n\n![micro-tasks-vs-tasks.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b1a464bf2a64aafb65ab790fdbf4bde~tplv-k3u1fbpfcp-watermark.image)\n\n再来看下 node 中的event loop。\n\n在这之前，解释一下为什么文章开头，我加粗的“从执行结果来看”。\n\n本质上，事件循环是由宿主环境来实现，常见的宿主环境有web浏览器，nodejs，还有 Adobe Flash（没错，还有这个老哥，参见高程）。由于不同环境实现的不同，这也产生了这个古老的问题，“浏览器事件循环和 node 事件循环有什么区别？” 对于这种行为，这好吗？这不好。所以为了消除这种宿主环境之间执行的差异， node 11 之后改善了这个问题。\n\n回到 node 官方文档，我们可以看到这么一张图流程图。\n\n```\n   ┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n```\n\n这张图有点抽象，换一张。\n\n![d502f94b-cc6c-4be7-ac8c-172897eefb05-original.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9aa3e314b504fcfb4e4d78d760c44bf~tplv-k3u1fbpfcp-watermark.image)\n\n关于事件循环的解释，网上的解释数不胜数。感觉不少都是把官方文档的内容颠来倒去拼凑一下。除了官方文档以外，还有一篇文章觉得值得一读（上图就是我借来的），同样也附在最后的链接部分。在这里我就不展开，或许下次专门写一篇文章来记录一下自己的阅读心得。\n\n再说点题外话，截止到今天（2021-3-16）， 对于 task, microtask 的官方用词和翻译还是 “任务 task  vs 微任务 microtask”。没有所谓的“宏任务”，也没有“macrotask” 这玩意什么事。用于谦于老爷的话说，这都不挨着。\n\n关于宏任务/ macrotask，打开掘金知乎，包括英文环境，随便搜一搜，大把的文章，到处都在说，到处都在用。但是去查官方文档，mdn，v8 blog，html spec 等等，很难找到这个词出现的源头。一个没有源头的词，出现了人传人现象，在各种文章图片中出现，很有趣。如果有朋友知道这个词的来历，欢迎指点。\n\n好了，文章到此为止，谢谢大家的阅读，欢迎讨论和指正。\n\n接下来补充一些辅助阅读材料。\n\n1. mdn 文档。\n\n   1. https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide\n   2. https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\n\n   一个小彩蛋，英文版的子标题， Run, JavaScript, run 是 Forrest Gump  里的经典台词，Run, Forrest , run!\n\n2. Promise/A+: https://promisesaplus.com/#notes   \n\n   文档中关于 platform code 的解释中有这么一段话 `This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick`。 这也是我为数不多检索到明确使用“macro”的一处，当然还特意加上了引号。\n\n3. html 文档：https://html.spec.whatwg.org/multipage/webappapis.html#concept-agent-event-loop\n4. nodejs 文档：https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/ \n5. nodejs 事件循环：https://www.voidcanvas.com/nodejs-event-loop/ ； 这篇文章的中文翻译：https://zhuanlan.zhihu.com/p/35918797\n6. [What you should know to really understand the Node.js Event Loop](https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c)\n7. v8 博客关于任务，微任务的描述：https://v8.dev/blog/fast-async#tasks-vs.-microtasks\n8. Jake Archibald 关于microtask 的文章：https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n9. 关于task 名称的讨论。\n   1. https://www.zhihu.com/question/302612139\n   2. https://www.zhihu.com/question/362096226\n   3. https://weibo.com/1660579792/IkzWTc7FH\n10. 起因是看到这篇 issue [浏览器和Node 事件循环的区别]( https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/26)\n\n后记：\n\n在写的过程中，看了不少材料，中文的，英文的，都有。发现可能只有1%的文章是经典，值得一读。其余的99%都是机械复制粘贴，不说人话。甚至都不知道写完之后作者自己会不会去看。所以当我整理的过程中，也在思考，怎么尽量把这件事用能被理解的方式，说清楚、讲明白，不仅是方便自己以后可以快速总结、回顾，也为不了解的朋友提供一些资料和思路。这也是写这篇文章的初衷。\n","slug":"聊聊事件循环","published":1,"updated":"2021-09-14T11:40:19.910Z","_id":"ckn7220hk00027pfy3fep2jts","comments":1,"layout":"post","photos":[],"link":"","content":"<p>大家在面试中经常会被问到，浏览器事件循环和 node 事件循环有什么区别？</p>\n<p>好问题。</p>\n<p>简短说来，<strong>从执行结果来看</strong>，早期有区别，后来统一了。v11.0.0 (2018.10.23 release) 之后，没区别。</p>\n<p>为什么？</p>\n<p>看下面这段代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout1&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout2&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise resolve&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout3&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout4&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中（chrome v89）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout1</span><br><span class=\"line\">timeout2</span><br><span class=\"line\">promise resolve</span><br><span class=\"line\">timeout3</span><br><span class=\"line\">timeout4</span><br></pre></td></tr></table></figure>\n\n<p>在 node 低于 v11.0.0环境中（在v6.11.2中验证，附赠一个<a href=\"https://www.tutorialspoint.com/execute_nodejs_online.php\">运行环境连接</a>）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout1</span><br><span class=\"line\">timeout2</span><br><span class=\"line\">timeout3</span><br><span class=\"line\">timeout4</span><br><span class=\"line\">promise resolve</span><br></pre></td></tr></table></figure>\n\n<p>先看下node 11版本之前，node 是怎么执行的呢？</p>\n<ol>\n<li>执行完一个阶段的所有任务</li>\n<li>执行完nextTick队列里的内容</li>\n<li>执行完微任务队列里的内容</li>\n</ol>\n<p>所以，可以理解上面的结果，先打完了timeout ，最后才来resolve。</p>\n<p>但是这些都已经旧船票了，已经登不上新时代的大船了。</p>\n<p>接下来看看浏览器里的执行顺序，也就是node 11以后的执行顺序，从那时起，大伙就是相亲相爱一家人了。</p>\n<p>通俗说来，在浏览器环境中，事件循环分3步（第3步就是回到最初的起点）：</p>\n<ol>\n<li>运行时在每个事件循环开始时，依次执行task queue 中的每个task，在执行task的过程中，如果又有新的task添加进来怎么办。没办法，先来后到，你只能等下一次循环了。 </li>\n<li>第二步，当每一个 task 结束了，会去检查还有没有待执行的microtask，这里和 task 的显著区别是，他会等到microtask 队列为空才会停止。什么意思，如果一个微任务，不停的往微任务队列里添加新的微任务，那么，这一步骤就会头铁的进行下去。</li>\n<li>microtask 执行完了，回到第1歩循环往复。</li>\n</ol>\n<p>言归正传，我们再来看下面这个例子（验证环境 chrome 89 &amp; node v14.16.0）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">// 4</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>为了方便看一点，多 then 了几次。看看结果</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">undefined</span><br><span class=\"line\">undefined</span><br><span class=\"line\">undefined</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，我们在then 中不断添加了新的 microtask 时，会继续执行下去，今日事今日毕。但是对于 task，不好意思，您往后稍稍。</p>\n<p>v8博客上有张图，挺好。需要注意一点，图中 microtask 描述的是一个动态的过程，他还可以继续往 queue 里添加新的微任务，理解这点很重要。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b1a464bf2a64aafb65ab790fdbf4bde~tplv-k3u1fbpfcp-watermark.image\" alt=\"micro-tasks-vs-tasks.png\"></p>\n<p>再来看下 node 中的event loop。</p>\n<p>在这之前，解释一下为什么文章开头，我加粗的“从执行结果来看”。</p>\n<p>本质上，事件循环是由宿主环境来实现，常见的宿主环境有web浏览器，nodejs，还有 Adobe Flash（没错，还有这个老哥，参见高程）。由于不同环境实现的不同，这也产生了这个古老的问题，“浏览器事件循环和 node 事件循环有什么区别？” 对于这种行为，这好吗？这不好。所以为了消除这种宿主环境之间执行的差异， node 11 之后改善了这个问题。</p>\n<p>回到 node 官方文档，我们可以看到这么一张图流程图。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ┌───────────────────────────┐</span><br><span class=\"line\">┌─&gt;│           timers          │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">│  │     pending callbacks     │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">│  │       idle, prepare       │</span><br><span class=\"line\">│  └─────────────┬─────────────┘      ┌───────────────┐</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐      │   incoming:   │</span><br><span class=\"line\">│  │           poll            │&lt;─────┤  connections, │</span><br><span class=\"line\">│  └─────────────┬─────────────┘      │   data, etc.  │</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐      └───────────────┘</span><br><span class=\"line\">│  │           check           │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">└──┤      close callbacks      │</span><br><span class=\"line\">   └───────────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>这张图有点抽象，换一张。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9aa3e314b504fcfb4e4d78d760c44bf~tplv-k3u1fbpfcp-watermark.image\" alt=\"d502f94b-cc6c-4be7-ac8c-172897eefb05-original.png\"></p>\n<p>关于事件循环的解释，网上的解释数不胜数。感觉不少都是把官方文档的内容颠来倒去拼凑一下。除了官方文档以外，还有一篇文章觉得值得一读（上图就是我借来的），同样也附在最后的链接部分。在这里我就不展开，或许下次专门写一篇文章来记录一下自己的阅读心得。</p>\n<p>再说点题外话，截止到今天（2021-3-16）， 对于 task, microtask 的官方用词和翻译还是 “任务 task  vs 微任务 microtask”。没有所谓的“宏任务”，也没有“macrotask” 这玩意什么事。用于谦于老爷的话说，这都不挨着。</p>\n<p>关于宏任务&#x2F; macrotask，打开掘金知乎，包括英文环境，随便搜一搜，大把的文章，到处都在说，到处都在用。但是去查官方文档，mdn，v8 blog，html spec 等等，很难找到这个词出现的源头。一个没有源头的词，出现了人传人现象，在各种文章图片中出现，很有趣。如果有朋友知道这个词的来历，欢迎指点。</p>\n<p>好了，文章到此为止，谢谢大家的阅读，欢迎讨论和指正。</p>\n<p>接下来补充一些辅助阅读材料。</p>\n<ol>\n<li><p>mdn 文档。</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide\">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth</a></li>\n</ol>\n<p>一个小彩蛋，英文版的子标题， Run, JavaScript, run 是 Forrest Gump  里的经典台词，Run, Forrest , run!</p>\n</li>\n<li><p>Promise&#x2F;A+: <a href=\"https://promisesaplus.com/#notes\">https://promisesaplus.com/#notes</a>   </p>\n<p>文档中关于 platform code 的解释中有这么一段话 <code>This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick</code>。 这也是我为数不多检索到明确使用“macro”的一处，当然还特意加上了引号。</p>\n</li>\n<li><p>html 文档：<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#concept-agent-event-loop\">https://html.spec.whatwg.org/multipage/webappapis.html#concept-agent-event-loop</a></p>\n</li>\n<li><p>nodejs 文档：<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\">https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/</a> </p>\n</li>\n<li><p>nodejs 事件循环：<a href=\"https://www.voidcanvas.com/nodejs-event-loop/\">https://www.voidcanvas.com/nodejs-event-loop/</a> ； 这篇文章的中文翻译：<a href=\"https://zhuanlan.zhihu.com/p/35918797\">https://zhuanlan.zhihu.com/p/35918797</a></p>\n</li>\n<li><p><a href=\"https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c\">What you should know to really understand the Node.js Event Loop</a></p>\n</li>\n<li><p>v8 博客关于任务，微任务的描述：<a href=\"https://v8.dev/blog/fast-async#tasks-vs.-microtasks\">https://v8.dev/blog/fast-async#tasks-vs.-microtasks</a></p>\n</li>\n<li><p>Jake Archibald 关于microtask 的文章：<a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p>\n</li>\n<li><p>关于task 名称的讨论。</p>\n<ol>\n<li><a href=\"https://www.zhihu.com/question/302612139\">https://www.zhihu.com/question/302612139</a></li>\n<li><a href=\"https://www.zhihu.com/question/362096226\">https://www.zhihu.com/question/362096226</a></li>\n<li><a href=\"https://weibo.com/1660579792/IkzWTc7FH\">https://weibo.com/1660579792/IkzWTc7FH</a></li>\n</ol>\n</li>\n<li><p>起因是看到这篇 issue <a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/26\">浏览器和Node 事件循环的区别</a></p>\n</li>\n</ol>\n<p>后记：</p>\n<p>在写的过程中，看了不少材料，中文的，英文的，都有。发现可能只有1%的文章是经典，值得一读。其余的99%都是机械复制粘贴，不说人话。甚至都不知道写完之后作者自己会不会去看。所以当我整理的过程中，也在思考，怎么尽量把这件事用能被理解的方式，说清楚、讲明白，不仅是方便自己以后可以快速总结、回顾，也为不了解的朋友提供一些资料和思路。这也是写这篇文章的初衷。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大家在面试中经常会被问到，浏览器事件循环和 node 事件循环有什么区别？</p>\n<p>好问题。</p>\n<p>简短说来，<strong>从执行结果来看</strong>，早期有区别，后来统一了。v11.0.0 (2018.10.23 release) 之后，没区别。</p>\n<p>为什么？</p>\n<p>看下面这段代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout1&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout2&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise resolve&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout3&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout4&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中（chrome v89）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout1</span><br><span class=\"line\">timeout2</span><br><span class=\"line\">promise resolve</span><br><span class=\"line\">timeout3</span><br><span class=\"line\">timeout4</span><br></pre></td></tr></table></figure>\n\n<p>在 node 低于 v11.0.0环境中（在v6.11.2中验证，附赠一个<a href=\"https://www.tutorialspoint.com/execute_nodejs_online.php\">运行环境连接</a>）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout1</span><br><span class=\"line\">timeout2</span><br><span class=\"line\">timeout3</span><br><span class=\"line\">timeout4</span><br><span class=\"line\">promise resolve</span><br></pre></td></tr></table></figure>\n\n<p>先看下node 11版本之前，node 是怎么执行的呢？</p>\n<ol>\n<li>执行完一个阶段的所有任务</li>\n<li>执行完nextTick队列里的内容</li>\n<li>执行完微任务队列里的内容</li>\n</ol>\n<p>所以，可以理解上面的结果，先打完了timeout ，最后才来resolve。</p>\n<p>但是这些都已经旧船票了，已经登不上新时代的大船了。</p>\n<p>接下来看看浏览器里的执行顺序，也就是node 11以后的执行顺序，从那时起，大伙就是相亲相爱一家人了。</p>\n<p>通俗说来，在浏览器环境中，事件循环分3步（第3步就是回到最初的起点）：</p>\n<ol>\n<li>运行时在每个事件循环开始时，依次执行task queue 中的每个task，在执行task的过程中，如果又有新的task添加进来怎么办。没办法，先来后到，你只能等下一次循环了。 </li>\n<li>第二步，当每一个 task 结束了，会去检查还有没有待执行的microtask，这里和 task 的显著区别是，他会等到microtask 队列为空才会停止。什么意思，如果一个微任务，不停的往微任务队列里添加新的微任务，那么，这一步骤就会头铁的进行下去。</li>\n<li>microtask 执行完了，回到第1歩循环往复。</li>\n</ol>\n<p>言归正传，我们再来看下面这个例子（验证环境 chrome 89 &amp; node v14.16.0）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">// 4</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>为了方便看一点，多 then 了几次。看看结果</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">undefined</span><br><span class=\"line\">undefined</span><br><span class=\"line\">undefined</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，我们在then 中不断添加了新的 microtask 时，会继续执行下去，今日事今日毕。但是对于 task，不好意思，您往后稍稍。</p>\n<p>v8博客上有张图，挺好。需要注意一点，图中 microtask 描述的是一个动态的过程，他还可以继续往 queue 里添加新的微任务，理解这点很重要。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b1a464bf2a64aafb65ab790fdbf4bde~tplv-k3u1fbpfcp-watermark.image\" alt=\"micro-tasks-vs-tasks.png\"></p>\n<p>再来看下 node 中的event loop。</p>\n<p>在这之前，解释一下为什么文章开头，我加粗的“从执行结果来看”。</p>\n<p>本质上，事件循环是由宿主环境来实现，常见的宿主环境有web浏览器，nodejs，还有 Adobe Flash（没错，还有这个老哥，参见高程）。由于不同环境实现的不同，这也产生了这个古老的问题，“浏览器事件循环和 node 事件循环有什么区别？” 对于这种行为，这好吗？这不好。所以为了消除这种宿主环境之间执行的差异， node 11 之后改善了这个问题。</p>\n<p>回到 node 官方文档，我们可以看到这么一张图流程图。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ┌───────────────────────────┐</span><br><span class=\"line\">┌─&gt;│           timers          │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">│  │     pending callbacks     │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">│  │       idle, prepare       │</span><br><span class=\"line\">│  └─────────────┬─────────────┘      ┌───────────────┐</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐      │   incoming:   │</span><br><span class=\"line\">│  │           poll            │&lt;─────┤  connections, │</span><br><span class=\"line\">│  └─────────────┬─────────────┘      │   data, etc.  │</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐      └───────────────┘</span><br><span class=\"line\">│  │           check           │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">└──┤      close callbacks      │</span><br><span class=\"line\">   └───────────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>这张图有点抽象，换一张。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9aa3e314b504fcfb4e4d78d760c44bf~tplv-k3u1fbpfcp-watermark.image\" alt=\"d502f94b-cc6c-4be7-ac8c-172897eefb05-original.png\"></p>\n<p>关于事件循环的解释，网上的解释数不胜数。感觉不少都是把官方文档的内容颠来倒去拼凑一下。除了官方文档以外，还有一篇文章觉得值得一读（上图就是我借来的），同样也附在最后的链接部分。在这里我就不展开，或许下次专门写一篇文章来记录一下自己的阅读心得。</p>\n<p>再说点题外话，截止到今天（2021-3-16）， 对于 task, microtask 的官方用词和翻译还是 “任务 task  vs 微任务 microtask”。没有所谓的“宏任务”，也没有“macrotask” 这玩意什么事。用于谦于老爷的话说，这都不挨着。</p>\n<p>关于宏任务&#x2F; macrotask，打开掘金知乎，包括英文环境，随便搜一搜，大把的文章，到处都在说，到处都在用。但是去查官方文档，mdn，v8 blog，html spec 等等，很难找到这个词出现的源头。一个没有源头的词，出现了人传人现象，在各种文章图片中出现，很有趣。如果有朋友知道这个词的来历，欢迎指点。</p>\n<p>好了，文章到此为止，谢谢大家的阅读，欢迎讨论和指正。</p>\n<p>接下来补充一些辅助阅读材料。</p>\n<ol>\n<li><p>mdn 文档。</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide\">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth</a></li>\n</ol>\n<p>一个小彩蛋，英文版的子标题， Run, JavaScript, run 是 Forrest Gump  里的经典台词，Run, Forrest , run!</p>\n</li>\n<li><p>Promise&#x2F;A+: <a href=\"https://promisesaplus.com/#notes\">https://promisesaplus.com/#notes</a>   </p>\n<p>文档中关于 platform code 的解释中有这么一段话 <code>This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick</code>。 这也是我为数不多检索到明确使用“macro”的一处，当然还特意加上了引号。</p>\n</li>\n<li><p>html 文档：<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#concept-agent-event-loop\">https://html.spec.whatwg.org/multipage/webappapis.html#concept-agent-event-loop</a></p>\n</li>\n<li><p>nodejs 文档：<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\">https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/</a> </p>\n</li>\n<li><p>nodejs 事件循环：<a href=\"https://www.voidcanvas.com/nodejs-event-loop/\">https://www.voidcanvas.com/nodejs-event-loop/</a> ； 这篇文章的中文翻译：<a href=\"https://zhuanlan.zhihu.com/p/35918797\">https://zhuanlan.zhihu.com/p/35918797</a></p>\n</li>\n<li><p><a href=\"https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c\">What you should know to really understand the Node.js Event Loop</a></p>\n</li>\n<li><p>v8 博客关于任务，微任务的描述：<a href=\"https://v8.dev/blog/fast-async#tasks-vs.-microtasks\">https://v8.dev/blog/fast-async#tasks-vs.-microtasks</a></p>\n</li>\n<li><p>Jake Archibald 关于microtask 的文章：<a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p>\n</li>\n<li><p>关于task 名称的讨论。</p>\n<ol>\n<li><a href=\"https://www.zhihu.com/question/302612139\">https://www.zhihu.com/question/302612139</a></li>\n<li><a href=\"https://www.zhihu.com/question/362096226\">https://www.zhihu.com/question/362096226</a></li>\n<li><a href=\"https://weibo.com/1660579792/IkzWTc7FH\">https://weibo.com/1660579792/IkzWTc7FH</a></li>\n</ol>\n</li>\n<li><p>起因是看到这篇 issue <a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/26\">浏览器和Node 事件循环的区别</a></p>\n</li>\n</ol>\n<p>后记：</p>\n<p>在写的过程中，看了不少材料，中文的，英文的，都有。发现可能只有1%的文章是经典，值得一读。其余的99%都是机械复制粘贴，不说人话。甚至都不知道写完之后作者自己会不会去看。所以当我整理的过程中，也在思考，怎么尽量把这件事用能被理解的方式，说清楚、讲明白，不仅是方便自己以后可以快速总结、回顾，也为不了解的朋友提供一些资料和思路。这也是写这篇文章的初衷。</p>\n"},{"title":"手机坏掉之后","abbrlink":"387a3740","date":"2021-05-03T18:08:42.000Z","_content":"\n手机坏了一天。\n\n升级之后可能触发了某个bug，屏幕触控没反应了，解锁重启都不行。一下子变成原始人，什么也干不了。好在也无甚急事找我，偶尔还能用手表语音回回微信。\n\n唯二比较的麻烦是出行和付款。早上急着出门去黄州参加朋友的婚礼，担心扫不了自己的健康码，出入高铁站不方便。只好用我爸的手机下载滴滴打车，准备打个顺风车试试。输入手机号接受验证码，直接登录，不拖泥带水。又尝试在他的手机上登我的微信，除了验证码，还需要找两位常联系好友发送数字。我这大清早上哪去找人？当场就想问候问候张小龙。\n\n约好了车，下楼过早。打开支付宝扫码付账，发现不知道我爸的支付密码，刚好钱包里有钱，就直接给了五块现金。直到端着我的宽粉坐下开吃，发现手机还停在支付页面，想也没想直接点了返回，这时店子里突然出现一句提示音，“顾客发起取消支付”。我还来不及多想，老板娘站在门口操着典型的武汉老嫂子的口气，那种起调高昂响亮引起注意，随后逐渐低沉意味着你麻烦来了。“是哪——个——取消支付啊？”我一下就愣住，突然早餐店里安静下来，仿佛都想看看是谁用这么蹩脚的手法来骗碗素粉。我赶紧解释，“我刚刚给了现金！”老板娘瞟我一眼，径直去忙了。我明明付了钱，竟然有种做贼心虚的感觉。赶紧给爸爸打个电话，当着食客大声问道，你支付密码几多撒？嗯，嗯，哦，哦。挂断电话。\n\n到了酒席，寒暄坐定。一个人来吃酒，手机又坏了，当然没法假装很忙沉迷手机，只能多听听旁边人聊天，小城生活离不开房价二胎，谁谁发了财，谁谁换车了。坐我旁边两位也是新郎官的同学，原来没少一起打球，年少时一头烫发放荡不羁，现在拖家带口衣冠楚楚。可乐过三巡，旁边一位同学拆开桌上的华子，给他的同学们散了一圈，也递我一根。虽然同桌也有坐几个小孩，但大家似乎并不觉得有什么问题。他点了烟，忽然问我，你原来是几班的？看你好眼熟，记不起来了。我说，我是隔壁理科班的，刚来也觉得你眼熟。他吐一口烟，说，是吧，好久了，都毕业十多年了。旁边的另一位同学也附和道，十几年了。我说，嗯，那可不。继续喝可乐。\n\n酒席散场，约了当地一家维修店去抢救手机，进门大概叙述了一下病情。师傅使用了一种新的组合按键技能重启了我的手机，上上下下左左右右baba，不到两分钟就好了。我非常激动，一边掏钱包一边问多少钱，老板说就这要什么钱。我道完谢拿起手机就出门。老板赶快将我喊住，说我还没教你怎么重启！我说对，授人以鱼不如授人以渔，上网查半天没搞定。出了门解锁手机的那一霎那，感觉今天才真的活过来了。\n\n我的手机起死回生，也不用着急回武汉。于是在黄州街头溜达。路过宝塔公园，我二十多年前就听亲戚介绍过，香火很旺，但一直没去过。听朋友讲，他们小时候可以爬上去，收门票一个人五毛。现在不行了，门上了锁，只能塔下看看。可惜。\n\n今天自己摸索出爱疯多种快速拨打紧急电话的方式。这要真的是很紧急偷偷报警，那蜂鸣声估计连歹徒都被吓到。\n\n我还是怀念那个死机了直接拔电池的时代。\n","source":"_posts/手机坏掉之后.md","raw":"---\ntitle: 手机坏掉之后\nabbrlink: 387a3740\ndate: 2021-05-03 11:08:42\ncategories:\n  - life\ntags:\n---\n\n手机坏了一天。\n\n升级之后可能触发了某个bug，屏幕触控没反应了，解锁重启都不行。一下子变成原始人，什么也干不了。好在也无甚急事找我，偶尔还能用手表语音回回微信。\n\n唯二比较的麻烦是出行和付款。早上急着出门去黄州参加朋友的婚礼，担心扫不了自己的健康码，出入高铁站不方便。只好用我爸的手机下载滴滴打车，准备打个顺风车试试。输入手机号接受验证码，直接登录，不拖泥带水。又尝试在他的手机上登我的微信，除了验证码，还需要找两位常联系好友发送数字。我这大清早上哪去找人？当场就想问候问候张小龙。\n\n约好了车，下楼过早。打开支付宝扫码付账，发现不知道我爸的支付密码，刚好钱包里有钱，就直接给了五块现金。直到端着我的宽粉坐下开吃，发现手机还停在支付页面，想也没想直接点了返回，这时店子里突然出现一句提示音，“顾客发起取消支付”。我还来不及多想，老板娘站在门口操着典型的武汉老嫂子的口气，那种起调高昂响亮引起注意，随后逐渐低沉意味着你麻烦来了。“是哪——个——取消支付啊？”我一下就愣住，突然早餐店里安静下来，仿佛都想看看是谁用这么蹩脚的手法来骗碗素粉。我赶紧解释，“我刚刚给了现金！”老板娘瞟我一眼，径直去忙了。我明明付了钱，竟然有种做贼心虚的感觉。赶紧给爸爸打个电话，当着食客大声问道，你支付密码几多撒？嗯，嗯，哦，哦。挂断电话。\n\n到了酒席，寒暄坐定。一个人来吃酒，手机又坏了，当然没法假装很忙沉迷手机，只能多听听旁边人聊天，小城生活离不开房价二胎，谁谁发了财，谁谁换车了。坐我旁边两位也是新郎官的同学，原来没少一起打球，年少时一头烫发放荡不羁，现在拖家带口衣冠楚楚。可乐过三巡，旁边一位同学拆开桌上的华子，给他的同学们散了一圈，也递我一根。虽然同桌也有坐几个小孩，但大家似乎并不觉得有什么问题。他点了烟，忽然问我，你原来是几班的？看你好眼熟，记不起来了。我说，我是隔壁理科班的，刚来也觉得你眼熟。他吐一口烟，说，是吧，好久了，都毕业十多年了。旁边的另一位同学也附和道，十几年了。我说，嗯，那可不。继续喝可乐。\n\n酒席散场，约了当地一家维修店去抢救手机，进门大概叙述了一下病情。师傅使用了一种新的组合按键技能重启了我的手机，上上下下左左右右baba，不到两分钟就好了。我非常激动，一边掏钱包一边问多少钱，老板说就这要什么钱。我道完谢拿起手机就出门。老板赶快将我喊住，说我还没教你怎么重启！我说对，授人以鱼不如授人以渔，上网查半天没搞定。出了门解锁手机的那一霎那，感觉今天才真的活过来了。\n\n我的手机起死回生，也不用着急回武汉。于是在黄州街头溜达。路过宝塔公园，我二十多年前就听亲戚介绍过，香火很旺，但一直没去过。听朋友讲，他们小时候可以爬上去，收门票一个人五毛。现在不行了，门上了锁，只能塔下看看。可惜。\n\n今天自己摸索出爱疯多种快速拨打紧急电话的方式。这要真的是很紧急偷偷报警，那蜂鸣声估计连歹徒都被吓到。\n\n我还是怀念那个死机了直接拔电池的时代。\n","slug":"手机坏掉之后","published":1,"updated":"2021-09-14T11:40:19.908Z","_id":"ckonsxvma000037s6chohgwv0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>手机坏了一天。</p>\n<p>升级之后可能触发了某个bug，屏幕触控没反应了，解锁重启都不行。一下子变成原始人，什么也干不了。好在也无甚急事找我，偶尔还能用手表语音回回微信。</p>\n<p>唯二比较的麻烦是出行和付款。早上急着出门去黄州参加朋友的婚礼，担心扫不了自己的健康码，出入高铁站不方便。只好用我爸的手机下载滴滴打车，准备打个顺风车试试。输入手机号接受验证码，直接登录，不拖泥带水。又尝试在他的手机上登我的微信，除了验证码，还需要找两位常联系好友发送数字。我这大清早上哪去找人？当场就想问候问候张小龙。</p>\n<p>约好了车，下楼过早。打开支付宝扫码付账，发现不知道我爸的支付密码，刚好钱包里有钱，就直接给了五块现金。直到端着我的宽粉坐下开吃，发现手机还停在支付页面，想也没想直接点了返回，这时店子里突然出现一句提示音，“顾客发起取消支付”。我还来不及多想，老板娘站在门口操着典型的武汉老嫂子的口气，那种起调高昂响亮引起注意，随后逐渐低沉意味着你麻烦来了。“是哪——个——取消支付啊？”我一下就愣住，突然早餐店里安静下来，仿佛都想看看是谁用这么蹩脚的手法来骗碗素粉。我赶紧解释，“我刚刚给了现金！”老板娘瞟我一眼，径直去忙了。我明明付了钱，竟然有种做贼心虚的感觉。赶紧给爸爸打个电话，当着食客大声问道，你支付密码几多撒？嗯，嗯，哦，哦。挂断电话。</p>\n<p>到了酒席，寒暄坐定。一个人来吃酒，手机又坏了，当然没法假装很忙沉迷手机，只能多听听旁边人聊天，小城生活离不开房价二胎，谁谁发了财，谁谁换车了。坐我旁边两位也是新郎官的同学，原来没少一起打球，年少时一头烫发放荡不羁，现在拖家带口衣冠楚楚。可乐过三巡，旁边一位同学拆开桌上的华子，给他的同学们散了一圈，也递我一根。虽然同桌也有坐几个小孩，但大家似乎并不觉得有什么问题。他点了烟，忽然问我，你原来是几班的？看你好眼熟，记不起来了。我说，我是隔壁理科班的，刚来也觉得你眼熟。他吐一口烟，说，是吧，好久了，都毕业十多年了。旁边的另一位同学也附和道，十几年了。我说，嗯，那可不。继续喝可乐。</p>\n<p>酒席散场，约了当地一家维修店去抢救手机，进门大概叙述了一下病情。师傅使用了一种新的组合按键技能重启了我的手机，上上下下左左右右baba，不到两分钟就好了。我非常激动，一边掏钱包一边问多少钱，老板说就这要什么钱。我道完谢拿起手机就出门。老板赶快将我喊住，说我还没教你怎么重启！我说对，授人以鱼不如授人以渔，上网查半天没搞定。出了门解锁手机的那一霎那，感觉今天才真的活过来了。</p>\n<p>我的手机起死回生，也不用着急回武汉。于是在黄州街头溜达。路过宝塔公园，我二十多年前就听亲戚介绍过，香火很旺，但一直没去过。听朋友讲，他们小时候可以爬上去，收门票一个人五毛。现在不行了，门上了锁，只能塔下看看。可惜。</p>\n<p>今天自己摸索出爱疯多种快速拨打紧急电话的方式。这要真的是很紧急偷偷报警，那蜂鸣声估计连歹徒都被吓到。</p>\n<p>我还是怀念那个死机了直接拔电池的时代。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>手机坏了一天。</p>\n<p>升级之后可能触发了某个bug，屏幕触控没反应了，解锁重启都不行。一下子变成原始人，什么也干不了。好在也无甚急事找我，偶尔还能用手表语音回回微信。</p>\n<p>唯二比较的麻烦是出行和付款。早上急着出门去黄州参加朋友的婚礼，担心扫不了自己的健康码，出入高铁站不方便。只好用我爸的手机下载滴滴打车，准备打个顺风车试试。输入手机号接受验证码，直接登录，不拖泥带水。又尝试在他的手机上登我的微信，除了验证码，还需要找两位常联系好友发送数字。我这大清早上哪去找人？当场就想问候问候张小龙。</p>\n<p>约好了车，下楼过早。打开支付宝扫码付账，发现不知道我爸的支付密码，刚好钱包里有钱，就直接给了五块现金。直到端着我的宽粉坐下开吃，发现手机还停在支付页面，想也没想直接点了返回，这时店子里突然出现一句提示音，“顾客发起取消支付”。我还来不及多想，老板娘站在门口操着典型的武汉老嫂子的口气，那种起调高昂响亮引起注意，随后逐渐低沉意味着你麻烦来了。“是哪——个——取消支付啊？”我一下就愣住，突然早餐店里安静下来，仿佛都想看看是谁用这么蹩脚的手法来骗碗素粉。我赶紧解释，“我刚刚给了现金！”老板娘瞟我一眼，径直去忙了。我明明付了钱，竟然有种做贼心虚的感觉。赶紧给爸爸打个电话，当着食客大声问道，你支付密码几多撒？嗯，嗯，哦，哦。挂断电话。</p>\n<p>到了酒席，寒暄坐定。一个人来吃酒，手机又坏了，当然没法假装很忙沉迷手机，只能多听听旁边人聊天，小城生活离不开房价二胎，谁谁发了财，谁谁换车了。坐我旁边两位也是新郎官的同学，原来没少一起打球，年少时一头烫发放荡不羁，现在拖家带口衣冠楚楚。可乐过三巡，旁边一位同学拆开桌上的华子，给他的同学们散了一圈，也递我一根。虽然同桌也有坐几个小孩，但大家似乎并不觉得有什么问题。他点了烟，忽然问我，你原来是几班的？看你好眼熟，记不起来了。我说，我是隔壁理科班的，刚来也觉得你眼熟。他吐一口烟，说，是吧，好久了，都毕业十多年了。旁边的另一位同学也附和道，十几年了。我说，嗯，那可不。继续喝可乐。</p>\n<p>酒席散场，约了当地一家维修店去抢救手机，进门大概叙述了一下病情。师傅使用了一种新的组合按键技能重启了我的手机，上上下下左左右右baba，不到两分钟就好了。我非常激动，一边掏钱包一边问多少钱，老板说就这要什么钱。我道完谢拿起手机就出门。老板赶快将我喊住，说我还没教你怎么重启！我说对，授人以鱼不如授人以渔，上网查半天没搞定。出了门解锁手机的那一霎那，感觉今天才真的活过来了。</p>\n<p>我的手机起死回生，也不用着急回武汉。于是在黄州街头溜达。路过宝塔公园，我二十多年前就听亲戚介绍过，香火很旺，但一直没去过。听朋友讲，他们小时候可以爬上去，收门票一个人五毛。现在不行了，门上了锁，只能塔下看看。可惜。</p>\n<p>今天自己摸索出爱疯多种快速拨打紧急电话的方式。这要真的是很紧急偷偷报警，那蜂鸣声估计连歹徒都被吓到。</p>\n<p>我还是怀念那个死机了直接拔电池的时代。</p>\n"},{"title":"我读《复盘网飞》","abbrlink":"fcbbfd3c","date":"2021-05-14T05:07:33.000Z","_content":"\n作者文笔很好，翻译水平也在线。细节满满，读起来感觉特别有意思，收获也不少。印象比较深刻的几点，也有一些自己的思考，揉在一起记录下来，不一定是按章节的顺序：\n\n里德哈斯廷斯给人感觉是一个理性的人，有时候理性到近乎绝情，直来直去，不拘礼节。相较于里德，伦道夫则多些人情味。两人虽然都态度强硬，绝不妥协，但是合作却十分融洽，重点在于“争论是为了更好地合作，而不是为了自己的面子。谁是对的并不重要，重要的是我们做对了”。里德是更好的领导者，但是我更愿意和兰多夫合作。\n\n\n每个用户提供独一无二的产品实在太难，做一打产品需要付出的努力就是做一个产品所付出努力的12倍。所以邮寄狗粮，定制棒球棒，冲浪板都被pass了。最终的目的是可以规模化生产的东西，卖出一打和卖出一个所付出的努力是完全想等的，需要找到一种不仅仅是一次性销售的产品，这样一旦获取了一个客户，就可以一次又一次地把产品卖给他。\n\n\n用我自己的理解，就是寻找一件可以快速复制的模式，一种控制投入，但产出可以容易 scalable 的产品。当然我觉得上面这点也有时代背景。现在开始走精细化运营，定制化的市场也不算小众。前段时间刷广告还看到定制维生素的产品。（我还发现一些比较小众的服装品牌，可能会推广上衣，或者局限在T恤，但是很少会提供多种下装，或者完全就不提供裤装产线。可能也是因为如上原因，我不了解这个领域，random guess）\n\n\n加拿大原则。美国加拿大毗邻，生活习惯类似。有没有必要在早期增加成本，人力投入，来打入加拿大市场。答案是没必要， 因为需要针对法语区进行翻译，当地邮政系统差别，结算货币不同等麻烦事，容易使得核心业务精力分散。\n\n\n计划是美好的，但是要尽快落地。“关键是要让你的想法尽快和现实亲密接触”。这点我深有感触，这一年来一直强迫自己多写作锻炼思维能力。一开始总会过于在意许多方面，以至于有时会陷入对细节的纠结中，下笔进展缓慢。后来慢慢改善，列好提纲，然后分段扩展。完成初版之后再修改。以期获得螺旋式的进展和进步。\n\n\n头衔通胀。公司给员工派发各种唬人的高级头衔，从而在不增加成本的情况下提供晋升机会，以留住员工。\n\n\n回音室效应，指在一个相对封闭的环境里，意见相近的声音以夸张或其他扭曲的形式不断重复，令环境中的大多数人认为这些扭曲的故事就是事实的全部。\n\n\n要钱很难。大部分对待一个项目，可能会说我喜欢你的点子，但是立马追问一句，你愿意投资几千美元吗？对方前后态度的转变之迅速一定能让你头脑更加清醒。\n\n\n作者曾参加NOLS，一个培训学生在荒野户外生存的项目，大概查了下，主要针对青少年，短的半个月，长的90天，在alaska， patagonia这些地方。看着真馋，不知道国内有没有类似的活动。兰道夫曾经被没收钱包手表不带一毛钱，扔在一个任意的十字路口，自生自灭生活三天，自己找吃的，自己找地方住，需要蹭吃蹭喝，乞讨要钱。美国玩这套还真挺虎的。\n\n\n要有心理预期，如果全力投入的新项目失败了，回来后自己的角色已被人取代，只能走人。\n\n\n每个星期二，无论如何都会在下午5点准时离开办公室，与妻子过二人世界，吃饭，品酒，看电影。每周留一个晚上给我的妻子，能让我们都不再焦虑烦忧，也能让我们彼此的步调一致。关于这点，在互联网行业，我十分敬佩，羡慕非常。\n","source":"_posts/我读《复盘网飞》.md","raw":"---\ntitle: 我读《复盘网飞》\nabbrlink: fcbbfd3c\ndate: 2021-05-13 22:07:33\ncategories:\n  - life\n  - reading\ntags:\n  - books\n---\n\n作者文笔很好，翻译水平也在线。细节满满，读起来感觉特别有意思，收获也不少。印象比较深刻的几点，也有一些自己的思考，揉在一起记录下来，不一定是按章节的顺序：\n\n里德哈斯廷斯给人感觉是一个理性的人，有时候理性到近乎绝情，直来直去，不拘礼节。相较于里德，伦道夫则多些人情味。两人虽然都态度强硬，绝不妥协，但是合作却十分融洽，重点在于“争论是为了更好地合作，而不是为了自己的面子。谁是对的并不重要，重要的是我们做对了”。里德是更好的领导者，但是我更愿意和兰多夫合作。\n\n\n每个用户提供独一无二的产品实在太难，做一打产品需要付出的努力就是做一个产品所付出努力的12倍。所以邮寄狗粮，定制棒球棒，冲浪板都被pass了。最终的目的是可以规模化生产的东西，卖出一打和卖出一个所付出的努力是完全想等的，需要找到一种不仅仅是一次性销售的产品，这样一旦获取了一个客户，就可以一次又一次地把产品卖给他。\n\n\n用我自己的理解，就是寻找一件可以快速复制的模式，一种控制投入，但产出可以容易 scalable 的产品。当然我觉得上面这点也有时代背景。现在开始走精细化运营，定制化的市场也不算小众。前段时间刷广告还看到定制维生素的产品。（我还发现一些比较小众的服装品牌，可能会推广上衣，或者局限在T恤，但是很少会提供多种下装，或者完全就不提供裤装产线。可能也是因为如上原因，我不了解这个领域，random guess）\n\n\n加拿大原则。美国加拿大毗邻，生活习惯类似。有没有必要在早期增加成本，人力投入，来打入加拿大市场。答案是没必要， 因为需要针对法语区进行翻译，当地邮政系统差别，结算货币不同等麻烦事，容易使得核心业务精力分散。\n\n\n计划是美好的，但是要尽快落地。“关键是要让你的想法尽快和现实亲密接触”。这点我深有感触，这一年来一直强迫自己多写作锻炼思维能力。一开始总会过于在意许多方面，以至于有时会陷入对细节的纠结中，下笔进展缓慢。后来慢慢改善，列好提纲，然后分段扩展。完成初版之后再修改。以期获得螺旋式的进展和进步。\n\n\n头衔通胀。公司给员工派发各种唬人的高级头衔，从而在不增加成本的情况下提供晋升机会，以留住员工。\n\n\n回音室效应，指在一个相对封闭的环境里，意见相近的声音以夸张或其他扭曲的形式不断重复，令环境中的大多数人认为这些扭曲的故事就是事实的全部。\n\n\n要钱很难。大部分对待一个项目，可能会说我喜欢你的点子，但是立马追问一句，你愿意投资几千美元吗？对方前后态度的转变之迅速一定能让你头脑更加清醒。\n\n\n作者曾参加NOLS，一个培训学生在荒野户外生存的项目，大概查了下，主要针对青少年，短的半个月，长的90天，在alaska， patagonia这些地方。看着真馋，不知道国内有没有类似的活动。兰道夫曾经被没收钱包手表不带一毛钱，扔在一个任意的十字路口，自生自灭生活三天，自己找吃的，自己找地方住，需要蹭吃蹭喝，乞讨要钱。美国玩这套还真挺虎的。\n\n\n要有心理预期，如果全力投入的新项目失败了，回来后自己的角色已被人取代，只能走人。\n\n\n每个星期二，无论如何都会在下午5点准时离开办公室，与妻子过二人世界，吃饭，品酒，看电影。每周留一个晚上给我的妻子，能让我们都不再焦虑烦忧，也能让我们彼此的步调一致。关于这点，在互联网行业，我十分敬佩，羡慕非常。\n","slug":"我读《复盘网飞》","published":1,"updated":"2021-09-14T11:40:19.907Z","_id":"ckonsxvmf000137s6bg40g6n8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>作者文笔很好，翻译水平也在线。细节满满，读起来感觉特别有意思，收获也不少。印象比较深刻的几点，也有一些自己的思考，揉在一起记录下来，不一定是按章节的顺序：</p>\n<p>里德哈斯廷斯给人感觉是一个理性的人，有时候理性到近乎绝情，直来直去，不拘礼节。相较于里德，伦道夫则多些人情味。两人虽然都态度强硬，绝不妥协，但是合作却十分融洽，重点在于“争论是为了更好地合作，而不是为了自己的面子。谁是对的并不重要，重要的是我们做对了”。里德是更好的领导者，但是我更愿意和兰多夫合作。</p>\n<p>每个用户提供独一无二的产品实在太难，做一打产品需要付出的努力就是做一个产品所付出努力的12倍。所以邮寄狗粮，定制棒球棒，冲浪板都被pass了。最终的目的是可以规模化生产的东西，卖出一打和卖出一个所付出的努力是完全想等的，需要找到一种不仅仅是一次性销售的产品，这样一旦获取了一个客户，就可以一次又一次地把产品卖给他。</p>\n<p>用我自己的理解，就是寻找一件可以快速复制的模式，一种控制投入，但产出可以容易 scalable 的产品。当然我觉得上面这点也有时代背景。现在开始走精细化运营，定制化的市场也不算小众。前段时间刷广告还看到定制维生素的产品。（我还发现一些比较小众的服装品牌，可能会推广上衣，或者局限在T恤，但是很少会提供多种下装，或者完全就不提供裤装产线。可能也是因为如上原因，我不了解这个领域，random guess）</p>\n<p>加拿大原则。美国加拿大毗邻，生活习惯类似。有没有必要在早期增加成本，人力投入，来打入加拿大市场。答案是没必要， 因为需要针对法语区进行翻译，当地邮政系统差别，结算货币不同等麻烦事，容易使得核心业务精力分散。</p>\n<p>计划是美好的，但是要尽快落地。“关键是要让你的想法尽快和现实亲密接触”。这点我深有感触，这一年来一直强迫自己多写作锻炼思维能力。一开始总会过于在意许多方面，以至于有时会陷入对细节的纠结中，下笔进展缓慢。后来慢慢改善，列好提纲，然后分段扩展。完成初版之后再修改。以期获得螺旋式的进展和进步。</p>\n<p>头衔通胀。公司给员工派发各种唬人的高级头衔，从而在不增加成本的情况下提供晋升机会，以留住员工。</p>\n<p>回音室效应，指在一个相对封闭的环境里，意见相近的声音以夸张或其他扭曲的形式不断重复，令环境中的大多数人认为这些扭曲的故事就是事实的全部。</p>\n<p>要钱很难。大部分对待一个项目，可能会说我喜欢你的点子，但是立马追问一句，你愿意投资几千美元吗？对方前后态度的转变之迅速一定能让你头脑更加清醒。</p>\n<p>作者曾参加NOLS，一个培训学生在荒野户外生存的项目，大概查了下，主要针对青少年，短的半个月，长的90天，在alaska， patagonia这些地方。看着真馋，不知道国内有没有类似的活动。兰道夫曾经被没收钱包手表不带一毛钱，扔在一个任意的十字路口，自生自灭生活三天，自己找吃的，自己找地方住，需要蹭吃蹭喝，乞讨要钱。美国玩这套还真挺虎的。</p>\n<p>要有心理预期，如果全力投入的新项目失败了，回来后自己的角色已被人取代，只能走人。</p>\n<p>每个星期二，无论如何都会在下午5点准时离开办公室，与妻子过二人世界，吃饭，品酒，看电影。每周留一个晚上给我的妻子，能让我们都不再焦虑烦忧，也能让我们彼此的步调一致。关于这点，在互联网行业，我十分敬佩，羡慕非常。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>作者文笔很好，翻译水平也在线。细节满满，读起来感觉特别有意思，收获也不少。印象比较深刻的几点，也有一些自己的思考，揉在一起记录下来，不一定是按章节的顺序：</p>\n<p>里德哈斯廷斯给人感觉是一个理性的人，有时候理性到近乎绝情，直来直去，不拘礼节。相较于里德，伦道夫则多些人情味。两人虽然都态度强硬，绝不妥协，但是合作却十分融洽，重点在于“争论是为了更好地合作，而不是为了自己的面子。谁是对的并不重要，重要的是我们做对了”。里德是更好的领导者，但是我更愿意和兰多夫合作。</p>\n<p>每个用户提供独一无二的产品实在太难，做一打产品需要付出的努力就是做一个产品所付出努力的12倍。所以邮寄狗粮，定制棒球棒，冲浪板都被pass了。最终的目的是可以规模化生产的东西，卖出一打和卖出一个所付出的努力是完全想等的，需要找到一种不仅仅是一次性销售的产品，这样一旦获取了一个客户，就可以一次又一次地把产品卖给他。</p>\n<p>用我自己的理解，就是寻找一件可以快速复制的模式，一种控制投入，但产出可以容易 scalable 的产品。当然我觉得上面这点也有时代背景。现在开始走精细化运营，定制化的市场也不算小众。前段时间刷广告还看到定制维生素的产品。（我还发现一些比较小众的服装品牌，可能会推广上衣，或者局限在T恤，但是很少会提供多种下装，或者完全就不提供裤装产线。可能也是因为如上原因，我不了解这个领域，random guess）</p>\n<p>加拿大原则。美国加拿大毗邻，生活习惯类似。有没有必要在早期增加成本，人力投入，来打入加拿大市场。答案是没必要， 因为需要针对法语区进行翻译，当地邮政系统差别，结算货币不同等麻烦事，容易使得核心业务精力分散。</p>\n<p>计划是美好的，但是要尽快落地。“关键是要让你的想法尽快和现实亲密接触”。这点我深有感触，这一年来一直强迫自己多写作锻炼思维能力。一开始总会过于在意许多方面，以至于有时会陷入对细节的纠结中，下笔进展缓慢。后来慢慢改善，列好提纲，然后分段扩展。完成初版之后再修改。以期获得螺旋式的进展和进步。</p>\n<p>头衔通胀。公司给员工派发各种唬人的高级头衔，从而在不增加成本的情况下提供晋升机会，以留住员工。</p>\n<p>回音室效应，指在一个相对封闭的环境里，意见相近的声音以夸张或其他扭曲的形式不断重复，令环境中的大多数人认为这些扭曲的故事就是事实的全部。</p>\n<p>要钱很难。大部分对待一个项目，可能会说我喜欢你的点子，但是立马追问一句，你愿意投资几千美元吗？对方前后态度的转变之迅速一定能让你头脑更加清醒。</p>\n<p>作者曾参加NOLS，一个培训学生在荒野户外生存的项目，大概查了下，主要针对青少年，短的半个月，长的90天，在alaska， patagonia这些地方。看着真馋，不知道国内有没有类似的活动。兰道夫曾经被没收钱包手表不带一毛钱，扔在一个任意的十字路口，自生自灭生活三天，自己找吃的，自己找地方住，需要蹭吃蹭喝，乞讨要钱。美国玩这套还真挺虎的。</p>\n<p>要有心理预期，如果全力投入的新项目失败了，回来后自己的角色已被人取代，只能走人。</p>\n<p>每个星期二，无论如何都会在下午5点准时离开办公室，与妻子过二人世界，吃饭，品酒，看电影。每周留一个晚上给我的妻子，能让我们都不再焦虑烦忧，也能让我们彼此的步调一致。关于这点，在互联网行业，我十分敬佩，羡慕非常。</p>\n"},{"title":"我读《负动产时代》","abbrlink":"7171b58c","date":"2021-05-31T18:33:52.000Z","_content":"\n题材很好，但是文章有些啰嗦，车轱辘话来回说。不知是不是因为原本是在报刊连载的原因。好在主题结构比较明确清晰，读起来还算顺畅。\n\n第一章提到一个概念，所有人不明土地。2016年，全日本找不到所有人的土地面积约410万公顷，比九州岛还要大，到2040年，预计达到720万公顷，接近北海道的面积。为什么会有这么多土地找不到所有人，主要提到两点，一个是日本的遗产登记不是强制的，如果几代人没有办理过户登记手续，从子女到孙辈，曾孙辈，继承人就会越来越多，所有继承人都是土地的共有人，到最后无法确定到底是谁的土地了，甚至出现一块土地，有100多位继承人。第二点，日本的土地制度没有考虑到会有人“抛弃”土地和房产的情况，即使人们放弃继承土地和房产，国家或地方政府也无法直接接收。\n\n为什么有人不要土地，因为每年需要交纳物业费，维修基金和固定资产税，是一份看不到尽头的负担。 \n\n第二章主要谈度假公寓。在新潟县汤泽町，由于滑雪热成为过去时，需求减少，但是度假公寓还需要不断缴纳固定资产税和物业费，使之成为“负资产”。在这个背景下，出现了“一万日元”房产。只需一万块，就可以买下一套房子，平均每平100,200日元。原因是因为购买者需还清上一任房主的欠费。\n\n这里有个小故事印象深刻。临近泡沫经济结束的1991年初，一位老人以1300万日元在静冈县伊豆半岛买下一块300平的别墅用地，从这里可以看到富士山。他当时是住在首都圈的工薪族，身边有一些人到了假期就去别墅小住，在那个年代，这是“身份”的象征。他想在退休之前盖上一栋房子，老了以后悠闲地安度晚年。于是便和妻子开着车一边兜风一边寻找目标，最后高价买下这里，就连合同都是特意到东京帝国饭店的咖啡厅签的。\n\n由于两个女儿都无意继承，2017年，老人卖掉了一直没盖起别墅的这片地，售价10万日元，是当初买入价的1/130。扣除手续费广告费，这比交易最后的结果是-11万日元。\n\n汤泽町也称越后汤泽，是《雪国》所描写故事的发生地。新潟有好几个雪场，希望疫情结束之后有机会去滑雪。\n\n第三章讲长租陷阱。由于遗产税增税，人们为了少交遗产税，就去办理贷款投资长租公寓。因为土地所有人未还清的贷款可以从待继承财产中扣除。但是这么干的人越来越多，长租公寓也越来越多。在首都圈一都三县，长租公寓的空房率已达到35%以上。\n\n原本说好的保证30年之内的房租，才过十年，多方就要求降低租金。导致租金收入无法支付修缮费和还款额。\n\n关于不动产公司找寻目标客户，这一段也挺有意思。据说他们的主要目标，是在土地所有人中寻找“人际交往比较少，自尊心强，不愿意请教别人的人”。公务员、学校老师和一些农户都属于这种类型。他们虽然自己不具备土地和管理的相关知识，却由于自尊心很强，而不愿意找人商量，完全自己独断专行。这些人都是不动产公司的“好主顾”。\n\n这一章还有一个插曲，报道了地产销售人员的加班问题。不仅加班，上报的加班时间还要少于实际时间。如果提交的加班时间超了，上司就要打回重写，还要交检讨书。公司老这么干，后来被工会给告了，于是公司公开了配给每名员工工作用车的行驶日志。这份记录能反映出比较接近实际状态的加班时间。但也会存在“为了不留下工作的证据，外出销售时不用公司的配车，或者工作时关掉电脑的电源”的情况。\n\n后面就有点啰嗦重复了。第四章主要讲固定资产税和遗产税过高。第五章记录了法国美国德国等国家如何解决负动产的问题。第六章讲放弃土地的可行性及对政策改革的呼吁。\n\n整个看下来，也有不少收获。虽然在少子化，老年化，税收制度，发展程度等方面中国和日本有很大的区别，但是以小见大，也能提供一些思考和方向。\n","source":"_posts/我读《负动产时代》.md","raw":"---\ntitle: 我读《负动产时代》\nabbrlink: 7171b58c\ndate: 2021-05-31 11:33:52\ncategories:\n  - life\n  - reading\ntags:\n  - books\n---\n\n题材很好，但是文章有些啰嗦，车轱辘话来回说。不知是不是因为原本是在报刊连载的原因。好在主题结构比较明确清晰，读起来还算顺畅。\n\n第一章提到一个概念，所有人不明土地。2016年，全日本找不到所有人的土地面积约410万公顷，比九州岛还要大，到2040年，预计达到720万公顷，接近北海道的面积。为什么会有这么多土地找不到所有人，主要提到两点，一个是日本的遗产登记不是强制的，如果几代人没有办理过户登记手续，从子女到孙辈，曾孙辈，继承人就会越来越多，所有继承人都是土地的共有人，到最后无法确定到底是谁的土地了，甚至出现一块土地，有100多位继承人。第二点，日本的土地制度没有考虑到会有人“抛弃”土地和房产的情况，即使人们放弃继承土地和房产，国家或地方政府也无法直接接收。\n\n为什么有人不要土地，因为每年需要交纳物业费，维修基金和固定资产税，是一份看不到尽头的负担。 \n\n第二章主要谈度假公寓。在新潟县汤泽町，由于滑雪热成为过去时，需求减少，但是度假公寓还需要不断缴纳固定资产税和物业费，使之成为“负资产”。在这个背景下，出现了“一万日元”房产。只需一万块，就可以买下一套房子，平均每平100,200日元。原因是因为购买者需还清上一任房主的欠费。\n\n这里有个小故事印象深刻。临近泡沫经济结束的1991年初，一位老人以1300万日元在静冈县伊豆半岛买下一块300平的别墅用地，从这里可以看到富士山。他当时是住在首都圈的工薪族，身边有一些人到了假期就去别墅小住，在那个年代，这是“身份”的象征。他想在退休之前盖上一栋房子，老了以后悠闲地安度晚年。于是便和妻子开着车一边兜风一边寻找目标，最后高价买下这里，就连合同都是特意到东京帝国饭店的咖啡厅签的。\n\n由于两个女儿都无意继承，2017年，老人卖掉了一直没盖起别墅的这片地，售价10万日元，是当初买入价的1/130。扣除手续费广告费，这比交易最后的结果是-11万日元。\n\n汤泽町也称越后汤泽，是《雪国》所描写故事的发生地。新潟有好几个雪场，希望疫情结束之后有机会去滑雪。\n\n第三章讲长租陷阱。由于遗产税增税，人们为了少交遗产税，就去办理贷款投资长租公寓。因为土地所有人未还清的贷款可以从待继承财产中扣除。但是这么干的人越来越多，长租公寓也越来越多。在首都圈一都三县，长租公寓的空房率已达到35%以上。\n\n原本说好的保证30年之内的房租，才过十年，多方就要求降低租金。导致租金收入无法支付修缮费和还款额。\n\n关于不动产公司找寻目标客户，这一段也挺有意思。据说他们的主要目标，是在土地所有人中寻找“人际交往比较少，自尊心强，不愿意请教别人的人”。公务员、学校老师和一些农户都属于这种类型。他们虽然自己不具备土地和管理的相关知识，却由于自尊心很强，而不愿意找人商量，完全自己独断专行。这些人都是不动产公司的“好主顾”。\n\n这一章还有一个插曲，报道了地产销售人员的加班问题。不仅加班，上报的加班时间还要少于实际时间。如果提交的加班时间超了，上司就要打回重写，还要交检讨书。公司老这么干，后来被工会给告了，于是公司公开了配给每名员工工作用车的行驶日志。这份记录能反映出比较接近实际状态的加班时间。但也会存在“为了不留下工作的证据，外出销售时不用公司的配车，或者工作时关掉电脑的电源”的情况。\n\n后面就有点啰嗦重复了。第四章主要讲固定资产税和遗产税过高。第五章记录了法国美国德国等国家如何解决负动产的问题。第六章讲放弃土地的可行性及对政策改革的呼吁。\n\n整个看下来，也有不少收获。虽然在少子化，老年化，税收制度，发展程度等方面中国和日本有很大的区别，但是以小见大，也能提供一些思考和方向。\n","slug":"我读《负动产时代》","published":1,"updated":"2021-09-14T11:40:19.907Z","_id":"ckq0cnvuc0000b4fy1ni8gjtw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>题材很好，但是文章有些啰嗦，车轱辘话来回说。不知是不是因为原本是在报刊连载的原因。好在主题结构比较明确清晰，读起来还算顺畅。</p>\n<p>第一章提到一个概念，所有人不明土地。2016年，全日本找不到所有人的土地面积约410万公顷，比九州岛还要大，到2040年，预计达到720万公顷，接近北海道的面积。为什么会有这么多土地找不到所有人，主要提到两点，一个是日本的遗产登记不是强制的，如果几代人没有办理过户登记手续，从子女到孙辈，曾孙辈，继承人就会越来越多，所有继承人都是土地的共有人，到最后无法确定到底是谁的土地了，甚至出现一块土地，有100多位继承人。第二点，日本的土地制度没有考虑到会有人“抛弃”土地和房产的情况，即使人们放弃继承土地和房产，国家或地方政府也无法直接接收。</p>\n<p>为什么有人不要土地，因为每年需要交纳物业费，维修基金和固定资产税，是一份看不到尽头的负担。 </p>\n<p>第二章主要谈度假公寓。在新潟县汤泽町，由于滑雪热成为过去时，需求减少，但是度假公寓还需要不断缴纳固定资产税和物业费，使之成为“负资产”。在这个背景下，出现了“一万日元”房产。只需一万块，就可以买下一套房子，平均每平100,200日元。原因是因为购买者需还清上一任房主的欠费。</p>\n<p>这里有个小故事印象深刻。临近泡沫经济结束的1991年初，一位老人以1300万日元在静冈县伊豆半岛买下一块300平的别墅用地，从这里可以看到富士山。他当时是住在首都圈的工薪族，身边有一些人到了假期就去别墅小住，在那个年代，这是“身份”的象征。他想在退休之前盖上一栋房子，老了以后悠闲地安度晚年。于是便和妻子开着车一边兜风一边寻找目标，最后高价买下这里，就连合同都是特意到东京帝国饭店的咖啡厅签的。</p>\n<p>由于两个女儿都无意继承，2017年，老人卖掉了一直没盖起别墅的这片地，售价10万日元，是当初买入价的1&#x2F;130。扣除手续费广告费，这比交易最后的结果是-11万日元。</p>\n<p>汤泽町也称越后汤泽，是《雪国》所描写故事的发生地。新潟有好几个雪场，希望疫情结束之后有机会去滑雪。</p>\n<p>第三章讲长租陷阱。由于遗产税增税，人们为了少交遗产税，就去办理贷款投资长租公寓。因为土地所有人未还清的贷款可以从待继承财产中扣除。但是这么干的人越来越多，长租公寓也越来越多。在首都圈一都三县，长租公寓的空房率已达到35%以上。</p>\n<p>原本说好的保证30年之内的房租，才过十年，多方就要求降低租金。导致租金收入无法支付修缮费和还款额。</p>\n<p>关于不动产公司找寻目标客户，这一段也挺有意思。据说他们的主要目标，是在土地所有人中寻找“人际交往比较少，自尊心强，不愿意请教别人的人”。公务员、学校老师和一些农户都属于这种类型。他们虽然自己不具备土地和管理的相关知识，却由于自尊心很强，而不愿意找人商量，完全自己独断专行。这些人都是不动产公司的“好主顾”。</p>\n<p>这一章还有一个插曲，报道了地产销售人员的加班问题。不仅加班，上报的加班时间还要少于实际时间。如果提交的加班时间超了，上司就要打回重写，还要交检讨书。公司老这么干，后来被工会给告了，于是公司公开了配给每名员工工作用车的行驶日志。这份记录能反映出比较接近实际状态的加班时间。但也会存在“为了不留下工作的证据，外出销售时不用公司的配车，或者工作时关掉电脑的电源”的情况。</p>\n<p>后面就有点啰嗦重复了。第四章主要讲固定资产税和遗产税过高。第五章记录了法国美国德国等国家如何解决负动产的问题。第六章讲放弃土地的可行性及对政策改革的呼吁。</p>\n<p>整个看下来，也有不少收获。虽然在少子化，老年化，税收制度，发展程度等方面中国和日本有很大的区别，但是以小见大，也能提供一些思考和方向。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>题材很好，但是文章有些啰嗦，车轱辘话来回说。不知是不是因为原本是在报刊连载的原因。好在主题结构比较明确清晰，读起来还算顺畅。</p>\n<p>第一章提到一个概念，所有人不明土地。2016年，全日本找不到所有人的土地面积约410万公顷，比九州岛还要大，到2040年，预计达到720万公顷，接近北海道的面积。为什么会有这么多土地找不到所有人，主要提到两点，一个是日本的遗产登记不是强制的，如果几代人没有办理过户登记手续，从子女到孙辈，曾孙辈，继承人就会越来越多，所有继承人都是土地的共有人，到最后无法确定到底是谁的土地了，甚至出现一块土地，有100多位继承人。第二点，日本的土地制度没有考虑到会有人“抛弃”土地和房产的情况，即使人们放弃继承土地和房产，国家或地方政府也无法直接接收。</p>\n<p>为什么有人不要土地，因为每年需要交纳物业费，维修基金和固定资产税，是一份看不到尽头的负担。 </p>\n<p>第二章主要谈度假公寓。在新潟县汤泽町，由于滑雪热成为过去时，需求减少，但是度假公寓还需要不断缴纳固定资产税和物业费，使之成为“负资产”。在这个背景下，出现了“一万日元”房产。只需一万块，就可以买下一套房子，平均每平100,200日元。原因是因为购买者需还清上一任房主的欠费。</p>\n<p>这里有个小故事印象深刻。临近泡沫经济结束的1991年初，一位老人以1300万日元在静冈县伊豆半岛买下一块300平的别墅用地，从这里可以看到富士山。他当时是住在首都圈的工薪族，身边有一些人到了假期就去别墅小住，在那个年代，这是“身份”的象征。他想在退休之前盖上一栋房子，老了以后悠闲地安度晚年。于是便和妻子开着车一边兜风一边寻找目标，最后高价买下这里，就连合同都是特意到东京帝国饭店的咖啡厅签的。</p>\n<p>由于两个女儿都无意继承，2017年，老人卖掉了一直没盖起别墅的这片地，售价10万日元，是当初买入价的1&#x2F;130。扣除手续费广告费，这比交易最后的结果是-11万日元。</p>\n<p>汤泽町也称越后汤泽，是《雪国》所描写故事的发生地。新潟有好几个雪场，希望疫情结束之后有机会去滑雪。</p>\n<p>第三章讲长租陷阱。由于遗产税增税，人们为了少交遗产税，就去办理贷款投资长租公寓。因为土地所有人未还清的贷款可以从待继承财产中扣除。但是这么干的人越来越多，长租公寓也越来越多。在首都圈一都三县，长租公寓的空房率已达到35%以上。</p>\n<p>原本说好的保证30年之内的房租，才过十年，多方就要求降低租金。导致租金收入无法支付修缮费和还款额。</p>\n<p>关于不动产公司找寻目标客户，这一段也挺有意思。据说他们的主要目标，是在土地所有人中寻找“人际交往比较少，自尊心强，不愿意请教别人的人”。公务员、学校老师和一些农户都属于这种类型。他们虽然自己不具备土地和管理的相关知识，却由于自尊心很强，而不愿意找人商量，完全自己独断专行。这些人都是不动产公司的“好主顾”。</p>\n<p>这一章还有一个插曲，报道了地产销售人员的加班问题。不仅加班，上报的加班时间还要少于实际时间。如果提交的加班时间超了，上司就要打回重写，还要交检讨书。公司老这么干，后来被工会给告了，于是公司公开了配给每名员工工作用车的行驶日志。这份记录能反映出比较接近实际状态的加班时间。但也会存在“为了不留下工作的证据，外出销售时不用公司的配车，或者工作时关掉电脑的电源”的情况。</p>\n<p>后面就有点啰嗦重复了。第四章主要讲固定资产税和遗产税过高。第五章记录了法国美国德国等国家如何解决负动产的问题。第六章讲放弃土地的可行性及对政策改革的呼吁。</p>\n<p>整个看下来，也有不少收获。虽然在少子化，老年化，税收制度，发展程度等方面中国和日本有很大的区别，但是以小见大，也能提供一些思考和方向。</p>\n"},{"title":"我读《一生的旅程》","abbrlink":"e7498c6f","date":"2021-06-20T22:01:19.000Z","_content":"\n端午节回武汉，随手抄了本书准备打发高铁上的时光，没有想到内容十分精彩，来回的路上读的七七八八，收假回来熬夜看完。结合自己的观察，写点感想。\n\n我曾经非常讨厌读个人传记，主要是觉得这种书都是为尊者讳，说的做的肯定都被美化一番。而且想也不用想，我都能猜到文章的脉络，一定是作者曾经非常困苦迷惘，经历了一番不懈努力，最后走上人生巅峰。\n\n但是这本书并不是这般单调。当然，从结果来说，成功者的书籍会比失败者更多。从大众世俗的角度来看，可能对成功的关注势必会比失败的关注更多。但是这并不是我说这本书精彩的原因。\n\n说回到书的本身，这本书的设计不太讨巧，封面和腰封都透露着一股浓浓的机场成功学气息。“洞悉全球最佳 CEO 的神级领导力秘密”，神级！还有“比尔盖茨罕见 2000 字推荐”，估摸出版的时候盖茨还没离婚。\n\n吐槽归吐槽，余下部分记录一下我觉得有意思的内容。\n\n关于 Bob，原来是 Robert 的简称。\n\n关于父亲。由于家中有一间摆满书的书房，以及父亲热爱阅读的习惯，把作者培养成了一个爱书之人。同时还提到在晚餐时与孩子讨论世界大事。关于这点，我也在想，在社会生活碎片化趋势下，在这个环境中我能做些什么来影响子女，养成好的习惯。父母是最初的老师，孩子有样学样。有太多左手拿手机，右手牵孩子，在餐桌上默不作声，各玩电子产品的场景。我不相信一个长时间生活在手机里的家长可以提供给孩子们一个好的榜样。\n\n关于早起。发了朋友圈之后好几个人问我，作者几点睡觉。其实作者也给出了答案，“这样的作息时间虽然不适用于所有人，但无论你如何选择如何腾出时间，每天创造空间让你的思绪远离眼前的工作职责尽情徜徉……，这些都是至关重要的。”独处和思考，可能是在创意型的工作中必不可少的一个环节。几点起床不是问题，有的人是 morning person，有的人就是晚上脑子活跃，早晚不重要，重要的是有一段不被打扰的时光。但是我还是想尝试一下早起，不知道能不能成功。\n\n关于喜怒无常的老板。鲁尼是第一个教导作者拼死创新的老板，但同时“鲁尼是一个喜怒无常的上司，时间一长，这种反复无常会对团队的时期造成严重的削弱……，他懂得如何巧妙的挑拨人心，而我一直没弄明白这到底是有意而为还是他的性格使然。……他也会把我逼到下定决心辞职不干的绝境。我并不是唯一一个有过这种念头的人。”在工作中，有时我们无法选择老板和同事，在这种情况下，一味抱怨也起不到作用。作者的做法是将绝大部分的注意力放在努力工作上，而不是去关注鲁尼喜怒无常的情绪。\n\n关于如何提出问题。在与董事会的沟通中，作者提到不仅需要提出问题，作出预测，并且还需要给出解决方案。“一般来说，只抛出问题而不提供解决方案不是我的作风（我也是这样敦促我的团队——你可以带着问题找我，但也请提供可行的解决方案）。”现在我也是这条准则的践行者，在和产品经理或后端沟通的过程中，如果我觉得有问题，我也会提出自己的解法，这解法可能是正确的，可能是错误的。你需要大胆的说出自己的看法，经受别人的考验，而不是闷声思考，或者放弃思考。\n\n关于自尊心和韧性。在 Bob 竞选 CEO，通过董事会漫长的面试过程中谈到，“对于自尊心的打击虽然往往是真枪实弹，但也不要让这些打击过多地占据你大脑的空间或是耗损你太多的经历，……，当每个人都在夸赞你时，想要保持乐观是很容易的。但当你的自我认知如此公然地受到挑战的时候，保持乐观就困难了很多，也必要了很多”。 不要轻易怀疑自己（不是不反思自己），抵抗 pua 有奇效。\n\n关于压力透传。是否应该将压力层层施压到执行的人员身上，在这点上我赞成作者的观点。“没有什么规章手册能告诉你该如何应对这样的挑战，但你通常需要试着认识到，面对一个牵涉重大利益的项目，往项目工作人员的身上施压是收效甚微的。将你的焦虑投射到团队的身上，往往适得其反。表达你与团队分担压力，和大家共同奋战，以及表达你需要大家拿出好的结果以减轻你的压力，这二者之间的区别虽小，但却能造成完全不同的效果。” 在日常项目中，每个人或多或少都能清晰意识到自己在做的项目的重要性，作为领导在这个时候如果还是一味施压，可能会取得反作用。leader 在这个时候应该做的是确定大家有一个明确的终极目标，以及调派资源，协调解决方法。\n\n关于微观管理。细节决定成败，但凡是都有度。作为最高管理人员，过度的微观管理往往会给人留下锱铢必较和固执己见的影响。Bob提到他的前任 CEO迈克尔。“有一次，我看到他在一家酒店大堂里接受采访时对记者说：‘你看到那边的台灯了吗？都是我挑的’。这可不是一个首席执行官应有的风范。”前段时间雷军的屏保火了，能不管的事情一定不管，可能也是异曲同工吧。\n\n关于一言堂。“随着在这个职位上权利的累积，对于如何使用这种权利也就越发难以把控了……你的自信很容易就会越界成为自大，继而变成一种累赘。你或许会觉得没有什么提议是自己没有听过的，因此对其他人的看法变得缺少耐心或不屑一顾。” 对于这点，我倒觉得与职位和级别无关，在工作中经常会遇到。你在自己所做的领域小有成就，于是觉得其他人都不如自己深刻。解决方法除了告诉自己时刻保持包容，保持开放以外，作者也提到需要最紧密的高管在发现“我”表现出不屑或不耐烦，那就一定要告知。可见在自己身边，能有几个敢于说真话的人是十分必要的。\n\n以上是结合我的工作和生活，提供了一些反思和素材。除此之外，书中还记录了不少轶事，比如上海迪士尼的创建过程，迪士尼曾想收购 twitter但在最后一刻放弃，作者与乔布斯的相处，disney+的诞生和运营，凯文梅尔的事迹（去年在 tiktok 的事件里常看到报道），Bob梦见自己站在总统竞选辩论台上却感觉毫无准备，然后半夜从噩梦中惊醒（原来大老板们也会做类似的噩梦）等等，限于篇幅，就不一一记录了。\n\n最后说一点题外话，上周读完书我发了个朋友圈，几位朋友可能没有看过内容，以为我鸡汤中毒，我也打个哈哈一笑了之。不过事后也引起我的思考，如何去区分一本书到底是爽文，鸡汤还是励志。我想关键点可能在于行为。读完一本书，觉得不错，一拍大腿，然后束之高阁，这种对自己的认知和行为无法产生反馈，说的再天花乱坠，也没什么用。前脚看完，后脚就忘了。相反，如果看完了，从书中能够获得一套合理的行为准则，能反思到自己存在的不足，找到未来实践的指引，做到知行合一，我想这样就足够了。\n\n一些思考，欢迎指正。如果朋友感兴趣，推荐大家阅读。\n","source":"_posts/我读《一生的旅程》.md","raw":"---\ntitle: 我读《一生的旅程》\ncategories:\n  - life\n  - reading\ntags:\n  - books\n  - leadership\nabbrlink: e7498c6f\ndate: 2021-06-20 15:01:19\n---\n\n端午节回武汉，随手抄了本书准备打发高铁上的时光，没有想到内容十分精彩，来回的路上读的七七八八，收假回来熬夜看完。结合自己的观察，写点感想。\n\n我曾经非常讨厌读个人传记，主要是觉得这种书都是为尊者讳，说的做的肯定都被美化一番。而且想也不用想，我都能猜到文章的脉络，一定是作者曾经非常困苦迷惘，经历了一番不懈努力，最后走上人生巅峰。\n\n但是这本书并不是这般单调。当然，从结果来说，成功者的书籍会比失败者更多。从大众世俗的角度来看，可能对成功的关注势必会比失败的关注更多。但是这并不是我说这本书精彩的原因。\n\n说回到书的本身，这本书的设计不太讨巧，封面和腰封都透露着一股浓浓的机场成功学气息。“洞悉全球最佳 CEO 的神级领导力秘密”，神级！还有“比尔盖茨罕见 2000 字推荐”，估摸出版的时候盖茨还没离婚。\n\n吐槽归吐槽，余下部分记录一下我觉得有意思的内容。\n\n关于 Bob，原来是 Robert 的简称。\n\n关于父亲。由于家中有一间摆满书的书房，以及父亲热爱阅读的习惯，把作者培养成了一个爱书之人。同时还提到在晚餐时与孩子讨论世界大事。关于这点，我也在想，在社会生活碎片化趋势下，在这个环境中我能做些什么来影响子女，养成好的习惯。父母是最初的老师，孩子有样学样。有太多左手拿手机，右手牵孩子，在餐桌上默不作声，各玩电子产品的场景。我不相信一个长时间生活在手机里的家长可以提供给孩子们一个好的榜样。\n\n关于早起。发了朋友圈之后好几个人问我，作者几点睡觉。其实作者也给出了答案，“这样的作息时间虽然不适用于所有人，但无论你如何选择如何腾出时间，每天创造空间让你的思绪远离眼前的工作职责尽情徜徉……，这些都是至关重要的。”独处和思考，可能是在创意型的工作中必不可少的一个环节。几点起床不是问题，有的人是 morning person，有的人就是晚上脑子活跃，早晚不重要，重要的是有一段不被打扰的时光。但是我还是想尝试一下早起，不知道能不能成功。\n\n关于喜怒无常的老板。鲁尼是第一个教导作者拼死创新的老板，但同时“鲁尼是一个喜怒无常的上司，时间一长，这种反复无常会对团队的时期造成严重的削弱……，他懂得如何巧妙的挑拨人心，而我一直没弄明白这到底是有意而为还是他的性格使然。……他也会把我逼到下定决心辞职不干的绝境。我并不是唯一一个有过这种念头的人。”在工作中，有时我们无法选择老板和同事，在这种情况下，一味抱怨也起不到作用。作者的做法是将绝大部分的注意力放在努力工作上，而不是去关注鲁尼喜怒无常的情绪。\n\n关于如何提出问题。在与董事会的沟通中，作者提到不仅需要提出问题，作出预测，并且还需要给出解决方案。“一般来说，只抛出问题而不提供解决方案不是我的作风（我也是这样敦促我的团队——你可以带着问题找我，但也请提供可行的解决方案）。”现在我也是这条准则的践行者，在和产品经理或后端沟通的过程中，如果我觉得有问题，我也会提出自己的解法，这解法可能是正确的，可能是错误的。你需要大胆的说出自己的看法，经受别人的考验，而不是闷声思考，或者放弃思考。\n\n关于自尊心和韧性。在 Bob 竞选 CEO，通过董事会漫长的面试过程中谈到，“对于自尊心的打击虽然往往是真枪实弹，但也不要让这些打击过多地占据你大脑的空间或是耗损你太多的经历，……，当每个人都在夸赞你时，想要保持乐观是很容易的。但当你的自我认知如此公然地受到挑战的时候，保持乐观就困难了很多，也必要了很多”。 不要轻易怀疑自己（不是不反思自己），抵抗 pua 有奇效。\n\n关于压力透传。是否应该将压力层层施压到执行的人员身上，在这点上我赞成作者的观点。“没有什么规章手册能告诉你该如何应对这样的挑战，但你通常需要试着认识到，面对一个牵涉重大利益的项目，往项目工作人员的身上施压是收效甚微的。将你的焦虑投射到团队的身上，往往适得其反。表达你与团队分担压力，和大家共同奋战，以及表达你需要大家拿出好的结果以减轻你的压力，这二者之间的区别虽小，但却能造成完全不同的效果。” 在日常项目中，每个人或多或少都能清晰意识到自己在做的项目的重要性，作为领导在这个时候如果还是一味施压，可能会取得反作用。leader 在这个时候应该做的是确定大家有一个明确的终极目标，以及调派资源，协调解决方法。\n\n关于微观管理。细节决定成败，但凡是都有度。作为最高管理人员，过度的微观管理往往会给人留下锱铢必较和固执己见的影响。Bob提到他的前任 CEO迈克尔。“有一次，我看到他在一家酒店大堂里接受采访时对记者说：‘你看到那边的台灯了吗？都是我挑的’。这可不是一个首席执行官应有的风范。”前段时间雷军的屏保火了，能不管的事情一定不管，可能也是异曲同工吧。\n\n关于一言堂。“随着在这个职位上权利的累积，对于如何使用这种权利也就越发难以把控了……你的自信很容易就会越界成为自大，继而变成一种累赘。你或许会觉得没有什么提议是自己没有听过的，因此对其他人的看法变得缺少耐心或不屑一顾。” 对于这点，我倒觉得与职位和级别无关，在工作中经常会遇到。你在自己所做的领域小有成就，于是觉得其他人都不如自己深刻。解决方法除了告诉自己时刻保持包容，保持开放以外，作者也提到需要最紧密的高管在发现“我”表现出不屑或不耐烦，那就一定要告知。可见在自己身边，能有几个敢于说真话的人是十分必要的。\n\n以上是结合我的工作和生活，提供了一些反思和素材。除此之外，书中还记录了不少轶事，比如上海迪士尼的创建过程，迪士尼曾想收购 twitter但在最后一刻放弃，作者与乔布斯的相处，disney+的诞生和运营，凯文梅尔的事迹（去年在 tiktok 的事件里常看到报道），Bob梦见自己站在总统竞选辩论台上却感觉毫无准备，然后半夜从噩梦中惊醒（原来大老板们也会做类似的噩梦）等等，限于篇幅，就不一一记录了。\n\n最后说一点题外话，上周读完书我发了个朋友圈，几位朋友可能没有看过内容，以为我鸡汤中毒，我也打个哈哈一笑了之。不过事后也引起我的思考，如何去区分一本书到底是爽文，鸡汤还是励志。我想关键点可能在于行为。读完一本书，觉得不错，一拍大腿，然后束之高阁，这种对自己的认知和行为无法产生反馈，说的再天花乱坠，也没什么用。前脚看完，后脚就忘了。相反，如果看完了，从书中能够获得一套合理的行为准则，能反思到自己存在的不足，找到未来实践的指引，做到知行合一，我想这样就足够了。\n\n一些思考，欢迎指正。如果朋友感兴趣，推荐大家阅读。\n","slug":"我读《一生的旅程》","published":1,"updated":"2021-09-14T11:40:19.907Z","_id":"ckq4ue26u0000i0fy2mnrc4hs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>端午节回武汉，随手抄了本书准备打发高铁上的时光，没有想到内容十分精彩，来回的路上读的七七八八，收假回来熬夜看完。结合自己的观察，写点感想。</p>\n<p>我曾经非常讨厌读个人传记，主要是觉得这种书都是为尊者讳，说的做的肯定都被美化一番。而且想也不用想，我都能猜到文章的脉络，一定是作者曾经非常困苦迷惘，经历了一番不懈努力，最后走上人生巅峰。</p>\n<p>但是这本书并不是这般单调。当然，从结果来说，成功者的书籍会比失败者更多。从大众世俗的角度来看，可能对成功的关注势必会比失败的关注更多。但是这并不是我说这本书精彩的原因。</p>\n<p>说回到书的本身，这本书的设计不太讨巧，封面和腰封都透露着一股浓浓的机场成功学气息。“洞悉全球最佳 CEO 的神级领导力秘密”，神级！还有“比尔盖茨罕见 2000 字推荐”，估摸出版的时候盖茨还没离婚。</p>\n<p>吐槽归吐槽，余下部分记录一下我觉得有意思的内容。</p>\n<p>关于 Bob，原来是 Robert 的简称。</p>\n<p>关于父亲。由于家中有一间摆满书的书房，以及父亲热爱阅读的习惯，把作者培养成了一个爱书之人。同时还提到在晚餐时与孩子讨论世界大事。关于这点，我也在想，在社会生活碎片化趋势下，在这个环境中我能做些什么来影响子女，养成好的习惯。父母是最初的老师，孩子有样学样。有太多左手拿手机，右手牵孩子，在餐桌上默不作声，各玩电子产品的场景。我不相信一个长时间生活在手机里的家长可以提供给孩子们一个好的榜样。</p>\n<p>关于早起。发了朋友圈之后好几个人问我，作者几点睡觉。其实作者也给出了答案，“这样的作息时间虽然不适用于所有人，但无论你如何选择如何腾出时间，每天创造空间让你的思绪远离眼前的工作职责尽情徜徉……，这些都是至关重要的。”独处和思考，可能是在创意型的工作中必不可少的一个环节。几点起床不是问题，有的人是 morning person，有的人就是晚上脑子活跃，早晚不重要，重要的是有一段不被打扰的时光。但是我还是想尝试一下早起，不知道能不能成功。</p>\n<p>关于喜怒无常的老板。鲁尼是第一个教导作者拼死创新的老板，但同时“鲁尼是一个喜怒无常的上司，时间一长，这种反复无常会对团队的时期造成严重的削弱……，他懂得如何巧妙的挑拨人心，而我一直没弄明白这到底是有意而为还是他的性格使然。……他也会把我逼到下定决心辞职不干的绝境。我并不是唯一一个有过这种念头的人。”在工作中，有时我们无法选择老板和同事，在这种情况下，一味抱怨也起不到作用。作者的做法是将绝大部分的注意力放在努力工作上，而不是去关注鲁尼喜怒无常的情绪。</p>\n<p>关于如何提出问题。在与董事会的沟通中，作者提到不仅需要提出问题，作出预测，并且还需要给出解决方案。“一般来说，只抛出问题而不提供解决方案不是我的作风（我也是这样敦促我的团队——你可以带着问题找我，但也请提供可行的解决方案）。”现在我也是这条准则的践行者，在和产品经理或后端沟通的过程中，如果我觉得有问题，我也会提出自己的解法，这解法可能是正确的，可能是错误的。你需要大胆的说出自己的看法，经受别人的考验，而不是闷声思考，或者放弃思考。</p>\n<p>关于自尊心和韧性。在 Bob 竞选 CEO，通过董事会漫长的面试过程中谈到，“对于自尊心的打击虽然往往是真枪实弹，但也不要让这些打击过多地占据你大脑的空间或是耗损你太多的经历，……，当每个人都在夸赞你时，想要保持乐观是很容易的。但当你的自我认知如此公然地受到挑战的时候，保持乐观就困难了很多，也必要了很多”。 不要轻易怀疑自己（不是不反思自己），抵抗 pua 有奇效。</p>\n<p>关于压力透传。是否应该将压力层层施压到执行的人员身上，在这点上我赞成作者的观点。“没有什么规章手册能告诉你该如何应对这样的挑战，但你通常需要试着认识到，面对一个牵涉重大利益的项目，往项目工作人员的身上施压是收效甚微的。将你的焦虑投射到团队的身上，往往适得其反。表达你与团队分担压力，和大家共同奋战，以及表达你需要大家拿出好的结果以减轻你的压力，这二者之间的区别虽小，但却能造成完全不同的效果。” 在日常项目中，每个人或多或少都能清晰意识到自己在做的项目的重要性，作为领导在这个时候如果还是一味施压，可能会取得反作用。leader 在这个时候应该做的是确定大家有一个明确的终极目标，以及调派资源，协调解决方法。</p>\n<p>关于微观管理。细节决定成败，但凡是都有度。作为最高管理人员，过度的微观管理往往会给人留下锱铢必较和固执己见的影响。Bob提到他的前任 CEO迈克尔。“有一次，我看到他在一家酒店大堂里接受采访时对记者说：‘你看到那边的台灯了吗？都是我挑的’。这可不是一个首席执行官应有的风范。”前段时间雷军的屏保火了，能不管的事情一定不管，可能也是异曲同工吧。</p>\n<p>关于一言堂。“随着在这个职位上权利的累积，对于如何使用这种权利也就越发难以把控了……你的自信很容易就会越界成为自大，继而变成一种累赘。你或许会觉得没有什么提议是自己没有听过的，因此对其他人的看法变得缺少耐心或不屑一顾。” 对于这点，我倒觉得与职位和级别无关，在工作中经常会遇到。你在自己所做的领域小有成就，于是觉得其他人都不如自己深刻。解决方法除了告诉自己时刻保持包容，保持开放以外，作者也提到需要最紧密的高管在发现“我”表现出不屑或不耐烦，那就一定要告知。可见在自己身边，能有几个敢于说真话的人是十分必要的。</p>\n<p>以上是结合我的工作和生活，提供了一些反思和素材。除此之外，书中还记录了不少轶事，比如上海迪士尼的创建过程，迪士尼曾想收购 twitter但在最后一刻放弃，作者与乔布斯的相处，disney+的诞生和运营，凯文梅尔的事迹（去年在 tiktok 的事件里常看到报道），Bob梦见自己站在总统竞选辩论台上却感觉毫无准备，然后半夜从噩梦中惊醒（原来大老板们也会做类似的噩梦）等等，限于篇幅，就不一一记录了。</p>\n<p>最后说一点题外话，上周读完书我发了个朋友圈，几位朋友可能没有看过内容，以为我鸡汤中毒，我也打个哈哈一笑了之。不过事后也引起我的思考，如何去区分一本书到底是爽文，鸡汤还是励志。我想关键点可能在于行为。读完一本书，觉得不错，一拍大腿，然后束之高阁，这种对自己的认知和行为无法产生反馈，说的再天花乱坠，也没什么用。前脚看完，后脚就忘了。相反，如果看完了，从书中能够获得一套合理的行为准则，能反思到自己存在的不足，找到未来实践的指引，做到知行合一，我想这样就足够了。</p>\n<p>一些思考，欢迎指正。如果朋友感兴趣，推荐大家阅读。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>端午节回武汉，随手抄了本书准备打发高铁上的时光，没有想到内容十分精彩，来回的路上读的七七八八，收假回来熬夜看完。结合自己的观察，写点感想。</p>\n<p>我曾经非常讨厌读个人传记，主要是觉得这种书都是为尊者讳，说的做的肯定都被美化一番。而且想也不用想，我都能猜到文章的脉络，一定是作者曾经非常困苦迷惘，经历了一番不懈努力，最后走上人生巅峰。</p>\n<p>但是这本书并不是这般单调。当然，从结果来说，成功者的书籍会比失败者更多。从大众世俗的角度来看，可能对成功的关注势必会比失败的关注更多。但是这并不是我说这本书精彩的原因。</p>\n<p>说回到书的本身，这本书的设计不太讨巧，封面和腰封都透露着一股浓浓的机场成功学气息。“洞悉全球最佳 CEO 的神级领导力秘密”，神级！还有“比尔盖茨罕见 2000 字推荐”，估摸出版的时候盖茨还没离婚。</p>\n<p>吐槽归吐槽，余下部分记录一下我觉得有意思的内容。</p>\n<p>关于 Bob，原来是 Robert 的简称。</p>\n<p>关于父亲。由于家中有一间摆满书的书房，以及父亲热爱阅读的习惯，把作者培养成了一个爱书之人。同时还提到在晚餐时与孩子讨论世界大事。关于这点，我也在想，在社会生活碎片化趋势下，在这个环境中我能做些什么来影响子女，养成好的习惯。父母是最初的老师，孩子有样学样。有太多左手拿手机，右手牵孩子，在餐桌上默不作声，各玩电子产品的场景。我不相信一个长时间生活在手机里的家长可以提供给孩子们一个好的榜样。</p>\n<p>关于早起。发了朋友圈之后好几个人问我，作者几点睡觉。其实作者也给出了答案，“这样的作息时间虽然不适用于所有人，但无论你如何选择如何腾出时间，每天创造空间让你的思绪远离眼前的工作职责尽情徜徉……，这些都是至关重要的。”独处和思考，可能是在创意型的工作中必不可少的一个环节。几点起床不是问题，有的人是 morning person，有的人就是晚上脑子活跃，早晚不重要，重要的是有一段不被打扰的时光。但是我还是想尝试一下早起，不知道能不能成功。</p>\n<p>关于喜怒无常的老板。鲁尼是第一个教导作者拼死创新的老板，但同时“鲁尼是一个喜怒无常的上司，时间一长，这种反复无常会对团队的时期造成严重的削弱……，他懂得如何巧妙的挑拨人心，而我一直没弄明白这到底是有意而为还是他的性格使然。……他也会把我逼到下定决心辞职不干的绝境。我并不是唯一一个有过这种念头的人。”在工作中，有时我们无法选择老板和同事，在这种情况下，一味抱怨也起不到作用。作者的做法是将绝大部分的注意力放在努力工作上，而不是去关注鲁尼喜怒无常的情绪。</p>\n<p>关于如何提出问题。在与董事会的沟通中，作者提到不仅需要提出问题，作出预测，并且还需要给出解决方案。“一般来说，只抛出问题而不提供解决方案不是我的作风（我也是这样敦促我的团队——你可以带着问题找我，但也请提供可行的解决方案）。”现在我也是这条准则的践行者，在和产品经理或后端沟通的过程中，如果我觉得有问题，我也会提出自己的解法，这解法可能是正确的，可能是错误的。你需要大胆的说出自己的看法，经受别人的考验，而不是闷声思考，或者放弃思考。</p>\n<p>关于自尊心和韧性。在 Bob 竞选 CEO，通过董事会漫长的面试过程中谈到，“对于自尊心的打击虽然往往是真枪实弹，但也不要让这些打击过多地占据你大脑的空间或是耗损你太多的经历，……，当每个人都在夸赞你时，想要保持乐观是很容易的。但当你的自我认知如此公然地受到挑战的时候，保持乐观就困难了很多，也必要了很多”。 不要轻易怀疑自己（不是不反思自己），抵抗 pua 有奇效。</p>\n<p>关于压力透传。是否应该将压力层层施压到执行的人员身上，在这点上我赞成作者的观点。“没有什么规章手册能告诉你该如何应对这样的挑战，但你通常需要试着认识到，面对一个牵涉重大利益的项目，往项目工作人员的身上施压是收效甚微的。将你的焦虑投射到团队的身上，往往适得其反。表达你与团队分担压力，和大家共同奋战，以及表达你需要大家拿出好的结果以减轻你的压力，这二者之间的区别虽小，但却能造成完全不同的效果。” 在日常项目中，每个人或多或少都能清晰意识到自己在做的项目的重要性，作为领导在这个时候如果还是一味施压，可能会取得反作用。leader 在这个时候应该做的是确定大家有一个明确的终极目标，以及调派资源，协调解决方法。</p>\n<p>关于微观管理。细节决定成败，但凡是都有度。作为最高管理人员，过度的微观管理往往会给人留下锱铢必较和固执己见的影响。Bob提到他的前任 CEO迈克尔。“有一次，我看到他在一家酒店大堂里接受采访时对记者说：‘你看到那边的台灯了吗？都是我挑的’。这可不是一个首席执行官应有的风范。”前段时间雷军的屏保火了，能不管的事情一定不管，可能也是异曲同工吧。</p>\n<p>关于一言堂。“随着在这个职位上权利的累积，对于如何使用这种权利也就越发难以把控了……你的自信很容易就会越界成为自大，继而变成一种累赘。你或许会觉得没有什么提议是自己没有听过的，因此对其他人的看法变得缺少耐心或不屑一顾。” 对于这点，我倒觉得与职位和级别无关，在工作中经常会遇到。你在自己所做的领域小有成就，于是觉得其他人都不如自己深刻。解决方法除了告诉自己时刻保持包容，保持开放以外，作者也提到需要最紧密的高管在发现“我”表现出不屑或不耐烦，那就一定要告知。可见在自己身边，能有几个敢于说真话的人是十分必要的。</p>\n<p>以上是结合我的工作和生活，提供了一些反思和素材。除此之外，书中还记录了不少轶事，比如上海迪士尼的创建过程，迪士尼曾想收购 twitter但在最后一刻放弃，作者与乔布斯的相处，disney+的诞生和运营，凯文梅尔的事迹（去年在 tiktok 的事件里常看到报道），Bob梦见自己站在总统竞选辩论台上却感觉毫无准备，然后半夜从噩梦中惊醒（原来大老板们也会做类似的噩梦）等等，限于篇幅，就不一一记录了。</p>\n<p>最后说一点题外话，上周读完书我发了个朋友圈，几位朋友可能没有看过内容，以为我鸡汤中毒，我也打个哈哈一笑了之。不过事后也引起我的思考，如何去区分一本书到底是爽文，鸡汤还是励志。我想关键点可能在于行为。读完一本书，觉得不错，一拍大腿，然后束之高阁，这种对自己的认知和行为无法产生反馈，说的再天花乱坠，也没什么用。前脚看完，后脚就忘了。相反，如果看完了，从书中能够获得一套合理的行为准则，能反思到自己存在的不足，找到未来实践的指引，做到知行合一，我想这样就足够了。</p>\n<p>一些思考，欢迎指正。如果朋友感兴趣，推荐大家阅读。</p>\n"},{"title":"我读《上学记》","abbrlink":"4989ceb5","date":"2021-09-15T02:46:32.000Z","_content":"\n六月回了武汉一趟，当时手边书快读完了，顺手从书架上拿了这本《上学记》，准备带回北京看。结果七月离职去了西藏，八月入职一些琐碎事情，一直拖着，上个周末才看完，又拖了一周，才来写读后感。\n\n这本书是零八年九月再版的，我想应该是零九年买的。当时并不知道何兆武何许人也，只是觉得装帧素雅书名简洁，淡鹅黄色封皮，上面简笔勾画出课堂里两个小孩，后面一位俯身趴在课桌上看书，前一位心不在焉，出神望着窗外的风筝。后来才知是丰子恺的作品。这幅封面给我留下很深的印象，虽然离开学校多年，每当我回想起课堂的意象时，我已经记不起黑板上的板书，但总觉得场景大抵就应该是图里的样子。\n\n一提起民国、抗日、解放，不知道别人的感觉如何，首先映入我脑海的往往都是战争，会议，以及人民的苦难。但就好比是一部电影，这些印象就像是远景，或者说基调。有时候也会好奇，那个时代的人们，吃什么，玩什么，过着怎样的生活，有着怎样的想法，这些在教科书里往往一笔带过，又或者我书读少了。但是这本口述小册子提供了很多细节和故事，值得回味。\n\n说回本书，有几点印象深刻。\n\n首先是关于“情节”。书中写到，“我们这一代人对日本的仇恨非常强烈，我想现在的年轻人已经不会有这种感受了；可以说，对日本人的仇恨是我们这一代人难以了却的情结。比我年轻一代的，也就是解放以后一直到文革时候的中小学生，他们大概也有一个情节，就是个人崇拜的情节，一听到伟大领袖，马上泪流满面，我想现在一代的青年人恐怕也没有那种情节了。一个时代有一个时代的情节，我们那时代的情节就是仇恨日本”。\n\n看到这种将时代和情节关联起来的表述，觉得既新颖又好奇。我理解此处的情节，就是整个集体在一个时代里认同的价值观，反过来这种观念同时也在教化和指导着这个时代的集体，作为一种行为和道德的准则。我们这一代人的情节又是什么呢，感觉很难有一个如上述简练的表达，能精准又抽象的来概括整个社会。对于九十年代出生的人，我猜可能是“猫论”——不管黑猫白猫，能捉到老鼠就是好猫；也可能是“下海”，又或者是“房子”，俗一点讲，就是搞钱。下一代的人情节又是什么，我猜可能是躺平吧。\n\n关于看书的目的。“读书不一定非要有个目的，而且最好是没有任何目的，读书本身就是目的。读书本身带来内心的满足，好比一次精神上的漫游，在别人看了，游山玩水跑了一天，什么价值都没有，但对我来说，过程本身就是最大的价值，那是不能用功利标准来衡量的。”\n\n这点我非常赞同，经常开玩笑说不为无益之事，何遣有涯之生。指望读一本书，就对自己人生起到翻天覆地的变化，那是辟邪剑谱。书里也说“何况我从来不想做学问或者专家，能旁观世界和人生就满足了”，於我心有戚戚焉。现在也过了正经做学问的年纪，读点闲书，陶冶情操，开拓视野，在这个碎片化的时代里，寻求一点内心的安宁。有时候浮躁了静不下心来，做事冲动，可能就是太久没看书了。读书还有一点好处，就是读的过程，也是和作者交流的过程。有时候看完了，就想写点，不论是读后感还是疑问，也算是思考的记录。多写总是好的，写的过程也是反思的过程，能让自己多动动脑子，以免生锈。正如何先生说的，“有的人过了一辈子，可是文字好像总是不通顺，我想还是应该从写的清楚明白入手。”\n\n关于西南联大的故事。这可能是全书笔墨最多的部分，细节颇多。回忆各位老师的上课风格，讲述跑警报躲轰炸的场景，点评各位同学的风采。提到了很多大家，诸如陈寅恪、钱钟书、闻一多、华罗庚等，不一而足。还有刘文典和蒋介石的故事，读起来也颇有意思。给我印象很深的还有那一代人上学的艰辛，从北京没法直接去云南，得从北京出发去天津，在天津坐船到上海，再坐船到香港。由香港换船到海防，再换火车到越南，河口，最后从河口再坐三天小火车到昆明。基本上沿着鸡肚子走了一大圈。有走三个月的，有走半年一年的。因为穷，到了一个地方往往找个小差事糊口，干上两个月，然后拿点钱又走。“做亡国奴的那种心情不好受，所以才有那么大的决心。”\n\n在读这本书之前可能还会有一些疑惑（当然这是开了上帝视角，从今天去看当年的历史才会产生的疑惑），这些人当年为什么不走。但是看完书之后，可能疑惑转变成了，那些人为什么不留下。正如书中所说，“国民党最后派飞机来，可是绝少有高级知识分子离开，都认为国民党已经没有前途了。”\n\n关于文革的印象。虽然本书基本是遵循时间顺序来口述的，但是在讲述同事、老师轶事的同时，还是穿插了一些解放后的故事。具体的需要亲自去读书才能体会了。有一件事我觉得耐人寻味。文革时，有一次在党校开斗争大会，一边是“三家村”，吴晗、邓拓、廖沫沙，一边是曾经的同学、学长李振穆，此时已改名叫李晨，是北京市委高教局局长。不知道若干年后，曾经的老师、同学同时在台上被批斗是怎么一番感想和滋味。\n\n关于《上班记》。后记中提到，这部口述自传原计划是上下两本，用了近两年时间完成。《上学记》从 1921 年讲到 1950 年，戛然而止。《上班记》尊重何先生的意见，暂不发表。不知再过十年二十年，是否会有一个合适的环境或契机，再续后面的故事。\n\n以书里引用济慈的墓志铭结尾，Here lies the man whose name was writ on water.\n","source":"_posts/我读《上学记》.md","raw":"---\ntitle: 我读《上学记》\ncategories:\n  - life\n  - reading\ntags:\n  - books\n  - history\nabbrlink: 4989ceb5\ndate: 2021-09-14 19:46:32\n---\n\n六月回了武汉一趟，当时手边书快读完了，顺手从书架上拿了这本《上学记》，准备带回北京看。结果七月离职去了西藏，八月入职一些琐碎事情，一直拖着，上个周末才看完，又拖了一周，才来写读后感。\n\n这本书是零八年九月再版的，我想应该是零九年买的。当时并不知道何兆武何许人也，只是觉得装帧素雅书名简洁，淡鹅黄色封皮，上面简笔勾画出课堂里两个小孩，后面一位俯身趴在课桌上看书，前一位心不在焉，出神望着窗外的风筝。后来才知是丰子恺的作品。这幅封面给我留下很深的印象，虽然离开学校多年，每当我回想起课堂的意象时，我已经记不起黑板上的板书，但总觉得场景大抵就应该是图里的样子。\n\n一提起民国、抗日、解放，不知道别人的感觉如何，首先映入我脑海的往往都是战争，会议，以及人民的苦难。但就好比是一部电影，这些印象就像是远景，或者说基调。有时候也会好奇，那个时代的人们，吃什么，玩什么，过着怎样的生活，有着怎样的想法，这些在教科书里往往一笔带过，又或者我书读少了。但是这本口述小册子提供了很多细节和故事，值得回味。\n\n说回本书，有几点印象深刻。\n\n首先是关于“情节”。书中写到，“我们这一代人对日本的仇恨非常强烈，我想现在的年轻人已经不会有这种感受了；可以说，对日本人的仇恨是我们这一代人难以了却的情结。比我年轻一代的，也就是解放以后一直到文革时候的中小学生，他们大概也有一个情节，就是个人崇拜的情节，一听到伟大领袖，马上泪流满面，我想现在一代的青年人恐怕也没有那种情节了。一个时代有一个时代的情节，我们那时代的情节就是仇恨日本”。\n\n看到这种将时代和情节关联起来的表述，觉得既新颖又好奇。我理解此处的情节，就是整个集体在一个时代里认同的价值观，反过来这种观念同时也在教化和指导着这个时代的集体，作为一种行为和道德的准则。我们这一代人的情节又是什么呢，感觉很难有一个如上述简练的表达，能精准又抽象的来概括整个社会。对于九十年代出生的人，我猜可能是“猫论”——不管黑猫白猫，能捉到老鼠就是好猫；也可能是“下海”，又或者是“房子”，俗一点讲，就是搞钱。下一代的人情节又是什么，我猜可能是躺平吧。\n\n关于看书的目的。“读书不一定非要有个目的，而且最好是没有任何目的，读书本身就是目的。读书本身带来内心的满足，好比一次精神上的漫游，在别人看了，游山玩水跑了一天，什么价值都没有，但对我来说，过程本身就是最大的价值，那是不能用功利标准来衡量的。”\n\n这点我非常赞同，经常开玩笑说不为无益之事，何遣有涯之生。指望读一本书，就对自己人生起到翻天覆地的变化，那是辟邪剑谱。书里也说“何况我从来不想做学问或者专家，能旁观世界和人生就满足了”，於我心有戚戚焉。现在也过了正经做学问的年纪，读点闲书，陶冶情操，开拓视野，在这个碎片化的时代里，寻求一点内心的安宁。有时候浮躁了静不下心来，做事冲动，可能就是太久没看书了。读书还有一点好处，就是读的过程，也是和作者交流的过程。有时候看完了，就想写点，不论是读后感还是疑问，也算是思考的记录。多写总是好的，写的过程也是反思的过程，能让自己多动动脑子，以免生锈。正如何先生说的，“有的人过了一辈子，可是文字好像总是不通顺，我想还是应该从写的清楚明白入手。”\n\n关于西南联大的故事。这可能是全书笔墨最多的部分，细节颇多。回忆各位老师的上课风格，讲述跑警报躲轰炸的场景，点评各位同学的风采。提到了很多大家，诸如陈寅恪、钱钟书、闻一多、华罗庚等，不一而足。还有刘文典和蒋介石的故事，读起来也颇有意思。给我印象很深的还有那一代人上学的艰辛，从北京没法直接去云南，得从北京出发去天津，在天津坐船到上海，再坐船到香港。由香港换船到海防，再换火车到越南，河口，最后从河口再坐三天小火车到昆明。基本上沿着鸡肚子走了一大圈。有走三个月的，有走半年一年的。因为穷，到了一个地方往往找个小差事糊口，干上两个月，然后拿点钱又走。“做亡国奴的那种心情不好受，所以才有那么大的决心。”\n\n在读这本书之前可能还会有一些疑惑（当然这是开了上帝视角，从今天去看当年的历史才会产生的疑惑），这些人当年为什么不走。但是看完书之后，可能疑惑转变成了，那些人为什么不留下。正如书中所说，“国民党最后派飞机来，可是绝少有高级知识分子离开，都认为国民党已经没有前途了。”\n\n关于文革的印象。虽然本书基本是遵循时间顺序来口述的，但是在讲述同事、老师轶事的同时，还是穿插了一些解放后的故事。具体的需要亲自去读书才能体会了。有一件事我觉得耐人寻味。文革时，有一次在党校开斗争大会，一边是“三家村”，吴晗、邓拓、廖沫沙，一边是曾经的同学、学长李振穆，此时已改名叫李晨，是北京市委高教局局长。不知道若干年后，曾经的老师、同学同时在台上被批斗是怎么一番感想和滋味。\n\n关于《上班记》。后记中提到，这部口述自传原计划是上下两本，用了近两年时间完成。《上学记》从 1921 年讲到 1950 年，戛然而止。《上班记》尊重何先生的意见，暂不发表。不知再过十年二十年，是否会有一个合适的环境或契机，再续后面的故事。\n\n以书里引用济慈的墓志铭结尾，Here lies the man whose name was writ on water.\n","slug":"我读《上学记》","published":1,"updated":"2021-09-14T11:47:59.055Z","_id":"cktk0fy8v0000b34n9h0nb5wi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>六月回了武汉一趟，当时手边书快读完了，顺手从书架上拿了这本《上学记》，准备带回北京看。结果七月离职去了西藏，八月入职一些琐碎事情，一直拖着，上个周末才看完，又拖了一周，才来写读后感。</p>\n<p>这本书是零八年九月再版的，我想应该是零九年买的。当时并不知道何兆武何许人也，只是觉得装帧素雅书名简洁，淡鹅黄色封皮，上面简笔勾画出课堂里两个小孩，后面一位俯身趴在课桌上看书，前一位心不在焉，出神望着窗外的风筝。后来才知是丰子恺的作品。这幅封面给我留下很深的印象，虽然离开学校多年，每当我回想起课堂的意象时，我已经记不起黑板上的板书，但总觉得场景大抵就应该是图里的样子。</p>\n<p>一提起民国、抗日、解放，不知道别人的感觉如何，首先映入我脑海的往往都是战争，会议，以及人民的苦难。但就好比是一部电影，这些印象就像是远景，或者说基调。有时候也会好奇，那个时代的人们，吃什么，玩什么，过着怎样的生活，有着怎样的想法，这些在教科书里往往一笔带过，又或者我书读少了。但是这本口述小册子提供了很多细节和故事，值得回味。</p>\n<p>说回本书，有几点印象深刻。</p>\n<p>首先是关于“情节”。书中写到，“我们这一代人对日本的仇恨非常强烈，我想现在的年轻人已经不会有这种感受了；可以说，对日本人的仇恨是我们这一代人难以了却的情结。比我年轻一代的，也就是解放以后一直到文革时候的中小学生，他们大概也有一个情节，就是个人崇拜的情节，一听到伟大领袖，马上泪流满面，我想现在一代的青年人恐怕也没有那种情节了。一个时代有一个时代的情节，我们那时代的情节就是仇恨日本”。</p>\n<p>看到这种将时代和情节关联起来的表述，觉得既新颖又好奇。我理解此处的情节，就是整个集体在一个时代里认同的价值观，反过来这种观念同时也在教化和指导着这个时代的集体，作为一种行为和道德的准则。我们这一代人的情节又是什么呢，感觉很难有一个如上述简练的表达，能精准又抽象的来概括整个社会。对于九十年代出生的人，我猜可能是“猫论”——不管黑猫白猫，能捉到老鼠就是好猫；也可能是“下海”，又或者是“房子”，俗一点讲，就是搞钱。下一代的人情节又是什么，我猜可能是躺平吧。</p>\n<p>关于看书的目的。“读书不一定非要有个目的，而且最好是没有任何目的，读书本身就是目的。读书本身带来内心的满足，好比一次精神上的漫游，在别人看了，游山玩水跑了一天，什么价值都没有，但对我来说，过程本身就是最大的价值，那是不能用功利标准来衡量的。”</p>\n<p>这点我非常赞同，经常开玩笑说不为无益之事，何遣有涯之生。指望读一本书，就对自己人生起到翻天覆地的变化，那是辟邪剑谱。书里也说“何况我从来不想做学问或者专家，能旁观世界和人生就满足了”，於我心有戚戚焉。现在也过了正经做学问的年纪，读点闲书，陶冶情操，开拓视野，在这个碎片化的时代里，寻求一点内心的安宁。有时候浮躁了静不下心来，做事冲动，可能就是太久没看书了。读书还有一点好处，就是读的过程，也是和作者交流的过程。有时候看完了，就想写点，不论是读后感还是疑问，也算是思考的记录。多写总是好的，写的过程也是反思的过程，能让自己多动动脑子，以免生锈。正如何先生说的，“有的人过了一辈子，可是文字好像总是不通顺，我想还是应该从写的清楚明白入手。”</p>\n<p>关于西南联大的故事。这可能是全书笔墨最多的部分，细节颇多。回忆各位老师的上课风格，讲述跑警报躲轰炸的场景，点评各位同学的风采。提到了很多大家，诸如陈寅恪、钱钟书、闻一多、华罗庚等，不一而足。还有刘文典和蒋介石的故事，读起来也颇有意思。给我印象很深的还有那一代人上学的艰辛，从北京没法直接去云南，得从北京出发去天津，在天津坐船到上海，再坐船到香港。由香港换船到海防，再换火车到越南，河口，最后从河口再坐三天小火车到昆明。基本上沿着鸡肚子走了一大圈。有走三个月的，有走半年一年的。因为穷，到了一个地方往往找个小差事糊口，干上两个月，然后拿点钱又走。“做亡国奴的那种心情不好受，所以才有那么大的决心。”</p>\n<p>在读这本书之前可能还会有一些疑惑（当然这是开了上帝视角，从今天去看当年的历史才会产生的疑惑），这些人当年为什么不走。但是看完书之后，可能疑惑转变成了，那些人为什么不留下。正如书中所说，“国民党最后派飞机来，可是绝少有高级知识分子离开，都认为国民党已经没有前途了。”</p>\n<p>关于文革的印象。虽然本书基本是遵循时间顺序来口述的，但是在讲述同事、老师轶事的同时，还是穿插了一些解放后的故事。具体的需要亲自去读书才能体会了。有一件事我觉得耐人寻味。文革时，有一次在党校开斗争大会，一边是“三家村”，吴晗、邓拓、廖沫沙，一边是曾经的同学、学长李振穆，此时已改名叫李晨，是北京市委高教局局长。不知道若干年后，曾经的老师、同学同时在台上被批斗是怎么一番感想和滋味。</p>\n<p>关于《上班记》。后记中提到，这部口述自传原计划是上下两本，用了近两年时间完成。《上学记》从 1921 年讲到 1950 年，戛然而止。《上班记》尊重何先生的意见，暂不发表。不知再过十年二十年，是否会有一个合适的环境或契机，再续后面的故事。</p>\n<p>以书里引用济慈的墓志铭结尾，Here lies the man whose name was writ on water.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>六月回了武汉一趟，当时手边书快读完了，顺手从书架上拿了这本《上学记》，准备带回北京看。结果七月离职去了西藏，八月入职一些琐碎事情，一直拖着，上个周末才看完，又拖了一周，才来写读后感。</p>\n<p>这本书是零八年九月再版的，我想应该是零九年买的。当时并不知道何兆武何许人也，只是觉得装帧素雅书名简洁，淡鹅黄色封皮，上面简笔勾画出课堂里两个小孩，后面一位俯身趴在课桌上看书，前一位心不在焉，出神望着窗外的风筝。后来才知是丰子恺的作品。这幅封面给我留下很深的印象，虽然离开学校多年，每当我回想起课堂的意象时，我已经记不起黑板上的板书，但总觉得场景大抵就应该是图里的样子。</p>\n<p>一提起民国、抗日、解放，不知道别人的感觉如何，首先映入我脑海的往往都是战争，会议，以及人民的苦难。但就好比是一部电影，这些印象就像是远景，或者说基调。有时候也会好奇，那个时代的人们，吃什么，玩什么，过着怎样的生活，有着怎样的想法，这些在教科书里往往一笔带过，又或者我书读少了。但是这本口述小册子提供了很多细节和故事，值得回味。</p>\n<p>说回本书，有几点印象深刻。</p>\n<p>首先是关于“情节”。书中写到，“我们这一代人对日本的仇恨非常强烈，我想现在的年轻人已经不会有这种感受了；可以说，对日本人的仇恨是我们这一代人难以了却的情结。比我年轻一代的，也就是解放以后一直到文革时候的中小学生，他们大概也有一个情节，就是个人崇拜的情节，一听到伟大领袖，马上泪流满面，我想现在一代的青年人恐怕也没有那种情节了。一个时代有一个时代的情节，我们那时代的情节就是仇恨日本”。</p>\n<p>看到这种将时代和情节关联起来的表述，觉得既新颖又好奇。我理解此处的情节，就是整个集体在一个时代里认同的价值观，反过来这种观念同时也在教化和指导着这个时代的集体，作为一种行为和道德的准则。我们这一代人的情节又是什么呢，感觉很难有一个如上述简练的表达，能精准又抽象的来概括整个社会。对于九十年代出生的人，我猜可能是“猫论”——不管黑猫白猫，能捉到老鼠就是好猫；也可能是“下海”，又或者是“房子”，俗一点讲，就是搞钱。下一代的人情节又是什么，我猜可能是躺平吧。</p>\n<p>关于看书的目的。“读书不一定非要有个目的，而且最好是没有任何目的，读书本身就是目的。读书本身带来内心的满足，好比一次精神上的漫游，在别人看了，游山玩水跑了一天，什么价值都没有，但对我来说，过程本身就是最大的价值，那是不能用功利标准来衡量的。”</p>\n<p>这点我非常赞同，经常开玩笑说不为无益之事，何遣有涯之生。指望读一本书，就对自己人生起到翻天覆地的变化，那是辟邪剑谱。书里也说“何况我从来不想做学问或者专家，能旁观世界和人生就满足了”，於我心有戚戚焉。现在也过了正经做学问的年纪，读点闲书，陶冶情操，开拓视野，在这个碎片化的时代里，寻求一点内心的安宁。有时候浮躁了静不下心来，做事冲动，可能就是太久没看书了。读书还有一点好处，就是读的过程，也是和作者交流的过程。有时候看完了，就想写点，不论是读后感还是疑问，也算是思考的记录。多写总是好的，写的过程也是反思的过程，能让自己多动动脑子，以免生锈。正如何先生说的，“有的人过了一辈子，可是文字好像总是不通顺，我想还是应该从写的清楚明白入手。”</p>\n<p>关于西南联大的故事。这可能是全书笔墨最多的部分，细节颇多。回忆各位老师的上课风格，讲述跑警报躲轰炸的场景，点评各位同学的风采。提到了很多大家，诸如陈寅恪、钱钟书、闻一多、华罗庚等，不一而足。还有刘文典和蒋介石的故事，读起来也颇有意思。给我印象很深的还有那一代人上学的艰辛，从北京没法直接去云南，得从北京出发去天津，在天津坐船到上海，再坐船到香港。由香港换船到海防，再换火车到越南，河口，最后从河口再坐三天小火车到昆明。基本上沿着鸡肚子走了一大圈。有走三个月的，有走半年一年的。因为穷，到了一个地方往往找个小差事糊口，干上两个月，然后拿点钱又走。“做亡国奴的那种心情不好受，所以才有那么大的决心。”</p>\n<p>在读这本书之前可能还会有一些疑惑（当然这是开了上帝视角，从今天去看当年的历史才会产生的疑惑），这些人当年为什么不走。但是看完书之后，可能疑惑转变成了，那些人为什么不留下。正如书中所说，“国民党最后派飞机来，可是绝少有高级知识分子离开，都认为国民党已经没有前途了。”</p>\n<p>关于文革的印象。虽然本书基本是遵循时间顺序来口述的，但是在讲述同事、老师轶事的同时，还是穿插了一些解放后的故事。具体的需要亲自去读书才能体会了。有一件事我觉得耐人寻味。文革时，有一次在党校开斗争大会，一边是“三家村”，吴晗、邓拓、廖沫沙，一边是曾经的同学、学长李振穆，此时已改名叫李晨，是北京市委高教局局长。不知道若干年后，曾经的老师、同学同时在台上被批斗是怎么一番感想和滋味。</p>\n<p>关于《上班记》。后记中提到，这部口述自传原计划是上下两本，用了近两年时间完成。《上学记》从 1921 年讲到 1950 年，戛然而止。《上班记》尊重何先生的意见，暂不发表。不知再过十年二十年，是否会有一个合适的环境或契机，再续后面的故事。</p>\n<p>以书里引用济慈的墓志铭结尾，Here lies the man whose name was writ on water.</p>\n"},{"title":"我读《前端工程化：体系设计与实践》","abbrlink":"966a6548","date":"2020-04-12T22:35:19.000Z","_content":"\n《前端工程化》这本书也是买了很久，当时读了几个章节，觉得比较浅显。这个周末拿出来又从头到尾翻了一遍，总体的评价一般，可以看看目录脉络，打分 3/5。取决于读者的阅读速度，如果三天看完，我感觉不亏。\n\n这本书出版于2018年1月。书中使用的 Webpack 配置代码还是 V1，V2时期，目前已经更新到 v5 了。所以书中引用的代码估计实用性不太高，大概扫一眼，看看大致是干什么就可以。具体到现实问题，肯定还是得去现查最新的文档。\n\n第一章讲了一下前端的开发历史，SPA的出现以及优缺点，为什么需要前后端分离等问题。算是一些常见面试问题的总结吧。第二章提到的 Yeoman，15年我使用 angular.js 的时候，基本上项目都是用yo搭建。估计现在使用量也下降很多。目前的主流框架都提供了自己的 CLI 工具供用户快速搭建项目。日常开发中，一个团队里说不定好几个小组都有自己的脚手架生成器。第三章相对来说值得阅读。讲了一些常用loader，plugin的使用场景。module 和component 的区别，强制缓存和协商缓存，覆盖更新和增量更新，hash的作用，静态资源 CDN 部署等。对于入门的工程师来说，是一个比较好的了解构建的方向。再后面几章就有点浅尝辄止了，一笔带过。\n\n关于模块和组件的区别——这点我与作者意见相左。看到他引用的英文描述我觉得没有问题，但是中文解释(P102)我不能认同。根据英文的翻译，模块是设计实体，组件是运行实体。模块应该是包含组件的，所以他举得例子“一个button是模块，一个包括多个button的导航栏是一个组件”我认为是恰恰相反，导航栏是模块，模块中包含了若干按钮的组件。关于这点，作者也提到这两者定义的模糊，我这里也只是表述一下自己想法。\n\n剩下的我想谈一谈我对前端工程化的认识。“前端工程化”这个词，我是从准备回国，开始频繁和国内公司面试才得知的。每次面试都一定会有人问我，你怎么看待前端工程化。给我的感受是怎么前端不算工程吗？为什么还要特地说一下工程化呢？当时是确实不明白这个概念。我理解的工程，不论前端后端，都需要一套完善的编译，构建，部署，上线流程。在美国如果出现在JD里，可能会明确写需要你有CI/CD经验，需要你熟悉 git version control，需要你了解 docker 或者有 AWS 经验，会很明确技术栈。现在回过头去看中美之间的面试，侧重确实很不一样。在经验问题上，国内面试有点缥缈，问一些很大的问题，工程化的看法，有点像“道”；美国面试会问你AWS怎么玩，Jenkins怎么用，持续集成怎么弄，比较具体，有点像“术”。\n\n前几天，我想绘制一张前端的知识图谱，有一部分就是前端工程化。但是当时是用英文书写的，所以我一直在想一个贴合的翻译，想了好几个，都觉得很蠢。所以我突然想去查查在英文世界里，有没有这个概念。很遗憾到目前我还没有搜到针对这个词的很精准的对应。如果有朋友了解的，希望可以不吝赐教。不过我在搜索的过程中，找到 Uber Eats 技术团队写的一篇文章，如果感兴趣的话，可以看看 [Counting Calories: How We Improved the Performance and Developer Experience of UberEats.com](https://eng.uber.com/uber-eats-com-web-app-rewrite/)。文章的一部分提到了他们是怎么去做工程化的。但是依旧，没有“工程化”这种概念名词出现。所以如果要我选一个前端工程化的英文翻译，我想我可能会用 Automate。\n\n叫什么不重要，怎么做和为什么做比较重要。\n","source":"_posts/我读《前端工程化》.md","raw":"---\ntitle: 我读《前端工程化：体系设计与实践》\ncategories:\n  - life\n  - reading\ntags:\n  - books\n  - frontend\n  - 前端工程化\nabbrlink: 966a6548\ndate: 2020-04-12 15:35:19\n---\n\n《前端工程化》这本书也是买了很久，当时读了几个章节，觉得比较浅显。这个周末拿出来又从头到尾翻了一遍，总体的评价一般，可以看看目录脉络，打分 3/5。取决于读者的阅读速度，如果三天看完，我感觉不亏。\n\n这本书出版于2018年1月。书中使用的 Webpack 配置代码还是 V1，V2时期，目前已经更新到 v5 了。所以书中引用的代码估计实用性不太高，大概扫一眼，看看大致是干什么就可以。具体到现实问题，肯定还是得去现查最新的文档。\n\n第一章讲了一下前端的开发历史，SPA的出现以及优缺点，为什么需要前后端分离等问题。算是一些常见面试问题的总结吧。第二章提到的 Yeoman，15年我使用 angular.js 的时候，基本上项目都是用yo搭建。估计现在使用量也下降很多。目前的主流框架都提供了自己的 CLI 工具供用户快速搭建项目。日常开发中，一个团队里说不定好几个小组都有自己的脚手架生成器。第三章相对来说值得阅读。讲了一些常用loader，plugin的使用场景。module 和component 的区别，强制缓存和协商缓存，覆盖更新和增量更新，hash的作用，静态资源 CDN 部署等。对于入门的工程师来说，是一个比较好的了解构建的方向。再后面几章就有点浅尝辄止了，一笔带过。\n\n关于模块和组件的区别——这点我与作者意见相左。看到他引用的英文描述我觉得没有问题，但是中文解释(P102)我不能认同。根据英文的翻译，模块是设计实体，组件是运行实体。模块应该是包含组件的，所以他举得例子“一个button是模块，一个包括多个button的导航栏是一个组件”我认为是恰恰相反，导航栏是模块，模块中包含了若干按钮的组件。关于这点，作者也提到这两者定义的模糊，我这里也只是表述一下自己想法。\n\n剩下的我想谈一谈我对前端工程化的认识。“前端工程化”这个词，我是从准备回国，开始频繁和国内公司面试才得知的。每次面试都一定会有人问我，你怎么看待前端工程化。给我的感受是怎么前端不算工程吗？为什么还要特地说一下工程化呢？当时是确实不明白这个概念。我理解的工程，不论前端后端，都需要一套完善的编译，构建，部署，上线流程。在美国如果出现在JD里，可能会明确写需要你有CI/CD经验，需要你熟悉 git version control，需要你了解 docker 或者有 AWS 经验，会很明确技术栈。现在回过头去看中美之间的面试，侧重确实很不一样。在经验问题上，国内面试有点缥缈，问一些很大的问题，工程化的看法，有点像“道”；美国面试会问你AWS怎么玩，Jenkins怎么用，持续集成怎么弄，比较具体，有点像“术”。\n\n前几天，我想绘制一张前端的知识图谱，有一部分就是前端工程化。但是当时是用英文书写的，所以我一直在想一个贴合的翻译，想了好几个，都觉得很蠢。所以我突然想去查查在英文世界里，有没有这个概念。很遗憾到目前我还没有搜到针对这个词的很精准的对应。如果有朋友了解的，希望可以不吝赐教。不过我在搜索的过程中，找到 Uber Eats 技术团队写的一篇文章，如果感兴趣的话，可以看看 [Counting Calories: How We Improved the Performance and Developer Experience of UberEats.com](https://eng.uber.com/uber-eats-com-web-app-rewrite/)。文章的一部分提到了他们是怎么去做工程化的。但是依旧，没有“工程化”这种概念名词出现。所以如果要我选一个前端工程化的英文翻译，我想我可能会用 Automate。\n\n叫什么不重要，怎么做和为什么做比较重要。\n","slug":"我读《前端工程化》","published":1,"updated":"2022-03-03T14:02:26.892Z","_id":"cktk0j4210006b34n9e8pg3h1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>《前端工程化》这本书也是买了很久，当时读了几个章节，觉得比较浅显。这个周末拿出来又从头到尾翻了一遍，总体的评价一般，可以看看目录脉络，打分 3&#x2F;5。取决于读者的阅读速度，如果三天看完，我感觉不亏。</p>\n<p>这本书出版于2018年1月。书中使用的 Webpack 配置代码还是 V1，V2时期，目前已经更新到 v5 了。所以书中引用的代码估计实用性不太高，大概扫一眼，看看大致是干什么就可以。具体到现实问题，肯定还是得去现查最新的文档。</p>\n<p>第一章讲了一下前端的开发历史，SPA的出现以及优缺点，为什么需要前后端分离等问题。算是一些常见面试问题的总结吧。第二章提到的 Yeoman，15年我使用 angular.js 的时候，基本上项目都是用yo搭建。估计现在使用量也下降很多。目前的主流框架都提供了自己的 CLI 工具供用户快速搭建项目。日常开发中，一个团队里说不定好几个小组都有自己的脚手架生成器。第三章相对来说值得阅读。讲了一些常用loader，plugin的使用场景。module 和component 的区别，强制缓存和协商缓存，覆盖更新和增量更新，hash的作用，静态资源 CDN 部署等。对于入门的工程师来说，是一个比较好的了解构建的方向。再后面几章就有点浅尝辄止了，一笔带过。</p>\n<p>关于模块和组件的区别——这点我与作者意见相左。看到他引用的英文描述我觉得没有问题，但是中文解释(P102)我不能认同。根据英文的翻译，模块是设计实体，组件是运行实体。模块应该是包含组件的，所以他举得例子“一个button是模块，一个包括多个button的导航栏是一个组件”我认为是恰恰相反，导航栏是模块，模块中包含了若干按钮的组件。关于这点，作者也提到这两者定义的模糊，我这里也只是表述一下自己想法。</p>\n<p>剩下的我想谈一谈我对前端工程化的认识。“前端工程化”这个词，我是从准备回国，开始频繁和国内公司面试才得知的。每次面试都一定会有人问我，你怎么看待前端工程化。给我的感受是怎么前端不算工程吗？为什么还要特地说一下工程化呢？当时是确实不明白这个概念。我理解的工程，不论前端后端，都需要一套完善的编译，构建，部署，上线流程。在美国如果出现在JD里，可能会明确写需要你有CI&#x2F;CD经验，需要你熟悉 git version control，需要你了解 docker 或者有 AWS 经验，会很明确技术栈。现在回过头去看中美之间的面试，侧重确实很不一样。在经验问题上，国内面试有点缥缈，问一些很大的问题，工程化的看法，有点像“道”；美国面试会问你AWS怎么玩，Jenkins怎么用，持续集成怎么弄，比较具体，有点像“术”。</p>\n<p>前几天，我想绘制一张前端的知识图谱，有一部分就是前端工程化。但是当时是用英文书写的，所以我一直在想一个贴合的翻译，想了好几个，都觉得很蠢。所以我突然想去查查在英文世界里，有没有这个概念。很遗憾到目前我还没有搜到针对这个词的很精准的对应。如果有朋友了解的，希望可以不吝赐教。不过我在搜索的过程中，找到 Uber Eats 技术团队写的一篇文章，如果感兴趣的话，可以看看 <a href=\"https://eng.uber.com/uber-eats-com-web-app-rewrite/\">Counting Calories: How We Improved the Performance and Developer Experience of UberEats.com</a>。文章的一部分提到了他们是怎么去做工程化的。但是依旧，没有“工程化”这种概念名词出现。所以如果要我选一个前端工程化的英文翻译，我想我可能会用 Automate。</p>\n<p>叫什么不重要，怎么做和为什么做比较重要。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>《前端工程化》这本书也是买了很久，当时读了几个章节，觉得比较浅显。这个周末拿出来又从头到尾翻了一遍，总体的评价一般，可以看看目录脉络，打分 3&#x2F;5。取决于读者的阅读速度，如果三天看完，我感觉不亏。</p>\n<p>这本书出版于2018年1月。书中使用的 Webpack 配置代码还是 V1，V2时期，目前已经更新到 v5 了。所以书中引用的代码估计实用性不太高，大概扫一眼，看看大致是干什么就可以。具体到现实问题，肯定还是得去现查最新的文档。</p>\n<p>第一章讲了一下前端的开发历史，SPA的出现以及优缺点，为什么需要前后端分离等问题。算是一些常见面试问题的总结吧。第二章提到的 Yeoman，15年我使用 angular.js 的时候，基本上项目都是用yo搭建。估计现在使用量也下降很多。目前的主流框架都提供了自己的 CLI 工具供用户快速搭建项目。日常开发中，一个团队里说不定好几个小组都有自己的脚手架生成器。第三章相对来说值得阅读。讲了一些常用loader，plugin的使用场景。module 和component 的区别，强制缓存和协商缓存，覆盖更新和增量更新，hash的作用，静态资源 CDN 部署等。对于入门的工程师来说，是一个比较好的了解构建的方向。再后面几章就有点浅尝辄止了，一笔带过。</p>\n<p>关于模块和组件的区别——这点我与作者意见相左。看到他引用的英文描述我觉得没有问题，但是中文解释(P102)我不能认同。根据英文的翻译，模块是设计实体，组件是运行实体。模块应该是包含组件的，所以他举得例子“一个button是模块，一个包括多个button的导航栏是一个组件”我认为是恰恰相反，导航栏是模块，模块中包含了若干按钮的组件。关于这点，作者也提到这两者定义的模糊，我这里也只是表述一下自己想法。</p>\n<p>剩下的我想谈一谈我对前端工程化的认识。“前端工程化”这个词，我是从准备回国，开始频繁和国内公司面试才得知的。每次面试都一定会有人问我，你怎么看待前端工程化。给我的感受是怎么前端不算工程吗？为什么还要特地说一下工程化呢？当时是确实不明白这个概念。我理解的工程，不论前端后端，都需要一套完善的编译，构建，部署，上线流程。在美国如果出现在JD里，可能会明确写需要你有CI&#x2F;CD经验，需要你熟悉 git version control，需要你了解 docker 或者有 AWS 经验，会很明确技术栈。现在回过头去看中美之间的面试，侧重确实很不一样。在经验问题上，国内面试有点缥缈，问一些很大的问题，工程化的看法，有点像“道”；美国面试会问你AWS怎么玩，Jenkins怎么用，持续集成怎么弄，比较具体，有点像“术”。</p>\n<p>前几天，我想绘制一张前端的知识图谱，有一部分就是前端工程化。但是当时是用英文书写的，所以我一直在想一个贴合的翻译，想了好几个，都觉得很蠢。所以我突然想去查查在英文世界里，有没有这个概念。很遗憾到目前我还没有搜到针对这个词的很精准的对应。如果有朋友了解的，希望可以不吝赐教。不过我在搜索的过程中，找到 Uber Eats 技术团队写的一篇文章，如果感兴趣的话，可以看看 <a href=\"https://eng.uber.com/uber-eats-com-web-app-rewrite/\">Counting Calories: How We Improved the Performance and Developer Experience of UberEats.com</a>。文章的一部分提到了他们是怎么去做工程化的。但是依旧，没有“工程化”这种概念名词出现。所以如果要我选一个前端工程化的英文翻译，我想我可能会用 Automate。</p>\n<p>叫什么不重要，怎么做和为什么做比较重要。</p>\n"},{"title":"我的2021年终总结","abbrlink":"801a1f00","date":"2022-01-12T05:08:25.000Z","_content":"\n一年结束，才感觉时间走的悄无声息。最近刚好在规划今年的工作目标，静下来思考了一下过去一年的变化，写成文章，即算总结也算规划。不想写的太过严肃正经，容易造成心理压力，反而影响效率。大致分这几个方面。\n\n### 工作\n\n去年最大的变化是换工作，在滴滴工作三年整，离职加入了 SmartNews。加入新公司以来至今有小半年，逐渐习惯了新的工作氛围和节奏。和国内互联网比较，外企的工作节奏缓慢很多，不论是讨论项目细节还是开发上线，事情通常会讨论的比较细致才会进入下一步。工作环境上，由于需要和海外同事开会，对英语要求很高。刚加入的时候确实有些生疏，毕竟三年没用，听力口语退化很多，比较明显的是一些技术名词，常用句式和日常寒暄，话到嘴边想不起来。比如会议开始前结束后，几个人面面相觑，感觉这个时候应该说点什么，但是又想不起来该说什么。之后英语逐步捡回来了，聊聊周末计划，节日旅行，放松很多，总体感觉更加适应和自信了。\n\n除了英语，也熟悉了可能现在外企比较流行的那套工具和流程，线上会议，code review，gsuite，jira，slack，figma，notion，aws 等。在互联网公司，可能大家更喜欢私聊，拉群来讨论解决问题。在现公司，可能更倾向于在 slack channel 中公开讨论，所有人都可以看到。打个比方，在滴滴，我是网约车的前端，作为一个打工仔我不知道国际化的前端今天在做什么，解决什么问题，遇到什么 bug，当然你可以舔着脸加入别人的群潜水，但通常情况下你不会这么做，因为很快这个群就没人说话了。基于频道的沟通方式，则没有相关的心理负担。这也是一个比较大的感受变化。但是在事项跟进，回溯问题方面，还是群组更方便。\n\n刚接触 notion 时我感觉很难用，对 markdown 的支持不是很完善，但是在熟悉功能和模板之后，开始尝到甜头。现在我几乎所有文档都通过 obsidian 写作， notion 管理，包括任务清单，个人笔记，读书进度，以及每日习惯。既方便规划，也便于在季末年中回顾自己的成果。最近才刚刚开始，先运行一段时间看看效果再来分享。\n\n今年第一季度可能会做一些 user acquisition 的事情，借这个机会了解 acquisition, engagement, retention 这个链路上的知识和细节，希望能有所收获。\n\n### 生活\n\n个人生活方面，有些改变，但没完全改变。\n\n今年我又搬了一次家，从海淀后厂村搬到了朝阳大悦城，生活的气息发生了很大的变化。算了一下，从 18 岁离开家上大学，到这一次，住过的宿舍、客厅、租房加起来，一共搬了 10 次家了。有种吉普赛人的感觉，浪迹天涯。\n\n习惯方面，最近在看的《why we sleep》 给我一些触动。而且随着年纪增长，越发要注意身体，早睡早起。得益于公司的健身福利，我每周去一次健身房，上一次游泳课（最近因为元旦回家，节奏有些中断）。在教练的指导下，我感觉就快学会自由泳了。今年希望可以更加熟练，有机会的话，学会自由泳的转身，我觉得这个真的很酷。频率上希望能保持并增加到每周三次训练。\n\n七月我大半月没着家，去了一趟西藏。这是我第一次一个人出去旅游。虽然一个人吃饭看电影是驾轻就熟，但是独自旅行还是新手上路。说起西藏，原来大学毕业准备和朋友骑行进藏，后因他人的自行车被盗而搁置，一晃十年。这次选择坐火车，一个是因为时间充裕，再就是因为以后估计也找不到和我一样闲得蛋疼的人了，所以也算是尝试了一次 45 小时的铁道之旅。此行最远去到了日喀则的扎什伦布寺，最高去了那根拉山口 5230 米，一共大约十四天，即便如此，还是走马观花，希望以后还有机会再去。因为是坐火车进藏，两晚没洗澡，到拉萨住下酒店第一件事就是洗澡，而且每晚喝酒，感觉自己非常叛逆。唯一的遗憾是当时行动力不强，回家后没有及时写下游记，时间过去，冲动也没有了。\n\n九月去了一趟腾格里徒步，在沙漠里最长的一天走了二十多公里，完全是人生的新体验。记得第一次搭帐篷，旁边人要么是露营老手，要么是男女搭配，我一个人手足无措，不知道该怎么办，只能硬着头皮去问领队。好在一回生二回熟，第二天就非常熟练了。在沙漠里看着夕阳落下，如 Bob Dylan 唱的，'I can see for myself that the sun is sinking, How I wish you were here to see'，非常应景。那段时间正是中秋，月明星稀，我在帐篷里一边喝着啤酒，一遍赏月，印象深刻。\n\n在十二月份，我删掉了手机上的微博脉脉知乎，关掉了绝大部分应用的推送通知，刻意减少手机上碎片化时间的阅读，晚上手机也不再带进卧室。我发现即没有紧急的事务需要在半夜处理，也没有多少人会找你——当然也可能是因为单身的缘故。最近两周我的手机时间稳定在四小时甚至更低，希望可以继续保持。\n\n离开互联网行业后，短期感觉也没有非常大的压力，距离所谓的 35 岁也还有一段距离。在这个档口，我希望可以解决单身的问题，以及多一些对职业和未来的思考和规划。简单来说，何去何从。\n\n### 成长\n\n过去一年，换了一个全新的领域，从 saas 数据产品到 c 端手机页面。技术方面进步不大，来到新公司后，开始转用 Svelte。我个人对它看待比较中立，学习成本有一些，主要是一些指令需要熟悉。文档不难，知识点也不多，逻辑写起来比较贴合原生 JavaScript。虽然在前端领域关注度上升很快，但从国内外的开发生态来看，还处于比较初级阶段，而且我感觉在国内 React Vue 牢牢把握前端领域，加上现在行业不够蓬勃，Svelte 能取得成功的可能性不高（没有）。\n\n除了 svelte 以外，也开始学习 aws 相关的知识和应用。这点也是和国内互联网前端一个比较大的不同。国内基本都是搭建自己的部署上线，管理分析平台，自己自足。外企可能就是 aws 一把梭，我使用之后的感觉就是，功能确实强大，体验属实拉跨。\n\n今年我的技术方向，或者说技术投资，无可争议的是 web3。为什么？当下热度很高是一个方面。另外，在 v2ex 和 Reddit 上也逐渐可以看到 solidity，dapp 相关的招聘广告，越来越多公司开始从事相关开发，我关注的一些技术账号也在向这方面探索布道。所以今年我计划学习 solidity。坦率来说，我对 web3 持谨慎的态度，而且我对它的感知很模糊，仿佛在看一群疯子跳舞。我想我需要对它有更深的了解，才能做出下一步判断。\n\n除此之外，我还会去学习一些 engineering/project management 的知识。这也是我对未来可能的职业规划的方向之一。我希望去了解 EM 和 PM 的 scope 和 skill model。现在我对这些还十分模糊，Coursera 上有几门入门课程，希望上完后会有一些新的认知。\n\n工作之余的时间是有限的，还需要分担时间给家庭，社交等等。把有限的时间投入到更值得和感兴趣的领域。少想糟心事，多读圣贤书。\n\n### 读书\n\n根据豆瓣统计，去年我看了 17 本书，20 年和 19 年这个数字分别是 31 和 27。相较于前两年来说，实在不太好看。当然回头来看也有些客观原因，前半年差不多一直在刷题准备面试，无心看书；离职前期外出旅行一圈，也无心看书；换工作之后绝望的三个月通勤，更无心看书。直到年底搬了家收拾妥当才有时间静下心来读点，差不多就已经十一月出头了，一年接近尾声。\n\n今年计划读 36 本书，一个月三本的样子，按照目前的时间规划来看，应该可以达到。按照 OKR score 的标准来看，36 是 1，30 是 0.8，低于 30 是 0.6。\n\n关于看的内容，今年我希望增加涉猎一些关于教育，心理领域，以及英文读物。\n\n有朋友推荐我陀思妥耶夫斯基的《卡拉马佐夫兄弟》，我知道这是一本好书，但是一直没有勇气开始——因为太长，人名也是，希望今年可以沉下心来看完。\n\n大概先写这么多。\n\nPS：这篇文章花了 8 个番茄时间。\n","source":"_posts/我的2021年终总结.md","raw":"---\ntitle: 我的2021年终总结\ncategories:\n  - life\n  - summary\nabbrlink: 801a1f00\ndate: 2022-01-11 21:08:25\ntags:\n---\n\n一年结束，才感觉时间走的悄无声息。最近刚好在规划今年的工作目标，静下来思考了一下过去一年的变化，写成文章，即算总结也算规划。不想写的太过严肃正经，容易造成心理压力，反而影响效率。大致分这几个方面。\n\n### 工作\n\n去年最大的变化是换工作，在滴滴工作三年整，离职加入了 SmartNews。加入新公司以来至今有小半年，逐渐习惯了新的工作氛围和节奏。和国内互联网比较，外企的工作节奏缓慢很多，不论是讨论项目细节还是开发上线，事情通常会讨论的比较细致才会进入下一步。工作环境上，由于需要和海外同事开会，对英语要求很高。刚加入的时候确实有些生疏，毕竟三年没用，听力口语退化很多，比较明显的是一些技术名词，常用句式和日常寒暄，话到嘴边想不起来。比如会议开始前结束后，几个人面面相觑，感觉这个时候应该说点什么，但是又想不起来该说什么。之后英语逐步捡回来了，聊聊周末计划，节日旅行，放松很多，总体感觉更加适应和自信了。\n\n除了英语，也熟悉了可能现在外企比较流行的那套工具和流程，线上会议，code review，gsuite，jira，slack，figma，notion，aws 等。在互联网公司，可能大家更喜欢私聊，拉群来讨论解决问题。在现公司，可能更倾向于在 slack channel 中公开讨论，所有人都可以看到。打个比方，在滴滴，我是网约车的前端，作为一个打工仔我不知道国际化的前端今天在做什么，解决什么问题，遇到什么 bug，当然你可以舔着脸加入别人的群潜水，但通常情况下你不会这么做，因为很快这个群就没人说话了。基于频道的沟通方式，则没有相关的心理负担。这也是一个比较大的感受变化。但是在事项跟进，回溯问题方面，还是群组更方便。\n\n刚接触 notion 时我感觉很难用，对 markdown 的支持不是很完善，但是在熟悉功能和模板之后，开始尝到甜头。现在我几乎所有文档都通过 obsidian 写作， notion 管理，包括任务清单，个人笔记，读书进度，以及每日习惯。既方便规划，也便于在季末年中回顾自己的成果。最近才刚刚开始，先运行一段时间看看效果再来分享。\n\n今年第一季度可能会做一些 user acquisition 的事情，借这个机会了解 acquisition, engagement, retention 这个链路上的知识和细节，希望能有所收获。\n\n### 生活\n\n个人生活方面，有些改变，但没完全改变。\n\n今年我又搬了一次家，从海淀后厂村搬到了朝阳大悦城，生活的气息发生了很大的变化。算了一下，从 18 岁离开家上大学，到这一次，住过的宿舍、客厅、租房加起来，一共搬了 10 次家了。有种吉普赛人的感觉，浪迹天涯。\n\n习惯方面，最近在看的《why we sleep》 给我一些触动。而且随着年纪增长，越发要注意身体，早睡早起。得益于公司的健身福利，我每周去一次健身房，上一次游泳课（最近因为元旦回家，节奏有些中断）。在教练的指导下，我感觉就快学会自由泳了。今年希望可以更加熟练，有机会的话，学会自由泳的转身，我觉得这个真的很酷。频率上希望能保持并增加到每周三次训练。\n\n七月我大半月没着家，去了一趟西藏。这是我第一次一个人出去旅游。虽然一个人吃饭看电影是驾轻就熟，但是独自旅行还是新手上路。说起西藏，原来大学毕业准备和朋友骑行进藏，后因他人的自行车被盗而搁置，一晃十年。这次选择坐火车，一个是因为时间充裕，再就是因为以后估计也找不到和我一样闲得蛋疼的人了，所以也算是尝试了一次 45 小时的铁道之旅。此行最远去到了日喀则的扎什伦布寺，最高去了那根拉山口 5230 米，一共大约十四天，即便如此，还是走马观花，希望以后还有机会再去。因为是坐火车进藏，两晚没洗澡，到拉萨住下酒店第一件事就是洗澡，而且每晚喝酒，感觉自己非常叛逆。唯一的遗憾是当时行动力不强，回家后没有及时写下游记，时间过去，冲动也没有了。\n\n九月去了一趟腾格里徒步，在沙漠里最长的一天走了二十多公里，完全是人生的新体验。记得第一次搭帐篷，旁边人要么是露营老手，要么是男女搭配，我一个人手足无措，不知道该怎么办，只能硬着头皮去问领队。好在一回生二回熟，第二天就非常熟练了。在沙漠里看着夕阳落下，如 Bob Dylan 唱的，'I can see for myself that the sun is sinking, How I wish you were here to see'，非常应景。那段时间正是中秋，月明星稀，我在帐篷里一边喝着啤酒，一遍赏月，印象深刻。\n\n在十二月份，我删掉了手机上的微博脉脉知乎，关掉了绝大部分应用的推送通知，刻意减少手机上碎片化时间的阅读，晚上手机也不再带进卧室。我发现即没有紧急的事务需要在半夜处理，也没有多少人会找你——当然也可能是因为单身的缘故。最近两周我的手机时间稳定在四小时甚至更低，希望可以继续保持。\n\n离开互联网行业后，短期感觉也没有非常大的压力，距离所谓的 35 岁也还有一段距离。在这个档口，我希望可以解决单身的问题，以及多一些对职业和未来的思考和规划。简单来说，何去何从。\n\n### 成长\n\n过去一年，换了一个全新的领域，从 saas 数据产品到 c 端手机页面。技术方面进步不大，来到新公司后，开始转用 Svelte。我个人对它看待比较中立，学习成本有一些，主要是一些指令需要熟悉。文档不难，知识点也不多，逻辑写起来比较贴合原生 JavaScript。虽然在前端领域关注度上升很快，但从国内外的开发生态来看，还处于比较初级阶段，而且我感觉在国内 React Vue 牢牢把握前端领域，加上现在行业不够蓬勃，Svelte 能取得成功的可能性不高（没有）。\n\n除了 svelte 以外，也开始学习 aws 相关的知识和应用。这点也是和国内互联网前端一个比较大的不同。国内基本都是搭建自己的部署上线，管理分析平台，自己自足。外企可能就是 aws 一把梭，我使用之后的感觉就是，功能确实强大，体验属实拉跨。\n\n今年我的技术方向，或者说技术投资，无可争议的是 web3。为什么？当下热度很高是一个方面。另外，在 v2ex 和 Reddit 上也逐渐可以看到 solidity，dapp 相关的招聘广告，越来越多公司开始从事相关开发，我关注的一些技术账号也在向这方面探索布道。所以今年我计划学习 solidity。坦率来说，我对 web3 持谨慎的态度，而且我对它的感知很模糊，仿佛在看一群疯子跳舞。我想我需要对它有更深的了解，才能做出下一步判断。\n\n除此之外，我还会去学习一些 engineering/project management 的知识。这也是我对未来可能的职业规划的方向之一。我希望去了解 EM 和 PM 的 scope 和 skill model。现在我对这些还十分模糊，Coursera 上有几门入门课程，希望上完后会有一些新的认知。\n\n工作之余的时间是有限的，还需要分担时间给家庭，社交等等。把有限的时间投入到更值得和感兴趣的领域。少想糟心事，多读圣贤书。\n\n### 读书\n\n根据豆瓣统计，去年我看了 17 本书，20 年和 19 年这个数字分别是 31 和 27。相较于前两年来说，实在不太好看。当然回头来看也有些客观原因，前半年差不多一直在刷题准备面试，无心看书；离职前期外出旅行一圈，也无心看书；换工作之后绝望的三个月通勤，更无心看书。直到年底搬了家收拾妥当才有时间静下心来读点，差不多就已经十一月出头了，一年接近尾声。\n\n今年计划读 36 本书，一个月三本的样子，按照目前的时间规划来看，应该可以达到。按照 OKR score 的标准来看，36 是 1，30 是 0.8，低于 30 是 0.6。\n\n关于看的内容，今年我希望增加涉猎一些关于教育，心理领域，以及英文读物。\n\n有朋友推荐我陀思妥耶夫斯基的《卡拉马佐夫兄弟》，我知道这是一本好书，但是一直没有勇气开始——因为太长，人名也是，希望今年可以沉下心来看完。\n\n大概先写这么多。\n\nPS：这篇文章花了 8 个番茄时间。\n","slug":"我的2021年终总结","published":1,"updated":"2022-02-13T13:15:05.231Z","_id":"ckzlahso90000e2s6ad7ich1m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一年结束，才感觉时间走的悄无声息。最近刚好在规划今年的工作目标，静下来思考了一下过去一年的变化，写成文章，即算总结也算规划。不想写的太过严肃正经，容易造成心理压力，反而影响效率。大致分这几个方面。</p>\n<h3 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h3><p>去年最大的变化是换工作，在滴滴工作三年整，离职加入了 SmartNews。加入新公司以来至今有小半年，逐渐习惯了新的工作氛围和节奏。和国内互联网比较，外企的工作节奏缓慢很多，不论是讨论项目细节还是开发上线，事情通常会讨论的比较细致才会进入下一步。工作环境上，由于需要和海外同事开会，对英语要求很高。刚加入的时候确实有些生疏，毕竟三年没用，听力口语退化很多，比较明显的是一些技术名词，常用句式和日常寒暄，话到嘴边想不起来。比如会议开始前结束后，几个人面面相觑，感觉这个时候应该说点什么，但是又想不起来该说什么。之后英语逐步捡回来了，聊聊周末计划，节日旅行，放松很多，总体感觉更加适应和自信了。</p>\n<p>除了英语，也熟悉了可能现在外企比较流行的那套工具和流程，线上会议，code review，gsuite，jira，slack，figma，notion，aws 等。在互联网公司，可能大家更喜欢私聊，拉群来讨论解决问题。在现公司，可能更倾向于在 slack channel 中公开讨论，所有人都可以看到。打个比方，在滴滴，我是网约车的前端，作为一个打工仔我不知道国际化的前端今天在做什么，解决什么问题，遇到什么 bug，当然你可以舔着脸加入别人的群潜水，但通常情况下你不会这么做，因为很快这个群就没人说话了。基于频道的沟通方式，则没有相关的心理负担。这也是一个比较大的感受变化。但是在事项跟进，回溯问题方面，还是群组更方便。</p>\n<p>刚接触 notion 时我感觉很难用，对 markdown 的支持不是很完善，但是在熟悉功能和模板之后，开始尝到甜头。现在我几乎所有文档都通过 obsidian 写作， notion 管理，包括任务清单，个人笔记，读书进度，以及每日习惯。既方便规划，也便于在季末年中回顾自己的成果。最近才刚刚开始，先运行一段时间看看效果再来分享。</p>\n<p>今年第一季度可能会做一些 user acquisition 的事情，借这个机会了解 acquisition, engagement, retention 这个链路上的知识和细节，希望能有所收获。</p>\n<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>个人生活方面，有些改变，但没完全改变。</p>\n<p>今年我又搬了一次家，从海淀后厂村搬到了朝阳大悦城，生活的气息发生了很大的变化。算了一下，从 18 岁离开家上大学，到这一次，住过的宿舍、客厅、租房加起来，一共搬了 10 次家了。有种吉普赛人的感觉，浪迹天涯。</p>\n<p>习惯方面，最近在看的《why we sleep》 给我一些触动。而且随着年纪增长，越发要注意身体，早睡早起。得益于公司的健身福利，我每周去一次健身房，上一次游泳课（最近因为元旦回家，节奏有些中断）。在教练的指导下，我感觉就快学会自由泳了。今年希望可以更加熟练，有机会的话，学会自由泳的转身，我觉得这个真的很酷。频率上希望能保持并增加到每周三次训练。</p>\n<p>七月我大半月没着家，去了一趟西藏。这是我第一次一个人出去旅游。虽然一个人吃饭看电影是驾轻就熟，但是独自旅行还是新手上路。说起西藏，原来大学毕业准备和朋友骑行进藏，后因他人的自行车被盗而搁置，一晃十年。这次选择坐火车，一个是因为时间充裕，再就是因为以后估计也找不到和我一样闲得蛋疼的人了，所以也算是尝试了一次 45 小时的铁道之旅。此行最远去到了日喀则的扎什伦布寺，最高去了那根拉山口 5230 米，一共大约十四天，即便如此，还是走马观花，希望以后还有机会再去。因为是坐火车进藏，两晚没洗澡，到拉萨住下酒店第一件事就是洗澡，而且每晚喝酒，感觉自己非常叛逆。唯一的遗憾是当时行动力不强，回家后没有及时写下游记，时间过去，冲动也没有了。</p>\n<p>九月去了一趟腾格里徒步，在沙漠里最长的一天走了二十多公里，完全是人生的新体验。记得第一次搭帐篷，旁边人要么是露营老手，要么是男女搭配，我一个人手足无措，不知道该怎么办，只能硬着头皮去问领队。好在一回生二回熟，第二天就非常熟练了。在沙漠里看着夕阳落下，如 Bob Dylan 唱的，’I can see for myself that the sun is sinking, How I wish you were here to see’，非常应景。那段时间正是中秋，月明星稀，我在帐篷里一边喝着啤酒，一遍赏月，印象深刻。</p>\n<p>在十二月份，我删掉了手机上的微博脉脉知乎，关掉了绝大部分应用的推送通知，刻意减少手机上碎片化时间的阅读，晚上手机也不再带进卧室。我发现即没有紧急的事务需要在半夜处理，也没有多少人会找你——当然也可能是因为单身的缘故。最近两周我的手机时间稳定在四小时甚至更低，希望可以继续保持。</p>\n<p>离开互联网行业后，短期感觉也没有非常大的压力，距离所谓的 35 岁也还有一段距离。在这个档口，我希望可以解决单身的问题，以及多一些对职业和未来的思考和规划。简单来说，何去何从。</p>\n<h3 id=\"成长\"><a href=\"#成长\" class=\"headerlink\" title=\"成长\"></a>成长</h3><p>过去一年，换了一个全新的领域，从 saas 数据产品到 c 端手机页面。技术方面进步不大，来到新公司后，开始转用 Svelte。我个人对它看待比较中立，学习成本有一些，主要是一些指令需要熟悉。文档不难，知识点也不多，逻辑写起来比较贴合原生 JavaScript。虽然在前端领域关注度上升很快，但从国内外的开发生态来看，还处于比较初级阶段，而且我感觉在国内 React Vue 牢牢把握前端领域，加上现在行业不够蓬勃，Svelte 能取得成功的可能性不高（没有）。</p>\n<p>除了 svelte 以外，也开始学习 aws 相关的知识和应用。这点也是和国内互联网前端一个比较大的不同。国内基本都是搭建自己的部署上线，管理分析平台，自己自足。外企可能就是 aws 一把梭，我使用之后的感觉就是，功能确实强大，体验属实拉跨。</p>\n<p>今年我的技术方向，或者说技术投资，无可争议的是 web3。为什么？当下热度很高是一个方面。另外，在 v2ex 和 Reddit 上也逐渐可以看到 solidity，dapp 相关的招聘广告，越来越多公司开始从事相关开发，我关注的一些技术账号也在向这方面探索布道。所以今年我计划学习 solidity。坦率来说，我对 web3 持谨慎的态度，而且我对它的感知很模糊，仿佛在看一群疯子跳舞。我想我需要对它有更深的了解，才能做出下一步判断。</p>\n<p>除此之外，我还会去学习一些 engineering&#x2F;project management 的知识。这也是我对未来可能的职业规划的方向之一。我希望去了解 EM 和 PM 的 scope 和 skill model。现在我对这些还十分模糊，Coursera 上有几门入门课程，希望上完后会有一些新的认知。</p>\n<p>工作之余的时间是有限的，还需要分担时间给家庭，社交等等。把有限的时间投入到更值得和感兴趣的领域。少想糟心事，多读圣贤书。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>根据豆瓣统计，去年我看了 17 本书，20 年和 19 年这个数字分别是 31 和 27。相较于前两年来说，实在不太好看。当然回头来看也有些客观原因，前半年差不多一直在刷题准备面试，无心看书；离职前期外出旅行一圈，也无心看书；换工作之后绝望的三个月通勤，更无心看书。直到年底搬了家收拾妥当才有时间静下心来读点，差不多就已经十一月出头了，一年接近尾声。</p>\n<p>今年计划读 36 本书，一个月三本的样子，按照目前的时间规划来看，应该可以达到。按照 OKR score 的标准来看，36 是 1，30 是 0.8，低于 30 是 0.6。</p>\n<p>关于看的内容，今年我希望增加涉猎一些关于教育，心理领域，以及英文读物。</p>\n<p>有朋友推荐我陀思妥耶夫斯基的《卡拉马佐夫兄弟》，我知道这是一本好书，但是一直没有勇气开始——因为太长，人名也是，希望今年可以沉下心来看完。</p>\n<p>大概先写这么多。</p>\n<p>PS：这篇文章花了 8 个番茄时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一年结束，才感觉时间走的悄无声息。最近刚好在规划今年的工作目标，静下来思考了一下过去一年的变化，写成文章，即算总结也算规划。不想写的太过严肃正经，容易造成心理压力，反而影响效率。大致分这几个方面。</p>\n<h3 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h3><p>去年最大的变化是换工作，在滴滴工作三年整，离职加入了 SmartNews。加入新公司以来至今有小半年，逐渐习惯了新的工作氛围和节奏。和国内互联网比较，外企的工作节奏缓慢很多，不论是讨论项目细节还是开发上线，事情通常会讨论的比较细致才会进入下一步。工作环境上，由于需要和海外同事开会，对英语要求很高。刚加入的时候确实有些生疏，毕竟三年没用，听力口语退化很多，比较明显的是一些技术名词，常用句式和日常寒暄，话到嘴边想不起来。比如会议开始前结束后，几个人面面相觑，感觉这个时候应该说点什么，但是又想不起来该说什么。之后英语逐步捡回来了，聊聊周末计划，节日旅行，放松很多，总体感觉更加适应和自信了。</p>\n<p>除了英语，也熟悉了可能现在外企比较流行的那套工具和流程，线上会议，code review，gsuite，jira，slack，figma，notion，aws 等。在互联网公司，可能大家更喜欢私聊，拉群来讨论解决问题。在现公司，可能更倾向于在 slack channel 中公开讨论，所有人都可以看到。打个比方，在滴滴，我是网约车的前端，作为一个打工仔我不知道国际化的前端今天在做什么，解决什么问题，遇到什么 bug，当然你可以舔着脸加入别人的群潜水，但通常情况下你不会这么做，因为很快这个群就没人说话了。基于频道的沟通方式，则没有相关的心理负担。这也是一个比较大的感受变化。但是在事项跟进，回溯问题方面，还是群组更方便。</p>\n<p>刚接触 notion 时我感觉很难用，对 markdown 的支持不是很完善，但是在熟悉功能和模板之后，开始尝到甜头。现在我几乎所有文档都通过 obsidian 写作， notion 管理，包括任务清单，个人笔记，读书进度，以及每日习惯。既方便规划，也便于在季末年中回顾自己的成果。最近才刚刚开始，先运行一段时间看看效果再来分享。</p>\n<p>今年第一季度可能会做一些 user acquisition 的事情，借这个机会了解 acquisition, engagement, retention 这个链路上的知识和细节，希望能有所收获。</p>\n<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>个人生活方面，有些改变，但没完全改变。</p>\n<p>今年我又搬了一次家，从海淀后厂村搬到了朝阳大悦城，生活的气息发生了很大的变化。算了一下，从 18 岁离开家上大学，到这一次，住过的宿舍、客厅、租房加起来，一共搬了 10 次家了。有种吉普赛人的感觉，浪迹天涯。</p>\n<p>习惯方面，最近在看的《why we sleep》 给我一些触动。而且随着年纪增长，越发要注意身体，早睡早起。得益于公司的健身福利，我每周去一次健身房，上一次游泳课（最近因为元旦回家，节奏有些中断）。在教练的指导下，我感觉就快学会自由泳了。今年希望可以更加熟练，有机会的话，学会自由泳的转身，我觉得这个真的很酷。频率上希望能保持并增加到每周三次训练。</p>\n<p>七月我大半月没着家，去了一趟西藏。这是我第一次一个人出去旅游。虽然一个人吃饭看电影是驾轻就熟，但是独自旅行还是新手上路。说起西藏，原来大学毕业准备和朋友骑行进藏，后因他人的自行车被盗而搁置，一晃十年。这次选择坐火车，一个是因为时间充裕，再就是因为以后估计也找不到和我一样闲得蛋疼的人了，所以也算是尝试了一次 45 小时的铁道之旅。此行最远去到了日喀则的扎什伦布寺，最高去了那根拉山口 5230 米，一共大约十四天，即便如此，还是走马观花，希望以后还有机会再去。因为是坐火车进藏，两晚没洗澡，到拉萨住下酒店第一件事就是洗澡，而且每晚喝酒，感觉自己非常叛逆。唯一的遗憾是当时行动力不强，回家后没有及时写下游记，时间过去，冲动也没有了。</p>\n<p>九月去了一趟腾格里徒步，在沙漠里最长的一天走了二十多公里，完全是人生的新体验。记得第一次搭帐篷，旁边人要么是露营老手，要么是男女搭配，我一个人手足无措，不知道该怎么办，只能硬着头皮去问领队。好在一回生二回熟，第二天就非常熟练了。在沙漠里看着夕阳落下，如 Bob Dylan 唱的，’I can see for myself that the sun is sinking, How I wish you were here to see’，非常应景。那段时间正是中秋，月明星稀，我在帐篷里一边喝着啤酒，一遍赏月，印象深刻。</p>\n<p>在十二月份，我删掉了手机上的微博脉脉知乎，关掉了绝大部分应用的推送通知，刻意减少手机上碎片化时间的阅读，晚上手机也不再带进卧室。我发现即没有紧急的事务需要在半夜处理，也没有多少人会找你——当然也可能是因为单身的缘故。最近两周我的手机时间稳定在四小时甚至更低，希望可以继续保持。</p>\n<p>离开互联网行业后，短期感觉也没有非常大的压力，距离所谓的 35 岁也还有一段距离。在这个档口，我希望可以解决单身的问题，以及多一些对职业和未来的思考和规划。简单来说，何去何从。</p>\n<h3 id=\"成长\"><a href=\"#成长\" class=\"headerlink\" title=\"成长\"></a>成长</h3><p>过去一年，换了一个全新的领域，从 saas 数据产品到 c 端手机页面。技术方面进步不大，来到新公司后，开始转用 Svelte。我个人对它看待比较中立，学习成本有一些，主要是一些指令需要熟悉。文档不难，知识点也不多，逻辑写起来比较贴合原生 JavaScript。虽然在前端领域关注度上升很快，但从国内外的开发生态来看，还处于比较初级阶段，而且我感觉在国内 React Vue 牢牢把握前端领域，加上现在行业不够蓬勃，Svelte 能取得成功的可能性不高（没有）。</p>\n<p>除了 svelte 以外，也开始学习 aws 相关的知识和应用。这点也是和国内互联网前端一个比较大的不同。国内基本都是搭建自己的部署上线，管理分析平台，自己自足。外企可能就是 aws 一把梭，我使用之后的感觉就是，功能确实强大，体验属实拉跨。</p>\n<p>今年我的技术方向，或者说技术投资，无可争议的是 web3。为什么？当下热度很高是一个方面。另外，在 v2ex 和 Reddit 上也逐渐可以看到 solidity，dapp 相关的招聘广告，越来越多公司开始从事相关开发，我关注的一些技术账号也在向这方面探索布道。所以今年我计划学习 solidity。坦率来说，我对 web3 持谨慎的态度，而且我对它的感知很模糊，仿佛在看一群疯子跳舞。我想我需要对它有更深的了解，才能做出下一步判断。</p>\n<p>除此之外，我还会去学习一些 engineering&#x2F;project management 的知识。这也是我对未来可能的职业规划的方向之一。我希望去了解 EM 和 PM 的 scope 和 skill model。现在我对这些还十分模糊，Coursera 上有几门入门课程，希望上完后会有一些新的认知。</p>\n<p>工作之余的时间是有限的，还需要分担时间给家庭，社交等等。把有限的时间投入到更值得和感兴趣的领域。少想糟心事，多读圣贤书。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>根据豆瓣统计，去年我看了 17 本书，20 年和 19 年这个数字分别是 31 和 27。相较于前两年来说，实在不太好看。当然回头来看也有些客观原因，前半年差不多一直在刷题准备面试，无心看书；离职前期外出旅行一圈，也无心看书；换工作之后绝望的三个月通勤，更无心看书。直到年底搬了家收拾妥当才有时间静下心来读点，差不多就已经十一月出头了，一年接近尾声。</p>\n<p>今年计划读 36 本书，一个月三本的样子，按照目前的时间规划来看，应该可以达到。按照 OKR score 的标准来看，36 是 1，30 是 0.8，低于 30 是 0.6。</p>\n<p>关于看的内容，今年我希望增加涉猎一些关于教育，心理领域，以及英文读物。</p>\n<p>有朋友推荐我陀思妥耶夫斯基的《卡拉马佐夫兄弟》，我知道这是一本好书，但是一直没有勇气开始——因为太长，人名也是，希望今年可以沉下心来看完。</p>\n<p>大概先写这么多。</p>\n<p>PS：这篇文章花了 8 个番茄时间。</p>\n"},{"title":"我读《东京贫困女子》","abbrlink":"tokyo-girls","date":"2022-01-29T19:33:52.000Z","_content":"\n新年的第一本书，读的我很压抑。\n\n作者采访了不同年龄段的女性，有花季少女，单身母亲，中老年女性等等，集合成册，描述了一个光鲜亮丽背后令人绝望的日本社会。\n\n贫困的原因具有很大的共性，而且一旦沾上，便很难翻身。我说看的压抑，正是这个原因。正如书里说的，“现实的残酷令人不忍直视，然而不可避免地，今后还会有更多的女性陷入这地狱般的日子。因为真的没有任何理由可以令人相信，将来会变得更好。”\n\n记录几点印象深刻的地方。\n\n#### 助学金\n\n对于青年大学生的贫困，最主要的原因是助学金。2004 年改革之后，助学金变成了以财政投融资和民间资金为财源的，实际上以利息为收益的金融事业。贫困家里的孩子没钱上大学，只好去借助学金。到毕业时，贷款本金加上利息大约有 600 万日元，需要到 47 岁才能还完。\n\n那么不贷款不行吗？似乎也不行，学费高昂则是第二个原因。数据表明，1996 年时只要 1.2 万日元的国立公立大学学费已涨到如今（本书出版于 2019 年）的 53.58 万日元，直接翻了 44 倍。另一方面，家庭收入则从 1994 年的 664.2 万日元，下降到现在的 560.2 万日元。\n\n学费涨了，收入下降，而接受高中学历的工作岗位，相较于泡沫经济初期下降了百分之九十。三管齐下，没钱读不起大学，不读大学就没工作，读了大学就几近破产。一旦迈入贫困，就很难翻身了。\n\n#### 精神疾病和药物滥用\n\n精神疾病和药物滥用是贫困人群的一个共同特征。接受采访的贫困女性都存在或多或少的健康问题，不论是心理上还是身体上的。打多份工，上夜班，过度劳动，睡眠缺乏，无形之间摧毁了身体的健康，导致各种精神疾病，抑郁症，酒精依赖，适应性障碍，综合失调症，恐慌症（我几乎都没听说过）。身体坏了，就得治病。去了医院，黑心庸医为了利益，又开出级联处方——为了治疗 a 病，吃了 b 药，从而引发 c, d 副作用，则又引入 e, f 药……往往是，虽然按医嘱吃了药，病情却不见好转，而且吃药导致精神不振，更加无法学习工作。\n\n前段时间看《白莲花酒店》，里面也体现了现在美国的药物滥用情况，各种症状都有对应的处方药。到底有没有病，有没有效果咱也不知道，反正吃了能嗨是真的。\n\n远离贫穷的第一步，保持身心健康，早点睡觉。\n\n#### 失败的婚姻和家庭\n\n伴随女性贫困的另一个共性，是成长过程中糟糕的家庭环境和自身失败的婚姻状况，然后又不可避免地将影响传递下一代。\n\n这点很好理解，父母没有文化，会用上一代的思维方式，认为读书没用，高中毕业就可以了，步入社会就找不到合适的工作；或者因为家庭贫困，不愿再资助学费，于是孩子只能退学或者背上助学贷款；或者父母不和谐，天天吵架，家庭暴力，甚至离婚，导致小孩成长叛逆；或者单身母亲疲于工作，无法照顾小孩学业或心理成长，导致不爱上学，误入歧途。诸如此类种种，又让下一代陷入贫困。\n\n书中还数次描述，丈夫指责妻子做饭不好吃，或是不顺心意，或是怀疑不忠，于是要妻子下跪，数落殴打到天亮的场景。我看不懂，但我大受震撼。\n\n还让我惊讶的一点是，原来日本夫妻离婚之后，抚养金纯属自愿。即使是丈夫出轨，单亲母亲带娃，亦是如此。“很遗憾，在日本，离婚抚养费的未支付率超过八成。现实很残酷，绝大多数的母子家庭都无法从前夫那里拿到抚养费”。\n\n这和网络上宣扬的日本女性的幸福生活大相径庭，我不禁感慨日本男性的“幸福人生”。\n\n#### 日本人的“礼貌”\n\n市面上爱宣传日本人讲礼貌，不给人添麻烦，书里也描绘了这种性格的另一方面。\n\n宇野女士意识到自己一个人难以支撑母亲的生活，于是就去市政厅寻求帮助。尽管她将自己的窘状全都告诉了工作人员，他们也没有真心地倾听她的诉说，只是鼓励一句“为了母亲，你要加油啊”，然后将她送了出来。\n\n川上女士因为家庭经济崩溃，无法给女儿缴纳学费，于是希望可以和校方商量延迟缴纳。但是学校绝口不提“退学”二字，只是不停的问，您打算怎么办呢，怎么支付呢。虽然川上一直表态，我一定会想办法支付的，请再给我一些时间，但是学校拒不接受。直到川上说出，那我们退学，老师们这才露出松了一口气的表情。\n\n看到这里，我能想象到工作人员或者老师们面带微笑，点头哈腰，一副温柔的样子。\n\n#### 派遣工和正式工\n\n温柔的背面，则是残忍。日本人对正式工有特殊的执念，有点类似山东人对公务员的热衷。\n\n如果你是派遣员工，那么就如奴隶或者零件，任由正式员工摆布，等级森严，绝对服从。如果正式员工问的问题没能答上来，就可能会被甩一句“那你明天不用来上班了”，然后立刻被解雇。甚至有非正式员工因业绩不佳，被鞋底涂上强力胶水，罚他长时间站立的事件发生。\n\n几个数据分散在书中各处，我总结如下：女性非正式员工年平均工资 150.8 万日元，全体女性年平均收入 281 万日元，非正式员工平均工资 210 万日元，正式聘用员工平均工资 321.6 万日元。\n\n#### 没有前途的工作\n\n现在老龄化严重，按理来说老年人看护行业应该是很热门很吃香才对，但是从书中采访的结果来看，全然相反，并且作者也一再劝阻年轻女性和贫困人群远离看护业。这出乎我的意料，看上去有些反常识，但是仔细思考后不难想通。\n\n从个人来看，看护行业门槛较低，是个人就能做，和学历无关，高中毕业，大学毕业没有差别，只是看想不想去做。另外书中也提到，日本引入更廉价的海外劳动力，进一步冲击了护工等行业的收入。虽然国家有对护工行业补助，但是由于种种原因（例如骗补助，审核不严），补助无法落到护工头上。最后，和老人长时间相处，并不是一件让人感到愉快的工作。\n\n从行业来看，虽然老人日益增多，但是看护成本并不低，而且针对老人的看护还存在先天的矛盾。比如开一家餐馆，如果走平价路线，你就得提高翻台率，一段时间内服务更多的顾客，但是服务老人是个长期的过程，你无法对老人要求“翻人率”——那也太残忍了点。如果走高端路线，则服务和投入成本则大大增加。看到新闻说国内某老人院需要大几十万加排队才能入园，可能就是走这个路线。不管怎么说，两者可能都能赚到钱，但是无法 scale。\n\n全书给我感觉最绝望的一个案例，就是上面提到的川上女士。本来家庭事业一帆风顺，女儿还在县内最好的高中就读，该校不少学生考入东大。就因为自己的姐姐得了精神病，可能是觉得于心不忍，可能觉得理所应当，于是辞去了自己的稳定工作，来回东京大阪照看姐姐。结果姐姐的病没治好，还花光了所有积蓄，连女儿的学费也交不起了。女儿因为懂事，无奈退了学，换到一所函授高中。最后也没有考上好的公立学校，上大学后不久便退学了。从优等生，到大学退学走入社会，迎接母女俩的将是余生无法摆脱的贫困生活。看到这里我不禁想，川上女士做错了什么，她的女儿又做错了什么呢？\n\n书中有几句话说得很好，大意是贫困总是以阶级的形式出现，如果你不在其中，几乎感受不到他们的存在，也体会不到贫困的绝望。有不少单亲母亲，因为无法支付小孩上学的校服或者学费，从而导致孩子年幼失学。另一方面，网上还在吹嘘日本儿童的书包又贵又好，对比之下颇为讽刺。\n\n谈到本书的缺点，不知道是翻译的问题，还是翻译完美保留了日式文章颠来倒去说车轱辘话的特色，啰嗦是最大的毛病。一句话，被采访人说一遍，作者再复述一遍，最后再评价一遍，看得人心里发火。\n\n另外，谈到解决贫困的方法，作者提供的方法略显幼稚。比如屡次提到，因为教育经费太少，学生申请不到免息的奖学金，只能申请带利息的助学金，那么如何提高经费呢？作者分析说，2017 年医疗费用是 42 兆日元，如果我们拨 1 兆日元给高等教育，经过大概分析，平均每个贫困学生可以获得 60 万日元。“如果后期高龄者们能为了孙辈们和日本的未来着想，将自己的医疗费用分一部分给教育经费，怎么都能让年轻人的风俗工作以及犯罪减少。”虽说钱不能无中生有，免不了拆东墙补西墙，但是这样粗暴拿老年人开刀也说不过去。归根结底，是少子化，老龄化，以及经济增速放缓，导致利益蛋糕分配的问题。看看日本怎么做，也许能给我们提供一些思考。\n\n总的来说，打 3.5-4 分之间，如果对日本，女性，或者贫困问题感兴趣，可以一读。否则的话，看我总结就行了。\n\n这篇文章花了8个番茄时间。\n","source":"_posts/我读《东京贫困女子》.md","raw":"---\ntitle: 我读《东京贫困女子》\ncategories:\n  - reading\ntags:\n  - books\nabbrlink: tokyo-girls\ndate: 2022-01-29 11:33:52\n---\n\n新年的第一本书，读的我很压抑。\n\n作者采访了不同年龄段的女性，有花季少女，单身母亲，中老年女性等等，集合成册，描述了一个光鲜亮丽背后令人绝望的日本社会。\n\n贫困的原因具有很大的共性，而且一旦沾上，便很难翻身。我说看的压抑，正是这个原因。正如书里说的，“现实的残酷令人不忍直视，然而不可避免地，今后还会有更多的女性陷入这地狱般的日子。因为真的没有任何理由可以令人相信，将来会变得更好。”\n\n记录几点印象深刻的地方。\n\n#### 助学金\n\n对于青年大学生的贫困，最主要的原因是助学金。2004 年改革之后，助学金变成了以财政投融资和民间资金为财源的，实际上以利息为收益的金融事业。贫困家里的孩子没钱上大学，只好去借助学金。到毕业时，贷款本金加上利息大约有 600 万日元，需要到 47 岁才能还完。\n\n那么不贷款不行吗？似乎也不行，学费高昂则是第二个原因。数据表明，1996 年时只要 1.2 万日元的国立公立大学学费已涨到如今（本书出版于 2019 年）的 53.58 万日元，直接翻了 44 倍。另一方面，家庭收入则从 1994 年的 664.2 万日元，下降到现在的 560.2 万日元。\n\n学费涨了，收入下降，而接受高中学历的工作岗位，相较于泡沫经济初期下降了百分之九十。三管齐下，没钱读不起大学，不读大学就没工作，读了大学就几近破产。一旦迈入贫困，就很难翻身了。\n\n#### 精神疾病和药物滥用\n\n精神疾病和药物滥用是贫困人群的一个共同特征。接受采访的贫困女性都存在或多或少的健康问题，不论是心理上还是身体上的。打多份工，上夜班，过度劳动，睡眠缺乏，无形之间摧毁了身体的健康，导致各种精神疾病，抑郁症，酒精依赖，适应性障碍，综合失调症，恐慌症（我几乎都没听说过）。身体坏了，就得治病。去了医院，黑心庸医为了利益，又开出级联处方——为了治疗 a 病，吃了 b 药，从而引发 c, d 副作用，则又引入 e, f 药……往往是，虽然按医嘱吃了药，病情却不见好转，而且吃药导致精神不振，更加无法学习工作。\n\n前段时间看《白莲花酒店》，里面也体现了现在美国的药物滥用情况，各种症状都有对应的处方药。到底有没有病，有没有效果咱也不知道，反正吃了能嗨是真的。\n\n远离贫穷的第一步，保持身心健康，早点睡觉。\n\n#### 失败的婚姻和家庭\n\n伴随女性贫困的另一个共性，是成长过程中糟糕的家庭环境和自身失败的婚姻状况，然后又不可避免地将影响传递下一代。\n\n这点很好理解，父母没有文化，会用上一代的思维方式，认为读书没用，高中毕业就可以了，步入社会就找不到合适的工作；或者因为家庭贫困，不愿再资助学费，于是孩子只能退学或者背上助学贷款；或者父母不和谐，天天吵架，家庭暴力，甚至离婚，导致小孩成长叛逆；或者单身母亲疲于工作，无法照顾小孩学业或心理成长，导致不爱上学，误入歧途。诸如此类种种，又让下一代陷入贫困。\n\n书中还数次描述，丈夫指责妻子做饭不好吃，或是不顺心意，或是怀疑不忠，于是要妻子下跪，数落殴打到天亮的场景。我看不懂，但我大受震撼。\n\n还让我惊讶的一点是，原来日本夫妻离婚之后，抚养金纯属自愿。即使是丈夫出轨，单亲母亲带娃，亦是如此。“很遗憾，在日本，离婚抚养费的未支付率超过八成。现实很残酷，绝大多数的母子家庭都无法从前夫那里拿到抚养费”。\n\n这和网络上宣扬的日本女性的幸福生活大相径庭，我不禁感慨日本男性的“幸福人生”。\n\n#### 日本人的“礼貌”\n\n市面上爱宣传日本人讲礼貌，不给人添麻烦，书里也描绘了这种性格的另一方面。\n\n宇野女士意识到自己一个人难以支撑母亲的生活，于是就去市政厅寻求帮助。尽管她将自己的窘状全都告诉了工作人员，他们也没有真心地倾听她的诉说，只是鼓励一句“为了母亲，你要加油啊”，然后将她送了出来。\n\n川上女士因为家庭经济崩溃，无法给女儿缴纳学费，于是希望可以和校方商量延迟缴纳。但是学校绝口不提“退学”二字，只是不停的问，您打算怎么办呢，怎么支付呢。虽然川上一直表态，我一定会想办法支付的，请再给我一些时间，但是学校拒不接受。直到川上说出，那我们退学，老师们这才露出松了一口气的表情。\n\n看到这里，我能想象到工作人员或者老师们面带微笑，点头哈腰，一副温柔的样子。\n\n#### 派遣工和正式工\n\n温柔的背面，则是残忍。日本人对正式工有特殊的执念，有点类似山东人对公务员的热衷。\n\n如果你是派遣员工，那么就如奴隶或者零件，任由正式员工摆布，等级森严，绝对服从。如果正式员工问的问题没能答上来，就可能会被甩一句“那你明天不用来上班了”，然后立刻被解雇。甚至有非正式员工因业绩不佳，被鞋底涂上强力胶水，罚他长时间站立的事件发生。\n\n几个数据分散在书中各处，我总结如下：女性非正式员工年平均工资 150.8 万日元，全体女性年平均收入 281 万日元，非正式员工平均工资 210 万日元，正式聘用员工平均工资 321.6 万日元。\n\n#### 没有前途的工作\n\n现在老龄化严重，按理来说老年人看护行业应该是很热门很吃香才对，但是从书中采访的结果来看，全然相反，并且作者也一再劝阻年轻女性和贫困人群远离看护业。这出乎我的意料，看上去有些反常识，但是仔细思考后不难想通。\n\n从个人来看，看护行业门槛较低，是个人就能做，和学历无关，高中毕业，大学毕业没有差别，只是看想不想去做。另外书中也提到，日本引入更廉价的海外劳动力，进一步冲击了护工等行业的收入。虽然国家有对护工行业补助，但是由于种种原因（例如骗补助，审核不严），补助无法落到护工头上。最后，和老人长时间相处，并不是一件让人感到愉快的工作。\n\n从行业来看，虽然老人日益增多，但是看护成本并不低，而且针对老人的看护还存在先天的矛盾。比如开一家餐馆，如果走平价路线，你就得提高翻台率，一段时间内服务更多的顾客，但是服务老人是个长期的过程，你无法对老人要求“翻人率”——那也太残忍了点。如果走高端路线，则服务和投入成本则大大增加。看到新闻说国内某老人院需要大几十万加排队才能入园，可能就是走这个路线。不管怎么说，两者可能都能赚到钱，但是无法 scale。\n\n全书给我感觉最绝望的一个案例，就是上面提到的川上女士。本来家庭事业一帆风顺，女儿还在县内最好的高中就读，该校不少学生考入东大。就因为自己的姐姐得了精神病，可能是觉得于心不忍，可能觉得理所应当，于是辞去了自己的稳定工作，来回东京大阪照看姐姐。结果姐姐的病没治好，还花光了所有积蓄，连女儿的学费也交不起了。女儿因为懂事，无奈退了学，换到一所函授高中。最后也没有考上好的公立学校，上大学后不久便退学了。从优等生，到大学退学走入社会，迎接母女俩的将是余生无法摆脱的贫困生活。看到这里我不禁想，川上女士做错了什么，她的女儿又做错了什么呢？\n\n书中有几句话说得很好，大意是贫困总是以阶级的形式出现，如果你不在其中，几乎感受不到他们的存在，也体会不到贫困的绝望。有不少单亲母亲，因为无法支付小孩上学的校服或者学费，从而导致孩子年幼失学。另一方面，网上还在吹嘘日本儿童的书包又贵又好，对比之下颇为讽刺。\n\n谈到本书的缺点，不知道是翻译的问题，还是翻译完美保留了日式文章颠来倒去说车轱辘话的特色，啰嗦是最大的毛病。一句话，被采访人说一遍，作者再复述一遍，最后再评价一遍，看得人心里发火。\n\n另外，谈到解决贫困的方法，作者提供的方法略显幼稚。比如屡次提到，因为教育经费太少，学生申请不到免息的奖学金，只能申请带利息的助学金，那么如何提高经费呢？作者分析说，2017 年医疗费用是 42 兆日元，如果我们拨 1 兆日元给高等教育，经过大概分析，平均每个贫困学生可以获得 60 万日元。“如果后期高龄者们能为了孙辈们和日本的未来着想，将自己的医疗费用分一部分给教育经费，怎么都能让年轻人的风俗工作以及犯罪减少。”虽说钱不能无中生有，免不了拆东墙补西墙，但是这样粗暴拿老年人开刀也说不过去。归根结底，是少子化，老龄化，以及经济增速放缓，导致利益蛋糕分配的问题。看看日本怎么做，也许能给我们提供一些思考。\n\n总的来说，打 3.5-4 分之间，如果对日本，女性，或者贫困问题感兴趣，可以一读。否则的话，看我总结就行了。\n\n这篇文章花了8个番茄时间。\n","slug":"我读《东京贫困女子》","published":1,"updated":"2022-03-07T03:33:29.589Z","_id":"ckzlahsod0001e2s6es2w6r4t","comments":1,"layout":"post","photos":[],"link":"","content":"<p>新年的第一本书，读的我很压抑。</p>\n<p>作者采访了不同年龄段的女性，有花季少女，单身母亲，中老年女性等等，集合成册，描述了一个光鲜亮丽背后令人绝望的日本社会。</p>\n<p>贫困的原因具有很大的共性，而且一旦沾上，便很难翻身。我说看的压抑，正是这个原因。正如书里说的，“现实的残酷令人不忍直视，然而不可避免地，今后还会有更多的女性陷入这地狱般的日子。因为真的没有任何理由可以令人相信，将来会变得更好。”</p>\n<p>记录几点印象深刻的地方。</p>\n<h4 id=\"助学金\"><a href=\"#助学金\" class=\"headerlink\" title=\"助学金\"></a>助学金</h4><p>对于青年大学生的贫困，最主要的原因是助学金。2004 年改革之后，助学金变成了以财政投融资和民间资金为财源的，实际上以利息为收益的金融事业。贫困家里的孩子没钱上大学，只好去借助学金。到毕业时，贷款本金加上利息大约有 600 万日元，需要到 47 岁才能还完。</p>\n<p>那么不贷款不行吗？似乎也不行，学费高昂则是第二个原因。数据表明，1996 年时只要 1.2 万日元的国立公立大学学费已涨到如今（本书出版于 2019 年）的 53.58 万日元，直接翻了 44 倍。另一方面，家庭收入则从 1994 年的 664.2 万日元，下降到现在的 560.2 万日元。</p>\n<p>学费涨了，收入下降，而接受高中学历的工作岗位，相较于泡沫经济初期下降了百分之九十。三管齐下，没钱读不起大学，不读大学就没工作，读了大学就几近破产。一旦迈入贫困，就很难翻身了。</p>\n<h4 id=\"精神疾病和药物滥用\"><a href=\"#精神疾病和药物滥用\" class=\"headerlink\" title=\"精神疾病和药物滥用\"></a>精神疾病和药物滥用</h4><p>精神疾病和药物滥用是贫困人群的一个共同特征。接受采访的贫困女性都存在或多或少的健康问题，不论是心理上还是身体上的。打多份工，上夜班，过度劳动，睡眠缺乏，无形之间摧毁了身体的健康，导致各种精神疾病，抑郁症，酒精依赖，适应性障碍，综合失调症，恐慌症（我几乎都没听说过）。身体坏了，就得治病。去了医院，黑心庸医为了利益，又开出级联处方——为了治疗 a 病，吃了 b 药，从而引发 c, d 副作用，则又引入 e, f 药……往往是，虽然按医嘱吃了药，病情却不见好转，而且吃药导致精神不振，更加无法学习工作。</p>\n<p>前段时间看《白莲花酒店》，里面也体现了现在美国的药物滥用情况，各种症状都有对应的处方药。到底有没有病，有没有效果咱也不知道，反正吃了能嗨是真的。</p>\n<p>远离贫穷的第一步，保持身心健康，早点睡觉。</p>\n<h4 id=\"失败的婚姻和家庭\"><a href=\"#失败的婚姻和家庭\" class=\"headerlink\" title=\"失败的婚姻和家庭\"></a>失败的婚姻和家庭</h4><p>伴随女性贫困的另一个共性，是成长过程中糟糕的家庭环境和自身失败的婚姻状况，然后又不可避免地将影响传递下一代。</p>\n<p>这点很好理解，父母没有文化，会用上一代的思维方式，认为读书没用，高中毕业就可以了，步入社会就找不到合适的工作；或者因为家庭贫困，不愿再资助学费，于是孩子只能退学或者背上助学贷款；或者父母不和谐，天天吵架，家庭暴力，甚至离婚，导致小孩成长叛逆；或者单身母亲疲于工作，无法照顾小孩学业或心理成长，导致不爱上学，误入歧途。诸如此类种种，又让下一代陷入贫困。</p>\n<p>书中还数次描述，丈夫指责妻子做饭不好吃，或是不顺心意，或是怀疑不忠，于是要妻子下跪，数落殴打到天亮的场景。我看不懂，但我大受震撼。</p>\n<p>还让我惊讶的一点是，原来日本夫妻离婚之后，抚养金纯属自愿。即使是丈夫出轨，单亲母亲带娃，亦是如此。“很遗憾，在日本，离婚抚养费的未支付率超过八成。现实很残酷，绝大多数的母子家庭都无法从前夫那里拿到抚养费”。</p>\n<p>这和网络上宣扬的日本女性的幸福生活大相径庭，我不禁感慨日本男性的“幸福人生”。</p>\n<h4 id=\"日本人的“礼貌”\"><a href=\"#日本人的“礼貌”\" class=\"headerlink\" title=\"日本人的“礼貌”\"></a>日本人的“礼貌”</h4><p>市面上爱宣传日本人讲礼貌，不给人添麻烦，书里也描绘了这种性格的另一方面。</p>\n<p>宇野女士意识到自己一个人难以支撑母亲的生活，于是就去市政厅寻求帮助。尽管她将自己的窘状全都告诉了工作人员，他们也没有真心地倾听她的诉说，只是鼓励一句“为了母亲，你要加油啊”，然后将她送了出来。</p>\n<p>川上女士因为家庭经济崩溃，无法给女儿缴纳学费，于是希望可以和校方商量延迟缴纳。但是学校绝口不提“退学”二字，只是不停的问，您打算怎么办呢，怎么支付呢。虽然川上一直表态，我一定会想办法支付的，请再给我一些时间，但是学校拒不接受。直到川上说出，那我们退学，老师们这才露出松了一口气的表情。</p>\n<p>看到这里，我能想象到工作人员或者老师们面带微笑，点头哈腰，一副温柔的样子。</p>\n<h4 id=\"派遣工和正式工\"><a href=\"#派遣工和正式工\" class=\"headerlink\" title=\"派遣工和正式工\"></a>派遣工和正式工</h4><p>温柔的背面，则是残忍。日本人对正式工有特殊的执念，有点类似山东人对公务员的热衷。</p>\n<p>如果你是派遣员工，那么就如奴隶或者零件，任由正式员工摆布，等级森严，绝对服从。如果正式员工问的问题没能答上来，就可能会被甩一句“那你明天不用来上班了”，然后立刻被解雇。甚至有非正式员工因业绩不佳，被鞋底涂上强力胶水，罚他长时间站立的事件发生。</p>\n<p>几个数据分散在书中各处，我总结如下：女性非正式员工年平均工资 150.8 万日元，全体女性年平均收入 281 万日元，非正式员工平均工资 210 万日元，正式聘用员工平均工资 321.6 万日元。</p>\n<h4 id=\"没有前途的工作\"><a href=\"#没有前途的工作\" class=\"headerlink\" title=\"没有前途的工作\"></a>没有前途的工作</h4><p>现在老龄化严重，按理来说老年人看护行业应该是很热门很吃香才对，但是从书中采访的结果来看，全然相反，并且作者也一再劝阻年轻女性和贫困人群远离看护业。这出乎我的意料，看上去有些反常识，但是仔细思考后不难想通。</p>\n<p>从个人来看，看护行业门槛较低，是个人就能做，和学历无关，高中毕业，大学毕业没有差别，只是看想不想去做。另外书中也提到，日本引入更廉价的海外劳动力，进一步冲击了护工等行业的收入。虽然国家有对护工行业补助，但是由于种种原因（例如骗补助，审核不严），补助无法落到护工头上。最后，和老人长时间相处，并不是一件让人感到愉快的工作。</p>\n<p>从行业来看，虽然老人日益增多，但是看护成本并不低，而且针对老人的看护还存在先天的矛盾。比如开一家餐馆，如果走平价路线，你就得提高翻台率，一段时间内服务更多的顾客，但是服务老人是个长期的过程，你无法对老人要求“翻人率”——那也太残忍了点。如果走高端路线，则服务和投入成本则大大增加。看到新闻说国内某老人院需要大几十万加排队才能入园，可能就是走这个路线。不管怎么说，两者可能都能赚到钱，但是无法 scale。</p>\n<p>全书给我感觉最绝望的一个案例，就是上面提到的川上女士。本来家庭事业一帆风顺，女儿还在县内最好的高中就读，该校不少学生考入东大。就因为自己的姐姐得了精神病，可能是觉得于心不忍，可能觉得理所应当，于是辞去了自己的稳定工作，来回东京大阪照看姐姐。结果姐姐的病没治好，还花光了所有积蓄，连女儿的学费也交不起了。女儿因为懂事，无奈退了学，换到一所函授高中。最后也没有考上好的公立学校，上大学后不久便退学了。从优等生，到大学退学走入社会，迎接母女俩的将是余生无法摆脱的贫困生活。看到这里我不禁想，川上女士做错了什么，她的女儿又做错了什么呢？</p>\n<p>书中有几句话说得很好，大意是贫困总是以阶级的形式出现，如果你不在其中，几乎感受不到他们的存在，也体会不到贫困的绝望。有不少单亲母亲，因为无法支付小孩上学的校服或者学费，从而导致孩子年幼失学。另一方面，网上还在吹嘘日本儿童的书包又贵又好，对比之下颇为讽刺。</p>\n<p>谈到本书的缺点，不知道是翻译的问题，还是翻译完美保留了日式文章颠来倒去说车轱辘话的特色，啰嗦是最大的毛病。一句话，被采访人说一遍，作者再复述一遍，最后再评价一遍，看得人心里发火。</p>\n<p>另外，谈到解决贫困的方法，作者提供的方法略显幼稚。比如屡次提到，因为教育经费太少，学生申请不到免息的奖学金，只能申请带利息的助学金，那么如何提高经费呢？作者分析说，2017 年医疗费用是 42 兆日元，如果我们拨 1 兆日元给高等教育，经过大概分析，平均每个贫困学生可以获得 60 万日元。“如果后期高龄者们能为了孙辈们和日本的未来着想，将自己的医疗费用分一部分给教育经费，怎么都能让年轻人的风俗工作以及犯罪减少。”虽说钱不能无中生有，免不了拆东墙补西墙，但是这样粗暴拿老年人开刀也说不过去。归根结底，是少子化，老龄化，以及经济增速放缓，导致利益蛋糕分配的问题。看看日本怎么做，也许能给我们提供一些思考。</p>\n<p>总的来说，打 3.5-4 分之间，如果对日本，女性，或者贫困问题感兴趣，可以一读。否则的话，看我总结就行了。</p>\n<p>这篇文章花了8个番茄时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>新年的第一本书，读的我很压抑。</p>\n<p>作者采访了不同年龄段的女性，有花季少女，单身母亲，中老年女性等等，集合成册，描述了一个光鲜亮丽背后令人绝望的日本社会。</p>\n<p>贫困的原因具有很大的共性，而且一旦沾上，便很难翻身。我说看的压抑，正是这个原因。正如书里说的，“现实的残酷令人不忍直视，然而不可避免地，今后还会有更多的女性陷入这地狱般的日子。因为真的没有任何理由可以令人相信，将来会变得更好。”</p>\n<p>记录几点印象深刻的地方。</p>\n<h4 id=\"助学金\"><a href=\"#助学金\" class=\"headerlink\" title=\"助学金\"></a>助学金</h4><p>对于青年大学生的贫困，最主要的原因是助学金。2004 年改革之后，助学金变成了以财政投融资和民间资金为财源的，实际上以利息为收益的金融事业。贫困家里的孩子没钱上大学，只好去借助学金。到毕业时，贷款本金加上利息大约有 600 万日元，需要到 47 岁才能还完。</p>\n<p>那么不贷款不行吗？似乎也不行，学费高昂则是第二个原因。数据表明，1996 年时只要 1.2 万日元的国立公立大学学费已涨到如今（本书出版于 2019 年）的 53.58 万日元，直接翻了 44 倍。另一方面，家庭收入则从 1994 年的 664.2 万日元，下降到现在的 560.2 万日元。</p>\n<p>学费涨了，收入下降，而接受高中学历的工作岗位，相较于泡沫经济初期下降了百分之九十。三管齐下，没钱读不起大学，不读大学就没工作，读了大学就几近破产。一旦迈入贫困，就很难翻身了。</p>\n<h4 id=\"精神疾病和药物滥用\"><a href=\"#精神疾病和药物滥用\" class=\"headerlink\" title=\"精神疾病和药物滥用\"></a>精神疾病和药物滥用</h4><p>精神疾病和药物滥用是贫困人群的一个共同特征。接受采访的贫困女性都存在或多或少的健康问题，不论是心理上还是身体上的。打多份工，上夜班，过度劳动，睡眠缺乏，无形之间摧毁了身体的健康，导致各种精神疾病，抑郁症，酒精依赖，适应性障碍，综合失调症，恐慌症（我几乎都没听说过）。身体坏了，就得治病。去了医院，黑心庸医为了利益，又开出级联处方——为了治疗 a 病，吃了 b 药，从而引发 c, d 副作用，则又引入 e, f 药……往往是，虽然按医嘱吃了药，病情却不见好转，而且吃药导致精神不振，更加无法学习工作。</p>\n<p>前段时间看《白莲花酒店》，里面也体现了现在美国的药物滥用情况，各种症状都有对应的处方药。到底有没有病，有没有效果咱也不知道，反正吃了能嗨是真的。</p>\n<p>远离贫穷的第一步，保持身心健康，早点睡觉。</p>\n<h4 id=\"失败的婚姻和家庭\"><a href=\"#失败的婚姻和家庭\" class=\"headerlink\" title=\"失败的婚姻和家庭\"></a>失败的婚姻和家庭</h4><p>伴随女性贫困的另一个共性，是成长过程中糟糕的家庭环境和自身失败的婚姻状况，然后又不可避免地将影响传递下一代。</p>\n<p>这点很好理解，父母没有文化，会用上一代的思维方式，认为读书没用，高中毕业就可以了，步入社会就找不到合适的工作；或者因为家庭贫困，不愿再资助学费，于是孩子只能退学或者背上助学贷款；或者父母不和谐，天天吵架，家庭暴力，甚至离婚，导致小孩成长叛逆；或者单身母亲疲于工作，无法照顾小孩学业或心理成长，导致不爱上学，误入歧途。诸如此类种种，又让下一代陷入贫困。</p>\n<p>书中还数次描述，丈夫指责妻子做饭不好吃，或是不顺心意，或是怀疑不忠，于是要妻子下跪，数落殴打到天亮的场景。我看不懂，但我大受震撼。</p>\n<p>还让我惊讶的一点是，原来日本夫妻离婚之后，抚养金纯属自愿。即使是丈夫出轨，单亲母亲带娃，亦是如此。“很遗憾，在日本，离婚抚养费的未支付率超过八成。现实很残酷，绝大多数的母子家庭都无法从前夫那里拿到抚养费”。</p>\n<p>这和网络上宣扬的日本女性的幸福生活大相径庭，我不禁感慨日本男性的“幸福人生”。</p>\n<h4 id=\"日本人的“礼貌”\"><a href=\"#日本人的“礼貌”\" class=\"headerlink\" title=\"日本人的“礼貌”\"></a>日本人的“礼貌”</h4><p>市面上爱宣传日本人讲礼貌，不给人添麻烦，书里也描绘了这种性格的另一方面。</p>\n<p>宇野女士意识到自己一个人难以支撑母亲的生活，于是就去市政厅寻求帮助。尽管她将自己的窘状全都告诉了工作人员，他们也没有真心地倾听她的诉说，只是鼓励一句“为了母亲，你要加油啊”，然后将她送了出来。</p>\n<p>川上女士因为家庭经济崩溃，无法给女儿缴纳学费，于是希望可以和校方商量延迟缴纳。但是学校绝口不提“退学”二字，只是不停的问，您打算怎么办呢，怎么支付呢。虽然川上一直表态，我一定会想办法支付的，请再给我一些时间，但是学校拒不接受。直到川上说出，那我们退学，老师们这才露出松了一口气的表情。</p>\n<p>看到这里，我能想象到工作人员或者老师们面带微笑，点头哈腰，一副温柔的样子。</p>\n<h4 id=\"派遣工和正式工\"><a href=\"#派遣工和正式工\" class=\"headerlink\" title=\"派遣工和正式工\"></a>派遣工和正式工</h4><p>温柔的背面，则是残忍。日本人对正式工有特殊的执念，有点类似山东人对公务员的热衷。</p>\n<p>如果你是派遣员工，那么就如奴隶或者零件，任由正式员工摆布，等级森严，绝对服从。如果正式员工问的问题没能答上来，就可能会被甩一句“那你明天不用来上班了”，然后立刻被解雇。甚至有非正式员工因业绩不佳，被鞋底涂上强力胶水，罚他长时间站立的事件发生。</p>\n<p>几个数据分散在书中各处，我总结如下：女性非正式员工年平均工资 150.8 万日元，全体女性年平均收入 281 万日元，非正式员工平均工资 210 万日元，正式聘用员工平均工资 321.6 万日元。</p>\n<h4 id=\"没有前途的工作\"><a href=\"#没有前途的工作\" class=\"headerlink\" title=\"没有前途的工作\"></a>没有前途的工作</h4><p>现在老龄化严重，按理来说老年人看护行业应该是很热门很吃香才对，但是从书中采访的结果来看，全然相反，并且作者也一再劝阻年轻女性和贫困人群远离看护业。这出乎我的意料，看上去有些反常识，但是仔细思考后不难想通。</p>\n<p>从个人来看，看护行业门槛较低，是个人就能做，和学历无关，高中毕业，大学毕业没有差别，只是看想不想去做。另外书中也提到，日本引入更廉价的海外劳动力，进一步冲击了护工等行业的收入。虽然国家有对护工行业补助，但是由于种种原因（例如骗补助，审核不严），补助无法落到护工头上。最后，和老人长时间相处，并不是一件让人感到愉快的工作。</p>\n<p>从行业来看，虽然老人日益增多，但是看护成本并不低，而且针对老人的看护还存在先天的矛盾。比如开一家餐馆，如果走平价路线，你就得提高翻台率，一段时间内服务更多的顾客，但是服务老人是个长期的过程，你无法对老人要求“翻人率”——那也太残忍了点。如果走高端路线，则服务和投入成本则大大增加。看到新闻说国内某老人院需要大几十万加排队才能入园，可能就是走这个路线。不管怎么说，两者可能都能赚到钱，但是无法 scale。</p>\n<p>全书给我感觉最绝望的一个案例，就是上面提到的川上女士。本来家庭事业一帆风顺，女儿还在县内最好的高中就读，该校不少学生考入东大。就因为自己的姐姐得了精神病，可能是觉得于心不忍，可能觉得理所应当，于是辞去了自己的稳定工作，来回东京大阪照看姐姐。结果姐姐的病没治好，还花光了所有积蓄，连女儿的学费也交不起了。女儿因为懂事，无奈退了学，换到一所函授高中。最后也没有考上好的公立学校，上大学后不久便退学了。从优等生，到大学退学走入社会，迎接母女俩的将是余生无法摆脱的贫困生活。看到这里我不禁想，川上女士做错了什么，她的女儿又做错了什么呢？</p>\n<p>书中有几句话说得很好，大意是贫困总是以阶级的形式出现，如果你不在其中，几乎感受不到他们的存在，也体会不到贫困的绝望。有不少单亲母亲，因为无法支付小孩上学的校服或者学费，从而导致孩子年幼失学。另一方面，网上还在吹嘘日本儿童的书包又贵又好，对比之下颇为讽刺。</p>\n<p>谈到本书的缺点，不知道是翻译的问题，还是翻译完美保留了日式文章颠来倒去说车轱辘话的特色，啰嗦是最大的毛病。一句话，被采访人说一遍，作者再复述一遍，最后再评价一遍，看得人心里发火。</p>\n<p>另外，谈到解决贫困的方法，作者提供的方法略显幼稚。比如屡次提到，因为教育经费太少，学生申请不到免息的奖学金，只能申请带利息的助学金，那么如何提高经费呢？作者分析说，2017 年医疗费用是 42 兆日元，如果我们拨 1 兆日元给高等教育，经过大概分析，平均每个贫困学生可以获得 60 万日元。“如果后期高龄者们能为了孙辈们和日本的未来着想，将自己的医疗费用分一部分给教育经费，怎么都能让年轻人的风俗工作以及犯罪减少。”虽说钱不能无中生有，免不了拆东墙补西墙，但是这样粗暴拿老年人开刀也说不过去。归根结底，是少子化，老龄化，以及经济增速放缓，导致利益蛋糕分配的问题。看看日本怎么做，也许能给我们提供一些思考。</p>\n<p>总的来说，打 3.5-4 分之间，如果对日本，女性，或者贫困问题感兴趣，可以一读。否则的话，看我总结就行了。</p>\n<p>这篇文章花了8个番茄时间。</p>\n"},{"title":"我读《字节跳动：从0到1的秘密》","abbrlink":"read-bytedance","date":"2022-02-14T05:19:51.000Z","_content":"\n2022年的第4本书，没啥新意，打2.5星。\n\n信息密度较低，大部分是时间线整理，浮于表面。\n\n国内写企业成长的书总有些端着，太真实了写不出来，写出来也不好发表，流水账看的又很尴尬。\n\n拉动模式，人找信息，信息找人，推动模式。我十分讨厌所谓信息找人，我认为这是人为造成filter bubble。信息需求程度高的人，会倾向于订阅或者搜索，这样更具精确度和可控程度。对信息需求低的人，社交网络和推荐是更好的选择，这样更轻松娱乐。\n\n推荐算法，可以消除对社交关系的需求。你不关注你的身边人或者亲戚朋友看什么，你会找到感兴趣的话题，算法会推荐你志同道合的内容。早期 Facebook 你会关注同学看了什么，现在这层关系不再重要。\n\n短视频的交互更频繁，每分钟会多次点击滑动，每次互动都会透露更多用户的偏好信息。长视频可能一集电视剧都不用碰一次屏幕。\n\n我一直对日本女性用的滤镜感到疑惑，看到这里有些了解。日本文化普遍存在对个人主义的反感。因此他们推出的滤镜可以降低面孔辨识度，减轻人们不自在的感觉和对外貌的担忧。\n\n为了避开日本电视网植入广告的禁令，团队向制作人提供有趣的、有报道价值的故事，有关TikTok逸事的电视报道开始增多，到了18年6月初，几乎每天都有播出。\n\n关于产品，乔布斯说过，“大多数时候，你把设计交给用户看之前，他们根本不知道自己想要什么。”\n\n19年初，张一鸣写了一篇文章，谈ego要小，格局要大。后半句不好说，前半句我是很赞成的。在工作生活中，自我意识越少，能集中在事情和逻辑上，自身也更不容易被冒犯，被激怒，心态会更平和。只是后来tt突然被制裁，网上一片调侃。\n\n经过最近的互联网环境，估计以后也不会有老板在网上发表评论了。\n\n这篇文章花了1.5个番茄时间。","source":"_posts/我读《字节跳动：从0到1的秘密》.md","raw":"---\ntitle: 我读《字节跳动：从0到1的秘密》\nabbrlink: read-bytedance\ndate: 2022-02-13 21:19:51\ncategories:\n  - non-fiction\n  - reading\ntags:\n  - bytedance\n  - tiktok\n---\n\n2022年的第4本书，没啥新意，打2.5星。\n\n信息密度较低，大部分是时间线整理，浮于表面。\n\n国内写企业成长的书总有些端着，太真实了写不出来，写出来也不好发表，流水账看的又很尴尬。\n\n拉动模式，人找信息，信息找人，推动模式。我十分讨厌所谓信息找人，我认为这是人为造成filter bubble。信息需求程度高的人，会倾向于订阅或者搜索，这样更具精确度和可控程度。对信息需求低的人，社交网络和推荐是更好的选择，这样更轻松娱乐。\n\n推荐算法，可以消除对社交关系的需求。你不关注你的身边人或者亲戚朋友看什么，你会找到感兴趣的话题，算法会推荐你志同道合的内容。早期 Facebook 你会关注同学看了什么，现在这层关系不再重要。\n\n短视频的交互更频繁，每分钟会多次点击滑动，每次互动都会透露更多用户的偏好信息。长视频可能一集电视剧都不用碰一次屏幕。\n\n我一直对日本女性用的滤镜感到疑惑，看到这里有些了解。日本文化普遍存在对个人主义的反感。因此他们推出的滤镜可以降低面孔辨识度，减轻人们不自在的感觉和对外貌的担忧。\n\n为了避开日本电视网植入广告的禁令，团队向制作人提供有趣的、有报道价值的故事，有关TikTok逸事的电视报道开始增多，到了18年6月初，几乎每天都有播出。\n\n关于产品，乔布斯说过，“大多数时候，你把设计交给用户看之前，他们根本不知道自己想要什么。”\n\n19年初，张一鸣写了一篇文章，谈ego要小，格局要大。后半句不好说，前半句我是很赞成的。在工作生活中，自我意识越少，能集中在事情和逻辑上，自身也更不容易被冒犯，被激怒，心态会更平和。只是后来tt突然被制裁，网上一片调侃。\n\n经过最近的互联网环境，估计以后也不会有老板在网上发表评论了。\n\n这篇文章花了1.5个番茄时间。","slug":"我读《字节跳动：从0到1的秘密》","published":1,"updated":"2022-03-10T15:06:50.679Z","_id":"ckzlaohgp0000fys67z2sa2gq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>2022年的第4本书，没啥新意，打2.5星。</p>\n<p>信息密度较低，大部分是时间线整理，浮于表面。</p>\n<p>国内写企业成长的书总有些端着，太真实了写不出来，写出来也不好发表，流水账看的又很尴尬。</p>\n<p>拉动模式，人找信息，信息找人，推动模式。我十分讨厌所谓信息找人，我认为这是人为造成filter bubble。信息需求程度高的人，会倾向于订阅或者搜索，这样更具精确度和可控程度。对信息需求低的人，社交网络和推荐是更好的选择，这样更轻松娱乐。</p>\n<p>推荐算法，可以消除对社交关系的需求。你不关注你的身边人或者亲戚朋友看什么，你会找到感兴趣的话题，算法会推荐你志同道合的内容。早期 Facebook 你会关注同学看了什么，现在这层关系不再重要。</p>\n<p>短视频的交互更频繁，每分钟会多次点击滑动，每次互动都会透露更多用户的偏好信息。长视频可能一集电视剧都不用碰一次屏幕。</p>\n<p>我一直对日本女性用的滤镜感到疑惑，看到这里有些了解。日本文化普遍存在对个人主义的反感。因此他们推出的滤镜可以降低面孔辨识度，减轻人们不自在的感觉和对外貌的担忧。</p>\n<p>为了避开日本电视网植入广告的禁令，团队向制作人提供有趣的、有报道价值的故事，有关TikTok逸事的电视报道开始增多，到了18年6月初，几乎每天都有播出。</p>\n<p>关于产品，乔布斯说过，“大多数时候，你把设计交给用户看之前，他们根本不知道自己想要什么。”</p>\n<p>19年初，张一鸣写了一篇文章，谈ego要小，格局要大。后半句不好说，前半句我是很赞成的。在工作生活中，自我意识越少，能集中在事情和逻辑上，自身也更不容易被冒犯，被激怒，心态会更平和。只是后来tt突然被制裁，网上一片调侃。</p>\n<p>经过最近的互联网环境，估计以后也不会有老板在网上发表评论了。</p>\n<p>这篇文章花了1.5个番茄时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2022年的第4本书，没啥新意，打2.5星。</p>\n<p>信息密度较低，大部分是时间线整理，浮于表面。</p>\n<p>国内写企业成长的书总有些端着，太真实了写不出来，写出来也不好发表，流水账看的又很尴尬。</p>\n<p>拉动模式，人找信息，信息找人，推动模式。我十分讨厌所谓信息找人，我认为这是人为造成filter bubble。信息需求程度高的人，会倾向于订阅或者搜索，这样更具精确度和可控程度。对信息需求低的人，社交网络和推荐是更好的选择，这样更轻松娱乐。</p>\n<p>推荐算法，可以消除对社交关系的需求。你不关注你的身边人或者亲戚朋友看什么，你会找到感兴趣的话题，算法会推荐你志同道合的内容。早期 Facebook 你会关注同学看了什么，现在这层关系不再重要。</p>\n<p>短视频的交互更频繁，每分钟会多次点击滑动，每次互动都会透露更多用户的偏好信息。长视频可能一集电视剧都不用碰一次屏幕。</p>\n<p>我一直对日本女性用的滤镜感到疑惑，看到这里有些了解。日本文化普遍存在对个人主义的反感。因此他们推出的滤镜可以降低面孔辨识度，减轻人们不自在的感觉和对外貌的担忧。</p>\n<p>为了避开日本电视网植入广告的禁令，团队向制作人提供有趣的、有报道价值的故事，有关TikTok逸事的电视报道开始增多，到了18年6月初，几乎每天都有播出。</p>\n<p>关于产品，乔布斯说过，“大多数时候，你把设计交给用户看之前，他们根本不知道自己想要什么。”</p>\n<p>19年初，张一鸣写了一篇文章，谈ego要小，格局要大。后半句不好说，前半句我是很赞成的。在工作生活中，自我意识越少，能集中在事情和逻辑上，自身也更不容易被冒犯，被激怒，心态会更平和。只是后来tt突然被制裁，网上一片调侃。</p>\n<p>经过最近的互联网环境，估计以后也不会有老板在网上发表评论了。</p>\n<p>这篇文章花了1.5个番茄时间。</p>\n"},{"title":"我读《两京十五日》","abbrlink":"read-liangjing-fifteen-days","date":"2022-01-30T05:20:08.000Z","_content":"\n在回家过年的高铁上，读完2022年的第二本书。\n\n买这本书的原因是在 twitter 看到小岛秀夫的分享，日文版出版在即，说一定会去看。\n\n我之前只是隐约知道这本，加上看过《长安十二时辰》，感觉这种主题和风格的小说，读的时候觉得很精彩，过了不久忘得一干二净，只依稀记得几个片段，几个人物。想再给马伯庸一个机会，于是买了。\n\n历史虚构类小说，想象力是亮点。文献上寥寥数字，需要自己描绘出一个完整的世界，还是很考验功力的。这本书做的不错，情节设计和节奏感都很好，每个小结都有让人接着读下去的诱惑力。\n\n缺点也十分明显。看过《显微镜下的大明》，马伯庸给人的感觉是一个注重细节的作家。但是在虚构小说里，虽然我们不能要求所有的情节发展都符合事实和情理，但是也不能完全抛弃。在这部小说里，“恰巧”出现的几率略高了一点，看的时候，我不仅屡屡发问，这样也行？又如在槽船一章，作者竟然一笔带过，让小说人物自己来编撰借口。“她果然没有辜负于谦，编造出一套合情合理的故事，解释自己为何会出现在槽船上，没人产生怀疑。” 这种取巧的方式，我不喜欢。\n\n我感觉作者更适合叙事型或者科普型写作，对话并不见长，对白太过现代、寡淡、说教，很多对话，看上去很尬。对人物的刻画也略失败，脸谱化严重，没什么特色，仿佛每个人头上就顶着一个标签。\n\n前两年《长安十二时辰》被改成了电视剧，我没看。据说风评不错，热度很高，演技在线，制作精良。\n\n我的一个观察，也不一定对。从人物、情节、对白设计方面，作者可能也有心把作品往影视剧方向发展。《两京》也不例外，适合改编成流量型电视剧。男一男二，找两个小鲜肉，口号式的对白，也比较适合现在年轻演员。\n\n除了改编成电视剧，我感觉书里描绘的场景，要是能做成游戏，一定也很精彩。\n\n抛开小说，我更喜欢马伯庸为自己作的后记，行云流水，娓娓道来，这才是我喜欢的马氏风格。\n\n一个题外话，初四去逛省博，无意发现梁庄王展厅里，有一件鎏金银封册，正是梁王结婚之时，宣德皇帝所赐。“朕弟梁王，年已长成，尔魏氏乃南城兵马指挥魏亨之女，今特授以金册立为梁王妃，尔尚谨遵妇道，内助家邦，敬哉。” 感觉挺有意思的。\n\n这篇文章花了1.5个番茄时间。\n","source":"_posts/我读《两京十五日》.md","raw":"---\ntitle: 我读《两京十五日》\nabbrlink: \"read-liangjing-fifteen-days\"\ndate: 2022-01-29 21:20:08\ncategories:\n  - fiction\ntags:\n  - 马伯庸\n---\n\n在回家过年的高铁上，读完2022年的第二本书。\n\n买这本书的原因是在 twitter 看到小岛秀夫的分享，日文版出版在即，说一定会去看。\n\n我之前只是隐约知道这本，加上看过《长安十二时辰》，感觉这种主题和风格的小说，读的时候觉得很精彩，过了不久忘得一干二净，只依稀记得几个片段，几个人物。想再给马伯庸一个机会，于是买了。\n\n历史虚构类小说，想象力是亮点。文献上寥寥数字，需要自己描绘出一个完整的世界，还是很考验功力的。这本书做的不错，情节设计和节奏感都很好，每个小结都有让人接着读下去的诱惑力。\n\n缺点也十分明显。看过《显微镜下的大明》，马伯庸给人的感觉是一个注重细节的作家。但是在虚构小说里，虽然我们不能要求所有的情节发展都符合事实和情理，但是也不能完全抛弃。在这部小说里，“恰巧”出现的几率略高了一点，看的时候，我不仅屡屡发问，这样也行？又如在槽船一章，作者竟然一笔带过，让小说人物自己来编撰借口。“她果然没有辜负于谦，编造出一套合情合理的故事，解释自己为何会出现在槽船上，没人产生怀疑。” 这种取巧的方式，我不喜欢。\n\n我感觉作者更适合叙事型或者科普型写作，对话并不见长，对白太过现代、寡淡、说教，很多对话，看上去很尬。对人物的刻画也略失败，脸谱化严重，没什么特色，仿佛每个人头上就顶着一个标签。\n\n前两年《长安十二时辰》被改成了电视剧，我没看。据说风评不错，热度很高，演技在线，制作精良。\n\n我的一个观察，也不一定对。从人物、情节、对白设计方面，作者可能也有心把作品往影视剧方向发展。《两京》也不例外，适合改编成流量型电视剧。男一男二，找两个小鲜肉，口号式的对白，也比较适合现在年轻演员。\n\n除了改编成电视剧，我感觉书里描绘的场景，要是能做成游戏，一定也很精彩。\n\n抛开小说，我更喜欢马伯庸为自己作的后记，行云流水，娓娓道来，这才是我喜欢的马氏风格。\n\n一个题外话，初四去逛省博，无意发现梁庄王展厅里，有一件鎏金银封册，正是梁王结婚之时，宣德皇帝所赐。“朕弟梁王，年已长成，尔魏氏乃南城兵马指挥魏亨之女，今特授以金册立为梁王妃，尔尚谨遵妇道，内助家邦，敬哉。” 感觉挺有意思的。\n\n这篇文章花了1.5个番茄时间。\n","slug":"我读《两京十五日》","published":1,"updated":"2022-03-10T15:08:38.051Z","_id":"ckzlaoudn0001fys6b18u0rl0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在回家过年的高铁上，读完2022年的第二本书。</p>\n<p>买这本书的原因是在 twitter 看到小岛秀夫的分享，日文版出版在即，说一定会去看。</p>\n<p>我之前只是隐约知道这本，加上看过《长安十二时辰》，感觉这种主题和风格的小说，读的时候觉得很精彩，过了不久忘得一干二净，只依稀记得几个片段，几个人物。想再给马伯庸一个机会，于是买了。</p>\n<p>历史虚构类小说，想象力是亮点。文献上寥寥数字，需要自己描绘出一个完整的世界，还是很考验功力的。这本书做的不错，情节设计和节奏感都很好，每个小结都有让人接着读下去的诱惑力。</p>\n<p>缺点也十分明显。看过《显微镜下的大明》，马伯庸给人的感觉是一个注重细节的作家。但是在虚构小说里，虽然我们不能要求所有的情节发展都符合事实和情理，但是也不能完全抛弃。在这部小说里，“恰巧”出现的几率略高了一点，看的时候，我不仅屡屡发问，这样也行？又如在槽船一章，作者竟然一笔带过，让小说人物自己来编撰借口。“她果然没有辜负于谦，编造出一套合情合理的故事，解释自己为何会出现在槽船上，没人产生怀疑。” 这种取巧的方式，我不喜欢。</p>\n<p>我感觉作者更适合叙事型或者科普型写作，对话并不见长，对白太过现代、寡淡、说教，很多对话，看上去很尬。对人物的刻画也略失败，脸谱化严重，没什么特色，仿佛每个人头上就顶着一个标签。</p>\n<p>前两年《长安十二时辰》被改成了电视剧，我没看。据说风评不错，热度很高，演技在线，制作精良。</p>\n<p>我的一个观察，也不一定对。从人物、情节、对白设计方面，作者可能也有心把作品往影视剧方向发展。《两京》也不例外，适合改编成流量型电视剧。男一男二，找两个小鲜肉，口号式的对白，也比较适合现在年轻演员。</p>\n<p>除了改编成电视剧，我感觉书里描绘的场景，要是能做成游戏，一定也很精彩。</p>\n<p>抛开小说，我更喜欢马伯庸为自己作的后记，行云流水，娓娓道来，这才是我喜欢的马氏风格。</p>\n<p>一个题外话，初四去逛省博，无意发现梁庄王展厅里，有一件鎏金银封册，正是梁王结婚之时，宣德皇帝所赐。“朕弟梁王，年已长成，尔魏氏乃南城兵马指挥魏亨之女，今特授以金册立为梁王妃，尔尚谨遵妇道，内助家邦，敬哉。” 感觉挺有意思的。</p>\n<p>这篇文章花了1.5个番茄时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在回家过年的高铁上，读完2022年的第二本书。</p>\n<p>买这本书的原因是在 twitter 看到小岛秀夫的分享，日文版出版在即，说一定会去看。</p>\n<p>我之前只是隐约知道这本，加上看过《长安十二时辰》，感觉这种主题和风格的小说，读的时候觉得很精彩，过了不久忘得一干二净，只依稀记得几个片段，几个人物。想再给马伯庸一个机会，于是买了。</p>\n<p>历史虚构类小说，想象力是亮点。文献上寥寥数字，需要自己描绘出一个完整的世界，还是很考验功力的。这本书做的不错，情节设计和节奏感都很好，每个小结都有让人接着读下去的诱惑力。</p>\n<p>缺点也十分明显。看过《显微镜下的大明》，马伯庸给人的感觉是一个注重细节的作家。但是在虚构小说里，虽然我们不能要求所有的情节发展都符合事实和情理，但是也不能完全抛弃。在这部小说里，“恰巧”出现的几率略高了一点，看的时候，我不仅屡屡发问，这样也行？又如在槽船一章，作者竟然一笔带过，让小说人物自己来编撰借口。“她果然没有辜负于谦，编造出一套合情合理的故事，解释自己为何会出现在槽船上，没人产生怀疑。” 这种取巧的方式，我不喜欢。</p>\n<p>我感觉作者更适合叙事型或者科普型写作，对话并不见长，对白太过现代、寡淡、说教，很多对话，看上去很尬。对人物的刻画也略失败，脸谱化严重，没什么特色，仿佛每个人头上就顶着一个标签。</p>\n<p>前两年《长安十二时辰》被改成了电视剧，我没看。据说风评不错，热度很高，演技在线，制作精良。</p>\n<p>我的一个观察，也不一定对。从人物、情节、对白设计方面，作者可能也有心把作品往影视剧方向发展。《两京》也不例外，适合改编成流量型电视剧。男一男二，找两个小鲜肉，口号式的对白，也比较适合现在年轻演员。</p>\n<p>除了改编成电视剧，我感觉书里描绘的场景，要是能做成游戏，一定也很精彩。</p>\n<p>抛开小说，我更喜欢马伯庸为自己作的后记，行云流水，娓娓道来，这才是我喜欢的马氏风格。</p>\n<p>一个题外话，初四去逛省博，无意发现梁庄王展厅里，有一件鎏金银封册，正是梁王结婚之时，宣德皇帝所赐。“朕弟梁王，年已长成，尔魏氏乃南城兵马指挥魏亨之女，今特授以金册立为梁王妃，尔尚谨遵妇道，内助家邦，敬哉。” 感觉挺有意思的。</p>\n<p>这篇文章花了1.5个番茄时间。</p>\n"},{"title":"我读《两个人的小家》","abbrlink":"couple-house","date":"2022-02-10T05:20:34.000Z","_content":"\n2022年第三本书。\n\n我一直觉得收纳技巧是我们成长过程中比较缺失的一项技能。\n\n可能是多方面原因，一个是收纳算是一个相对比较小众和细分的概念，还有待更多的推广和发展，需要上下游商家加入进来；第二个收纳其实是一项技术活，需要一定的时间和财力，很多人生活都很疲惫了，自然就得过且过，能住就行；第三个，我认为也是最重要的一个，收纳带来的结果，大多数时候都需要我们能够断舍离，需要先做减法。这与很大一部分人的思想和习惯违背。尤其是老人们，经历过物资匮乏的年代，养成了什么都留下来的习惯。无可指摘。\n\n不少朋友，会把一些可能用得上的，看上去有点好看，但是又不知道能用在哪里的包装盒，一一保存；从我的窗户看出去，很多人家的阳台都堆得满满当当，一些旧纸箱，压在下面可能一两年都不会打开，但是又舍不得扔掉，总是抱着以后可能会用到吧的想法，不知不觉，越积越多。\n\n每次换租的时候，在租房应用上看房东上传的图片，有时候真的会瞠目结舌。一些十万一平的房子，堆着各种锅碗瓢盆大型纸箱，仿佛是花钱给垃圾找了个住处。\n\n回到书上，一本小册子，很快就读完了，而且看着作者的房间收拾得干干净净，很是减压。\n\n收纳的第一个原则是少买，控制自己的消费欲。否则，多大的房子也装不完买来的垃圾。\n\n家务清零，不要积攒。这点我很认同，家务事应该就像放在内存里，看到立即处理，否则容易死机。我每天回家会拿扫把呼呼拉拉晃一圈，扫走一些浮灰，花不了三分钟，周末再整体拖一遍，基本上能保证地板整洁，人也不累。\n\n每月一天深度清洁；原来和房东合租，免得添麻烦，更注意房间清洁，每个周末都是先吸尘，再拖地，然后擦马桶，洗浴缸，最后洗个痛快澡。回国自己租房，有些懈怠，更多仰仗自如保洁阿姨。遇到几位，感觉还没我自己做的仔细。\n\n把家具挂起来，保持地面整洁，便于打扫；这个点子很好，但是租房的可操作性比较低，现在都是用的自如的家具，本身就没什么设计感。如果是自己装修的房子，衣柜橱柜都顶天立地。好的设计，能少许多卫生死角。\n\n这本书最让我触动的是作者提到，两个人的共同生活里，最重要的是”让双方都觉得方便“，“让彼此都生活的没有压力”，我深以为然。一起生活，得照顾两个人的感受，不能说一个人方便爽了，另一个人委屈。更不能有我不舒服，也不让你好过的心态。\n\n前段时间和朋友喝酒，聊起居家育儿，说到小孩子的碗不能用洗碗机洗，要用婴幼儿专用洗洁精，丈夫洗碗老婆在后面盯着是不是按照流程来，诸如此类的故事。不知道他们是开玩笑还是确有其事，我还没到那个时候，也不大懂。只是觉得，有的时候过得很累，纯是自找。\n\n写了些题外话，总的来说，书中规中矩，收纳需要慢慢学，慢慢实验，适合自己的才是最好的。\n\n这篇文章花了2个番茄时间。\n\n\n","source":"_posts/我读《两个人的小家》.md","raw":"---\ntitle: 我读《两个人的小家》\nabbrlink: couple-house\ndate: 2022-02-09 21:20:34\ncategories:\n  - life\ntags:\n  - 收纳\n---\n\n2022年第三本书。\n\n我一直觉得收纳技巧是我们成长过程中比较缺失的一项技能。\n\n可能是多方面原因，一个是收纳算是一个相对比较小众和细分的概念，还有待更多的推广和发展，需要上下游商家加入进来；第二个收纳其实是一项技术活，需要一定的时间和财力，很多人生活都很疲惫了，自然就得过且过，能住就行；第三个，我认为也是最重要的一个，收纳带来的结果，大多数时候都需要我们能够断舍离，需要先做减法。这与很大一部分人的思想和习惯违背。尤其是老人们，经历过物资匮乏的年代，养成了什么都留下来的习惯。无可指摘。\n\n不少朋友，会把一些可能用得上的，看上去有点好看，但是又不知道能用在哪里的包装盒，一一保存；从我的窗户看出去，很多人家的阳台都堆得满满当当，一些旧纸箱，压在下面可能一两年都不会打开，但是又舍不得扔掉，总是抱着以后可能会用到吧的想法，不知不觉，越积越多。\n\n每次换租的时候，在租房应用上看房东上传的图片，有时候真的会瞠目结舌。一些十万一平的房子，堆着各种锅碗瓢盆大型纸箱，仿佛是花钱给垃圾找了个住处。\n\n回到书上，一本小册子，很快就读完了，而且看着作者的房间收拾得干干净净，很是减压。\n\n收纳的第一个原则是少买，控制自己的消费欲。否则，多大的房子也装不完买来的垃圾。\n\n家务清零，不要积攒。这点我很认同，家务事应该就像放在内存里，看到立即处理，否则容易死机。我每天回家会拿扫把呼呼拉拉晃一圈，扫走一些浮灰，花不了三分钟，周末再整体拖一遍，基本上能保证地板整洁，人也不累。\n\n每月一天深度清洁；原来和房东合租，免得添麻烦，更注意房间清洁，每个周末都是先吸尘，再拖地，然后擦马桶，洗浴缸，最后洗个痛快澡。回国自己租房，有些懈怠，更多仰仗自如保洁阿姨。遇到几位，感觉还没我自己做的仔细。\n\n把家具挂起来，保持地面整洁，便于打扫；这个点子很好，但是租房的可操作性比较低，现在都是用的自如的家具，本身就没什么设计感。如果是自己装修的房子，衣柜橱柜都顶天立地。好的设计，能少许多卫生死角。\n\n这本书最让我触动的是作者提到，两个人的共同生活里，最重要的是”让双方都觉得方便“，“让彼此都生活的没有压力”，我深以为然。一起生活，得照顾两个人的感受，不能说一个人方便爽了，另一个人委屈。更不能有我不舒服，也不让你好过的心态。\n\n前段时间和朋友喝酒，聊起居家育儿，说到小孩子的碗不能用洗碗机洗，要用婴幼儿专用洗洁精，丈夫洗碗老婆在后面盯着是不是按照流程来，诸如此类的故事。不知道他们是开玩笑还是确有其事，我还没到那个时候，也不大懂。只是觉得，有的时候过得很累，纯是自找。\n\n写了些题外话，总的来说，书中规中矩，收纳需要慢慢学，慢慢实验，适合自己的才是最好的。\n\n这篇文章花了2个番茄时间。\n\n\n","slug":"我读《两个人的小家》","published":1,"updated":"2022-03-07T03:33:29.590Z","_id":"ckzlapeg00002fys6eziy9pry","comments":1,"layout":"post","photos":[],"link":"","content":"<p>2022年第三本书。</p>\n<p>我一直觉得收纳技巧是我们成长过程中比较缺失的一项技能。</p>\n<p>可能是多方面原因，一个是收纳算是一个相对比较小众和细分的概念，还有待更多的推广和发展，需要上下游商家加入进来；第二个收纳其实是一项技术活，需要一定的时间和财力，很多人生活都很疲惫了，自然就得过且过，能住就行；第三个，我认为也是最重要的一个，收纳带来的结果，大多数时候都需要我们能够断舍离，需要先做减法。这与很大一部分人的思想和习惯违背。尤其是老人们，经历过物资匮乏的年代，养成了什么都留下来的习惯。无可指摘。</p>\n<p>不少朋友，会把一些可能用得上的，看上去有点好看，但是又不知道能用在哪里的包装盒，一一保存；从我的窗户看出去，很多人家的阳台都堆得满满当当，一些旧纸箱，压在下面可能一两年都不会打开，但是又舍不得扔掉，总是抱着以后可能会用到吧的想法，不知不觉，越积越多。</p>\n<p>每次换租的时候，在租房应用上看房东上传的图片，有时候真的会瞠目结舌。一些十万一平的房子，堆着各种锅碗瓢盆大型纸箱，仿佛是花钱给垃圾找了个住处。</p>\n<p>回到书上，一本小册子，很快就读完了，而且看着作者的房间收拾得干干净净，很是减压。</p>\n<p>收纳的第一个原则是少买，控制自己的消费欲。否则，多大的房子也装不完买来的垃圾。</p>\n<p>家务清零，不要积攒。这点我很认同，家务事应该就像放在内存里，看到立即处理，否则容易死机。我每天回家会拿扫把呼呼拉拉晃一圈，扫走一些浮灰，花不了三分钟，周末再整体拖一遍，基本上能保证地板整洁，人也不累。</p>\n<p>每月一天深度清洁；原来和房东合租，免得添麻烦，更注意房间清洁，每个周末都是先吸尘，再拖地，然后擦马桶，洗浴缸，最后洗个痛快澡。回国自己租房，有些懈怠，更多仰仗自如保洁阿姨。遇到几位，感觉还没我自己做的仔细。</p>\n<p>把家具挂起来，保持地面整洁，便于打扫；这个点子很好，但是租房的可操作性比较低，现在都是用的自如的家具，本身就没什么设计感。如果是自己装修的房子，衣柜橱柜都顶天立地。好的设计，能少许多卫生死角。</p>\n<p>这本书最让我触动的是作者提到，两个人的共同生活里，最重要的是”让双方都觉得方便“，“让彼此都生活的没有压力”，我深以为然。一起生活，得照顾两个人的感受，不能说一个人方便爽了，另一个人委屈。更不能有我不舒服，也不让你好过的心态。</p>\n<p>前段时间和朋友喝酒，聊起居家育儿，说到小孩子的碗不能用洗碗机洗，要用婴幼儿专用洗洁精，丈夫洗碗老婆在后面盯着是不是按照流程来，诸如此类的故事。不知道他们是开玩笑还是确有其事，我还没到那个时候，也不大懂。只是觉得，有的时候过得很累，纯是自找。</p>\n<p>写了些题外话，总的来说，书中规中矩，收纳需要慢慢学，慢慢实验，适合自己的才是最好的。</p>\n<p>这篇文章花了2个番茄时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2022年第三本书。</p>\n<p>我一直觉得收纳技巧是我们成长过程中比较缺失的一项技能。</p>\n<p>可能是多方面原因，一个是收纳算是一个相对比较小众和细分的概念，还有待更多的推广和发展，需要上下游商家加入进来；第二个收纳其实是一项技术活，需要一定的时间和财力，很多人生活都很疲惫了，自然就得过且过，能住就行；第三个，我认为也是最重要的一个，收纳带来的结果，大多数时候都需要我们能够断舍离，需要先做减法。这与很大一部分人的思想和习惯违背。尤其是老人们，经历过物资匮乏的年代，养成了什么都留下来的习惯。无可指摘。</p>\n<p>不少朋友，会把一些可能用得上的，看上去有点好看，但是又不知道能用在哪里的包装盒，一一保存；从我的窗户看出去，很多人家的阳台都堆得满满当当，一些旧纸箱，压在下面可能一两年都不会打开，但是又舍不得扔掉，总是抱着以后可能会用到吧的想法，不知不觉，越积越多。</p>\n<p>每次换租的时候，在租房应用上看房东上传的图片，有时候真的会瞠目结舌。一些十万一平的房子，堆着各种锅碗瓢盆大型纸箱，仿佛是花钱给垃圾找了个住处。</p>\n<p>回到书上，一本小册子，很快就读完了，而且看着作者的房间收拾得干干净净，很是减压。</p>\n<p>收纳的第一个原则是少买，控制自己的消费欲。否则，多大的房子也装不完买来的垃圾。</p>\n<p>家务清零，不要积攒。这点我很认同，家务事应该就像放在内存里，看到立即处理，否则容易死机。我每天回家会拿扫把呼呼拉拉晃一圈，扫走一些浮灰，花不了三分钟，周末再整体拖一遍，基本上能保证地板整洁，人也不累。</p>\n<p>每月一天深度清洁；原来和房东合租，免得添麻烦，更注意房间清洁，每个周末都是先吸尘，再拖地，然后擦马桶，洗浴缸，最后洗个痛快澡。回国自己租房，有些懈怠，更多仰仗自如保洁阿姨。遇到几位，感觉还没我自己做的仔细。</p>\n<p>把家具挂起来，保持地面整洁，便于打扫；这个点子很好，但是租房的可操作性比较低，现在都是用的自如的家具，本身就没什么设计感。如果是自己装修的房子，衣柜橱柜都顶天立地。好的设计，能少许多卫生死角。</p>\n<p>这本书最让我触动的是作者提到，两个人的共同生活里，最重要的是”让双方都觉得方便“，“让彼此都生活的没有压力”，我深以为然。一起生活，得照顾两个人的感受，不能说一个人方便爽了，另一个人委屈。更不能有我不舒服，也不让你好过的心态。</p>\n<p>前段时间和朋友喝酒，聊起居家育儿，说到小孩子的碗不能用洗碗机洗，要用婴幼儿专用洗洁精，丈夫洗碗老婆在后面盯着是不是按照流程来，诸如此类的故事。不知道他们是开玩笑还是确有其事，我还没到那个时候，也不大懂。只是觉得，有的时候过得很累，纯是自找。</p>\n<p>写了些题外话，总的来说，书中规中矩，收纳需要慢慢学，慢慢实验，适合自己的才是最好的。</p>\n<p>这篇文章花了2个番茄时间。</p>\n"},{"title":"摩擦力","date":"2022-03-06T04:12:49.000Z","abbrlink":"2022-03-week-1","_content":"\n三月的第一周。\n\n最近每天上下班都听播客，听比较多的是 happy xiao。他的话题我都比较感兴趣，比如效能工具，个人效率，投资学习等等。近期的听完了，开始听一些早期的。在语速语调的控制，聚焦主题，表达技巧和效率，敢于表达自己的观点这几个方面，可以明显感觉他的进步。\n\n我和朋友说自己也想录个播客玩玩，但是感觉自己无法做到持续的输入，势必无法保证输出的质量。所以还是先养成写作的习惯，等到自己的资源池子更多一些，再尝试。\n\n本周有两点觉得有趣，值得记录分享，一个是“摩擦力”，一个是“那又怎么说论”。\n\n摩擦力是指做任何事情时遇到的阻力。我们要养成某个习惯，首要做的就是减少摩擦力。某朋友20年国庆去西北旅行，22年了片子还没做好。拿写作来说，最大的摩擦力来源两点，一个是对最终成果不切实际的幻想，总想写出好文章。一个是写的过程中思维的停滞，以及一部分文采辞藻的不足。如何克服？我的计划是，规定好完成时间，列好大纲，到时间就停。先写起来，再写好。\n\n那又怎么说，whataboutism。具体的解释参考wiki。这种逻辑谬误，试图通过指出对方言行不一之处，削弱其可信度，但不反驳对方的论点。我觉得日常生活中遇到的场景还是很多的。\n\n周六去超级猩猩参加了一次拳击课程，两个人一组，一个打沙袋，一个帮扶。第一节课教了几个出拳的组合，感觉很有趣。打拳的时候非常专注，又非常减压，心率也快，而且一个小时下来热量消耗也很大。已经约了下一周的课，很想坚持下去，等熟悉了再买自己的拳套。\n\n这周还办了乐刻的季卡，跑了两次步。计划每周一力量，周三游泳，周五跑步，周六拳击。\n\n这篇文章花了一个番茄时间。\n\n","source":"_posts/2022-03-week-1.md","raw":"---\ntitle: 摩擦力\ndate: 2022-03-05 20:12:49\nabbrlink: 2022-03-week-1\ncategories:\n    - report \ntags:\n    - week\n---\n\n三月的第一周。\n\n最近每天上下班都听播客，听比较多的是 happy xiao。他的话题我都比较感兴趣，比如效能工具，个人效率，投资学习等等。近期的听完了，开始听一些早期的。在语速语调的控制，聚焦主题，表达技巧和效率，敢于表达自己的观点这几个方面，可以明显感觉他的进步。\n\n我和朋友说自己也想录个播客玩玩，但是感觉自己无法做到持续的输入，势必无法保证输出的质量。所以还是先养成写作的习惯，等到自己的资源池子更多一些，再尝试。\n\n本周有两点觉得有趣，值得记录分享，一个是“摩擦力”，一个是“那又怎么说论”。\n\n摩擦力是指做任何事情时遇到的阻力。我们要养成某个习惯，首要做的就是减少摩擦力。某朋友20年国庆去西北旅行，22年了片子还没做好。拿写作来说，最大的摩擦力来源两点，一个是对最终成果不切实际的幻想，总想写出好文章。一个是写的过程中思维的停滞，以及一部分文采辞藻的不足。如何克服？我的计划是，规定好完成时间，列好大纲，到时间就停。先写起来，再写好。\n\n那又怎么说，whataboutism。具体的解释参考wiki。这种逻辑谬误，试图通过指出对方言行不一之处，削弱其可信度，但不反驳对方的论点。我觉得日常生活中遇到的场景还是很多的。\n\n周六去超级猩猩参加了一次拳击课程，两个人一组，一个打沙袋，一个帮扶。第一节课教了几个出拳的组合，感觉很有趣。打拳的时候非常专注，又非常减压，心率也快，而且一个小时下来热量消耗也很大。已经约了下一周的课，很想坚持下去，等熟悉了再买自己的拳套。\n\n这周还办了乐刻的季卡，跑了两次步。计划每周一力量，周三游泳，周五跑步，周六拳击。\n\n这篇文章花了一个番茄时间。\n\n","slug":"2022-03-week-1","published":1,"updated":"2022-04-09T15:18:26.992Z","_id":"cl10dfpqd0003dy4nh3kk4jpx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>三月的第一周。</p>\n<p>最近每天上下班都听播客，听比较多的是 happy xiao。他的话题我都比较感兴趣，比如效能工具，个人效率，投资学习等等。近期的听完了，开始听一些早期的。在语速语调的控制，聚焦主题，表达技巧和效率，敢于表达自己的观点这几个方面，可以明显感觉他的进步。</p>\n<p>我和朋友说自己也想录个播客玩玩，但是感觉自己无法做到持续的输入，势必无法保证输出的质量。所以还是先养成写作的习惯，等到自己的资源池子更多一些，再尝试。</p>\n<p>本周有两点觉得有趣，值得记录分享，一个是“摩擦力”，一个是“那又怎么说论”。</p>\n<p>摩擦力是指做任何事情时遇到的阻力。我们要养成某个习惯，首要做的就是减少摩擦力。某朋友20年国庆去西北旅行，22年了片子还没做好。拿写作来说，最大的摩擦力来源两点，一个是对最终成果不切实际的幻想，总想写出好文章。一个是写的过程中思维的停滞，以及一部分文采辞藻的不足。如何克服？我的计划是，规定好完成时间，列好大纲，到时间就停。先写起来，再写好。</p>\n<p>那又怎么说，whataboutism。具体的解释参考wiki。这种逻辑谬误，试图通过指出对方言行不一之处，削弱其可信度，但不反驳对方的论点。我觉得日常生活中遇到的场景还是很多的。</p>\n<p>周六去超级猩猩参加了一次拳击课程，两个人一组，一个打沙袋，一个帮扶。第一节课教了几个出拳的组合，感觉很有趣。打拳的时候非常专注，又非常减压，心率也快，而且一个小时下来热量消耗也很大。已经约了下一周的课，很想坚持下去，等熟悉了再买自己的拳套。</p>\n<p>这周还办了乐刻的季卡，跑了两次步。计划每周一力量，周三游泳，周五跑步，周六拳击。</p>\n<p>这篇文章花了一个番茄时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>三月的第一周。</p>\n<p>最近每天上下班都听播客，听比较多的是 happy xiao。他的话题我都比较感兴趣，比如效能工具，个人效率，投资学习等等。近期的听完了，开始听一些早期的。在语速语调的控制，聚焦主题，表达技巧和效率，敢于表达自己的观点这几个方面，可以明显感觉他的进步。</p>\n<p>我和朋友说自己也想录个播客玩玩，但是感觉自己无法做到持续的输入，势必无法保证输出的质量。所以还是先养成写作的习惯，等到自己的资源池子更多一些，再尝试。</p>\n<p>本周有两点觉得有趣，值得记录分享，一个是“摩擦力”，一个是“那又怎么说论”。</p>\n<p>摩擦力是指做任何事情时遇到的阻力。我们要养成某个习惯，首要做的就是减少摩擦力。某朋友20年国庆去西北旅行，22年了片子还没做好。拿写作来说，最大的摩擦力来源两点，一个是对最终成果不切实际的幻想，总想写出好文章。一个是写的过程中思维的停滞，以及一部分文采辞藻的不足。如何克服？我的计划是，规定好完成时间，列好大纲，到时间就停。先写起来，再写好。</p>\n<p>那又怎么说，whataboutism。具体的解释参考wiki。这种逻辑谬误，试图通过指出对方言行不一之处，削弱其可信度，但不反驳对方的论点。我觉得日常生活中遇到的场景还是很多的。</p>\n<p>周六去超级猩猩参加了一次拳击课程，两个人一组，一个打沙袋，一个帮扶。第一节课教了几个出拳的组合，感觉很有趣。打拳的时候非常专注，又非常减压，心率也快，而且一个小时下来热量消耗也很大。已经约了下一周的课，很想坚持下去，等熟悉了再买自己的拳套。</p>\n<p>这周还办了乐刻的季卡，跑了两次步。计划每周一力量，周三游泳，周五跑步，周六拳击。</p>\n<p>这篇文章花了一个番茄时间。</p>\n"},{"title":"数字卫生","date":"2022-03-14T00:20:41.000Z","abbrlink":"2022-03-week-2","_content":"\n三月的第二周。\n\n这周第二次去打拳击，大约一点出门，有些晚，到了大悦城，死活找不到门店，越走越急。迟到不说，错过了热身和找队友，自己一个人打节奏不好把握。下次得12点40出门。\n\n打拳运动可以减压实在不假，本来因为找不到门店，十分暴躁，对着沙袋打了一会，出点汗，人神清气爽。\n\n本周想聊聊数字卫生，[digital hygine](https://seths.blog/2015/04/five-steps-to-digital-hygiene)。我觉得有两条比较适合，再加上我自己最近实施的习惯。总结如下：\n\n1. 关掉邮件和社交媒体的通知。\n2. 不要阅读评论。不论是自己的文章，还是其他人的文章，不看任何钓鱼或者引战内容。\n3. 不要把手机带进卧室。\n\n我的手机应用基本上只有微信给予推送权限，其他的一概关闭。目前如果不是需要和家人视频的时候，都能保持在四个半小时以内，希望可以再少点。\n\n互联网上每个人的知识储备，社会经验，认知水平千差万别，评论基本是鸡同鸭讲，大部分是宣泄情绪，而不是理性沟通，看别人的评论，除了让自己血压升高，心生迷惑以外，没有任何益处。\n\n每天睡前把手机放在客厅，实施有一段时间了，但是效果并不好。原因是总担心自己睡前会不会想刷下或者查点资料。其实想查的想刷的并没有很重要。最近开始强制执行，在床头放了个本子，如果有什么突然需要查记的，先写在纸上。在希望能养成习惯。\n\n应该每周日创建好新的一周的文档，这样有想写的内容，可以以词句的形式记录，周末再扩展。\n\n这篇文章花了一个番茄时间。\n","source":"_posts/2022-03-week-2.md","raw":"---\ntitle: 数字卫生\ndate: 2022-03-13 16:20:41\nabbrlink: 2022-03-week-2\ncategories:\n    - report \ntags:\n    - week\n---\n\n三月的第二周。\n\n这周第二次去打拳击，大约一点出门，有些晚，到了大悦城，死活找不到门店，越走越急。迟到不说，错过了热身和找队友，自己一个人打节奏不好把握。下次得12点40出门。\n\n打拳运动可以减压实在不假，本来因为找不到门店，十分暴躁，对着沙袋打了一会，出点汗，人神清气爽。\n\n本周想聊聊数字卫生，[digital hygine](https://seths.blog/2015/04/five-steps-to-digital-hygiene)。我觉得有两条比较适合，再加上我自己最近实施的习惯。总结如下：\n\n1. 关掉邮件和社交媒体的通知。\n2. 不要阅读评论。不论是自己的文章，还是其他人的文章，不看任何钓鱼或者引战内容。\n3. 不要把手机带进卧室。\n\n我的手机应用基本上只有微信给予推送权限，其他的一概关闭。目前如果不是需要和家人视频的时候，都能保持在四个半小时以内，希望可以再少点。\n\n互联网上每个人的知识储备，社会经验，认知水平千差万别，评论基本是鸡同鸭讲，大部分是宣泄情绪，而不是理性沟通，看别人的评论，除了让自己血压升高，心生迷惑以外，没有任何益处。\n\n每天睡前把手机放在客厅，实施有一段时间了，但是效果并不好。原因是总担心自己睡前会不会想刷下或者查点资料。其实想查的想刷的并没有很重要。最近开始强制执行，在床头放了个本子，如果有什么突然需要查记的，先写在纸上。在希望能养成习惯。\n\n应该每周日创建好新的一周的文档，这样有想写的内容，可以以词句的形式记录，周末再扩展。\n\n这篇文章花了一个番茄时间。\n","slug":"2022-03-week-2","published":1,"updated":"2022-04-09T14:33:22.602Z","_id":"cl10dfpqe0005dy4n9d1p3itp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>三月的第二周。</p>\n<p>这周第二次去打拳击，大约一点出门，有些晚，到了大悦城，死活找不到门店，越走越急。迟到不说，错过了热身和找队友，自己一个人打节奏不好把握。下次得12点40出门。</p>\n<p>打拳运动可以减压实在不假，本来因为找不到门店，十分暴躁，对着沙袋打了一会，出点汗，人神清气爽。</p>\n<p>本周想聊聊数字卫生，<a href=\"https://seths.blog/2015/04/five-steps-to-digital-hygiene\">digital hygine</a>。我觉得有两条比较适合，再加上我自己最近实施的习惯。总结如下：</p>\n<ol>\n<li>关掉邮件和社交媒体的通知。</li>\n<li>不要阅读评论。不论是自己的文章，还是其他人的文章，不看任何钓鱼或者引战内容。</li>\n<li>不要把手机带进卧室。</li>\n</ol>\n<p>我的手机应用基本上只有微信给予推送权限，其他的一概关闭。目前如果不是需要和家人视频的时候，都能保持在四个半小时以内，希望可以再少点。</p>\n<p>互联网上每个人的知识储备，社会经验，认知水平千差万别，评论基本是鸡同鸭讲，大部分是宣泄情绪，而不是理性沟通，看别人的评论，除了让自己血压升高，心生迷惑以外，没有任何益处。</p>\n<p>每天睡前把手机放在客厅，实施有一段时间了，但是效果并不好。原因是总担心自己睡前会不会想刷下或者查点资料。其实想查的想刷的并没有很重要。最近开始强制执行，在床头放了个本子，如果有什么突然需要查记的，先写在纸上。在希望能养成习惯。</p>\n<p>应该每周日创建好新的一周的文档，这样有想写的内容，可以以词句的形式记录，周末再扩展。</p>\n<p>这篇文章花了一个番茄时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>三月的第二周。</p>\n<p>这周第二次去打拳击，大约一点出门，有些晚，到了大悦城，死活找不到门店，越走越急。迟到不说，错过了热身和找队友，自己一个人打节奏不好把握。下次得12点40出门。</p>\n<p>打拳运动可以减压实在不假，本来因为找不到门店，十分暴躁，对着沙袋打了一会，出点汗，人神清气爽。</p>\n<p>本周想聊聊数字卫生，<a href=\"https://seths.blog/2015/04/five-steps-to-digital-hygiene\">digital hygine</a>。我觉得有两条比较适合，再加上我自己最近实施的习惯。总结如下：</p>\n<ol>\n<li>关掉邮件和社交媒体的通知。</li>\n<li>不要阅读评论。不论是自己的文章，还是其他人的文章，不看任何钓鱼或者引战内容。</li>\n<li>不要把手机带进卧室。</li>\n</ol>\n<p>我的手机应用基本上只有微信给予推送权限，其他的一概关闭。目前如果不是需要和家人视频的时候，都能保持在四个半小时以内，希望可以再少点。</p>\n<p>互联网上每个人的知识储备，社会经验，认知水平千差万别，评论基本是鸡同鸭讲，大部分是宣泄情绪，而不是理性沟通，看别人的评论，除了让自己血压升高，心生迷惑以外，没有任何益处。</p>\n<p>每天睡前把手机放在客厅，实施有一段时间了，但是效果并不好。原因是总担心自己睡前会不会想刷下或者查点资料。其实想查的想刷的并没有很重要。最近开始强制执行，在床头放了个本子，如果有什么突然需要查记的，先写在纸上。在希望能养成习惯。</p>\n<p>应该每周日创建好新的一周的文档，这样有想写的内容，可以以词句的形式记录，周末再扩展。</p>\n<p>这篇文章花了一个番茄时间。</p>\n"},{"title":"假洋鬼子","date":"2022-03-21T05:38:26.000Z","abbrlink":"2022-03-week-3","_content":"\n三月的第三周。\n\n周五晚上和朋友喝酒，感觉有点喝多了，第二天还没代谢完，虽然起得早，但昏昏沉沉，身体疲惫，拳击也没有去成。喝酒如何点到为止，是个问题。\n\n周六下午感觉实在不得劲，去跑了个步，意料之外的状态还不错。7公里53分钟多一点。接下来我希望能7公里在50分钟以内，1小时8公里。\n\n周日在家看完《生死疲劳》，一本好书，下周我需要花一小时写篇笔记。今年应该还会再读几本莫言的书，《蛙》，《四十一炮》。\n\n这周想聊中英文夹杂这个老生常谈的问题。取决于屁股的位置，一方认为假洋鬼子，一方认为习以为常。经常在网上看到的一些中英文夹杂的视频，我感觉大多是是放大这种刻板印象，吸引看客评论和传播。\n\n除了这些陈词滥调不表，我突然有一个想法，或是猜想，就是语言的弱化问题。打个比方，汉语说的“讲道理”，本来是一个非常客观的词，但是被视频主播挂在嘴边，动辄“讲道理”，这个词就变成一个十分弱化的口头禅。再者，因为网络语言语境的冲击，比如，“我明明都生气了，你还要跟我讲道理”，也对这个短语造成影响，将原本的含义进行了弱化，当人们看到这个词的时候，可能会产生一些无关的联想。\n\n我想这可能也是切换语言带来的逻辑思考问题。\n\n比如，我想找个讲道理的女朋友，这句话。可能看客的第一想法是，女生竟然还要讲道理？但是如果说，我想这个reasonable的女朋友，我想可能更直观，也不那么容易迅速起杠。\n\n比如，我想要一份得体的生活和工作，可能很容易引发你如何定义得体，什么工作就不得体了，诸如此类的问题。decent 在这里可能是个更好，更清晰表述的词语。\n\n当然我所描述的背景，是基于双方同等逻辑思辨能力的讨论。如果不在一个水平线上，可能关注的话题就又回到了假洋鬼子的角度了。\n\n今天的文章应该昨天写完发，但是昨晚训练搏击回来就不想动了，这周还是要在周末结束。\n\n一个新的原则，周报只写800字以内，减小摩擦力，只写最想表达的，这样才能养成习惯保持下去。如果还有没有表述完的，就挪到下周继续写，或者开一个新文章。\n\n这篇文章花了两个番茄时间。写完发布后，饭后回来做了些许修改。\n","source":"_posts/2022-03-week-3.md","raw":"---\ntitle: 假洋鬼子\ndate: 2022-03-20 22:38:26\nabbrlink: 2022-03-week-3\ncategories:\n  - report\ntags:\n  - week\n---\n\n三月的第三周。\n\n周五晚上和朋友喝酒，感觉有点喝多了，第二天还没代谢完，虽然起得早，但昏昏沉沉，身体疲惫，拳击也没有去成。喝酒如何点到为止，是个问题。\n\n周六下午感觉实在不得劲，去跑了个步，意料之外的状态还不错。7公里53分钟多一点。接下来我希望能7公里在50分钟以内，1小时8公里。\n\n周日在家看完《生死疲劳》，一本好书，下周我需要花一小时写篇笔记。今年应该还会再读几本莫言的书，《蛙》，《四十一炮》。\n\n这周想聊中英文夹杂这个老生常谈的问题。取决于屁股的位置，一方认为假洋鬼子，一方认为习以为常。经常在网上看到的一些中英文夹杂的视频，我感觉大多是是放大这种刻板印象，吸引看客评论和传播。\n\n除了这些陈词滥调不表，我突然有一个想法，或是猜想，就是语言的弱化问题。打个比方，汉语说的“讲道理”，本来是一个非常客观的词，但是被视频主播挂在嘴边，动辄“讲道理”，这个词就变成一个十分弱化的口头禅。再者，因为网络语言语境的冲击，比如，“我明明都生气了，你还要跟我讲道理”，也对这个短语造成影响，将原本的含义进行了弱化，当人们看到这个词的时候，可能会产生一些无关的联想。\n\n我想这可能也是切换语言带来的逻辑思考问题。\n\n比如，我想找个讲道理的女朋友，这句话。可能看客的第一想法是，女生竟然还要讲道理？但是如果说，我想这个reasonable的女朋友，我想可能更直观，也不那么容易迅速起杠。\n\n比如，我想要一份得体的生活和工作，可能很容易引发你如何定义得体，什么工作就不得体了，诸如此类的问题。decent 在这里可能是个更好，更清晰表述的词语。\n\n当然我所描述的背景，是基于双方同等逻辑思辨能力的讨论。如果不在一个水平线上，可能关注的话题就又回到了假洋鬼子的角度了。\n\n今天的文章应该昨天写完发，但是昨晚训练搏击回来就不想动了，这周还是要在周末结束。\n\n一个新的原则，周报只写800字以内，减小摩擦力，只写最想表达的，这样才能养成习惯保持下去。如果还有没有表述完的，就挪到下周继续写，或者开一个新文章。\n\n这篇文章花了两个番茄时间。写完发布后，饭后回来做了些许修改。\n","slug":"2022-03-week-3","published":1,"updated":"2022-04-09T15:18:40.771Z","_id":"cl10dfpqh000cdy4n51cb9h4f","comments":1,"layout":"post","photos":[],"link":"","content":"<p>三月的第三周。</p>\n<p>周五晚上和朋友喝酒，感觉有点喝多了，第二天还没代谢完，虽然起得早，但昏昏沉沉，身体疲惫，拳击也没有去成。喝酒如何点到为止，是个问题。</p>\n<p>周六下午感觉实在不得劲，去跑了个步，意料之外的状态还不错。7公里53分钟多一点。接下来我希望能7公里在50分钟以内，1小时8公里。</p>\n<p>周日在家看完《生死疲劳》，一本好书，下周我需要花一小时写篇笔记。今年应该还会再读几本莫言的书，《蛙》，《四十一炮》。</p>\n<p>这周想聊中英文夹杂这个老生常谈的问题。取决于屁股的位置，一方认为假洋鬼子，一方认为习以为常。经常在网上看到的一些中英文夹杂的视频，我感觉大多是是放大这种刻板印象，吸引看客评论和传播。</p>\n<p>除了这些陈词滥调不表，我突然有一个想法，或是猜想，就是语言的弱化问题。打个比方，汉语说的“讲道理”，本来是一个非常客观的词，但是被视频主播挂在嘴边，动辄“讲道理”，这个词就变成一个十分弱化的口头禅。再者，因为网络语言语境的冲击，比如，“我明明都生气了，你还要跟我讲道理”，也对这个短语造成影响，将原本的含义进行了弱化，当人们看到这个词的时候，可能会产生一些无关的联想。</p>\n<p>我想这可能也是切换语言带来的逻辑思考问题。</p>\n<p>比如，我想找个讲道理的女朋友，这句话。可能看客的第一想法是，女生竟然还要讲道理？但是如果说，我想这个reasonable的女朋友，我想可能更直观，也不那么容易迅速起杠。</p>\n<p>比如，我想要一份得体的生活和工作，可能很容易引发你如何定义得体，什么工作就不得体了，诸如此类的问题。decent 在这里可能是个更好，更清晰表述的词语。</p>\n<p>当然我所描述的背景，是基于双方同等逻辑思辨能力的讨论。如果不在一个水平线上，可能关注的话题就又回到了假洋鬼子的角度了。</p>\n<p>今天的文章应该昨天写完发，但是昨晚训练搏击回来就不想动了，这周还是要在周末结束。</p>\n<p>一个新的原则，周报只写800字以内，减小摩擦力，只写最想表达的，这样才能养成习惯保持下去。如果还有没有表述完的，就挪到下周继续写，或者开一个新文章。</p>\n<p>这篇文章花了两个番茄时间。写完发布后，饭后回来做了些许修改。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>三月的第三周。</p>\n<p>周五晚上和朋友喝酒，感觉有点喝多了，第二天还没代谢完，虽然起得早，但昏昏沉沉，身体疲惫，拳击也没有去成。喝酒如何点到为止，是个问题。</p>\n<p>周六下午感觉实在不得劲，去跑了个步，意料之外的状态还不错。7公里53分钟多一点。接下来我希望能7公里在50分钟以内，1小时8公里。</p>\n<p>周日在家看完《生死疲劳》，一本好书，下周我需要花一小时写篇笔记。今年应该还会再读几本莫言的书，《蛙》，《四十一炮》。</p>\n<p>这周想聊中英文夹杂这个老生常谈的问题。取决于屁股的位置，一方认为假洋鬼子，一方认为习以为常。经常在网上看到的一些中英文夹杂的视频，我感觉大多是是放大这种刻板印象，吸引看客评论和传播。</p>\n<p>除了这些陈词滥调不表，我突然有一个想法，或是猜想，就是语言的弱化问题。打个比方，汉语说的“讲道理”，本来是一个非常客观的词，但是被视频主播挂在嘴边，动辄“讲道理”，这个词就变成一个十分弱化的口头禅。再者，因为网络语言语境的冲击，比如，“我明明都生气了，你还要跟我讲道理”，也对这个短语造成影响，将原本的含义进行了弱化，当人们看到这个词的时候，可能会产生一些无关的联想。</p>\n<p>我想这可能也是切换语言带来的逻辑思考问题。</p>\n<p>比如，我想找个讲道理的女朋友，这句话。可能看客的第一想法是，女生竟然还要讲道理？但是如果说，我想这个reasonable的女朋友，我想可能更直观，也不那么容易迅速起杠。</p>\n<p>比如，我想要一份得体的生活和工作，可能很容易引发你如何定义得体，什么工作就不得体了，诸如此类的问题。decent 在这里可能是个更好，更清晰表述的词语。</p>\n<p>当然我所描述的背景，是基于双方同等逻辑思辨能力的讨论。如果不在一个水平线上，可能关注的话题就又回到了假洋鬼子的角度了。</p>\n<p>今天的文章应该昨天写完发，但是昨晚训练搏击回来就不想动了，这周还是要在周末结束。</p>\n<p>一个新的原则，周报只写800字以内，减小摩擦力，只写最想表达的，这样才能养成习惯保持下去。如果还有没有表述完的，就挪到下周继续写，或者开一个新文章。</p>\n<p>这篇文章花了两个番茄时间。写完发布后，饭后回来做了些许修改。</p>\n"},{"title":"平安是最大的幸福","date":"2022-03-27T18:35:14.000Z","abbrlink":"2022-03-week-4","_content":"\n三月的第四周，最重要的新闻会来找你。\n\n本周最震惊的消息是东航的事故，让人心生触动，久久不能释怀，低沉了好几天。在思考生活的本质什么，生命的目的是什么，可能到最终，平安健康才是最重要的。平时说这些话也许很苍白，但是在事故面前，即使这种平凡也变成奢求。\n\n这周在对未来进行一个很粗浅的时间节点的规划。未来两年内希望可以在北京买房，因为可以预计未来五年还会在北京以编程为生。五年内希望组建自己的家庭，迎来第一个孩子。未来十年我希望有三个小孩，有一间大房子，可能回武汉，可能在北京，也可能会出国。我一直很羡慕有一个融洽和谐的大家庭，希望可以努力去实现。\n\n上周读完《生死疲劳》，这周读完了古龙的《猎鹰赌局》。两本书中间的间隔难以找到阅读的感觉，处于一种很尴尬的状态：觉得自己应该继续读下去，又不知从何看起；同时想看很多本，但每本都感觉难以沉浸。\n\n《猎鹰赌局》，初中就看，一下就陷入了古龙构建的江湖中。那种气氛，色彩，语言，对话，年轻的时候，我为之着迷。这本书还附带了《剑花烟雨江南》，不喜欢，看的过程甚至怀疑是伪作。成龙好像还演过。\n\n本周的写作依旧没有按时，觉得需要思考一下写作时间的问题。周日跑步吃完涮肉回来，身体疲惫，精神兴奋，难以进入写作的状态。下周计划周日早上起来写，养成习惯。\n\n阅读也是，十分懈怠。每天阅读 30 页。绝对不超过一页。我应该一回家先看书，而不是刷手机。\n\n最重要事情最先做。\n\n这篇文章花了一个番茄时间。\n","source":"_posts/2022-03-week-4.md","raw":"---\ntitle: 平安是最大的幸福\ndate: 2022-03-27 11:35:14\nabbrlink: 2022-03-week-4\ncategories:\n  - report\ntags:\n  - week\n---\n\n三月的第四周，最重要的新闻会来找你。\n\n本周最震惊的消息是东航的事故，让人心生触动，久久不能释怀，低沉了好几天。在思考生活的本质什么，生命的目的是什么，可能到最终，平安健康才是最重要的。平时说这些话也许很苍白，但是在事故面前，即使这种平凡也变成奢求。\n\n这周在对未来进行一个很粗浅的时间节点的规划。未来两年内希望可以在北京买房，因为可以预计未来五年还会在北京以编程为生。五年内希望组建自己的家庭，迎来第一个孩子。未来十年我希望有三个小孩，有一间大房子，可能回武汉，可能在北京，也可能会出国。我一直很羡慕有一个融洽和谐的大家庭，希望可以努力去实现。\n\n上周读完《生死疲劳》，这周读完了古龙的《猎鹰赌局》。两本书中间的间隔难以找到阅读的感觉，处于一种很尴尬的状态：觉得自己应该继续读下去，又不知从何看起；同时想看很多本，但每本都感觉难以沉浸。\n\n《猎鹰赌局》，初中就看，一下就陷入了古龙构建的江湖中。那种气氛，色彩，语言，对话，年轻的时候，我为之着迷。这本书还附带了《剑花烟雨江南》，不喜欢，看的过程甚至怀疑是伪作。成龙好像还演过。\n\n本周的写作依旧没有按时，觉得需要思考一下写作时间的问题。周日跑步吃完涮肉回来，身体疲惫，精神兴奋，难以进入写作的状态。下周计划周日早上起来写，养成习惯。\n\n阅读也是，十分懈怠。每天阅读 30 页。绝对不超过一页。我应该一回家先看书，而不是刷手机。\n\n最重要事情最先做。\n\n这篇文章花了一个番茄时间。\n","slug":"2022-03-week-4","published":1,"updated":"2022-04-09T14:33:00.804Z","_id":"cl1d7lmm70000rb4najeaeo9x","comments":1,"layout":"post","photos":[],"link":"","content":"<p>三月的第四周，最重要的新闻会来找你。</p>\n<p>本周最震惊的消息是东航的事故，让人心生触动，久久不能释怀，低沉了好几天。在思考生活的本质什么，生命的目的是什么，可能到最终，平安健康才是最重要的。平时说这些话也许很苍白，但是在事故面前，即使这种平凡也变成奢求。</p>\n<p>这周在对未来进行一个很粗浅的时间节点的规划。未来两年内希望可以在北京买房，因为可以预计未来五年还会在北京以编程为生。五年内希望组建自己的家庭，迎来第一个孩子。未来十年我希望有三个小孩，有一间大房子，可能回武汉，可能在北京，也可能会出国。我一直很羡慕有一个融洽和谐的大家庭，希望可以努力去实现。</p>\n<p>上周读完《生死疲劳》，这周读完了古龙的《猎鹰赌局》。两本书中间的间隔难以找到阅读的感觉，处于一种很尴尬的状态：觉得自己应该继续读下去，又不知从何看起；同时想看很多本，但每本都感觉难以沉浸。</p>\n<p>《猎鹰赌局》，初中就看，一下就陷入了古龙构建的江湖中。那种气氛，色彩，语言，对话，年轻的时候，我为之着迷。这本书还附带了《剑花烟雨江南》，不喜欢，看的过程甚至怀疑是伪作。成龙好像还演过。</p>\n<p>本周的写作依旧没有按时，觉得需要思考一下写作时间的问题。周日跑步吃完涮肉回来，身体疲惫，精神兴奋，难以进入写作的状态。下周计划周日早上起来写，养成习惯。</p>\n<p>阅读也是，十分懈怠。每天阅读 30 页。绝对不超过一页。我应该一回家先看书，而不是刷手机。</p>\n<p>最重要事情最先做。</p>\n<p>这篇文章花了一个番茄时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>三月的第四周，最重要的新闻会来找你。</p>\n<p>本周最震惊的消息是东航的事故，让人心生触动，久久不能释怀，低沉了好几天。在思考生活的本质什么，生命的目的是什么，可能到最终，平安健康才是最重要的。平时说这些话也许很苍白，但是在事故面前，即使这种平凡也变成奢求。</p>\n<p>这周在对未来进行一个很粗浅的时间节点的规划。未来两年内希望可以在北京买房，因为可以预计未来五年还会在北京以编程为生。五年内希望组建自己的家庭，迎来第一个孩子。未来十年我希望有三个小孩，有一间大房子，可能回武汉，可能在北京，也可能会出国。我一直很羡慕有一个融洽和谐的大家庭，希望可以努力去实现。</p>\n<p>上周读完《生死疲劳》，这周读完了古龙的《猎鹰赌局》。两本书中间的间隔难以找到阅读的感觉，处于一种很尴尬的状态：觉得自己应该继续读下去，又不知从何看起；同时想看很多本，但每本都感觉难以沉浸。</p>\n<p>《猎鹰赌局》，初中就看，一下就陷入了古龙构建的江湖中。那种气氛，色彩，语言，对话，年轻的时候，我为之着迷。这本书还附带了《剑花烟雨江南》，不喜欢，看的过程甚至怀疑是伪作。成龙好像还演过。</p>\n<p>本周的写作依旧没有按时，觉得需要思考一下写作时间的问题。周日跑步吃完涮肉回来，身体疲惫，精神兴奋，难以进入写作的状态。下周计划周日早上起来写，养成习惯。</p>\n<p>阅读也是，十分懈怠。每天阅读 30 页。绝对不超过一页。我应该一回家先看书，而不是刷手机。</p>\n<p>最重要事情最先做。</p>\n<p>这篇文章花了一个番茄时间。</p>\n"},{"title":"关于写作","abbrlink":"writing-tips","date":"2022-04-10T05:31:18.000Z","_content":"\n四月的第二周。\n\n最近听 happy xiao 在播客中谈到了写作的一些技巧，我觉得不错，播客里提了好几条，我捡几条感触比较深的说。全文附在最后。\n\n第一，文章一定需要有一个观众，通俗来说，就是写给谁看，这点应该在起笔之前就确定好。对于我来说，目前来看，我的观众就是自己，我写作的目的就是起到一个总结（summarization）和内省（introspection）的作用。\n\n第二，一寸相框。这个方法很棒。当我们开始尝试写作的时候，思维总是特别发散，一腔倾诉欲，东一榔头西一棒子。这个方法是说 “It reminds me that all have to do is to write down as much as I can see through a one-inch picture frame”。其实我已经在按这个方法做了，我只写八百字，只写一个话题，就是在缩小这个相框的大小，只是没有意识到用相框来比喻。\n\n第三，所有人都是第一天开始写，异常兴奋；第二天一看前一天的东西，写的什么玩意儿；第三天就放弃了。不要担心写的不好，一定要写完。 Sheryl Sandberg 说的 Done is better than perfect 道理类似。先写完，养成习惯，再提高。\n\n第四，一次写完草稿！这一点我一直做的很差，也想举双手双脚赞同的。原文摘抄如下：\n\nBy the way, you can do 40 edits but you want to write from start to finish in one sitting so your different moods on different days don’t seep into your copy and make it disjointed.\n\n\n我对这点的理解有两个方面，一个是写的过程中，总是控制不住的会回过头去看已有的段落，很容易造成思维的中断，写起来十分干涩。第二，如果一篇文章写了一半没完成，搁置了，过了几天再回来，当下的心情和体会与之前不连贯，就更难找回当时的感觉了。\n\n之前去北海道，冲绳，青海，西藏，都说要写游记，但是回到家后就拖延了。为此我想给 ipad 买个便携键盘，方便当天记录，不知道有没有效果，不过这是另一个话题，以后再聊，我今天的字数配额不太够了。\n\n本周上海疫情的种种消息，看新闻如同看小说，给人一种现实又朦胧，缥缈又荒诞的不真实感。\n\n说起小说，下周计划把何伟的《寻路中国》看完。\n\n这篇文章写的很零散，大约花了三个番茄时间。\n\n链接：\n\n[Elizabeth Gilbert 的十个写作建议](https://happyxiao.com/happy-podcast-059/)\n\n[世界第一文案大师 Gary Halbert 教会我的事](https://happyxiao.com/happy-podcast-061/)\n","source":"_posts/2022-04-week-2.md","raw":"---\ntitle: 关于写作\nabbrlink: writing-tips\ndate: 2022-04-09 22:31:18\ncategories:\n  - report\ntags:\n  - week\n---\n\n四月的第二周。\n\n最近听 happy xiao 在播客中谈到了写作的一些技巧，我觉得不错，播客里提了好几条，我捡几条感触比较深的说。全文附在最后。\n\n第一，文章一定需要有一个观众，通俗来说，就是写给谁看，这点应该在起笔之前就确定好。对于我来说，目前来看，我的观众就是自己，我写作的目的就是起到一个总结（summarization）和内省（introspection）的作用。\n\n第二，一寸相框。这个方法很棒。当我们开始尝试写作的时候，思维总是特别发散，一腔倾诉欲，东一榔头西一棒子。这个方法是说 “It reminds me that all have to do is to write down as much as I can see through a one-inch picture frame”。其实我已经在按这个方法做了，我只写八百字，只写一个话题，就是在缩小这个相框的大小，只是没有意识到用相框来比喻。\n\n第三，所有人都是第一天开始写，异常兴奋；第二天一看前一天的东西，写的什么玩意儿；第三天就放弃了。不要担心写的不好，一定要写完。 Sheryl Sandberg 说的 Done is better than perfect 道理类似。先写完，养成习惯，再提高。\n\n第四，一次写完草稿！这一点我一直做的很差，也想举双手双脚赞同的。原文摘抄如下：\n\nBy the way, you can do 40 edits but you want to write from start to finish in one sitting so your different moods on different days don’t seep into your copy and make it disjointed.\n\n\n我对这点的理解有两个方面，一个是写的过程中，总是控制不住的会回过头去看已有的段落，很容易造成思维的中断，写起来十分干涩。第二，如果一篇文章写了一半没完成，搁置了，过了几天再回来，当下的心情和体会与之前不连贯，就更难找回当时的感觉了。\n\n之前去北海道，冲绳，青海，西藏，都说要写游记，但是回到家后就拖延了。为此我想给 ipad 买个便携键盘，方便当天记录，不知道有没有效果，不过这是另一个话题，以后再聊，我今天的字数配额不太够了。\n\n本周上海疫情的种种消息，看新闻如同看小说，给人一种现实又朦胧，缥缈又荒诞的不真实感。\n\n说起小说，下周计划把何伟的《寻路中国》看完。\n\n这篇文章写的很零散，大约花了三个番茄时间。\n\n链接：\n\n[Elizabeth Gilbert 的十个写作建议](https://happyxiao.com/happy-podcast-059/)\n\n[世界第一文案大师 Gary Halbert 教会我的事](https://happyxiao.com/happy-podcast-061/)\n","slug":"2022-04-week-2","published":1,"updated":"2022-04-29T06:49:04.553Z","_id":"cl1rygiai0000gsmh64an5e8e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>四月的第二周。</p>\n<p>最近听 happy xiao 在播客中谈到了写作的一些技巧，我觉得不错，播客里提了好几条，我捡几条感触比较深的说。全文附在最后。</p>\n<p>第一，文章一定需要有一个观众，通俗来说，就是写给谁看，这点应该在起笔之前就确定好。对于我来说，目前来看，我的观众就是自己，我写作的目的就是起到一个总结（summarization）和内省（introspection）的作用。</p>\n<p>第二，一寸相框。这个方法很棒。当我们开始尝试写作的时候，思维总是特别发散，一腔倾诉欲，东一榔头西一棒子。这个方法是说 “It reminds me that all have to do is to write down as much as I can see through a one-inch picture frame”。其实我已经在按这个方法做了，我只写八百字，只写一个话题，就是在缩小这个相框的大小，只是没有意识到用相框来比喻。</p>\n<p>第三，所有人都是第一天开始写，异常兴奋；第二天一看前一天的东西，写的什么玩意儿；第三天就放弃了。不要担心写的不好，一定要写完。 Sheryl Sandberg 说的 Done is better than perfect 道理类似。先写完，养成习惯，再提高。</p>\n<p>第四，一次写完草稿！这一点我一直做的很差，也想举双手双脚赞同的。原文摘抄如下：</p>\n<p>By the way, you can do 40 edits but you want to write from start to finish in one sitting so your different moods on different days don’t seep into your copy and make it disjointed.</p>\n<p>我对这点的理解有两个方面，一个是写的过程中，总是控制不住的会回过头去看已有的段落，很容易造成思维的中断，写起来十分干涩。第二，如果一篇文章写了一半没完成，搁置了，过了几天再回来，当下的心情和体会与之前不连贯，就更难找回当时的感觉了。</p>\n<p>之前去北海道，冲绳，青海，西藏，都说要写游记，但是回到家后就拖延了。为此我想给 ipad 买个便携键盘，方便当天记录，不知道有没有效果，不过这是另一个话题，以后再聊，我今天的字数配额不太够了。</p>\n<p>本周上海疫情的种种消息，看新闻如同看小说，给人一种现实又朦胧，缥缈又荒诞的不真实感。</p>\n<p>说起小说，下周计划把何伟的《寻路中国》看完。</p>\n<p>这篇文章写的很零散，大约花了三个番茄时间。</p>\n<p>链接：</p>\n<p><a href=\"https://happyxiao.com/happy-podcast-059/\">Elizabeth Gilbert 的十个写作建议</a></p>\n<p><a href=\"https://happyxiao.com/happy-podcast-061/\">世界第一文案大师 Gary Halbert 教会我的事</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>四月的第二周。</p>\n<p>最近听 happy xiao 在播客中谈到了写作的一些技巧，我觉得不错，播客里提了好几条，我捡几条感触比较深的说。全文附在最后。</p>\n<p>第一，文章一定需要有一个观众，通俗来说，就是写给谁看，这点应该在起笔之前就确定好。对于我来说，目前来看，我的观众就是自己，我写作的目的就是起到一个总结（summarization）和内省（introspection）的作用。</p>\n<p>第二，一寸相框。这个方法很棒。当我们开始尝试写作的时候，思维总是特别发散，一腔倾诉欲，东一榔头西一棒子。这个方法是说 “It reminds me that all have to do is to write down as much as I can see through a one-inch picture frame”。其实我已经在按这个方法做了，我只写八百字，只写一个话题，就是在缩小这个相框的大小，只是没有意识到用相框来比喻。</p>\n<p>第三，所有人都是第一天开始写，异常兴奋；第二天一看前一天的东西，写的什么玩意儿；第三天就放弃了。不要担心写的不好，一定要写完。 Sheryl Sandberg 说的 Done is better than perfect 道理类似。先写完，养成习惯，再提高。</p>\n<p>第四，一次写完草稿！这一点我一直做的很差，也想举双手双脚赞同的。原文摘抄如下：</p>\n<p>By the way, you can do 40 edits but you want to write from start to finish in one sitting so your different moods on different days don’t seep into your copy and make it disjointed.</p>\n<p>我对这点的理解有两个方面，一个是写的过程中，总是控制不住的会回过头去看已有的段落，很容易造成思维的中断，写起来十分干涩。第二，如果一篇文章写了一半没完成，搁置了，过了几天再回来，当下的心情和体会与之前不连贯，就更难找回当时的感觉了。</p>\n<p>之前去北海道，冲绳，青海，西藏，都说要写游记，但是回到家后就拖延了。为此我想给 ipad 买个便携键盘，方便当天记录，不知道有没有效果，不过这是另一个话题，以后再聊，我今天的字数配额不太够了。</p>\n<p>本周上海疫情的种种消息，看新闻如同看小说，给人一种现实又朦胧，缥缈又荒诞的不真实感。</p>\n<p>说起小说，下周计划把何伟的《寻路中国》看完。</p>\n<p>这篇文章写的很零散，大约花了三个番茄时间。</p>\n<p>链接：</p>\n<p><a href=\"https://happyxiao.com/happy-podcast-059/\">Elizabeth Gilbert 的十个写作建议</a></p>\n<p><a href=\"https://happyxiao.com/happy-podcast-061/\">世界第一文案大师 Gary Halbert 教会我的事</a></p>\n"},{"title":"清明节","date":"2022-04-02T22:09:21.000Z","abbrlink":"qingming","_content":"\n四月的第一周。今年第一季度结束了。\n\n清明节放假，回武汉扫墓。为了避开车流高峰，有两天都是五点多起床，六点不到就出发。“清明时节雨纷纷”，好在最近都是晴天，心情也还不错。\n\n周六回了农村。说是农村，其实已经并入武汉，成了一个区，前年说村庄要拆迁，最近没消息了。和前两年比，村子里干净了许多，之前巷子，池塘，路边都随处可见生活垃圾。村庄里很静谧，人也不多，更没见几个年轻人。不知道是因为太早没起床，还是因为搬到城区或者武汉去了。\n\n周一去九峰扫墓。原来对所谓的“光谷东”没什么认知，此行感觉发展差强人意。道路宽敞，住宅小区、森林公园、办公楼夹杂，街道也挺干净，省妇幼还新建了一座分院。网上一直说价格炒的虚高，但给我的感觉，无论地段还是发展的方向，都有点类似北京的永丰。到了墓园，每个入口都有防疫人员站岗，检查健康码，也检查手里提的塑料袋——现在不允许带鞭炮进去。墓园里还挂着横幅，宣传文明祭拜，别烧纸钱。对长一辈人来说，一时半会还做不到，但我觉得这个趋势挺好的，举双手赞成，而且现在买鲜花扫墓的人越来越多了。\n\n呆家里这几天，作息规律被搅得稀碎。因为起太早，晚上又喝酒，又没喝咖啡，基本上一天都是晕晕乎乎，没干正事，也沉不下心来看书。学习工作也是这样，节奏很重要，中断一会，再重回正轨且得花点时间。\n\n回北京再好好学习。\n\n这篇文章花了一个番茄时间。\n","source":"_posts/2022-04-week-1.md","raw":"---\ntitle: 清明节\ndate: 2022-04-02 15:09:21\nabbrlink: qingming\ncategories:\n  - report\ntags:\n  - week\n---\n\n四月的第一周。今年第一季度结束了。\n\n清明节放假，回武汉扫墓。为了避开车流高峰，有两天都是五点多起床，六点不到就出发。“清明时节雨纷纷”，好在最近都是晴天，心情也还不错。\n\n周六回了农村。说是农村，其实已经并入武汉，成了一个区，前年说村庄要拆迁，最近没消息了。和前两年比，村子里干净了许多，之前巷子，池塘，路边都随处可见生活垃圾。村庄里很静谧，人也不多，更没见几个年轻人。不知道是因为太早没起床，还是因为搬到城区或者武汉去了。\n\n周一去九峰扫墓。原来对所谓的“光谷东”没什么认知，此行感觉发展差强人意。道路宽敞，住宅小区、森林公园、办公楼夹杂，街道也挺干净，省妇幼还新建了一座分院。网上一直说价格炒的虚高，但给我的感觉，无论地段还是发展的方向，都有点类似北京的永丰。到了墓园，每个入口都有防疫人员站岗，检查健康码，也检查手里提的塑料袋——现在不允许带鞭炮进去。墓园里还挂着横幅，宣传文明祭拜，别烧纸钱。对长一辈人来说，一时半会还做不到，但我觉得这个趋势挺好的，举双手赞成，而且现在买鲜花扫墓的人越来越多了。\n\n呆家里这几天，作息规律被搅得稀碎。因为起太早，晚上又喝酒，又没喝咖啡，基本上一天都是晕晕乎乎，没干正事，也沉不下心来看书。学习工作也是这样，节奏很重要，中断一会，再重回正轨且得花点时间。\n\n回北京再好好学习。\n\n这篇文章花了一个番茄时间。\n","slug":"2022-04-week-1","published":1,"updated":"2022-04-29T06:49:04.552Z","_id":"cl1rygiak0001gsmh84bt4eak","comments":1,"layout":"post","photos":[],"link":"","content":"<p>四月的第一周。今年第一季度结束了。</p>\n<p>清明节放假，回武汉扫墓。为了避开车流高峰，有两天都是五点多起床，六点不到就出发。“清明时节雨纷纷”，好在最近都是晴天，心情也还不错。</p>\n<p>周六回了农村。说是农村，其实已经并入武汉，成了一个区，前年说村庄要拆迁，最近没消息了。和前两年比，村子里干净了许多，之前巷子，池塘，路边都随处可见生活垃圾。村庄里很静谧，人也不多，更没见几个年轻人。不知道是因为太早没起床，还是因为搬到城区或者武汉去了。</p>\n<p>周一去九峰扫墓。原来对所谓的“光谷东”没什么认知，此行感觉发展差强人意。道路宽敞，住宅小区、森林公园、办公楼夹杂，街道也挺干净，省妇幼还新建了一座分院。网上一直说价格炒的虚高，但给我的感觉，无论地段还是发展的方向，都有点类似北京的永丰。到了墓园，每个入口都有防疫人员站岗，检查健康码，也检查手里提的塑料袋——现在不允许带鞭炮进去。墓园里还挂着横幅，宣传文明祭拜，别烧纸钱。对长一辈人来说，一时半会还做不到，但我觉得这个趋势挺好的，举双手赞成，而且现在买鲜花扫墓的人越来越多了。</p>\n<p>呆家里这几天，作息规律被搅得稀碎。因为起太早，晚上又喝酒，又没喝咖啡，基本上一天都是晕晕乎乎，没干正事，也沉不下心来看书。学习工作也是这样，节奏很重要，中断一会，再重回正轨且得花点时间。</p>\n<p>回北京再好好学习。</p>\n<p>这篇文章花了一个番茄时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>四月的第一周。今年第一季度结束了。</p>\n<p>清明节放假，回武汉扫墓。为了避开车流高峰，有两天都是五点多起床，六点不到就出发。“清明时节雨纷纷”，好在最近都是晴天，心情也还不错。</p>\n<p>周六回了农村。说是农村，其实已经并入武汉，成了一个区，前年说村庄要拆迁，最近没消息了。和前两年比，村子里干净了许多，之前巷子，池塘，路边都随处可见生活垃圾。村庄里很静谧，人也不多，更没见几个年轻人。不知道是因为太早没起床，还是因为搬到城区或者武汉去了。</p>\n<p>周一去九峰扫墓。原来对所谓的“光谷东”没什么认知，此行感觉发展差强人意。道路宽敞，住宅小区、森林公园、办公楼夹杂，街道也挺干净，省妇幼还新建了一座分院。网上一直说价格炒的虚高，但给我的感觉，无论地段还是发展的方向，都有点类似北京的永丰。到了墓园，每个入口都有防疫人员站岗，检查健康码，也检查手里提的塑料袋——现在不允许带鞭炮进去。墓园里还挂着横幅，宣传文明祭拜，别烧纸钱。对长一辈人来说，一时半会还做不到，但我觉得这个趋势挺好的，举双手赞成，而且现在买鲜花扫墓的人越来越多了。</p>\n<p>呆家里这几天，作息规律被搅得稀碎。因为起太早，晚上又喝酒，又没喝咖啡，基本上一天都是晕晕乎乎，没干正事，也沉不下心来看书。学习工作也是这样，节奏很重要，中断一会，再重回正轨且得花点时间。</p>\n<p>回北京再好好学习。</p>\n<p>这篇文章花了一个番茄时间。</p>\n"},{"title":"一个关于外卖的问题","abbrlink":"food-delivery-problem","date":"2022-04-17T22:36:12.000Z","_content":"\n4月11号周一，王小波逝世25周年。大学时买小波的书（哪本不记得了）随赠了一张书签，写着，“成为思维的精英，比成为道德的精英更为重要”，一直不太理解。因为反常识，反而记着很久。这些年我依稀有些理解：并不是不去追求道德，而是道德的水平、标准是随着时代和环境变化的，过去觉得郭巨埋儿是道德，现在觉得是愚昧；过去孩子生病了来学校，老师会表扬热爱学习意志坚强，放到现在也不怎么鼓励了。道德像是一种筛选结果，做了什么，不做什么；而思维更像是一个工具，一个指导方针，以此为出发点去解决问题。一点想法，不一定对。\n\n最近每天早上点麦当劳的早餐，几乎三分之二的时间都会超时，可能是早间外卖骑手（近来发现女性外卖员越来越多了）愈发短缺了。虽然系统规定超时会送券，但可能也会对骑手惩罚，于是他们通常会提前打电话说先点结束，例行征求一下同意。\n\n这让我想起另一件事。18 年的时候，我常点 KFC 的早餐，一碗粥一杯咖啡。但是肯德基的包装有严重的缺陷，咖啡就用一个塑料袋装着，然后放在骑手的外卖箱里。于是乎，每天早上咖啡送到我手上时，都会洒一半在塑料袋里，剩一半在杯中。从塑料袋拿出来时，杯面上湿漉漉的，放在桌上，杯底会带一圈咖啡渍，十分扫兴。因为我预约的时间固定，通常是同一个人送来，外卖小哥也很愧疚，每次把早餐递到我手上时，总是会愧疚又憨厚的说一句“不小心又洒了”，然后第二天照旧。于是我每天都能获得塑料袋盛着的半杯咖啡，和一个外卖小哥礼节性的，程式化的，略带歉意的微笑。\n\n对我来说外卖超时十分钟，咖啡撒了半杯，没什么影响。但是在合理的系统里，总有人——我，或者外卖小哥——权益受到伤害。在这其中，只能通过系统以外的人际关系，或者感情成本来抹平。大街上逆行横穿的骑手，和派单时间越来越短的算法世界，我们该怎么去优化这个问题？\n\n学了一个新词: Gen C。以为是 Generation of Coin，后来发现是 [Generation of Covid](https://edition.cnn.com/2021/03/11/us/covid-generation-gen-c/index.html)。之前看到个有趣的研究：疫情期间出生的婴幼儿的语言感知能力变弱了——因为大人都戴着口罩，婴儿无法通过嘴唇来认知亲人说了什么。疫情在细微中改变我们的生活、经济、政治、社会，未来会如何？我字超标了。\n","source":"_posts/2022-04-week-3.md","raw":"---\ntitle: 一个关于外卖的问题\nabbrlink: food-delivery-problem\ndate: 2022-04-17 15:36:12\ncategories:\n  - report\ntags:\n  - week\n---\n\n4月11号周一，王小波逝世25周年。大学时买小波的书（哪本不记得了）随赠了一张书签，写着，“成为思维的精英，比成为道德的精英更为重要”，一直不太理解。因为反常识，反而记着很久。这些年我依稀有些理解：并不是不去追求道德，而是道德的水平、标准是随着时代和环境变化的，过去觉得郭巨埋儿是道德，现在觉得是愚昧；过去孩子生病了来学校，老师会表扬热爱学习意志坚强，放到现在也不怎么鼓励了。道德像是一种筛选结果，做了什么，不做什么；而思维更像是一个工具，一个指导方针，以此为出发点去解决问题。一点想法，不一定对。\n\n最近每天早上点麦当劳的早餐，几乎三分之二的时间都会超时，可能是早间外卖骑手（近来发现女性外卖员越来越多了）愈发短缺了。虽然系统规定超时会送券，但可能也会对骑手惩罚，于是他们通常会提前打电话说先点结束，例行征求一下同意。\n\n这让我想起另一件事。18 年的时候，我常点 KFC 的早餐，一碗粥一杯咖啡。但是肯德基的包装有严重的缺陷，咖啡就用一个塑料袋装着，然后放在骑手的外卖箱里。于是乎，每天早上咖啡送到我手上时，都会洒一半在塑料袋里，剩一半在杯中。从塑料袋拿出来时，杯面上湿漉漉的，放在桌上，杯底会带一圈咖啡渍，十分扫兴。因为我预约的时间固定，通常是同一个人送来，外卖小哥也很愧疚，每次把早餐递到我手上时，总是会愧疚又憨厚的说一句“不小心又洒了”，然后第二天照旧。于是我每天都能获得塑料袋盛着的半杯咖啡，和一个外卖小哥礼节性的，程式化的，略带歉意的微笑。\n\n对我来说外卖超时十分钟，咖啡撒了半杯，没什么影响。但是在合理的系统里，总有人——我，或者外卖小哥——权益受到伤害。在这其中，只能通过系统以外的人际关系，或者感情成本来抹平。大街上逆行横穿的骑手，和派单时间越来越短的算法世界，我们该怎么去优化这个问题？\n\n学了一个新词: Gen C。以为是 Generation of Coin，后来发现是 [Generation of Covid](https://edition.cnn.com/2021/03/11/us/covid-generation-gen-c/index.html)。之前看到个有趣的研究：疫情期间出生的婴幼儿的语言感知能力变弱了——因为大人都戴着口罩，婴儿无法通过嘴唇来认知亲人说了什么。疫情在细微中改变我们的生活、经济、政治、社会，未来会如何？我字超标了。\n","slug":"2022-04-week-3","published":1,"updated":"2022-04-29T06:49:04.553Z","_id":"cl2g8vmxf00001hs61mv66059","comments":1,"layout":"post","photos":[],"link":"","content":"<p>4月11号周一，王小波逝世25周年。大学时买小波的书（哪本不记得了）随赠了一张书签，写着，“成为思维的精英，比成为道德的精英更为重要”，一直不太理解。因为反常识，反而记着很久。这些年我依稀有些理解：并不是不去追求道德，而是道德的水平、标准是随着时代和环境变化的，过去觉得郭巨埋儿是道德，现在觉得是愚昧；过去孩子生病了来学校，老师会表扬热爱学习意志坚强，放到现在也不怎么鼓励了。道德像是一种筛选结果，做了什么，不做什么；而思维更像是一个工具，一个指导方针，以此为出发点去解决问题。一点想法，不一定对。</p>\n<p>最近每天早上点麦当劳的早餐，几乎三分之二的时间都会超时，可能是早间外卖骑手（近来发现女性外卖员越来越多了）愈发短缺了。虽然系统规定超时会送券，但可能也会对骑手惩罚，于是他们通常会提前打电话说先点结束，例行征求一下同意。</p>\n<p>这让我想起另一件事。18 年的时候，我常点 KFC 的早餐，一碗粥一杯咖啡。但是肯德基的包装有严重的缺陷，咖啡就用一个塑料袋装着，然后放在骑手的外卖箱里。于是乎，每天早上咖啡送到我手上时，都会洒一半在塑料袋里，剩一半在杯中。从塑料袋拿出来时，杯面上湿漉漉的，放在桌上，杯底会带一圈咖啡渍，十分扫兴。因为我预约的时间固定，通常是同一个人送来，外卖小哥也很愧疚，每次把早餐递到我手上时，总是会愧疚又憨厚的说一句“不小心又洒了”，然后第二天照旧。于是我每天都能获得塑料袋盛着的半杯咖啡，和一个外卖小哥礼节性的，程式化的，略带歉意的微笑。</p>\n<p>对我来说外卖超时十分钟，咖啡撒了半杯，没什么影响。但是在合理的系统里，总有人——我，或者外卖小哥——权益受到伤害。在这其中，只能通过系统以外的人际关系，或者感情成本来抹平。大街上逆行横穿的骑手，和派单时间越来越短的算法世界，我们该怎么去优化这个问题？</p>\n<p>学了一个新词: Gen C。以为是 Generation of Coin，后来发现是 <a href=\"https://edition.cnn.com/2021/03/11/us/covid-generation-gen-c/index.html\">Generation of Covid</a>。之前看到个有趣的研究：疫情期间出生的婴幼儿的语言感知能力变弱了——因为大人都戴着口罩，婴儿无法通过嘴唇来认知亲人说了什么。疫情在细微中改变我们的生活、经济、政治、社会，未来会如何？我字超标了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>4月11号周一，王小波逝世25周年。大学时买小波的书（哪本不记得了）随赠了一张书签，写着，“成为思维的精英，比成为道德的精英更为重要”，一直不太理解。因为反常识，反而记着很久。这些年我依稀有些理解：并不是不去追求道德，而是道德的水平、标准是随着时代和环境变化的，过去觉得郭巨埋儿是道德，现在觉得是愚昧；过去孩子生病了来学校，老师会表扬热爱学习意志坚强，放到现在也不怎么鼓励了。道德像是一种筛选结果，做了什么，不做什么；而思维更像是一个工具，一个指导方针，以此为出发点去解决问题。一点想法，不一定对。</p>\n<p>最近每天早上点麦当劳的早餐，几乎三分之二的时间都会超时，可能是早间外卖骑手（近来发现女性外卖员越来越多了）愈发短缺了。虽然系统规定超时会送券，但可能也会对骑手惩罚，于是他们通常会提前打电话说先点结束，例行征求一下同意。</p>\n<p>这让我想起另一件事。18 年的时候，我常点 KFC 的早餐，一碗粥一杯咖啡。但是肯德基的包装有严重的缺陷，咖啡就用一个塑料袋装着，然后放在骑手的外卖箱里。于是乎，每天早上咖啡送到我手上时，都会洒一半在塑料袋里，剩一半在杯中。从塑料袋拿出来时，杯面上湿漉漉的，放在桌上，杯底会带一圈咖啡渍，十分扫兴。因为我预约的时间固定，通常是同一个人送来，外卖小哥也很愧疚，每次把早餐递到我手上时，总是会愧疚又憨厚的说一句“不小心又洒了”，然后第二天照旧。于是我每天都能获得塑料袋盛着的半杯咖啡，和一个外卖小哥礼节性的，程式化的，略带歉意的微笑。</p>\n<p>对我来说外卖超时十分钟，咖啡撒了半杯，没什么影响。但是在合理的系统里，总有人——我，或者外卖小哥——权益受到伤害。在这其中，只能通过系统以外的人际关系，或者感情成本来抹平。大街上逆行横穿的骑手，和派单时间越来越短的算法世界，我们该怎么去优化这个问题？</p>\n<p>学了一个新词: Gen C。以为是 Generation of Coin，后来发现是 <a href=\"https://edition.cnn.com/2021/03/11/us/covid-generation-gen-c/index.html\">Generation of Covid</a>。之前看到个有趣的研究：疫情期间出生的婴幼儿的语言感知能力变弱了——因为大人都戴着口罩，婴儿无法通过嘴唇来认知亲人说了什么。疫情在细微中改变我们的生活、经济、政治、社会，未来会如何？我字超标了。</p>\n"},{"title":"我读《寻路中国》","date":"2022-04-27T03:46:12.000Z","abbrlink":"country-driving","_content":"\n![country-driving.jpeg](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72e1c214cf4c4a758afa7fe42f3aaeb1~tplv-k3u1fbpfcp-watermark.image)\n\n如果你喜欢一个姑娘，但不怎么跟她说话，听上去很难让人相信这段感情。正如我喜欢一本书，却花了大半年才读完，怎么说都不是很可信的样子。但事实就是如此，《寻路中国》是本我很喜欢，也非常有意思的书。\n\n九十年代我还是孩子，记的全是孩子的事，印象中那个时代就像老照片，泛黄而模糊，城市里尘土飞扬，永远都在修路，路人行迹匆匆，表情严肃。正儿八经记事大约是 02，03 年，刚上初中，是书里故事开始的时代。到了 08 年离开家上大学，轮到我自己去观察记录社会，刚好又是故事结束的时代。那段时期我在学校里，除了学习什么事都干，憧憬着步入社会的生活。这本书像一个细腻而眼光独到的讲述者，在若干年后告诉我教室外发生的事情。带人进入了一个时空交错的场景，我摇头晃脑背英语的时候，蒙古的草原郁郁葱葱；我在苦练投篮姿势时，浙江工厂里和我同龄的女工正在埋头生产者胸罩调节环。这些故事填补了我的记忆，把我带回那个时代，给了我另一种生活。\n\n我佩服何伟的一点是从一个外国人的角度，道出一些中国传统的症结，再用美式幽默的文笔写出来，读起来让人忍俊不禁。\n\n比如他描述中国人搭顺风车拦车招手时，说成仿佛在拍打一条看不见的大狗。仔细一想，好像也找不出更贴切的表达了。\n\n比如他先斩后奏将租来的车开出京时说，在中国事后征求原谅总比事前获得许可简单的多。\n\n当魏嘉身体不好，不爱喝水，整日在沙发上看电视，父母不是敦促锻炼而是寻求改名时，他写道，“他们似乎是本能地抓住了两个世界里最糟糕的东西：最糟糕的现代生活，最糟糕的传统观念。”\n\n他在浙江和罗师傅一起吃火锅，写到：“在中国，如果有人抱怨饭菜不好，那是常事。中国人可能会对很多东西都逆来顺受，但饭菜不在其列。我认为，那正是他们长期以来既有一流美食，又有政治灾难的原因之一。”随后，由于有一桌人竞争对手抱怨火锅难吃，成功传染了他们桌：“中国人抱怨总是具有一定的传染性，就像有害菌一样在人群之间传播着。这跟群体冲动有一定的关系，大家根本就是情不自禁——如果他们看见别人这么做，马上就会产生共鸣。”但最后他们一边抱怨，一边大快朵颐。\n\n书中最后提到 08 年经济危机，写到“四万亿计划”和“家用电器下乡”。08 年好像很遥远，已经过去 14 年。但是从乡村大规模的电器使用来说，农民过上电气化的时间着实不长。那年政府降低了新车购置税，我家就在那段时间买了第一辆汽车。09 年第一季度，历史上第一次中国消费者购买的汽车总数超过美国人。\n\n本书于 2011 年 1 月初版。如果你对那个时代好奇，真诚地推荐你去看看这本书。\n\n文章开头的照片拍摄于北京去往拉萨的列车上，那也是我的寻路中国。可惜的是，因为看书的时候把书皮取下来，不知道放在哪了。我还是挺喜欢这个封面图片的。\n","source":"_posts/我读《寻路中国》.md","raw":"---\ntitle: 我读《寻路中国》\ndate: 2022-04-26 20:46:12\ncategories:\n  - reading\ntags:\n  - books\nabbrlink: country-driving\n---\n\n![country-driving.jpeg](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72e1c214cf4c4a758afa7fe42f3aaeb1~tplv-k3u1fbpfcp-watermark.image)\n\n如果你喜欢一个姑娘，但不怎么跟她说话，听上去很难让人相信这段感情。正如我喜欢一本书，却花了大半年才读完，怎么说都不是很可信的样子。但事实就是如此，《寻路中国》是本我很喜欢，也非常有意思的书。\n\n九十年代我还是孩子，记的全是孩子的事，印象中那个时代就像老照片，泛黄而模糊，城市里尘土飞扬，永远都在修路，路人行迹匆匆，表情严肃。正儿八经记事大约是 02，03 年，刚上初中，是书里故事开始的时代。到了 08 年离开家上大学，轮到我自己去观察记录社会，刚好又是故事结束的时代。那段时期我在学校里，除了学习什么事都干，憧憬着步入社会的生活。这本书像一个细腻而眼光独到的讲述者，在若干年后告诉我教室外发生的事情。带人进入了一个时空交错的场景，我摇头晃脑背英语的时候，蒙古的草原郁郁葱葱；我在苦练投篮姿势时，浙江工厂里和我同龄的女工正在埋头生产者胸罩调节环。这些故事填补了我的记忆，把我带回那个时代，给了我另一种生活。\n\n我佩服何伟的一点是从一个外国人的角度，道出一些中国传统的症结，再用美式幽默的文笔写出来，读起来让人忍俊不禁。\n\n比如他描述中国人搭顺风车拦车招手时，说成仿佛在拍打一条看不见的大狗。仔细一想，好像也找不出更贴切的表达了。\n\n比如他先斩后奏将租来的车开出京时说，在中国事后征求原谅总比事前获得许可简单的多。\n\n当魏嘉身体不好，不爱喝水，整日在沙发上看电视，父母不是敦促锻炼而是寻求改名时，他写道，“他们似乎是本能地抓住了两个世界里最糟糕的东西：最糟糕的现代生活，最糟糕的传统观念。”\n\n他在浙江和罗师傅一起吃火锅，写到：“在中国，如果有人抱怨饭菜不好，那是常事。中国人可能会对很多东西都逆来顺受，但饭菜不在其列。我认为，那正是他们长期以来既有一流美食，又有政治灾难的原因之一。”随后，由于有一桌人竞争对手抱怨火锅难吃，成功传染了他们桌：“中国人抱怨总是具有一定的传染性，就像有害菌一样在人群之间传播着。这跟群体冲动有一定的关系，大家根本就是情不自禁——如果他们看见别人这么做，马上就会产生共鸣。”但最后他们一边抱怨，一边大快朵颐。\n\n书中最后提到 08 年经济危机，写到“四万亿计划”和“家用电器下乡”。08 年好像很遥远，已经过去 14 年。但是从乡村大规模的电器使用来说，农民过上电气化的时间着实不长。那年政府降低了新车购置税，我家就在那段时间买了第一辆汽车。09 年第一季度，历史上第一次中国消费者购买的汽车总数超过美国人。\n\n本书于 2011 年 1 月初版。如果你对那个时代好奇，真诚地推荐你去看看这本书。\n\n文章开头的照片拍摄于北京去往拉萨的列车上，那也是我的寻路中国。可惜的是，因为看书的时候把书皮取下来，不知道放在哪了。我还是挺喜欢这个封面图片的。\n","slug":"我读《寻路中国》","published":1,"updated":"2022-05-01T08:53:35.573Z","_id":"cl2g8vmxn00031hs6dohi6k9x","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72e1c214cf4c4a758afa7fe42f3aaeb1~tplv-k3u1fbpfcp-watermark.image\" alt=\"country-driving.jpeg\"></p>\n<p>如果你喜欢一个姑娘，但不怎么跟她说话，听上去很难让人相信这段感情。正如我喜欢一本书，却花了大半年才读完，怎么说都不是很可信的样子。但事实就是如此，《寻路中国》是本我很喜欢，也非常有意思的书。</p>\n<p>九十年代我还是孩子，记的全是孩子的事，印象中那个时代就像老照片，泛黄而模糊，城市里尘土飞扬，永远都在修路，路人行迹匆匆，表情严肃。正儿八经记事大约是 02，03 年，刚上初中，是书里故事开始的时代。到了 08 年离开家上大学，轮到我自己去观察记录社会，刚好又是故事结束的时代。那段时期我在学校里，除了学习什么事都干，憧憬着步入社会的生活。这本书像一个细腻而眼光独到的讲述者，在若干年后告诉我教室外发生的事情。带人进入了一个时空交错的场景，我摇头晃脑背英语的时候，蒙古的草原郁郁葱葱；我在苦练投篮姿势时，浙江工厂里和我同龄的女工正在埋头生产者胸罩调节环。这些故事填补了我的记忆，把我带回那个时代，给了我另一种生活。</p>\n<p>我佩服何伟的一点是从一个外国人的角度，道出一些中国传统的症结，再用美式幽默的文笔写出来，读起来让人忍俊不禁。</p>\n<p>比如他描述中国人搭顺风车拦车招手时，说成仿佛在拍打一条看不见的大狗。仔细一想，好像也找不出更贴切的表达了。</p>\n<p>比如他先斩后奏将租来的车开出京时说，在中国事后征求原谅总比事前获得许可简单的多。</p>\n<p>当魏嘉身体不好，不爱喝水，整日在沙发上看电视，父母不是敦促锻炼而是寻求改名时，他写道，“他们似乎是本能地抓住了两个世界里最糟糕的东西：最糟糕的现代生活，最糟糕的传统观念。”</p>\n<p>他在浙江和罗师傅一起吃火锅，写到：“在中国，如果有人抱怨饭菜不好，那是常事。中国人可能会对很多东西都逆来顺受，但饭菜不在其列。我认为，那正是他们长期以来既有一流美食，又有政治灾难的原因之一。”随后，由于有一桌人竞争对手抱怨火锅难吃，成功传染了他们桌：“中国人抱怨总是具有一定的传染性，就像有害菌一样在人群之间传播着。这跟群体冲动有一定的关系，大家根本就是情不自禁——如果他们看见别人这么做，马上就会产生共鸣。”但最后他们一边抱怨，一边大快朵颐。</p>\n<p>书中最后提到 08 年经济危机，写到“四万亿计划”和“家用电器下乡”。08 年好像很遥远，已经过去 14 年。但是从乡村大规模的电器使用来说，农民过上电气化的时间着实不长。那年政府降低了新车购置税，我家就在那段时间买了第一辆汽车。09 年第一季度，历史上第一次中国消费者购买的汽车总数超过美国人。</p>\n<p>本书于 2011 年 1 月初版。如果你对那个时代好奇，真诚地推荐你去看看这本书。</p>\n<p>文章开头的照片拍摄于北京去往拉萨的列车上，那也是我的寻路中国。可惜的是，因为看书的时候把书皮取下来，不知道放在哪了。我还是挺喜欢这个封面图片的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72e1c214cf4c4a758afa7fe42f3aaeb1~tplv-k3u1fbpfcp-watermark.image\" alt=\"country-driving.jpeg\"></p>\n<p>如果你喜欢一个姑娘，但不怎么跟她说话，听上去很难让人相信这段感情。正如我喜欢一本书，却花了大半年才读完，怎么说都不是很可信的样子。但事实就是如此，《寻路中国》是本我很喜欢，也非常有意思的书。</p>\n<p>九十年代我还是孩子，记的全是孩子的事，印象中那个时代就像老照片，泛黄而模糊，城市里尘土飞扬，永远都在修路，路人行迹匆匆，表情严肃。正儿八经记事大约是 02，03 年，刚上初中，是书里故事开始的时代。到了 08 年离开家上大学，轮到我自己去观察记录社会，刚好又是故事结束的时代。那段时期我在学校里，除了学习什么事都干，憧憬着步入社会的生活。这本书像一个细腻而眼光独到的讲述者，在若干年后告诉我教室外发生的事情。带人进入了一个时空交错的场景，我摇头晃脑背英语的时候，蒙古的草原郁郁葱葱；我在苦练投篮姿势时，浙江工厂里和我同龄的女工正在埋头生产者胸罩调节环。这些故事填补了我的记忆，把我带回那个时代，给了我另一种生活。</p>\n<p>我佩服何伟的一点是从一个外国人的角度，道出一些中国传统的症结，再用美式幽默的文笔写出来，读起来让人忍俊不禁。</p>\n<p>比如他描述中国人搭顺风车拦车招手时，说成仿佛在拍打一条看不见的大狗。仔细一想，好像也找不出更贴切的表达了。</p>\n<p>比如他先斩后奏将租来的车开出京时说，在中国事后征求原谅总比事前获得许可简单的多。</p>\n<p>当魏嘉身体不好，不爱喝水，整日在沙发上看电视，父母不是敦促锻炼而是寻求改名时，他写道，“他们似乎是本能地抓住了两个世界里最糟糕的东西：最糟糕的现代生活，最糟糕的传统观念。”</p>\n<p>他在浙江和罗师傅一起吃火锅，写到：“在中国，如果有人抱怨饭菜不好，那是常事。中国人可能会对很多东西都逆来顺受，但饭菜不在其列。我认为，那正是他们长期以来既有一流美食，又有政治灾难的原因之一。”随后，由于有一桌人竞争对手抱怨火锅难吃，成功传染了他们桌：“中国人抱怨总是具有一定的传染性，就像有害菌一样在人群之间传播着。这跟群体冲动有一定的关系，大家根本就是情不自禁——如果他们看见别人这么做，马上就会产生共鸣。”但最后他们一边抱怨，一边大快朵颐。</p>\n<p>书中最后提到 08 年经济危机，写到“四万亿计划”和“家用电器下乡”。08 年好像很遥远，已经过去 14 年。但是从乡村大规模的电器使用来说，农民过上电气化的时间着实不长。那年政府降低了新车购置税，我家就在那段时间买了第一辆汽车。09 年第一季度，历史上第一次中国消费者购买的汽车总数超过美国人。</p>\n<p>本书于 2011 年 1 月初版。如果你对那个时代好奇，真诚地推荐你去看看这本书。</p>\n<p>文章开头的照片拍摄于北京去往拉萨的列车上，那也是我的寻路中国。可惜的是，因为看书的时候把书皮取下来，不知道放在哪了。我还是挺喜欢这个封面图片的。</p>\n"},{"title":"今天不行，下次一定","abbrlink":"not-today","date":"2022-04-24T22:56:08.000Z","_content":"\n四月的第四周。今年竟然已经过完三分之一，我还没找到女朋友。\n\n本周最大的新闻应该是 Elon Musk 要收购 Twitter 的消息，去公园遛弯的时候在听他在 Ted 上的[访谈](https://www.youtube.com/watch?v=cdZZpaB2kDM)，里面主持人问(大约在 30 分钟处)，如果收购不成功，你有 plan b 吗，Elon 想了几秒钟说， there is， 主持人紧接着问，能不能说说 plan b，Elon 卖了个关子，for an another time I think。全场听懂掌声。\n\n突然想起一件往事。\n\n还在 Buffalo 上学的时候，在超市结账，收银员通常是一位金发少女或者一个胖胖的大妈，在找零的时候就问你，今天想不想捐两三块钱给团体，拯救地球环境，帮助失学儿童。那时候英语也不太好，帮助什么通常是听不大清晰，做学生时，面子又薄，不好意思问，也不知道如何委婉的拒绝。于是每次就支支吾吾地说，没问题啦，帮助一下。钱虽然少，但总像是赶鸭子上架，不是很爽快，你说你总问我个穷学生干啥？那时我在食堂上夜班到两点半，一个小时八块七毛五，我觉得我也需要捐助。好在这种情况也不多，一个月一次两次，问题不大。\n\n毕业后去湾区工作，一天晚上我走进家门口的熊猫快餐，点完餐，排在一个大叔后面结账。大叔五大三粗，满脸胡茬，戴着一顶棒球帽，格子衫快被大肚子撑开，给人一种德州壮汉的感觉。忽然收银员问他，今天要不捐个款？隔着两米远，我一听就紧张起来，心想该如何应对。只听大叔想也没想，声若洪钟地说了一句，Thanks, not today。\n\n在那个瞬间，我感觉我在融入美国文化的方向又进了一步：是啊，我可以捐，但是今天不行，我改天再来，下次一定。怎么之前就没想到呢？内心的理论关走通了，顿时世界都明亮起来。\n\n于是我大步流星走过去，收银员接过我的信用卡，提问照旧。我满脸微笑，举重若轻地说，Thanks，not today。\n\n这篇文章花了两个番茄时间。\n","source":"_posts/2022-04-week-4.md","raw":"---\ntitle: 今天不行，下次一定\nabbrlink: not-today\ndate: 2022-04-24 15:56:08\ncategories:\n  - report\ntags:\n  - week\n---\n\n四月的第四周。今年竟然已经过完三分之一，我还没找到女朋友。\n\n本周最大的新闻应该是 Elon Musk 要收购 Twitter 的消息，去公园遛弯的时候在听他在 Ted 上的[访谈](https://www.youtube.com/watch?v=cdZZpaB2kDM)，里面主持人问(大约在 30 分钟处)，如果收购不成功，你有 plan b 吗，Elon 想了几秒钟说， there is， 主持人紧接着问，能不能说说 plan b，Elon 卖了个关子，for an another time I think。全场听懂掌声。\n\n突然想起一件往事。\n\n还在 Buffalo 上学的时候，在超市结账，收银员通常是一位金发少女或者一个胖胖的大妈，在找零的时候就问你，今天想不想捐两三块钱给团体，拯救地球环境，帮助失学儿童。那时候英语也不太好，帮助什么通常是听不大清晰，做学生时，面子又薄，不好意思问，也不知道如何委婉的拒绝。于是每次就支支吾吾地说，没问题啦，帮助一下。钱虽然少，但总像是赶鸭子上架，不是很爽快，你说你总问我个穷学生干啥？那时我在食堂上夜班到两点半，一个小时八块七毛五，我觉得我也需要捐助。好在这种情况也不多，一个月一次两次，问题不大。\n\n毕业后去湾区工作，一天晚上我走进家门口的熊猫快餐，点完餐，排在一个大叔后面结账。大叔五大三粗，满脸胡茬，戴着一顶棒球帽，格子衫快被大肚子撑开，给人一种德州壮汉的感觉。忽然收银员问他，今天要不捐个款？隔着两米远，我一听就紧张起来，心想该如何应对。只听大叔想也没想，声若洪钟地说了一句，Thanks, not today。\n\n在那个瞬间，我感觉我在融入美国文化的方向又进了一步：是啊，我可以捐，但是今天不行，我改天再来，下次一定。怎么之前就没想到呢？内心的理论关走通了，顿时世界都明亮起来。\n\n于是我大步流星走过去，收银员接过我的信用卡，提问照旧。我满脸微笑，举重若轻地说，Thanks，not today。\n\n这篇文章花了两个番茄时间。\n","slug":"2022-04-week-4","published":1,"updated":"2022-04-29T06:49:04.553Z","_id":"cl2ha9cx600061hs65u10epea","comments":1,"layout":"post","photos":[],"link":"","content":"<p>四月的第四周。今年竟然已经过完三分之一，我还没找到女朋友。</p>\n<p>本周最大的新闻应该是 Elon Musk 要收购 Twitter 的消息，去公园遛弯的时候在听他在 Ted 上的<a href=\"https://www.youtube.com/watch?v=cdZZpaB2kDM\">访谈</a>，里面主持人问(大约在 30 分钟处)，如果收购不成功，你有 plan b 吗，Elon 想了几秒钟说， there is， 主持人紧接着问，能不能说说 plan b，Elon 卖了个关子，for an another time I think。全场听懂掌声。</p>\n<p>突然想起一件往事。</p>\n<p>还在 Buffalo 上学的时候，在超市结账，收银员通常是一位金发少女或者一个胖胖的大妈，在找零的时候就问你，今天想不想捐两三块钱给团体，拯救地球环境，帮助失学儿童。那时候英语也不太好，帮助什么通常是听不大清晰，做学生时，面子又薄，不好意思问，也不知道如何委婉的拒绝。于是每次就支支吾吾地说，没问题啦，帮助一下。钱虽然少，但总像是赶鸭子上架，不是很爽快，你说你总问我个穷学生干啥？那时我在食堂上夜班到两点半，一个小时八块七毛五，我觉得我也需要捐助。好在这种情况也不多，一个月一次两次，问题不大。</p>\n<p>毕业后去湾区工作，一天晚上我走进家门口的熊猫快餐，点完餐，排在一个大叔后面结账。大叔五大三粗，满脸胡茬，戴着一顶棒球帽，格子衫快被大肚子撑开，给人一种德州壮汉的感觉。忽然收银员问他，今天要不捐个款？隔着两米远，我一听就紧张起来，心想该如何应对。只听大叔想也没想，声若洪钟地说了一句，Thanks, not today。</p>\n<p>在那个瞬间，我感觉我在融入美国文化的方向又进了一步：是啊，我可以捐，但是今天不行，我改天再来，下次一定。怎么之前就没想到呢？内心的理论关走通了，顿时世界都明亮起来。</p>\n<p>于是我大步流星走过去，收银员接过我的信用卡，提问照旧。我满脸微笑，举重若轻地说，Thanks，not today。</p>\n<p>这篇文章花了两个番茄时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>四月的第四周。今年竟然已经过完三分之一，我还没找到女朋友。</p>\n<p>本周最大的新闻应该是 Elon Musk 要收购 Twitter 的消息，去公园遛弯的时候在听他在 Ted 上的<a href=\"https://www.youtube.com/watch?v=cdZZpaB2kDM\">访谈</a>，里面主持人问(大约在 30 分钟处)，如果收购不成功，你有 plan b 吗，Elon 想了几秒钟说， there is， 主持人紧接着问，能不能说说 plan b，Elon 卖了个关子，for an another time I think。全场听懂掌声。</p>\n<p>突然想起一件往事。</p>\n<p>还在 Buffalo 上学的时候，在超市结账，收银员通常是一位金发少女或者一个胖胖的大妈，在找零的时候就问你，今天想不想捐两三块钱给团体，拯救地球环境，帮助失学儿童。那时候英语也不太好，帮助什么通常是听不大清晰，做学生时，面子又薄，不好意思问，也不知道如何委婉的拒绝。于是每次就支支吾吾地说，没问题啦，帮助一下。钱虽然少，但总像是赶鸭子上架，不是很爽快，你说你总问我个穷学生干啥？那时我在食堂上夜班到两点半，一个小时八块七毛五，我觉得我也需要捐助。好在这种情况也不多，一个月一次两次，问题不大。</p>\n<p>毕业后去湾区工作，一天晚上我走进家门口的熊猫快餐，点完餐，排在一个大叔后面结账。大叔五大三粗，满脸胡茬，戴着一顶棒球帽，格子衫快被大肚子撑开，给人一种德州壮汉的感觉。忽然收银员问他，今天要不捐个款？隔着两米远，我一听就紧张起来，心想该如何应对。只听大叔想也没想，声若洪钟地说了一句，Thanks, not today。</p>\n<p>在那个瞬间，我感觉我在融入美国文化的方向又进了一步：是啊，我可以捐，但是今天不行，我改天再来，下次一定。怎么之前就没想到呢？内心的理论关走通了，顿时世界都明亮起来。</p>\n<p>于是我大步流星走过去，收银员接过我的信用卡，提问照旧。我满脸微笑，举重若轻地说，Thanks，not today。</p>\n<p>这篇文章花了两个番茄时间。</p>\n"},{"title":"2022-may-w2","date":"2022-05-07T18:40:09.000Z","abbrlink":"not-today","_content":"","source":"_drafts/2022-may-w1.md","raw":"---\ntitle: 2022-may-w2\ndate: 2022-05-07 11:40:09\nabbrlink: not-today\ncategories:\n  - report\ntags:\n  - week\n---\n","slug":"2022-may-w1","published":0,"updated":"2022-05-05T03:46:51.867Z","_id":"cl2sgv5r20006g0ahg056d0e5","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"思考，写作和直奔终点","date":"2022-05-01T04:38:33.000Z","abbrlink":"thinking-and-writing","_content":"\n![thinking-writing.jpg](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65857b20af8442378852fe093916c1fa~tplv-k3u1fbpfcp-watermark.image?)\n\n上周的文章写完以为四月就收尾了，没注意到这个月有五个周六，所以此文件的命名还是 apri-w5。\n\n在推特上看到一幅漫画，觉得挺好，保存下来。思考就像用手掌捧着水，总有漏完的时候，最后手上湿漉漉的，什么也没剩下；写作就像把水盛进杯子，需要的时候，你知道在哪能找到。\n\n漫画本身是不言自明（self-explanatory）的，明白晓畅，给人启迪。我小时候看了不少丰子恺和蔡志忠的小人书，寥寥数笔，清新脱俗。现在的有些漫画，恨不得旁边加上八百字作文，告诉你这里画的什么事件，那里讽刺什么现象。常看脱口秀的一定知道，If you have to explain a joke, there is no joke.\n\n上周提到收购 Twitter 的 plan b，看样子是没法得知了。本周 Elon 花了 43 billion 完成了对 Twitter 的收购 [^1]。收购过程中，这句话留给我印象很深。\n\n我不玩来来回回的游戏。我已经直奔终点 [^2]。\n\nI am not playing the back-and-forth game. I have moved straight to the end. It's a high price and your shareholders will love it.\n\n买东西，签合同、跳槽、涨薪，生活中总是有各式各样的场景需要讨价还价。双方都觉得要多要点，不然亏了，将心中的“博弈”发挥到极致，有时候我觉得是自己跟自己演戏。我不知道这两种谈判策略的收益差别，但我觉得，直奔终点的心理负担是更小的——简单说，就是操心的事更少，专注在目标上。讨价还价来来回回，需要一直揣度对方的想法，反而容易失去重点。\n\n由于在家办公，有时要在我的笔记本和台式机之间切换，于是更新了一下家用办公设备：买了一个 MX Master 3 和一把新键盘。在家写代码，鼠标没有侧面的滚轮有点难受。现在公司用的 Master 一代，从 17 年到现在，五年多了还一直坚挺，也是挺不容易的。\n\n键盘现在家里用的青轴 filco minila air，办公室用的同款红轴，简直是我最爱的键盘，要不然也不会买两把一样的。 但是 filco 太不争气，蓝牙连接太拉跨了。我查了很多资料，但从来没在两台电脑之间切换成功过，除非连接完拿笔怼 reset 键，才能连接新的设备。一咬牙买了个新的，等到了再聊聊键盘。\n\n接下来五一长假，我准备开始看《老无所依》，然后把贾樟柯的电影看完。\n\n1. [Elon Musk offers to buy Twitter for $43 billion in cash](https://www.axios.com/2022/04/14/elon-musk-offers-buy-twitter)\n\n2. [092 提高效率的声音](http://coke.do/issues/092-1147933)\n","source":"_posts/2022-apr-w5.md","raw":"---\ntitle: 思考，写作和直奔终点\ndate: 2022-04-30 21:38:33\nabbrlink: thinking-and-writing\ncategories:\n  - report\ntags:\n  - week\n---\n\n![thinking-writing.jpg](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65857b20af8442378852fe093916c1fa~tplv-k3u1fbpfcp-watermark.image?)\n\n上周的文章写完以为四月就收尾了，没注意到这个月有五个周六，所以此文件的命名还是 apri-w5。\n\n在推特上看到一幅漫画，觉得挺好，保存下来。思考就像用手掌捧着水，总有漏完的时候，最后手上湿漉漉的，什么也没剩下；写作就像把水盛进杯子，需要的时候，你知道在哪能找到。\n\n漫画本身是不言自明（self-explanatory）的，明白晓畅，给人启迪。我小时候看了不少丰子恺和蔡志忠的小人书，寥寥数笔，清新脱俗。现在的有些漫画，恨不得旁边加上八百字作文，告诉你这里画的什么事件，那里讽刺什么现象。常看脱口秀的一定知道，If you have to explain a joke, there is no joke.\n\n上周提到收购 Twitter 的 plan b，看样子是没法得知了。本周 Elon 花了 43 billion 完成了对 Twitter 的收购 [^1]。收购过程中，这句话留给我印象很深。\n\n我不玩来来回回的游戏。我已经直奔终点 [^2]。\n\nI am not playing the back-and-forth game. I have moved straight to the end. It's a high price and your shareholders will love it.\n\n买东西，签合同、跳槽、涨薪，生活中总是有各式各样的场景需要讨价还价。双方都觉得要多要点，不然亏了，将心中的“博弈”发挥到极致，有时候我觉得是自己跟自己演戏。我不知道这两种谈判策略的收益差别，但我觉得，直奔终点的心理负担是更小的——简单说，就是操心的事更少，专注在目标上。讨价还价来来回回，需要一直揣度对方的想法，反而容易失去重点。\n\n由于在家办公，有时要在我的笔记本和台式机之间切换，于是更新了一下家用办公设备：买了一个 MX Master 3 和一把新键盘。在家写代码，鼠标没有侧面的滚轮有点难受。现在公司用的 Master 一代，从 17 年到现在，五年多了还一直坚挺，也是挺不容易的。\n\n键盘现在家里用的青轴 filco minila air，办公室用的同款红轴，简直是我最爱的键盘，要不然也不会买两把一样的。 但是 filco 太不争气，蓝牙连接太拉跨了。我查了很多资料，但从来没在两台电脑之间切换成功过，除非连接完拿笔怼 reset 键，才能连接新的设备。一咬牙买了个新的，等到了再聊聊键盘。\n\n接下来五一长假，我准备开始看《老无所依》，然后把贾樟柯的电影看完。\n\n1. [Elon Musk offers to buy Twitter for $43 billion in cash](https://www.axios.com/2022/04/14/elon-musk-offers-buy-twitter)\n\n2. [092 提高效率的声音](http://coke.do/issues/092-1147933)\n","slug":"2022-apr-w5","published":1,"updated":"2022-05-07T13:38:17.431Z","_id":"cl2vvtg670000acmh8t5972oc","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65857b20af8442378852fe093916c1fa~tplv-k3u1fbpfcp-watermark.image\" alt=\"thinking-writing.jpg\"></p>\n<p>上周的文章写完以为四月就收尾了，没注意到这个月有五个周六，所以此文件的命名还是 apri-w5。</p>\n<p>在推特上看到一幅漫画，觉得挺好，保存下来。思考就像用手掌捧着水，总有漏完的时候，最后手上湿漉漉的，什么也没剩下；写作就像把水盛进杯子，需要的时候，你知道在哪能找到。</p>\n<p>漫画本身是不言自明（self-explanatory）的，明白晓畅，给人启迪。我小时候看了不少丰子恺和蔡志忠的小人书，寥寥数笔，清新脱俗。现在的有些漫画，恨不得旁边加上八百字作文，告诉你这里画的什么事件，那里讽刺什么现象。常看脱口秀的一定知道，If you have to explain a joke, there is no joke.</p>\n<p>上周提到收购 Twitter 的 plan b，看样子是没法得知了。本周 Elon 花了 43 billion 完成了对 Twitter 的收购 [^1]。收购过程中，这句话留给我印象很深。</p>\n<p>我不玩来来回回的游戏。我已经直奔终点 [^2]。</p>\n<p>I am not playing the back-and-forth game. I have moved straight to the end. It’s a high price and your shareholders will love it.</p>\n<p>买东西，签合同、跳槽、涨薪，生活中总是有各式各样的场景需要讨价还价。双方都觉得要多要点，不然亏了，将心中的“博弈”发挥到极致，有时候我觉得是自己跟自己演戏。我不知道这两种谈判策略的收益差别，但我觉得，直奔终点的心理负担是更小的——简单说，就是操心的事更少，专注在目标上。讨价还价来来回回，需要一直揣度对方的想法，反而容易失去重点。</p>\n<p>由于在家办公，有时要在我的笔记本和台式机之间切换，于是更新了一下家用办公设备：买了一个 MX Master 3 和一把新键盘。在家写代码，鼠标没有侧面的滚轮有点难受。现在公司用的 Master 一代，从 17 年到现在，五年多了还一直坚挺，也是挺不容易的。</p>\n<p>键盘现在家里用的青轴 filco minila air，办公室用的同款红轴，简直是我最爱的键盘，要不然也不会买两把一样的。 但是 filco 太不争气，蓝牙连接太拉跨了。我查了很多资料，但从来没在两台电脑之间切换成功过，除非连接完拿笔怼 reset 键，才能连接新的设备。一咬牙买了个新的，等到了再聊聊键盘。</p>\n<p>接下来五一长假，我准备开始看《老无所依》，然后把贾樟柯的电影看完。</p>\n<ol>\n<li><p><a href=\"https://www.axios.com/2022/04/14/elon-musk-offers-buy-twitter\">Elon Musk offers to buy Twitter for $43 billion in cash</a></p>\n</li>\n<li><p><a href=\"http://coke.do/issues/092-1147933\">092 提高效率的声音</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65857b20af8442378852fe093916c1fa~tplv-k3u1fbpfcp-watermark.image\" alt=\"thinking-writing.jpg\"></p>\n<p>上周的文章写完以为四月就收尾了，没注意到这个月有五个周六，所以此文件的命名还是 apri-w5。</p>\n<p>在推特上看到一幅漫画，觉得挺好，保存下来。思考就像用手掌捧着水，总有漏完的时候，最后手上湿漉漉的，什么也没剩下；写作就像把水盛进杯子，需要的时候，你知道在哪能找到。</p>\n<p>漫画本身是不言自明（self-explanatory）的，明白晓畅，给人启迪。我小时候看了不少丰子恺和蔡志忠的小人书，寥寥数笔，清新脱俗。现在的有些漫画，恨不得旁边加上八百字作文，告诉你这里画的什么事件，那里讽刺什么现象。常看脱口秀的一定知道，If you have to explain a joke, there is no joke.</p>\n<p>上周提到收购 Twitter 的 plan b，看样子是没法得知了。本周 Elon 花了 43 billion 完成了对 Twitter 的收购 [^1]。收购过程中，这句话留给我印象很深。</p>\n<p>我不玩来来回回的游戏。我已经直奔终点 [^2]。</p>\n<p>I am not playing the back-and-forth game. I have moved straight to the end. It’s a high price and your shareholders will love it.</p>\n<p>买东西，签合同、跳槽、涨薪，生活中总是有各式各样的场景需要讨价还价。双方都觉得要多要点，不然亏了，将心中的“博弈”发挥到极致，有时候我觉得是自己跟自己演戏。我不知道这两种谈判策略的收益差别，但我觉得，直奔终点的心理负担是更小的——简单说，就是操心的事更少，专注在目标上。讨价还价来来回回，需要一直揣度对方的想法，反而容易失去重点。</p>\n<p>由于在家办公，有时要在我的笔记本和台式机之间切换，于是更新了一下家用办公设备：买了一个 MX Master 3 和一把新键盘。在家写代码，鼠标没有侧面的滚轮有点难受。现在公司用的 Master 一代，从 17 年到现在，五年多了还一直坚挺，也是挺不容易的。</p>\n<p>键盘现在家里用的青轴 filco minila air，办公室用的同款红轴，简直是我最爱的键盘，要不然也不会买两把一样的。 但是 filco 太不争气，蓝牙连接太拉跨了。我查了很多资料，但从来没在两台电脑之间切换成功过，除非连接完拿笔怼 reset 键，才能连接新的设备。一咬牙买了个新的，等到了再聊聊键盘。</p>\n<p>接下来五一长假，我准备开始看《老无所依》，然后把贾樟柯的电影看完。</p>\n<ol>\n<li><p><a href=\"https://www.axios.com/2022/04/14/elon-musk-offers-buy-twitter\">Elon Musk offers to buy Twitter for $43 billion in cash</a></p>\n</li>\n<li><p><a href=\"http://coke.do/issues/092-1147933\">092 提高效率的声音</a></p>\n</li>\n</ol>\n"},{"title":"十二周一年","date":"2022-05-07T18:40:09.000Z","abbrlink":"12-week-year","_content":"\n今天是五月七号星期六，五月的第一个周六。阴天，大风，晚上似乎会有雨，桌面温度计显示当前 26 度，湿度 27%，室内干燥舒适，我穿着短裤短袖写这篇文章。从上周居家办公以来，我的晚间日程大概是，饭后散步半小时，出门绕着小区快走两圈，不到 3.5 公里，到家后会 hiit 半小时，然后做一下拉伸，洗澡，冲浪聊一会天，把手机留在客厅。十一点上床，看书，十二点睡觉。\n\n散步的时候在播客里听到一个概念，叫 the 12 week year。大意就是，如果你按整年来做规划，今年我要如何如何，那么生产力和效率曲线通常来说会是一个巨大的凹字形，两头高，中间低。The 12 week year 则是把 12 周当做一年来做规划，看上去就是互联网行业的 quarterly OKR。叫什么不太紧要，关键还是切分任务，做好回顾。\n\n五一在家优化了一下个人博客，等全部弄完应该会写篇博客记录一下过程。同时开始写一个工具应用，想到一个“美妙”的名字，感觉这事儿成了一半。\n\n今年的第二个 the 12 week year 还剩 7 周，做的计划如下，主要是修复一些问题，学习，看书，运动。\n\n1. 博客的 favicon 无法在 feedly 中正常显示，应该是 metadata 的问题。\n2. 博客的图片在 pc 端的展示效果不好，现在是默认最大宽度 100%，需要优化。\n3. 增加对引用的样式优化。\n4. 增加一个新的周记 tab。\n5. 增加一个新的栏目，记录一些非常喜欢的书和电影条目，名字还没想好，可能叫塑造。\n6. 保持每天用多领国学日语，学完前三单元。\n7. Coursera 完成 Google 的 Foundations of Project Management。\n8. 读完《老无所依》《置身事内》《丰乳肥臀》《绝对坦诚》（怎么都是四个字）。\n9. 体重减到 130 斤。\n\n这周看了《小武》《站台》，大受震撼。《三峡好人》，非常喜欢。《天注定》15 年还在美国时看过一遍，话题尖刻，现在再看，虽然佩服，却没什么触动。\n\n《站台》的开幕写道，献给我的父亲。\n\n采访时候有问人，为什么把电影献给父亲？\n\n贾答：彼此太不了解了。30 岁时拍这样一个电影，想让他知道我曾有过的想法。\n\n[01 年 11 月...在北大站着看完站台](https://movie.douban.com/review/1103542/)\n","source":"_posts/2022-may-w1.md","raw":"---\ntitle: 十二周一年\ndate: 2022-05-07 11:40:09\nabbrlink: 12-week-year\ncategories:\n  - report\ntags:\n  - week\n---\n\n今天是五月七号星期六，五月的第一个周六。阴天，大风，晚上似乎会有雨，桌面温度计显示当前 26 度，湿度 27%，室内干燥舒适，我穿着短裤短袖写这篇文章。从上周居家办公以来，我的晚间日程大概是，饭后散步半小时，出门绕着小区快走两圈，不到 3.5 公里，到家后会 hiit 半小时，然后做一下拉伸，洗澡，冲浪聊一会天，把手机留在客厅。十一点上床，看书，十二点睡觉。\n\n散步的时候在播客里听到一个概念，叫 the 12 week year。大意就是，如果你按整年来做规划，今年我要如何如何，那么生产力和效率曲线通常来说会是一个巨大的凹字形，两头高，中间低。The 12 week year 则是把 12 周当做一年来做规划，看上去就是互联网行业的 quarterly OKR。叫什么不太紧要，关键还是切分任务，做好回顾。\n\n五一在家优化了一下个人博客，等全部弄完应该会写篇博客记录一下过程。同时开始写一个工具应用，想到一个“美妙”的名字，感觉这事儿成了一半。\n\n今年的第二个 the 12 week year 还剩 7 周，做的计划如下，主要是修复一些问题，学习，看书，运动。\n\n1. 博客的 favicon 无法在 feedly 中正常显示，应该是 metadata 的问题。\n2. 博客的图片在 pc 端的展示效果不好，现在是默认最大宽度 100%，需要优化。\n3. 增加对引用的样式优化。\n4. 增加一个新的周记 tab。\n5. 增加一个新的栏目，记录一些非常喜欢的书和电影条目，名字还没想好，可能叫塑造。\n6. 保持每天用多领国学日语，学完前三单元。\n7. Coursera 完成 Google 的 Foundations of Project Management。\n8. 读完《老无所依》《置身事内》《丰乳肥臀》《绝对坦诚》（怎么都是四个字）。\n9. 体重减到 130 斤。\n\n这周看了《小武》《站台》，大受震撼。《三峡好人》，非常喜欢。《天注定》15 年还在美国时看过一遍，话题尖刻，现在再看，虽然佩服，却没什么触动。\n\n《站台》的开幕写道，献给我的父亲。\n\n采访时候有问人，为什么把电影献给父亲？\n\n贾答：彼此太不了解了。30 岁时拍这样一个电影，想让他知道我曾有过的想法。\n\n[01 年 11 月...在北大站着看完站台](https://movie.douban.com/review/1103542/)\n","slug":"2022-may-w1","published":1,"updated":"2022-05-08T13:36:42.153Z","_id":"cl2vvtg690002acmha0gvcb2x","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今天是五月七号星期六，五月的第一个周六。阴天，大风，晚上似乎会有雨，桌面温度计显示当前 26 度，湿度 27%，室内干燥舒适，我穿着短裤短袖写这篇文章。从上周居家办公以来，我的晚间日程大概是，饭后散步半小时，出门绕着小区快走两圈，不到 3.5 公里，到家后会 hiit 半小时，然后做一下拉伸，洗澡，冲浪聊一会天，把手机留在客厅。十一点上床，看书，十二点睡觉。</p>\n<p>散步的时候在播客里听到一个概念，叫 the 12 week year。大意就是，如果你按整年来做规划，今年我要如何如何，那么生产力和效率曲线通常来说会是一个巨大的凹字形，两头高，中间低。The 12 week year 则是把 12 周当做一年来做规划，看上去就是互联网行业的 quarterly OKR。叫什么不太紧要，关键还是切分任务，做好回顾。</p>\n<p>五一在家优化了一下个人博客，等全部弄完应该会写篇博客记录一下过程。同时开始写一个工具应用，想到一个“美妙”的名字，感觉这事儿成了一半。</p>\n<p>今年的第二个 the 12 week year 还剩 7 周，做的计划如下，主要是修复一些问题，学习，看书，运动。</p>\n<ol>\n<li>博客的 favicon 无法在 feedly 中正常显示，应该是 metadata 的问题。</li>\n<li>博客的图片在 pc 端的展示效果不好，现在是默认最大宽度 100%，需要优化。</li>\n<li>增加对引用的样式优化。</li>\n<li>增加一个新的周记 tab。</li>\n<li>增加一个新的栏目，记录一些非常喜欢的书和电影条目，名字还没想好，可能叫塑造。</li>\n<li>保持每天用多领国学日语，学完前三单元。</li>\n<li>Coursera 完成 Google 的 Foundations of Project Management。</li>\n<li>读完《老无所依》《置身事内》《丰乳肥臀》《绝对坦诚》（怎么都是四个字）。</li>\n<li>体重减到 130 斤。</li>\n</ol>\n<p>这周看了《小武》《站台》，大受震撼。《三峡好人》，非常喜欢。《天注定》15 年还在美国时看过一遍，话题尖刻，现在再看，虽然佩服，却没什么触动。</p>\n<p>《站台》的开幕写道，献给我的父亲。</p>\n<p>采访时候有问人，为什么把电影献给父亲？</p>\n<p>贾答：彼此太不了解了。30 岁时拍这样一个电影，想让他知道我曾有过的想法。</p>\n<p><a href=\"https://movie.douban.com/review/1103542/\">01 年 11 月…在北大站着看完站台</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天是五月七号星期六，五月的第一个周六。阴天，大风，晚上似乎会有雨，桌面温度计显示当前 26 度，湿度 27%，室内干燥舒适，我穿着短裤短袖写这篇文章。从上周居家办公以来，我的晚间日程大概是，饭后散步半小时，出门绕着小区快走两圈，不到 3.5 公里，到家后会 hiit 半小时，然后做一下拉伸，洗澡，冲浪聊一会天，把手机留在客厅。十一点上床，看书，十二点睡觉。</p>\n<p>散步的时候在播客里听到一个概念，叫 the 12 week year。大意就是，如果你按整年来做规划，今年我要如何如何，那么生产力和效率曲线通常来说会是一个巨大的凹字形，两头高，中间低。The 12 week year 则是把 12 周当做一年来做规划，看上去就是互联网行业的 quarterly OKR。叫什么不太紧要，关键还是切分任务，做好回顾。</p>\n<p>五一在家优化了一下个人博客，等全部弄完应该会写篇博客记录一下过程。同时开始写一个工具应用，想到一个“美妙”的名字，感觉这事儿成了一半。</p>\n<p>今年的第二个 the 12 week year 还剩 7 周，做的计划如下，主要是修复一些问题，学习，看书，运动。</p>\n<ol>\n<li>博客的 favicon 无法在 feedly 中正常显示，应该是 metadata 的问题。</li>\n<li>博客的图片在 pc 端的展示效果不好，现在是默认最大宽度 100%，需要优化。</li>\n<li>增加对引用的样式优化。</li>\n<li>增加一个新的周记 tab。</li>\n<li>增加一个新的栏目，记录一些非常喜欢的书和电影条目，名字还没想好，可能叫塑造。</li>\n<li>保持每天用多领国学日语，学完前三单元。</li>\n<li>Coursera 完成 Google 的 Foundations of Project Management。</li>\n<li>读完《老无所依》《置身事内》《丰乳肥臀》《绝对坦诚》（怎么都是四个字）。</li>\n<li>体重减到 130 斤。</li>\n</ol>\n<p>这周看了《小武》《站台》，大受震撼。《三峡好人》，非常喜欢。《天注定》15 年还在美国时看过一遍，话题尖刻，现在再看，虽然佩服，却没什么触动。</p>\n<p>《站台》的开幕写道，献给我的父亲。</p>\n<p>采访时候有问人，为什么把电影献给父亲？</p>\n<p>贾答：彼此太不了解了。30 岁时拍这样一个电影，想让他知道我曾有过的想法。</p>\n<p><a href=\"https://movie.douban.com/review/1103542/\">01 年 11 月…在北大站着看完站台</a></p>\n"},{"title":"2022-may-w2","date":"2022-05-15T04:38:02.000Z","_content":"","source":"_drafts/2022-may-w2.md","raw":"---\ntitle: 2022-may-w2\ndate: 2022-05-14 21:38:02\ncategories:\ntags:\n---\n","slug":"2022-may-w2","published":0,"updated":"2022-05-09T02:38:18.210Z","_id":"cl2xcbstj00007omh5vv3cuw3","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cka6xu6wg00008cmhsarcszuz","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72q001x8cmhv0tstkf8"},{"post_id":"cka6xu6wl00018cmhsar3t6i2","category_id":"cka6xu71t000j8cmhil1ge6ke","_id":"cka6xu72r001z8cmhf3hcwn60"},{"post_id":"cka6xu6wm00028cmhavmctd7d","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72r00218cmh5qapfzjo"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu72s00248cmhvyn7gfgx"},{"post_id":"cka6xu6wo00048cmhtl5j1nlr","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu72t00268cmho4gmzeqs"},{"post_id":"cka6xu6wo00058cmhz0xol66m","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72t00298cmhjqrqyrx1"},{"post_id":"cka6xu6wp00068cmhbtds9u3a","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu72u002b8cmhmtxa06o3"},{"post_id":"cka6xu6wq00078cmhqkys3a96","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu72v002e8cmhmv4xhvl8"},{"post_id":"cka6xu6wq00088cmhlnb6tc3m","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu72v002g8cmhuthvzreu"},{"post_id":"cka6xu6wr00098cmhjkyxr1bz","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72w002j8cmhxrun1z1j"},{"post_id":"cka6xu6ws000a8cmhqojtklpq","category_id":"cka6xu71t000j8cmhil1ge6ke","_id":"cka6xu72w002l8cmh05vzxixr"},{"post_id":"cka6xu71j000b8cmhp430j98e","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72x002n8cmhavtrqo1s"},{"post_id":"cka6xu71u000l8cmhi4wlksh7","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72y002s8cmh7sl5kjgj"},{"post_id":"cka6xu71w000m8cmh56i2oa8i","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72y002v8cmhjdrx5ie3"},{"post_id":"cka6xu71y000p8cmhie3hdsvx","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu72z002x8cmh49dtbvo7"},{"post_id":"cka6xu71z000q8cmhgb6in46l","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu73000308cmhyv6gxk09"},{"post_id":"cka6xu721000t8cmhfvynhiv5","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu73000328cmh6pzbn1c5"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu73100358cmh3x4n0tmh"},{"post_id":"cka6xu722000w8cmhnzm5ghan","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu73100378cmhys1tkw9e"},{"post_id":"cka6xu72o001t8cmhpsyeqdev","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu756003v8cmhhebdi2ih"},{"post_id":"ckaguocy200001smh9pqo5umo","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckaguocyc00011smhhfsl87h8"},{"post_id":"ckb6k0nq10000gcmh6etw1hb5","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckb6k0nqa0001gcmhcymed20x"},{"post_id":"ckb6k28yh000010mh7yk675vz","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckb6k28yj000110mh26u5fx9z"},{"post_id":"ckb6k477y0000asmhcqtd62y6","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckb6k47880001asmh7lot8k0d"},{"post_id":"ckb7cj43900004nfyengy8boo","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckb7cj44800014nfy38emdxx5"},{"post_id":"ckcdcedex00009nfy3emy4uu1","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckcdcedfr00019nfy5l85a8hl"},{"post_id":"ckcvlqb7z0000bkfybsaaf6kf","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckcvlqb880001bkfy76wfemoo"},{"post_id":"ckev41f160001jqs6cgxo6fgz","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckev41f1l0004jqs644pnainl"},{"post_id":"ckev435fo0000njs6ga936lti","category_id":"cka6xu720000r8cmhrml3wvur","_id":"ckev435fs0002njs66p9ta5lh"},{"post_id":"ckg59273800001kmh6rla9ivb","category_id":"ckg5appth0000ckmhcdf86z93","_id":"ckg5appto0001ckmhbxs939mb"},{"post_id":"ckn7220hi00017pfy9j1sae2n","category_id":"cka6xu720000r8cmhrml3wvur","_id":"ckn7220hv00047pfyhq909bho"},{"post_id":"ckn7220hk00027pfy3fep2jts","category_id":"cka6xu720000r8cmhrml3wvur","_id":"ckn7220hw00057pfy5jtcfwvf"},{"post_id":"ckonsxvmf000137s6bg40g6n8","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckonsykro000337s64v3i0d9e"},{"post_id":"ckonsxvma000037s6chohgwv0","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckont1mp0000437s643c04x50"},{"post_id":"ckq0cnvuc0000b4fy1ni8gjtw","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckq0cnvuk0002b4fycd54a2gh"},{"post_id":"ckq0cnvuc0000b4fy1ni8gjtw","category_id":"ckq0coeo90003b4fy0nr0gc85","_id":"ckq0coeob0004b4fybcuz5ms7"},{"post_id":"ckonsxvmf000137s6bg40g6n8","category_id":"ckq0coeo90003b4fy0nr0gc85","_id":"ckq0cop950005b4fyf6fs7df7"},{"post_id":"ckq4ue26u0000i0fy2mnrc4hs","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckq4ue27o0002i0fy6do7as3d"},{"post_id":"ckq4ue26u0000i0fy2mnrc4hs","category_id":"ckq0coeo90003b4fy0nr0gc85","_id":"ckq4ue27p0003i0fy49ts4m2j"},{"post_id":"cktk0fy8v0000b34n9h0nb5wi","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cktk0fy970002b34n1sse4rmg"},{"post_id":"cktk0fy8v0000b34n9h0nb5wi","category_id":"ckq0coeo90003b4fy0nr0gc85","_id":"cktk0fy980003b34n9spi1ww1"},{"post_id":"cktk0j4210006b34n9e8pg3h1","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cktk0j4220008b34nhs3cc7mc"},{"post_id":"ckzlahsod0001e2s6es2w6r4t","category_id":"ckzlahszl0002e2s6hwqn3xg2","_id":"ckzlahszv0005e2s6hnswfk4a"},{"post_id":"ckzlahso90000e2s6ad7ich1m","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckzlahszv0006e2s63ot97xzq"},{"post_id":"ckzlahso90000e2s6ad7ich1m","category_id":"ckzlahszr0004e2s62ttb1lc3","_id":"ckzlahszv0007e2s69l9i3f8n"},{"post_id":"cka6xu6wg00008cmhsarcszuz","category_id":"ckzlahszr0004e2s62ttb1lc3","_id":"ckzlahszv0008e2s6fsd91b36"},{"post_id":"cka6xu6wm00028cmhavmctd7d","category_id":"ckzlahszr0004e2s62ttb1lc3","_id":"ckzlahszv0009e2s6fvlr6330"},{"post_id":"ckzlapeg00002fys6eziy9pry","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckzlaq1co0004fys68zumf6z2"},{"post_id":"ckzlaoudn0001fys6b18u0rl0","category_id":"ckzlaqiu50006fys6106khxu4","_id":"ckzlaqiu70009fys6goy1f4pn"},{"post_id":"cka6xu721000t8cmhfvynhiv5","category_id":"ckq0coeo90003b4fy0nr0gc85","_id":"cl0d7wq8v0001bomh1uzngcck"},{"post_id":"cktk0j4210006b34n9e8pg3h1","category_id":"ckq0coeo90003b4fy0nr0gc85","_id":"cl0d7wq8w0002bomhfu46cgtv"},{"post_id":"ckzlaohgp0000fys67z2sa2gq","category_id":"cl0d7wq8s0000bomh1ymrhcay","_id":"cl0d7wqal0004bomh1tavdhjp"},{"post_id":"ckzlaohgp0000fys67z2sa2gq","category_id":"cl0d7wqak0003bomhcchyfepg","_id":"cl0d7wqal0005bomh3spj5qwh"},{"post_id":"cl10dfpqd0003dy4nh3kk4jpx","category_id":"cl0l4ii6r0001ixfyetnfh3du","_id":"cl10dfpqg000ady4nbzfq1rgp"},{"post_id":"cl10dfpqe0005dy4n9d1p3itp","category_id":"cl0l4ii6r0001ixfyetnfh3du","_id":"cl10dfpqg000bdy4n95yr7y0i"},{"post_id":"cl10dfpqh000cdy4n51cb9h4f","category_id":"cl0l4ii6r0001ixfyetnfh3du","_id":"cl10dfpqi000edy4nb0w9hauk"},{"post_id":"cl1d7lmm70000rb4najeaeo9x","category_id":"cl0l4ii6r0001ixfyetnfh3du","_id":"cl1d7lmma0002rb4nhna7arl7"},{"post_id":"cl1rygiak0001gsmh84bt4eak","category_id":"cl0l4ii6r0001ixfyetnfh3du","_id":"cl1rygiap0003gsmhblrm708k"},{"post_id":"cl1rygiai0000gsmh64an5e8e","category_id":"cl0l4ii6r0001ixfyetnfh3du","_id":"cl1rygwz20005gsmhecp21nh7"},{"post_id":"cl2g8vmxf00001hs61mv66059","category_id":"cl0l4ii6r0001ixfyetnfh3du","_id":"cl2g8vmxl00021hs6a7kpbjir"},{"post_id":"cl2g8vmxn00031hs6dohi6k9x","category_id":"ckzlahszl0002e2s6hwqn3xg2","_id":"cl2g8vmxp00051hs6g2qj3ti6"},{"post_id":"cl2ha9cx600061hs65u10epea","category_id":"cl0l4ii6r0001ixfyetnfh3du","_id":"cl2haaaxt00081hs6gp341651"},{"post_id":"cl2sgv5r20006g0ahg056d0e5","category_id":"cl0l4ii6r0001ixfyetnfh3du","_id":"cl2sgv5r30008g0ahagf529rs"},{"post_id":"cl2vvtg670000acmh8t5972oc","category_id":"cl0l4ii6r0001ixfyetnfh3du","_id":"cl2vvtg6b0003acmh3r7w24wq"},{"post_id":"cl2vvtg690002acmha0gvcb2x","category_id":"cl0l4ii6r0001ixfyetnfh3du","_id":"cl2vvtg6e0005acmhg8j92jvd"}],"PostTag":[{"post_id":"cka6xu6wl00018cmhsar3t6i2","tag_id":"cka6xu71p000e8cmhfoc3j0j9","_id":"cka6xu72p001u8cmhwkiql4yc"},{"post_id":"cka6xu6wl00018cmhsar3t6i2","tag_id":"cka6xu71t000k8cmh616vvdgv","_id":"cka6xu72q001y8cmhmcut03vo"},{"post_id":"cka6xu6wl00018cmhsar3t6i2","tag_id":"cka6xu71x000o8cmhqsyyo73w","_id":"cka6xu72r00208cmhu8qtcrf9"},{"post_id":"cka6xu6wm00028cmhavmctd7d","tag_id":"cka6xu720000s8cmhklqtevep","_id":"cka6xu72s00238cmhymkjef19"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu723000x8cmh2i587xew","_id":"cka6xu72s00258cmhnxjh1uhr"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu72500108cmh2x1khunz","_id":"cka6xu72t00288cmhs2yj2sai"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu72600128cmh5vh9k3bf","_id":"cka6xu72u002a8cmhw1kgt8zb"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu72600148cmh19kshzgh","_id":"cka6xu72u002d8cmhrkggpvg1"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu72700168cmhm7w0hedz","_id":"cka6xu72v002f8cmh51vq8eg3"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu72800188cmh5ip7aft8","_id":"cka6xu72v002h8cmhy4v40n32"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu729001a8cmhpz81ovaq","_id":"cka6xu72w002k8cmhk1hih61h"},{"post_id":"cka6xu6wo00048cmhtl5j1nlr","tag_id":"cka6xu729001b8cmhu8w6rghl","_id":"cka6xu72w002m8cmh8t55vvwu"},{"post_id":"cka6xu6wo00048cmhtl5j1nlr","tag_id":"cka6xu72a001c8cmh0byoyptb","_id":"cka6xu72x002p8cmhqw05nzgq"},{"post_id":"cka6xu6wo00048cmhtl5j1nlr","tag_id":"cka6xu72a001d8cmhtq08weld","_id":"cka6xu72y002r8cmhrjv7p3sr"},{"post_id":"cka6xu6wo00048cmhtl5j1nlr","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"cka6xu72y002u8cmhbn4yrk3v"},{"post_id":"cka6xu6wp00068cmhbtds9u3a","tag_id":"cka6xu72b001f8cmhgau649xy","_id":"cka6xu72z002w8cmhscyar054"},{"post_id":"cka6xu6wp00068cmhbtds9u3a","tag_id":"cka6xu72b001g8cmhi9vyzcma","_id":"cka6xu72z002z8cmhday3oqur"},{"post_id":"cka6xu6wp00068cmhbtds9u3a","tag_id":"cka6xu72d001h8cmhm3eg072h","_id":"cka6xu73000318cmh0j7ir41m"},{"post_id":"cka6xu6wq00078cmhqkys3a96","tag_id":"cka6xu723000x8cmh2i587xew","_id":"cka6xu73000338cmhcaeeix1f"},{"post_id":"cka6xu6wq00078cmhqkys3a96","tag_id":"cka6xu72500108cmh2x1khunz","_id":"cka6xu73100368cmhwhjsyom6"},{"post_id":"cka6xu6wq00078cmhqkys3a96","tag_id":"cka6xu72e001k8cmhnk15rvbi","_id":"cka6xu73100388cmhbgv7t4zv"},{"post_id":"cka6xu6wq00088cmhlnb6tc3m","tag_id":"cka6xu72e001l8cmhlw3d9smx","_id":"cka6xu732003b8cmh58nn8xpg"},{"post_id":"cka6xu6wq00088cmhlnb6tc3m","tag_id":"cka6xu72f001m8cmh5mcrvl26","_id":"cka6xu732003c8cmhcf2cc0bn"},{"post_id":"cka6xu6wr00098cmhjkyxr1bz","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"cka6xu733003e8cmhwkuikl2l"},{"post_id":"cka6xu6wr00098cmhjkyxr1bz","tag_id":"cka6xu72g001o8cmh5e62moxa","_id":"cka6xu733003f8cmhfhv2gkkj"},{"post_id":"cka6xu6wr00098cmhjkyxr1bz","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"cka6xu734003h8cmhyjwc24ts"},{"post_id":"cka6xu6ws000a8cmhqojtklpq","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"cka6xu734003i8cmhkczobs12"},{"post_id":"cka6xu6ws000a8cmhqojtklpq","tag_id":"cka6xu72h001r8cmhiaj2e63o","_id":"cka6xu734003j8cmh39qd6c9j"},{"post_id":"cka6xu6ws000a8cmhqojtklpq","tag_id":"cka6xu72h001s8cmho4x3s43k","_id":"cka6xu734003l8cmhwfycj5ha"},{"post_id":"cka6xu71y000p8cmhie3hdsvx","tag_id":"cka6xu72y002t8cmhfzcbfuxv","_id":"cka6xu75900458cmhggwtmbin"},{"post_id":"cka6xu71y000p8cmhie3hdsvx","tag_id":"cka6xu72z002y8cmhb0xmik3y","_id":"cka6xu75900468cmhz898hb0m"},{"post_id":"cka6xu71y000p8cmhie3hdsvx","tag_id":"cka6xu73100348cmhwawo0nhj","_id":"cka6xu75900478cmhy6v9777m"},{"post_id":"cka6xu71y000p8cmhie3hdsvx","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"cka6xu75900488cmh01xotdnx"},{"post_id":"cka6xu71z000q8cmhgb6in46l","tag_id":"cka6xu723000x8cmh2i587xew","_id":"cka6xu75a00498cmhb44bwiay"},{"post_id":"cka6xu71z000q8cmhgb6in46l","tag_id":"cka6xu72500108cmh2x1khunz","_id":"cka6xu75a004a8cmhg5ubfrf3"},{"post_id":"cka6xu71z000q8cmhgb6in46l","tag_id":"cka6xu732003a8cmh99v56yai","_id":"cka6xu75a004b8cmh1h9e4yrv"},{"post_id":"cka6xu71z000q8cmhgb6in46l","tag_id":"cka6xu733003d8cmhttmfhgvz","_id":"cka6xu75a004c8cmhfmpwmhvt"},{"post_id":"cka6xu721000t8cmhfvynhiv5","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"cka6xu75a004d8cmh78zz0t59"},{"post_id":"cka6xu721000t8cmhfvynhiv5","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"cka6xu75b004f8cmhlmhse56l"},{"post_id":"cka6xu721000t8cmhfvynhiv5","tag_id":"cka6xu733003g8cmhur14awl9","_id":"cka6xu75b004g8cmha0krxwa4"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","tag_id":"cka6xu723000x8cmh2i587xew","_id":"cka6xu75b004h8cmh2nvajaro"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","tag_id":"cka6xu72500108cmh2x1khunz","_id":"cka6xu75b004i8cmh5z1jw6ou"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","tag_id":"cka6xu734003k8cmhdvrs3t7v","_id":"cka6xu75b004j8cmhtidjbi4u"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","tag_id":"cka6xu735003m8cmhdb3m46wm","_id":"cka6xu75c004k8cmhmfx1v3bs"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","tag_id":"cka6xu735003n8cmh6sh506ii","_id":"cka6xu75c004l8cmhw7gxfrez"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","tag_id":"cka6xu736003o8cmh1g4fyb24","_id":"cka6xu75c004m8cmht3vvr7rr"},{"post_id":"cka6xu72o001t8cmhpsyeqdev","tag_id":"cka6xu754003s8cmhda4sc522","_id":"cka6xu75e004r8cmhj2txrzha"},{"post_id":"cka6xu72o001t8cmhpsyeqdev","tag_id":"cka6xu756003x8cmh8bajg2y6","_id":"cka6xu75e004s8cmh5lr4b34v"},{"post_id":"cka6xu72o001t8cmhpsyeqdev","tag_id":"cka6xu75700408cmh565xa7eb","_id":"cka6xu75f004t8cmh9jen525m"},{"post_id":"cka6xu72o001t8cmhpsyeqdev","tag_id":"cka6xu75800438cmh6jjk1rk9","_id":"cka6xu75f004u8cmhxg1p2gyu"},{"post_id":"ckev435fo0000njs6ga936lti","tag_id":"cka6xu72t00278cmhv4jg9dz7","_id":"ckev435fs0001njs6f3qy6cph"},{"post_id":"ckev435fo0000njs6ga936lti","tag_id":"cka6xu72u002c8cmhfcuogwfx","_id":"ckev435fs0003njs6c8v00dgu"},{"post_id":"ckev435fo0000njs6ga936lti","tag_id":"cka6xu72v002i8cmhtpfr235r","_id":"ckev435fs0004njs6f7dzgj3t"},{"post_id":"ckev435fo0000njs6ga936lti","tag_id":"cka6xu72x002o8cmhto27x2w7","_id":"ckev435fs0005njs67jlqb9mu"},{"post_id":"ckev435fo0000njs6ga936lti","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"ckev435fs0006njs601k4exyz"},{"post_id":"ckn7220hi00017pfy9j1sae2n","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"ckn7220hz00097pfy9ujsa1pr"},{"post_id":"ckn7220hi00017pfy9j1sae2n","tag_id":"ckn7220ho00037pfyeflvdjqk","_id":"ckn7220hz000a7pfyf1341xic"},{"post_id":"ckn7220hi00017pfy9j1sae2n","tag_id":"ckn7220hx00067pfy5fcc01v0","_id":"ckn7220hz000b7pfy6p3h7v9x"},{"post_id":"ckn7220hk00027pfy3fep2jts","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"ckn7220hz000c7pfy6ip98zs8"},{"post_id":"ckn7220hk00027pfy3fep2jts","tag_id":"ckn7220hx00077pfy11zr87xt","_id":"ckn7220i0000d7pfy2om01q4g"},{"post_id":"ckn7220hk00027pfy3fep2jts","tag_id":"cka6xu72y002t8cmhfzcbfuxv","_id":"ckn7220i0000e7pfy64e58aqu"},{"post_id":"ckn7220hk00027pfy3fep2jts","tag_id":"ckn7220hx00087pfyg3ee6cfl","_id":"ckn7220i0000f7pfy9ut14g3b"},{"post_id":"ckonsxvmf000137s6bg40g6n8","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"ckonsykro000237s65szm56cj"},{"post_id":"ckq0cnvuc0000b4fy1ni8gjtw","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"ckq0cnvuj0001b4fyf1ka227q"},{"post_id":"ckq4ue26u0000i0fy2mnrc4hs","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"ckq4ue27r0004i0fy74xs8dp5"},{"post_id":"ckq4ue26u0000i0fy2mnrc4hs","tag_id":"ckq4ue27a0001i0fye824a4n7","_id":"ckq4ue27r0005i0fy9geigfv4"},{"post_id":"cktk0fy8v0000b34n9h0nb5wi","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"cktk0fyar0004b34n73prgy7f"},{"post_id":"cktk0fy8v0000b34n9h0nb5wi","tag_id":"cktk0fy900001b34n7tjedmng","_id":"cktk0fyar0005b34n6vw194bp"},{"post_id":"cktk0j4210006b34n9e8pg3h1","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"cktk0j4220007b34n63ba7802"},{"post_id":"cktk0j4210006b34n9e8pg3h1","tag_id":"cka6xu736003p8cmhyvu4owji","_id":"cktk0j422000ab34nhnlgbkrx"},{"post_id":"cktk0j4210006b34n9e8pg3h1","tag_id":"cka6xu736003q8cmhw5onfm83","_id":"cktk0j423000bb34n5t9pf32s"},{"post_id":"ckzlahsod0001e2s6es2w6r4t","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"ckzlahszq0003e2s6ebyt3ms0"},{"post_id":"ckzlapeg00002fys6eziy9pry","tag_id":"ckzlaq1co0003fys6fdfd24qe","_id":"ckzlaq1cp0005fys67lvyhfvc"},{"post_id":"ckzlaoudn0001fys6b18u0rl0","tag_id":"ckzlaqiu60007fys602mdadwo","_id":"ckzlaqiu70008fys62rjnecvf"},{"post_id":"ckzlaohgp0000fys67z2sa2gq","tag_id":"ckzlar97p000bfys63j0g0csi","_id":"ckzlar97q000dfys63bxg2yqa"},{"post_id":"ckzlaohgp0000fys67z2sa2gq","tag_id":"ckzlar97q000cfys6dhms5yre","_id":"ckzlar97q000ffys66l4z7j0f"},{"post_id":"cl10dfpqd0003dy4nh3kk4jpx","tag_id":"cl0l4ii6y0002ixfyeidu3e90","_id":"cl10dfpqf0007dy4n9g3b1lrp"},{"post_id":"cl10dfpqe0005dy4n9d1p3itp","tag_id":"cl0l4ii6y0002ixfyeidu3e90","_id":"cl10dfpqg0009dy4n5griafbx"},{"post_id":"cl10dfpqh000cdy4n51cb9h4f","tag_id":"cl0l4ii6y0002ixfyeidu3e90","_id":"cl10dfpqi000ddy4n0v8f7ngs"},{"post_id":"cl1d7lmm70000rb4najeaeo9x","tag_id":"cl0l4ii6y0002ixfyeidu3e90","_id":"cl1d7lmm90001rb4necxa9pkl"},{"post_id":"cl1rygiak0001gsmh84bt4eak","tag_id":"cl0l4ii6y0002ixfyeidu3e90","_id":"cl1rygian0002gsmh6dh9b1k1"},{"post_id":"cl1rygiai0000gsmh64an5e8e","tag_id":"cl0l4ii6y0002ixfyeidu3e90","_id":"cl1rygwz10004gsmh6txe35rw"},{"post_id":"cl2g8vmxf00001hs61mv66059","tag_id":"cl0l4ii6y0002ixfyeidu3e90","_id":"cl2g8vmxl00011hs6ctqa757i"},{"post_id":"cl2g8vmxn00031hs6dohi6k9x","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"cl2g8vmxp00041hs63cmv8whc"},{"post_id":"cl2ha9cx600061hs65u10epea","tag_id":"cl0l4ii6y0002ixfyeidu3e90","_id":"cl2haaaxt00071hs668p95t5t"},{"post_id":"cl2sgv5r20006g0ahg056d0e5","tag_id":"cl0l4ii6y0002ixfyeidu3e90","_id":"cl2sgv5r30007g0ahakcrh0d1"},{"post_id":"cl2vvtg670000acmh8t5972oc","tag_id":"cl0l4ii6y0002ixfyeidu3e90","_id":"cl2vvtg690001acmh5snoa6jz"},{"post_id":"cl2vvtg690002acmha0gvcb2x","tag_id":"cl0l4ii6y0002ixfyeidu3e90","_id":"cl2vvtg6b0004acmh908r8rs3"}],"Tag":[{"name":"hexo","_id":"cka6xu71p000e8cmhfoc3j0j9"},{"name":"blog","_id":"cka6xu71t000k8cmh616vvdgv"},{"name":"github","_id":"cka6xu71x000o8cmhqsyyo73w"},{"name":"resolution","_id":"cka6xu720000s8cmhklqtevep"},{"name":"ECMAScript2015","_id":"cka6xu723000x8cmh2i587xew"},{"name":"es6","_id":"cka6xu72500108cmh2x1khunz"},{"name":"var","_id":"cka6xu72600128cmh5vh9k3bf"},{"name":"let","_id":"cka6xu72600148cmh19kshzgh"},{"name":"const","_id":"cka6xu72700168cmhm7w0hedz"},{"name":"block binding","_id":"cka6xu72800188cmh5ip7aft8"},{"name":"hoisting","_id":"cka6xu729001a8cmhpz81ovaq"},{"name":"ECMAScript2016","_id":"cka6xu729001b8cmhu8w6rghl"},{"name":"es7","_id":"cka6xu72a001c8cmh0byoyptb"},{"name":"decorator","_id":"cka6xu72a001d8cmhtq08weld"},{"name":"javascript","_id":"cka6xu72a001e8cmhm8sq40kv"},{"name":"react","_id":"cka6xu72b001f8cmhgau649xy"},{"name":"react native","_id":"cka6xu72b001g8cmhi9vyzcma"},{"name":"Xcode","_id":"cka6xu72d001h8cmhm3eg072h"},{"name":"module","_id":"cka6xu72e001k8cmhnk15rvbi"},{"name":"Flutter","_id":"cka6xu72e001l8cmhlw3d9smx"},{"name":"setup","_id":"cka6xu72f001m8cmh5mcrvl26"},{"name":"books","_id":"cka6xu72f001n8cmhy4gh504k"},{"name":"reading","_id":"cka6xu72g001o8cmh5e62moxa"},{"name":"setTimeout","_id":"cka6xu72h001r8cmhiaj2e63o"},{"name":"setInterval","_id":"cka6xu72h001s8cmho4x3s43k"},{"name":"leetcode","_id":"cka6xu72q001w8cmhuq2bt1up"},{"name":"algorithm","_id":"cka6xu72r00228cmh6lxybf54"},{"name":"window","_id":"cka6xu72t00278cmhv4jg9dz7"},{"name":"events","_id":"cka6xu72u002c8cmhfcuogwfx"},{"name":"capture/bubbling","_id":"cka6xu72v002i8cmhtpfr235r"},{"name":"delegate","_id":"cka6xu72x002o8cmhto27x2w7"},{"name":"nodejs","_id":"cka6xu72y002t8cmhfzcbfuxv"},{"name":"modules","_id":"cka6xu72z002y8cmhb0xmik3y"},{"name":"exports","_id":"cka6xu73100348cmhwawo0nhj"},{"name":"iterators","_id":"cka6xu732003a8cmh99v56yai"},{"name":"generators","_id":"cka6xu733003d8cmhttmfhgvz"},{"name":"investment","_id":"cka6xu733003g8cmhur14awl9"},{"name":"promise","_id":"cka6xu734003k8cmhdvrs3t7v"},{"name":"Observables","_id":"cka6xu735003m8cmhdb3m46wm"},{"name":"subscription","_id":"cka6xu735003n8cmh6sh506ii"},{"name":"subscribe","_id":"cka6xu736003o8cmh1g4fyb24"},{"name":"frontend","_id":"cka6xu736003p8cmhyvu4owji"},{"name":"前端工程化","_id":"cka6xu736003q8cmhw5onfm83"},{"name":"echarts","_id":"cka6xu754003s8cmhda4sc522"},{"name":"zrender","_id":"cka6xu756003x8cmh8bajg2y6"},{"name":"tooltip","_id":"cka6xu75700408cmh565xa7eb"},{"name":"confine","_id":"cka6xu75800438cmh6jjk1rk9"},{"name":"task","_id":"ckev41f1a0002jqs6ejn0b26k"},{"name":"microtask","_id":"ckev41f1l0005jqs6ceco2093"},{"name":"curry","_id":"ckn7220ho00037pfyeflvdjqk"},{"name":"closure","_id":"ckn7220hx00067pfy5fcc01v0"},{"name":"event loop","_id":"ckn7220hx00077pfy11zr87xt"},{"name":"browser","_id":"ckn7220hx00087pfyg3ee6cfl"},{"name":"leadership","_id":"ckq4ue27a0001i0fye824a4n7"},{"name":"history","_id":"cktk0fy900001b34n7tjedmng"},{"name":"收纳","_id":"ckzlaq1co0003fys6fdfd24qe"},{"name":"马伯庸","_id":"ckzlaqiu60007fys602mdadwo"},{"name":"bytedance","_id":"ckzlar97p000bfys63j0g0csi"},{"name":"tiktok","_id":"ckzlar97q000cfys6dhms5yre"},{"name":"week","_id":"cl0l4ii6y0002ixfyeidu3e90"}]}}