{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo@2x.png","path":"images/logo@2x.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/mylogo.png","path":"images/mylogo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"71c95774de16f2039ec0188b41e1ba5bab1f5bda","modified":1573107407390},{"_id":"source/robots.txt","hash":"99276e2a5485017b35cd46124e3d21b84b41904c","modified":1573810435897},{"_id":"themes/anatole/LICENSE","hash":"013aeea58737aaf555e4487dab17f06286597c3d","modified":1573107407400},{"_id":"themes/anatole/README.md","hash":"8e51a41de2ce148db91c3ef60987bc2d2f4ec5d7","modified":1573107407400},{"_id":"themes/anatole/_config.yml","hash":"9915127e7998377dd51acbc2cd47c8707ca2e178","modified":1586241443412},{"_id":"source/_posts/2017-mid-year-summary.md","hash":"f1a74660ca4a657dba1c3a582431429e4a23c051","modified":1574738753105},{"_id":"source/_posts/2020-resolution.md","hash":"6701ed30a524781771cdac745b47112fb4839f97","modified":1583397874350},{"_id":"source/_posts/Build-a-Personal-Blog-With-Hexo.md","hash":"b44f407f2a3eccf9a771a6b9fea9d2c2ba88a2aa","modified":1573810752470},{"_id":"source/_posts/Decorator-in-JavaScript.md","hash":"b726efd18365c9a58e664995ecad7e05e28b60fe","modified":1573810752462},{"_id":"source/_posts/ES6-Block-Binding.md","hash":"20447ced17a9693d3c8bc5e0039974d9a91b9dbc","modified":1573810752463},{"_id":"source/_posts/Iterators-and-generators.md","hash":"f01965d48442e38dde522a014aa20e722a6c11d8","modified":1573810752466},{"_id":"source/_posts/Regret-Minimization-and-Multi-task-Serially.md","hash":"92d72aa18bb92ec14b4baf28d41c5e1b6a647a3f","modified":1573810752471},{"_id":"source/_posts/Run-react-native-app-on-Mac.md","hash":"393dee63caff4257ca972c018d91fa94faaa0e2f","modified":1603866550916},{"_id":"source/_posts/Timers-in-JavaScript.md","hash":"c23594b2b583c6a3007cb2dd7940b5cb2ee68b7b","modified":1573810752469},{"_id":"source/_posts/ecmascript2015-modules.md","hash":"cf9218e5f6f9b4979e9a0916a0261e0fea0b36b2","modified":1573810752467},{"_id":"source/_posts/flutter-setup.md","hash":"4d52d1837fd597d1158f26f69b39d73b4b86f3ed","modified":1585758233488},{"_id":"source/_posts/effective-javascript.md","hash":"02bbaee82f314d5b250f7d8d38148dd3ffc8cfa3","modified":1585803231562},{"_id":"source/_posts/interview-with-huawei.md","hash":"5244f8a9792ac8d0240901ecdaf2e410306bd191","modified":1574738738815},{"_id":"source/_posts/javaScript-leetCode-day-1.md","hash":"a0a6b9623c0fcd8f2ea0de6c9d0a59ace633d41f","modified":1586228780362},{"_id":"source/_posts/javascript-events.md","hash":"b9896c9404036027e2a04c8f85b0b1aaffa53c2f","modified":1599639551098},{"_id":"source/_posts/march-summary.md","hash":"7078c76c2c39d0a85dafa6aa5665bb68f9ed9e2f","modified":1574738725508},{"_id":"source/_posts/new-job.md","hash":"0015089dbedab0847a4476f4dc016aa618a2a32c","modified":1574738651227},{"_id":"source/_posts/node-modules.md","hash":"b3708a625709d1f4ad8688de431248331aba890a","modified":1573810752477},{"_id":"source/_posts/promise-vs-observables.md","hash":"70a3139378fd7c74aefbee749f4623b14efc1026","modified":1573810752472},{"_id":"source/_posts/reading-march.md","hash":"4b1f8a56c8b33faa1c932fd436a2d583a5a870db","modified":1586345158181},{"_id":"source/_posts/tooltip-in-echars.md","hash":"25307b8f301e6c1dc274d8d3ba02dbe34de89e22","modified":1573810752476},{"_id":"source/_posts/我读前端工程化.md","hash":"4d4e69f4db99f68194dc7e70d615047d116b42e3","modified":1589470738750},{"_id":"source/_posts/下班.md","hash":"d79161850a375682d2b2a28b16deae7d9ffa4002","modified":1594197978742},{"_id":"source/about/index.md","hash":"958d3ff4b741fea54d261ed54ae087e4baaa189e","modified":1573107407400},{"_id":"source/categories/index.md","hash":"2029d39cc68b2fc09655d126cfc51374bba153ff","modified":1573107407400},{"_id":"source/tags/index.md","hash":"771e3964b6e5ce39dcb5adb87be4c17b9783f632","modified":1573107407400},{"_id":"themes/anatole/layout/archive.jade","hash":"52b73d18420af570ece4e749985a8c548e7571ea","modified":1573107407402},{"_id":"themes/anatole/layout/index.jade","hash":"ab8828a0e8d7595b0931247debcdab649864e5db","modified":1573107407402},{"_id":"themes/anatole/layout/mixins.jade","hash":"0e54fc9b01a12b35261e6c41234c0632ccc54c68","modified":1573107407403},{"_id":"themes/anatole/layout/page.jade","hash":"300e3fa98fd7cb2627589d3555ab4863cfeedd0c","modified":1585569490914},{"_id":"themes/anatole/layout/post.jade","hash":"db66bbfc35b8aa3639b9f2dc24d498e160249373","modified":1586241717872},{"_id":"themes/anatole/layout/projects.jade","hash":"1317a0f1cc0fc2299f423a8a1f8f3637c48d7dd0","modified":1573107407409},{"_id":"themes/anatole/layout/partial/footer.jade","hash":"aba48a32c8cc9809d8e796a7f87dac0d8761afc1","modified":1573107407405},{"_id":"themes/anatole/layout/partial/comments.jade","hash":"793f056f968a64f2a540756c0a5e11a0e894fe93","modified":1573107407404},{"_id":"themes/anatole/layout/partial/layout.jade","hash":"f87664890d656fc27af17edd27e6c0dd965e68d2","modified":1585798428248},{"_id":"themes/anatole/layout/partial/head.jade","hash":"1c35bbde7a04a6c64540eb7f465842030ec3ca3a","modified":1585757942765},{"_id":"themes/anatole/layout/partial/nav.jade","hash":"75c1a8dc0d47ca66e9ad6291fbf563fdfe3bd8bc","modified":1583397874351},{"_id":"themes/anatole/layout/partial/sidebar.jade","hash":"5d48d545695917600067bc352798488ede4ae493","modified":1585757593151},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"aad20484db2d30298553e5e54212ddf3fbc0164b","modified":1573107407410},{"_id":"themes/anatole/source/css/custom.css","hash":"dd127bc7e05e009b71aab5d71469cdf43ef78ee2","modified":1573107407410},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1573107407411},{"_id":"themes/anatole/source/css/style.css","hash":"0b3ad6983fdb47ba5754fb64b8e84daef8640954","modified":1586241805227},{"_id":"themes/anatole/source/css/style.scss","hash":"400c3adb4d0b07065a3f8af83cf7284edbfa173d","modified":1573107407411},{"_id":"themes/anatole/source/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1583330973048},{"_id":"themes/anatole/source/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1583330973049},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1583330973049},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1583330973043},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1573107407419},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1573107407419},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1583330973047},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1583330973047},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1573107407421},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1573107407414},{"_id":"themes/anatole/source/images/mylogo.png","hash":"bb12c3110592128245b8202eae6ddcb2acba7e5f","modified":1583330973052},{"_id":"source/_posts/日式吃法.md","hash":"8081b4daa6b6d7783382c826956797c4fd19d78d","modified":1591705979130},{"_id":"source/_posts/新还是旧.md","hash":"66509d1d1a029095e529da32dd85b24e0e10fea7","modified":1592565773684},{"_id":"source/_posts/温度计.md","hash":"c6a0f0af09d1e59763eac1615a8b4bb48570245d","modified":1591624382024},{"_id":"source/_posts/摆摊.md","hash":"095246a44da2b01de3ad9c404a8b7d9280d0f206","modified":1592566085884},{"_id":"source/_posts/午夜急诊.md","hash":"e04bbfc4909c6e2b357042cb430dcbb89863d8d4","modified":1594037061368},{"_id":"source/_posts/天文课.md","hash":"fd877df9594ba9832b7a0411791383d27abda97b","modified":1594215105934},{"_id":"source/_posts/彼得原理.md","hash":"4b70d4f364b0ca80c1a84425e7d137ac685f5442","modified":1599324977198},{"_id":"source/_posts/中年人戒油腻指南.md","hash":"9b1cf40b39fe3646951838ce717b0893bd98d211","modified":1599325090616},{"_id":"source/_posts/task-and-microtask.md","hash":"2151d52eef53e36ec7e8a3fb06cd196b9939f70a","modified":1603813866933},{"_id":"source/_posts/三十而立.md","hash":"31dd6aa4c104825acdad435c0bd7590b9c1177f5","modified":1616575313677},{"_id":"source/_posts/重读两小儿辩日.md","hash":"1796df2ee41d8dc81fa57ccc70e20e2865d8a360","modified":1601110717866},{"_id":"source/_posts/游恭王府.md","hash":"0abf647b63638faa95d59b5730866725fb49fcba","modified":1603866978321},{"_id":"source/_img/gongwangfu.jpg","hash":"d308df2a2563182506c203db7c9178925c037638","modified":1602429798121},{"_id":"source/img/gongwangfu.jpg","hash":"d308df2a2563182506c203db7c9178925c037638","modified":1602429798121},{"_id":"source/img/yangjiaodenghutong1.jpg","hash":"a69dfb88bd711a0f69b981f1d221112cc06aa71b","modified":1602430306954},{"_id":"source/img/fangtangshuixie.jpg","hash":"3a78a4e3950badde811fb2565488ba8fadb294d7","modified":1602430187425},{"_id":"source/img/tianxiangtingyuan.jpg","hash":"b01642405b2dd09ff35a503fbbd76f6fc8ed7a4b","modified":1602430146747},{"_id":"source/img/pingbuqingyunlu.jpg","hash":"282effccdec58258878a879e10f3c2a5bf3426ad","modified":1602430161652},{"_id":"source/img/yangjiaodenghutong2.jpg","hash":"4a22727e6a70ddeb7297421a5b7ee40e3aec1a75","modified":1602430317363},{"_id":"source/.DS_Store","hash":"b2e2486e46b81e854da85b40b18748c49cb566d3","modified":1605150528663},{"_id":"source/_posts/node vs browser event loop.md","hash":"9031a0d3d7085c21e603aa9740e13478f9f30056","modified":1617775609238},{"_id":"source/_posts/聊聊事件循环.md","hash":"47d4083764157a393b969940ac819772081484bf","modified":1617776028578},{"_id":"source/_posts/聊聊柯里化.md","hash":"ec95dcbe346e66c58d94998a236bbf5fc255c4b5","modified":1616581287490},{"_id":"source/_posts/我读《复盘网飞》.md","hash":"8444f3e8829c745239495d5ef568a8b5e7c0d130","modified":1623900930407},{"_id":"source/_posts/手机坏掉之后.md","hash":"bda98cdd6a58366082274eb0fd2fe5cb0fc0e02a","modified":1620965564896},{"_id":"source/_posts/我读《负动产时代》.md","hash":"5f6063a70b628fae5f408db3372e354d4932006a","modified":1623901003648},{"_id":"source/_posts/我读《一生的旅程》.md","hash":"764341efc970253107d6a865026f4ff9a0cace18","modified":1631619619907},{"_id":"source/_posts/我读《上学记》.md","hash":"50783a9dfc9632ad966904ec332c7de38c180b86","modified":1631620025173}],"Category":[{"name":"life","_id":"cka6xu71l000d8cmhgxsizk8u"},{"name":"tech","_id":"cka6xu71t000j8cmhil1ge6ke"},{"name":"web","_id":"cka6xu720000r8cmhrml3wvur"},{"name":"algorithm","_id":"cka6xu72p001v8cmhlhp2zhd7"},{"name":"生活随笔","_id":"ckg5appth0000ckmhcdf86z93"},{"name":"reading","parent":"cka6xu71l000d8cmhgxsizk8u","_id":"ckq0coeo90003b4fy0nr0gc85"}],"Data":[],"Page":[{"title":"about","date":"2017-04-08T10:23:22.000Z","_content":"This is about page.\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-08 03:23:22\n---\nThis is about page.\n","updated":"2019-11-07T06:16:47.400Z","path":"about/index.html","_id":"cka6xu71k000c8cmhnju8ai8r","comments":1,"layout":"page","content":"<p>This is about page.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is about page.</p>\n"},{"title":"categories","date":"2017-04-10T07:03:14.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-04-10 00:03:14\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-11-07T06:16:47.400Z","path":"categories/index.html","_id":"cka6xu71r000g8cmhj7sddfnp","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-04-10T07:03:21.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-10 00:03:21\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-11-07T06:16:47.400Z","path":"tags/index.html","_id":"cka6xu71s000i8cmhqphv53k9","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2017年中总结","abbrlink":"543d8669","date":"2017-06-07T06:20:20.000Z","_content":"\n最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。\n\n时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。\n\n回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。\n\n对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。\n\n说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。\n\n第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。\n\n总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。\n\n2017/06/06\n","source":"_posts/2017-mid-year-summary.md","raw":"---\ntitle: 2017年中总结\ncategories:\n  - life\nabbrlink: 543d8669\ndate: 2017-06-06 23:20:20\ntags:\n---\n\n最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。\n\n时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。\n\n回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。\n\n对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。\n\n说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。\n\n第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。\n\n总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。\n\n2017/06/06\n","slug":"2017-mid-year-summary","published":1,"updated":"2019-11-26T03:25:53.105Z","_id":"cka6xu6wg00008cmhsarcszuz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。</p>\n<p>时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。</p>\n<p>回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。</p>\n<p>对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。</p>\n<p>说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。</p>\n<p>第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。</p>\n<p>总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。</p>\n<p>2017/06/06</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。</p>\n<p>时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。</p>\n<p>回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。</p>\n<p>对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。</p>\n<p>说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。</p>\n<p>第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。</p>\n<p>总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。</p>\n<p>2017/06/06</p>\n"},{"title":"Build a Personal Blog With Hexo","abbrlink":"a183496f","date":"2017-04-10T05:50:50.000Z","_content":"\nAfter spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I'm going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.\n\nBefore we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.\n\nThis article has five sections as follows:\n\n- Install Hexo\n- Deploy on Github\n- Add new layouts\n- Decorate with new Theme\n- Add Busuanzi & Disqus & Google Analytics\n\n#### Install Hexo\n\n```bash\nnpm install hexo-cli -g\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\nAfter the npm installation, you can now run the server:\n\n```bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\nAt this time, go to `localhost:4000`, and you should see your blog now has a \"Hello World\" article with default theme.\n\n#### Deploy on Github\n\nYou can follow [Github Pages](https://pages.github.com/) to create a repo in your github. After that, you can `git clone` with your https or ssh url to your local.\nThen back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\nThen update the `_config.yaml` file by adding these code in the bottom:\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: <your blog repo ssh or https url>\n  branch: master\n```\n\nAt this time, we can deploy the source code to the github repo:\n\n```bash\nhexo deploy\n```\n\n**TIP**: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:\n\n```bash\nhexo clean\n```\n\nThis command will clean the cache file (`db.json`) and generate files (`public`).\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\nNow, you can take a look at your blog in your browser.\n\n#### Add new layouts\n\n```bash\nhexo new post <title>\n```\n\nif met this fatal error:\n\n```bash\nError: fatal: in unpopulated submodule '.deploy_git'\n```\n\ntry install `hexo-deployer-git` again.\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n#### Publish\n\n```bash\nrm -rf .deploy_git\nhexo g\nhexo d\nhexo clean\n```\n\n#### CNAME\n\nstore the `CNAME` file in source so it won't be deleted automatically.\n","source":"_posts/Build-a-Personal-Blog-With-Hexo.md","raw":"---\ntitle: Build a Personal Blog With Hexo\ncategories:\n  - tech\ntags:\n  - hexo\n  - blog\n  - github\nabbrlink: a183496f\ndate: 2017-04-09 22:50:50\n---\n\nAfter spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I'm going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.\n\nBefore we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.\n\nThis article has five sections as follows:\n\n- Install Hexo\n- Deploy on Github\n- Add new layouts\n- Decorate with new Theme\n- Add Busuanzi & Disqus & Google Analytics\n\n#### Install Hexo\n\n```bash\nnpm install hexo-cli -g\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\nAfter the npm installation, you can now run the server:\n\n```bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\nAt this time, go to `localhost:4000`, and you should see your blog now has a \"Hello World\" article with default theme.\n\n#### Deploy on Github\n\nYou can follow [Github Pages](https://pages.github.com/) to create a repo in your github. After that, you can `git clone` with your https or ssh url to your local.\nThen back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\nThen update the `_config.yaml` file by adding these code in the bottom:\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: <your blog repo ssh or https url>\n  branch: master\n```\n\nAt this time, we can deploy the source code to the github repo:\n\n```bash\nhexo deploy\n```\n\n**TIP**: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:\n\n```bash\nhexo clean\n```\n\nThis command will clean the cache file (`db.json`) and generate files (`public`).\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\nNow, you can take a look at your blog in your browser.\n\n#### Add new layouts\n\n```bash\nhexo new post <title>\n```\n\nif met this fatal error:\n\n```bash\nError: fatal: in unpopulated submodule '.deploy_git'\n```\n\ntry install `hexo-deployer-git` again.\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n#### Publish\n\n```bash\nrm -rf .deploy_git\nhexo g\nhexo d\nhexo clean\n```\n\n#### CNAME\n\nstore the `CNAME` file in source so it won't be deleted automatically.\n","slug":"Build-a-Personal-Blog-With-Hexo","published":1,"updated":"2019-11-15T09:39:12.470Z","_id":"cka6xu6wl00018cmhsar3t6i2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>After spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I’m going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.</p>\n<p>Before we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.</p>\n<p>This article has five sections as follows:</p>\n<ul>\n<li>Install Hexo</li>\n<li>Deploy on Github</li>\n<li>Add new layouts</li>\n<li>Decorate with new Theme</li>\n<li>Add Busuanzi &amp; Disqus &amp; Google Analytics</li>\n</ul>\n<h4 id=\"Install-Hexo\"><a href=\"#Install-Hexo\" class=\"headerlink\" title=\"Install Hexo\"></a>Install Hexo</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>After the npm installation, you can now run the server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<p>At this time, go to <code>localhost:4000</code>, and you should see your blog now has a “Hello World” article with default theme.</p>\n<h4 id=\"Deploy-on-Github\"><a href=\"#Deploy-on-Github\" class=\"headerlink\" title=\"Deploy on Github\"></a>Deploy on Github</h4><p>You can follow <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a> to create a repo in your github. After that, you can <code>git clone</code> with your https or ssh url to your local.<br>Then back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>Then update the <code>_config.yaml</code> file by adding these code in the bottom:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;your blog repo ssh or https url&gt;</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>At this time, we can deploy the source code to the github repo:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p><strong>TIP</strong>: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<p>This command will clean the cache file (<code>db.json</code>) and generate files (<code>public</code>).</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p>Now, you can take a look at your blog in your browser.</p>\n<h4 id=\"Add-new-layouts\"><a href=\"#Add-new-layouts\" class=\"headerlink\" title=\"Add new layouts\"></a>Add new layouts</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>if met this fatal error:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">'.deploy_git'</span></span><br></pre></td></tr></table></figure>\n<p>try install <code>hexo-deployer-git</code> again.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<h4 id=\"Publish\"><a href=\"#Publish\" class=\"headerlink\" title=\"Publish\"></a>Publish</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<h4 id=\"CNAME\"><a href=\"#CNAME\" class=\"headerlink\" title=\"CNAME\"></a>CNAME</h4><p>store the <code>CNAME</code> file in source so it won’t be deleted automatically.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>After spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I’m going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.</p>\n<p>Before we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.</p>\n<p>This article has five sections as follows:</p>\n<ul>\n<li>Install Hexo</li>\n<li>Deploy on Github</li>\n<li>Add new layouts</li>\n<li>Decorate with new Theme</li>\n<li>Add Busuanzi &amp; Disqus &amp; Google Analytics</li>\n</ul>\n<h4 id=\"Install-Hexo\"><a href=\"#Install-Hexo\" class=\"headerlink\" title=\"Install Hexo\"></a>Install Hexo</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>After the npm installation, you can now run the server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<p>At this time, go to <code>localhost:4000</code>, and you should see your blog now has a “Hello World” article with default theme.</p>\n<h4 id=\"Deploy-on-Github\"><a href=\"#Deploy-on-Github\" class=\"headerlink\" title=\"Deploy on Github\"></a>Deploy on Github</h4><p>You can follow <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a> to create a repo in your github. After that, you can <code>git clone</code> with your https or ssh url to your local.<br>Then back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>Then update the <code>_config.yaml</code> file by adding these code in the bottom:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;your blog repo ssh or https url&gt;</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>At this time, we can deploy the source code to the github repo:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p><strong>TIP</strong>: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<p>This command will clean the cache file (<code>db.json</code>) and generate files (<code>public</code>).</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p>Now, you can take a look at your blog in your browser.</p>\n<h4 id=\"Add-new-layouts\"><a href=\"#Add-new-layouts\" class=\"headerlink\" title=\"Add new layouts\"></a>Add new layouts</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>if met this fatal error:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">'.deploy_git'</span></span><br></pre></td></tr></table></figure>\n<p>try install <code>hexo-deployer-git</code> again.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<h4 id=\"Publish\"><a href=\"#Publish\" class=\"headerlink\" title=\"Publish\"></a>Publish</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<h4 id=\"CNAME\"><a href=\"#CNAME\" class=\"headerlink\" title=\"CNAME\"></a>CNAME</h4><p>store the <code>CNAME</code> file in source so it won’t be deleted automatically.</p>\n"},{"title":"2020 Resolution","abbrlink":"38799c5f","date":"2020-01-15T01:03:28.000Z","_content":"\n说来十分惭愧，为自己的行动力感到汗颜。本打算年初的时候做一个总结，然后制定新年的计划，结果一下子就晃荡到了三月。\n\n我一直是这么看待拖延症，究其原因，还是能力不足导致不愿迈出第一歩，所以迟迟不愿开始。好多事情拖着拖着就没有想去做的念头了。今年首先要改的就是拖延，凡事想到就立刻去做。如果手头正有事，就插入队列中，上一件事完成之后立刻消费掉。比如该回的消息立刻就回复，突然出现的想法随手记录下来，看完了书和电影有感而发就写一段短评。虽然可以预想在开始阶段肯定不会得心应手，先试一段时间再看看。\n\n说回计划，往年可能会说，要读多少书，看多少电影。但是近来隐约有些担心自己的逻辑表达，逐渐陷入碎片化的泥沼。所以今年给自己定了一个小目标，希望多思考，然后落到纸上。最近看了阿乙的《寡人》，书怎么样另说，但是形式给我提供了一个思路。时不时的写上一段，记录下自己的想法，日后再看，或许可以提供一些不同的见解和反思。不敢把目标定得太高，希望年末的时候可以有两万字，来记下我这一年的思考和心得。\n\n除了开始练习写作，阅读也不能落下。在美国的时候，我只看有用的书，技术相关的，不看无用的书。后来想想，这样容易钻牛角尖，整个人就仿佛一台机器，一刻不停歇。无法从工作和一成不变的生活中抽离出来，无法反思，无法思考。现在知道了，不仅要看技术的书，也需要看小说，看传记，看科普类读物，无他，提供另一种生活，另一种思想。这样人才不会故步自封，止步于前。\n\n在技术方面，说起来既羞愧又自责，最近每天早上起来坐在电脑前，第一件事是刷刷微博、知乎，而去年年初时，每天早上到公司第一件事是看 medium 上推送的技术文章。现在想想，过去一年几乎完全没有进步。也很清楚原因——工作上的消极深刻影响到了自己学习的积极性。今年需要纠正过来，找几个方向好好钻研一下，保持每天阅读技术文章的习惯。刷题也得继续，前段时间一直码业务，最近公司不太乐观，还是得多准备准备，保持对算法的熟练程度。\n\n生活方面，希望能早睡早起，现在每天记录自己的起床时间，争取每天早起十分钟，直到稳定到八点钟。年纪大了，感觉新陈代谢也没有年轻时旺盛，呆久了就感觉很是萎靡，虽然说也有最近疫情的影响，每天宅在家中。日常锻炼不可少，每天波比跳不能停。\n\n最后，希望可以找个女朋友，这也算是今年最大的愿望了吧，如果顺利，再养只猫猫狗狗，就再好不过了。\n","source":"_posts/2020-resolution.md","raw":"---\ntitle: 2020 Resolution\ncategories:\n  - life\ntags:\n  - resolution\nabbrlink: 38799c5f\ndate: 2020-01-14 17:03:28\n---\n\n说来十分惭愧，为自己的行动力感到汗颜。本打算年初的时候做一个总结，然后制定新年的计划，结果一下子就晃荡到了三月。\n\n我一直是这么看待拖延症，究其原因，还是能力不足导致不愿迈出第一歩，所以迟迟不愿开始。好多事情拖着拖着就没有想去做的念头了。今年首先要改的就是拖延，凡事想到就立刻去做。如果手头正有事，就插入队列中，上一件事完成之后立刻消费掉。比如该回的消息立刻就回复，突然出现的想法随手记录下来，看完了书和电影有感而发就写一段短评。虽然可以预想在开始阶段肯定不会得心应手，先试一段时间再看看。\n\n说回计划，往年可能会说，要读多少书，看多少电影。但是近来隐约有些担心自己的逻辑表达，逐渐陷入碎片化的泥沼。所以今年给自己定了一个小目标，希望多思考，然后落到纸上。最近看了阿乙的《寡人》，书怎么样另说，但是形式给我提供了一个思路。时不时的写上一段，记录下自己的想法，日后再看，或许可以提供一些不同的见解和反思。不敢把目标定得太高，希望年末的时候可以有两万字，来记下我这一年的思考和心得。\n\n除了开始练习写作，阅读也不能落下。在美国的时候，我只看有用的书，技术相关的，不看无用的书。后来想想，这样容易钻牛角尖，整个人就仿佛一台机器，一刻不停歇。无法从工作和一成不变的生活中抽离出来，无法反思，无法思考。现在知道了，不仅要看技术的书，也需要看小说，看传记，看科普类读物，无他，提供另一种生活，另一种思想。这样人才不会故步自封，止步于前。\n\n在技术方面，说起来既羞愧又自责，最近每天早上起来坐在电脑前，第一件事是刷刷微博、知乎，而去年年初时，每天早上到公司第一件事是看 medium 上推送的技术文章。现在想想，过去一年几乎完全没有进步。也很清楚原因——工作上的消极深刻影响到了自己学习的积极性。今年需要纠正过来，找几个方向好好钻研一下，保持每天阅读技术文章的习惯。刷题也得继续，前段时间一直码业务，最近公司不太乐观，还是得多准备准备，保持对算法的熟练程度。\n\n生活方面，希望能早睡早起，现在每天记录自己的起床时间，争取每天早起十分钟，直到稳定到八点钟。年纪大了，感觉新陈代谢也没有年轻时旺盛，呆久了就感觉很是萎靡，虽然说也有最近疫情的影响，每天宅在家中。日常锻炼不可少，每天波比跳不能停。\n\n最后，希望可以找个女朋友，这也算是今年最大的愿望了吧，如果顺利，再养只猫猫狗狗，就再好不过了。\n","slug":"2020-resolution","published":1,"updated":"2020-03-05T08:44:34.350Z","_id":"cka6xu6wm00028cmhavmctd7d","comments":1,"layout":"post","photos":[],"link":"","content":"<p>说来十分惭愧，为自己的行动力感到汗颜。本打算年初的时候做一个总结，然后制定新年的计划，结果一下子就晃荡到了三月。</p>\n<p>我一直是这么看待拖延症，究其原因，还是能力不足导致不愿迈出第一歩，所以迟迟不愿开始。好多事情拖着拖着就没有想去做的念头了。今年首先要改的就是拖延，凡事想到就立刻去做。如果手头正有事，就插入队列中，上一件事完成之后立刻消费掉。比如该回的消息立刻就回复，突然出现的想法随手记录下来，看完了书和电影有感而发就写一段短评。虽然可以预想在开始阶段肯定不会得心应手，先试一段时间再看看。</p>\n<p>说回计划，往年可能会说，要读多少书，看多少电影。但是近来隐约有些担心自己的逻辑表达，逐渐陷入碎片化的泥沼。所以今年给自己定了一个小目标，希望多思考，然后落到纸上。最近看了阿乙的《寡人》，书怎么样另说，但是形式给我提供了一个思路。时不时的写上一段，记录下自己的想法，日后再看，或许可以提供一些不同的见解和反思。不敢把目标定得太高，希望年末的时候可以有两万字，来记下我这一年的思考和心得。</p>\n<p>除了开始练习写作，阅读也不能落下。在美国的时候，我只看有用的书，技术相关的，不看无用的书。后来想想，这样容易钻牛角尖，整个人就仿佛一台机器，一刻不停歇。无法从工作和一成不变的生活中抽离出来，无法反思，无法思考。现在知道了，不仅要看技术的书，也需要看小说，看传记，看科普类读物，无他，提供另一种生活，另一种思想。这样人才不会故步自封，止步于前。</p>\n<p>在技术方面，说起来既羞愧又自责，最近每天早上起来坐在电脑前，第一件事是刷刷微博、知乎，而去年年初时，每天早上到公司第一件事是看 medium 上推送的技术文章。现在想想，过去一年几乎完全没有进步。也很清楚原因——工作上的消极深刻影响到了自己学习的积极性。今年需要纠正过来，找几个方向好好钻研一下，保持每天阅读技术文章的习惯。刷题也得继续，前段时间一直码业务，最近公司不太乐观，还是得多准备准备，保持对算法的熟练程度。</p>\n<p>生活方面，希望能早睡早起，现在每天记录自己的起床时间，争取每天早起十分钟，直到稳定到八点钟。年纪大了，感觉新陈代谢也没有年轻时旺盛，呆久了就感觉很是萎靡，虽然说也有最近疫情的影响，每天宅在家中。日常锻炼不可少，每天波比跳不能停。</p>\n<p>最后，希望可以找个女朋友，这也算是今年最大的愿望了吧，如果顺利，再养只猫猫狗狗，就再好不过了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>说来十分惭愧，为自己的行动力感到汗颜。本打算年初的时候做一个总结，然后制定新年的计划，结果一下子就晃荡到了三月。</p>\n<p>我一直是这么看待拖延症，究其原因，还是能力不足导致不愿迈出第一歩，所以迟迟不愿开始。好多事情拖着拖着就没有想去做的念头了。今年首先要改的就是拖延，凡事想到就立刻去做。如果手头正有事，就插入队列中，上一件事完成之后立刻消费掉。比如该回的消息立刻就回复，突然出现的想法随手记录下来，看完了书和电影有感而发就写一段短评。虽然可以预想在开始阶段肯定不会得心应手，先试一段时间再看看。</p>\n<p>说回计划，往年可能会说，要读多少书，看多少电影。但是近来隐约有些担心自己的逻辑表达，逐渐陷入碎片化的泥沼。所以今年给自己定了一个小目标，希望多思考，然后落到纸上。最近看了阿乙的《寡人》，书怎么样另说，但是形式给我提供了一个思路。时不时的写上一段，记录下自己的想法，日后再看，或许可以提供一些不同的见解和反思。不敢把目标定得太高，希望年末的时候可以有两万字，来记下我这一年的思考和心得。</p>\n<p>除了开始练习写作，阅读也不能落下。在美国的时候，我只看有用的书，技术相关的，不看无用的书。后来想想，这样容易钻牛角尖，整个人就仿佛一台机器，一刻不停歇。无法从工作和一成不变的生活中抽离出来，无法反思，无法思考。现在知道了，不仅要看技术的书，也需要看小说，看传记，看科普类读物，无他，提供另一种生活，另一种思想。这样人才不会故步自封，止步于前。</p>\n<p>在技术方面，说起来既羞愧又自责，最近每天早上起来坐在电脑前，第一件事是刷刷微博、知乎，而去年年初时，每天早上到公司第一件事是看 medium 上推送的技术文章。现在想想，过去一年几乎完全没有进步。也很清楚原因——工作上的消极深刻影响到了自己学习的积极性。今年需要纠正过来，找几个方向好好钻研一下，保持每天阅读技术文章的习惯。刷题也得继续，前段时间一直码业务，最近公司不太乐观，还是得多准备准备，保持对算法的熟练程度。</p>\n<p>生活方面，希望能早睡早起，现在每天记录自己的起床时间，争取每天早起十分钟，直到稳定到八点钟。年纪大了，感觉新陈代谢也没有年轻时旺盛，呆久了就感觉很是萎靡，虽然说也有最近疫情的影响，每天宅在家中。日常锻炼不可少，每天波比跳不能停。</p>\n<p>最后，希望可以找个女朋友，这也算是今年最大的愿望了吧，如果顺利，再养只猫猫狗狗，就再好不过了。</p>\n"},{"title":"ES6 Block Binding","abbrlink":"8d1d7da4","date":"2018-05-03T07:07:52.000Z","_content":"\n#### Var declaration and hoisting\n\nHoisting: Variable declarations using `var` are treated as if they are at the top of the **function** (or **global** scope, if declared outside of a function) regardless of where the actual declaration occurs.\n\n#### Block-level Declarartion\n\nBlock-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:\n\n1.  Inside of a function\n2.  Inside of a block (indicated by the `{` and `}` characters)\n\n##### Let\n\n`let` declarations are not hoisted to the top of the enclosing block.\n\n##### No Redeclaration\n\n```js\nvar count = 30;\n// Syntax error\nlet count = 40;\n```\n\nBut in a block, let ccan be use to declare an variable with same name.\n\n```js\nvar count = 30;\n// Does not throw an error\nif (condition) {\n  let count = 40;\n  // more code\n}\n```\n\n##### Const\n\n`const`, like `let` declarations, are block-level declarations.\n\n```js\nif (condition) {\n  const maxItems = 5;\n  // more code\n}\n// maxItems isn't accessible here\n```\n\n`const` cannot re-declaration as well.\n\n`const` cannot re-assign.\n\n```js\nconst maxItems = 5;\nmaxItems = 6; // throws error\n```\n\n##### Declaring Objects with const\n\nA `const` declaration prevents modification of the binding and not of the value itself.\n\n```js\nconst person = {\n  name: 'Nicholas',\n};\n\n// works\nperson.name = 'Greg';\n\n// throws an error\nperson = {\n  name: 'Greg',\n};\n```\n\n`const` prevents modification of the binding, not modification of the bound value.\n\n#### The Temporal Dead Zone(TDZ)\n\nA variable declared with either `let` or `const` cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the `typeof` operation.\n\n```js\nif (condition) {\n  console.log(typeof value); // ReferenceError!\n  let value = 'blue';\n}\n\nconsole.log(typeof value); // \"undefined\"\n\nif (condition) {\n  let value = 'blue';\n}\n```\n","source":"_posts/ES6-Block-Binding.md","raw":"---\ntitle: ES6 Block Binding\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - var\n  - let\n  - const\n  - block binding\n  - hoisting\nabbrlink: 8d1d7da4\ndate: 2018-05-03 00:07:52\n---\n\n#### Var declaration and hoisting\n\nHoisting: Variable declarations using `var` are treated as if they are at the top of the **function** (or **global** scope, if declared outside of a function) regardless of where the actual declaration occurs.\n\n#### Block-level Declarartion\n\nBlock-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:\n\n1.  Inside of a function\n2.  Inside of a block (indicated by the `{` and `}` characters)\n\n##### Let\n\n`let` declarations are not hoisted to the top of the enclosing block.\n\n##### No Redeclaration\n\n```js\nvar count = 30;\n// Syntax error\nlet count = 40;\n```\n\nBut in a block, let ccan be use to declare an variable with same name.\n\n```js\nvar count = 30;\n// Does not throw an error\nif (condition) {\n  let count = 40;\n  // more code\n}\n```\n\n##### Const\n\n`const`, like `let` declarations, are block-level declarations.\n\n```js\nif (condition) {\n  const maxItems = 5;\n  // more code\n}\n// maxItems isn't accessible here\n```\n\n`const` cannot re-declaration as well.\n\n`const` cannot re-assign.\n\n```js\nconst maxItems = 5;\nmaxItems = 6; // throws error\n```\n\n##### Declaring Objects with const\n\nA `const` declaration prevents modification of the binding and not of the value itself.\n\n```js\nconst person = {\n  name: 'Nicholas',\n};\n\n// works\nperson.name = 'Greg';\n\n// throws an error\nperson = {\n  name: 'Greg',\n};\n```\n\n`const` prevents modification of the binding, not modification of the bound value.\n\n#### The Temporal Dead Zone(TDZ)\n\nA variable declared with either `let` or `const` cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the `typeof` operation.\n\n```js\nif (condition) {\n  console.log(typeof value); // ReferenceError!\n  let value = 'blue';\n}\n\nconsole.log(typeof value); // \"undefined\"\n\nif (condition) {\n  let value = 'blue';\n}\n```\n","slug":"ES6-Block-Binding","published":1,"updated":"2019-11-15T09:39:12.463Z","_id":"cka6xu6wn00038cmh7ujpku0k","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Var-declaration-and-hoisting\"><a href=\"#Var-declaration-and-hoisting\" class=\"headerlink\" title=\"Var declaration and hoisting\"></a>Var declaration and hoisting</h4><p>Hoisting: Variable declarations using <code>var</code> are treated as if they are at the top of the <strong>function</strong> (or <strong>global</strong> scope, if declared outside of a function) regardless of where the actual declaration occurs.</p>\n<h4 id=\"Block-level-Declarartion\"><a href=\"#Block-level-Declarartion\" class=\"headerlink\" title=\"Block-level Declarartion\"></a>Block-level Declarartion</h4><p>Block-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:</p>\n<ol>\n<li>Inside of a function</li>\n<li>Inside of a block (indicated by the <code>{</code> and <code>}</code> characters)</li>\n</ol>\n<h5 id=\"Let\"><a href=\"#Let\" class=\"headerlink\" title=\"Let\"></a>Let</h5><p><code>let</code> declarations are not hoisted to the top of the enclosing block.</p>\n<h5 id=\"No-Redeclaration\"><a href=\"#No-Redeclaration\" class=\"headerlink\" title=\"No Redeclaration\"></a>No Redeclaration</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Syntax error</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br></pre></td></tr></table></figure>\n<p>But in a block, let ccan be use to declare an variable with same name.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Does not throw an error</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const\"></a>Const</h5><p><code>const</code>, like <code>let</code> declarations, are block-level declarations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// maxItems isn't accessible here</span></span><br></pre></td></tr></table></figure>\n<p><code>const</code> cannot re-declaration as well.</p>\n<p><code>const</code> cannot re-assign.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">maxItems = <span class=\"number\">6</span>; <span class=\"comment\">// throws error</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Declaring-Objects-with-const\"><a href=\"#Declaring-Objects-with-const\" class=\"headerlink\" title=\"Declaring Objects with const\"></a>Declaring Objects with const</h5><p>A <code>const</code> declaration prevents modification of the binding and not of the value itself.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Nicholas'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// works</span></span><br><span class=\"line\">person.name = <span class=\"string\">'Greg'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// throws an error</span></span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Greg'</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>const</code> prevents modification of the binding, not modification of the bound value.</p>\n<h4 id=\"The-Temporal-Dead-Zone-TDZ\"><a href=\"#The-Temporal-Dead-Zone-TDZ\" class=\"headerlink\" title=\"The Temporal Dead Zone(TDZ)\"></a>The Temporal Dead Zone(TDZ)</h4><p>A variable declared with either <code>let</code> or <code>const</code> cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the <code>typeof</code> operation.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// ReferenceError!</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// \"undefined\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Var-declaration-and-hoisting\"><a href=\"#Var-declaration-and-hoisting\" class=\"headerlink\" title=\"Var declaration and hoisting\"></a>Var declaration and hoisting</h4><p>Hoisting: Variable declarations using <code>var</code> are treated as if they are at the top of the <strong>function</strong> (or <strong>global</strong> scope, if declared outside of a function) regardless of where the actual declaration occurs.</p>\n<h4 id=\"Block-level-Declarartion\"><a href=\"#Block-level-Declarartion\" class=\"headerlink\" title=\"Block-level Declarartion\"></a>Block-level Declarartion</h4><p>Block-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:</p>\n<ol>\n<li>Inside of a function</li>\n<li>Inside of a block (indicated by the <code>{</code> and <code>}</code> characters)</li>\n</ol>\n<h5 id=\"Let\"><a href=\"#Let\" class=\"headerlink\" title=\"Let\"></a>Let</h5><p><code>let</code> declarations are not hoisted to the top of the enclosing block.</p>\n<h5 id=\"No-Redeclaration\"><a href=\"#No-Redeclaration\" class=\"headerlink\" title=\"No Redeclaration\"></a>No Redeclaration</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Syntax error</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br></pre></td></tr></table></figure>\n<p>But in a block, let ccan be use to declare an variable with same name.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Does not throw an error</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const\"></a>Const</h5><p><code>const</code>, like <code>let</code> declarations, are block-level declarations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// maxItems isn't accessible here</span></span><br></pre></td></tr></table></figure>\n<p><code>const</code> cannot re-declaration as well.</p>\n<p><code>const</code> cannot re-assign.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">maxItems = <span class=\"number\">6</span>; <span class=\"comment\">// throws error</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Declaring-Objects-with-const\"><a href=\"#Declaring-Objects-with-const\" class=\"headerlink\" title=\"Declaring Objects with const\"></a>Declaring Objects with const</h5><p>A <code>const</code> declaration prevents modification of the binding and not of the value itself.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Nicholas'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// works</span></span><br><span class=\"line\">person.name = <span class=\"string\">'Greg'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// throws an error</span></span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Greg'</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>const</code> prevents modification of the binding, not modification of the bound value.</p>\n<h4 id=\"The-Temporal-Dead-Zone-TDZ\"><a href=\"#The-Temporal-Dead-Zone-TDZ\" class=\"headerlink\" title=\"The Temporal Dead Zone(TDZ)\"></a>The Temporal Dead Zone(TDZ)</h4><p>A variable declared with either <code>let</code> or <code>const</code> cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the <code>typeof</code> operation.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// ReferenceError!</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// \"undefined\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Decorators in JavaScript","abbrlink":"89c05b44","date":"2018-10-21T00:14:24.000Z","_content":"\n#### Decorators in Python\n\nIn Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.\n\n```python\ndef identity(ob):\n    return ob\n\n@identity\ndef myfunc():\n    print \"my function\"\n\nmyfunc()\nprint myfunc\n```\n\n```shell\nmy function\n<function myfunc at 0xb76db17c>\n```\n\n#### ES2016 Decorators\n\nAn ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.\n\n##### Syntax\n\n```js\n// es5\nvar person = { name: 'John' };\n\nfunction addAge(age) {\n  return function(person) {\n    return {\n      age: age,\n      name: person.name,\n    };\n  };\n}\n\nvar newPerson = addAge(30)(person);\nconsole.log(newPerson);\n\n// es6 (babel)\n// this is the decorator factory\nfunction addAgeDecorator(age) {\n  // this is the decorator\n  return function(targetClass) {\n    // do something with 'target' and 'value'...\n    return class {\n      name = new targetClass().name;\n      age = age;\n    };\n  };\n}\n\n@addAgeDecorator(30)\nclass Person {\n  name = 'John';\n}\n\nconsole.log(new Person());\n```\n\n### Decorating a property\n\n```js\nclass Cat {\n  @readonly\n  meow() {\n    console.log(`Meow!`);\n  }\n\n  sing() {\n    console.log(`soft kitty~`);\n  }\n}\n\nfunction readonly(target, name, descriptor) {\n  descriptor.writable = false;\n  return descriptor;\n}\n\nvar Garfield = new Cat();\nGarfield.meow = function() {\n  console.log('I want lasagne!');\n};\nGarfield.sing = function() {\n  console.log(\"Let's rock\");\n};\n\nGarfield.meow();\nGarfield.sing();\n// http://jsfiddle.net/minhuizheng/0h45utcd/5/\n```\n\nexplanation:\n\ntarget — class that the property is a part of  \nname — the name of the property the decorator is modifying  \ndescriptor — property descriptor. Think: object passed to Object.defineProperty\n\n#### Reference and Reading\n\n1. [Exploring EcmaScript Decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841)\n\n2. [Javascript Decorators](https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3)\n\n3. [Decorators](https://www.typescriptlang.org/docs/handbook/decorators.html)\n\n4. [JavaScript Decorators: What They Are and When to Use Them](https://www.sitepoint.com/javascript-decorators-what-they-are/)\n\n5. [React DnD](http://react-dnd.github.io/react-dnd/)\n","source":"_posts/Decorator-in-JavaScript.md","raw":"---\ntitle: Decorators in JavaScript\ncategories:\n  - web\ntags:\n  - ECMAScript2016\n  - es7\n  - decorator\n  - javascript\nabbrlink: 89c05b44\ndate: 2018-10-20 17:14:24\n---\n\n#### Decorators in Python\n\nIn Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.\n\n```python\ndef identity(ob):\n    return ob\n\n@identity\ndef myfunc():\n    print \"my function\"\n\nmyfunc()\nprint myfunc\n```\n\n```shell\nmy function\n<function myfunc at 0xb76db17c>\n```\n\n#### ES2016 Decorators\n\nAn ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.\n\n##### Syntax\n\n```js\n// es5\nvar person = { name: 'John' };\n\nfunction addAge(age) {\n  return function(person) {\n    return {\n      age: age,\n      name: person.name,\n    };\n  };\n}\n\nvar newPerson = addAge(30)(person);\nconsole.log(newPerson);\n\n// es6 (babel)\n// this is the decorator factory\nfunction addAgeDecorator(age) {\n  // this is the decorator\n  return function(targetClass) {\n    // do something with 'target' and 'value'...\n    return class {\n      name = new targetClass().name;\n      age = age;\n    };\n  };\n}\n\n@addAgeDecorator(30)\nclass Person {\n  name = 'John';\n}\n\nconsole.log(new Person());\n```\n\n### Decorating a property\n\n```js\nclass Cat {\n  @readonly\n  meow() {\n    console.log(`Meow!`);\n  }\n\n  sing() {\n    console.log(`soft kitty~`);\n  }\n}\n\nfunction readonly(target, name, descriptor) {\n  descriptor.writable = false;\n  return descriptor;\n}\n\nvar Garfield = new Cat();\nGarfield.meow = function() {\n  console.log('I want lasagne!');\n};\nGarfield.sing = function() {\n  console.log(\"Let's rock\");\n};\n\nGarfield.meow();\nGarfield.sing();\n// http://jsfiddle.net/minhuizheng/0h45utcd/5/\n```\n\nexplanation:\n\ntarget — class that the property is a part of  \nname — the name of the property the decorator is modifying  \ndescriptor — property descriptor. Think: object passed to Object.defineProperty\n\n#### Reference and Reading\n\n1. [Exploring EcmaScript Decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841)\n\n2. [Javascript Decorators](https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3)\n\n3. [Decorators](https://www.typescriptlang.org/docs/handbook/decorators.html)\n\n4. [JavaScript Decorators: What They Are and When to Use Them](https://www.sitepoint.com/javascript-decorators-what-they-are/)\n\n5. [React DnD](http://react-dnd.github.io/react-dnd/)\n","slug":"Decorator-in-JavaScript","published":1,"updated":"2019-11-15T09:39:12.462Z","_id":"cka6xu6wo00048cmhtl5j1nlr","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Decorators-in-Python\"><a href=\"#Decorators-in-Python\" class=\"headerlink\" title=\"Decorators in Python\"></a>Decorators in Python</h4><p>In Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">identity</span><span class=\"params\">(ob)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ob</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@identity</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfunc</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"my function\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">myfunc()</span><br><span class=\"line\"><span class=\"keyword\">print</span> myfunc</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my function</span><br><span class=\"line\">&lt;function myfunc at 0xb76db17c&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ES2016-Decorators\"><a href=\"#ES2016-Decorators\" class=\"headerlink\" title=\"ES2016 Decorators\"></a>ES2016 Decorators</h4><p>An ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.</p>\n<h5 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAge</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">person</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      age: age,</span><br><span class=\"line\">      name: person.name,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newPerson = addAge(<span class=\"number\">30</span>)(person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newPerson);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6 (babel)</span></span><br><span class=\"line\"><span class=\"comment\">// this is the decorator factory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAgeDecorator</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this is the decorator</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">targetClass</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something with 'target' and 'value'...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">      name = <span class=\"keyword\">new</span> targetClass().name;</span><br><span class=\"line\">      age = age;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@addAgeDecorator(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  name = <span class=\"string\">'John'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Person());</span><br></pre></td></tr></table></figure>\n<h3 id=\"Decorating-a-property\"><a href=\"#Decorating-a-property\" class=\"headerlink\" title=\"Decorating a property\"></a>Decorating a property</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  meow() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Meow!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sing() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`soft kitty~`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readonly</span>(<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">  descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Garfield = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">Garfield.meow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I want lasagne!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Garfield.sing = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Let's rock\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Garfield.meow();</span><br><span class=\"line\">Garfield.sing();</span><br><span class=\"line\"><span class=\"comment\">// http://jsfiddle.net/minhuizheng/0h45utcd/5/</span></span><br></pre></td></tr></table></figure>\n<p>explanation:</p>\n<p>target — class that the property is a part of<br>name — the name of the property the decorator is modifying<br>descriptor — property descriptor. Think: object passed to Object.defineProperty</p>\n<h4 id=\"Reference-and-Reading\"><a href=\"#Reference-and-Reading\" class=\"headerlink\" title=\"Reference and Reading\"></a>Reference and Reading</h4><ol>\n<li><p><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841\" target=\"_blank\" rel=\"noopener\">Exploring EcmaScript Decorators</a></p>\n</li>\n<li><p><a href=\"https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3\" target=\"_blank\" rel=\"noopener\">Javascript Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener\">Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.sitepoint.com/javascript-decorators-what-they-are/\" target=\"_blank\" rel=\"noopener\">JavaScript Decorators: What They Are and When to Use Them</a></p>\n</li>\n<li><p><a href=\"http://react-dnd.github.io/react-dnd/\" target=\"_blank\" rel=\"noopener\">React DnD</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Decorators-in-Python\"><a href=\"#Decorators-in-Python\" class=\"headerlink\" title=\"Decorators in Python\"></a>Decorators in Python</h4><p>In Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">identity</span><span class=\"params\">(ob)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ob</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@identity</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfunc</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"my function\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">myfunc()</span><br><span class=\"line\"><span class=\"keyword\">print</span> myfunc</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my function</span><br><span class=\"line\">&lt;function myfunc at 0xb76db17c&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ES2016-Decorators\"><a href=\"#ES2016-Decorators\" class=\"headerlink\" title=\"ES2016 Decorators\"></a>ES2016 Decorators</h4><p>An ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.</p>\n<h5 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAge</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">person</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      age: age,</span><br><span class=\"line\">      name: person.name,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newPerson = addAge(<span class=\"number\">30</span>)(person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newPerson);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6 (babel)</span></span><br><span class=\"line\"><span class=\"comment\">// this is the decorator factory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAgeDecorator</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this is the decorator</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">targetClass</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something with 'target' and 'value'...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">      name = <span class=\"keyword\">new</span> targetClass().name;</span><br><span class=\"line\">      age = age;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@addAgeDecorator(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  name = <span class=\"string\">'John'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Person());</span><br></pre></td></tr></table></figure>\n<h3 id=\"Decorating-a-property\"><a href=\"#Decorating-a-property\" class=\"headerlink\" title=\"Decorating a property\"></a>Decorating a property</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  meow() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Meow!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sing() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`soft kitty~`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readonly</span>(<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">  descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Garfield = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">Garfield.meow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I want lasagne!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Garfield.sing = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Let's rock\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Garfield.meow();</span><br><span class=\"line\">Garfield.sing();</span><br><span class=\"line\"><span class=\"comment\">// http://jsfiddle.net/minhuizheng/0h45utcd/5/</span></span><br></pre></td></tr></table></figure>\n<p>explanation:</p>\n<p>target — class that the property is a part of<br>name — the name of the property the decorator is modifying<br>descriptor — property descriptor. Think: object passed to Object.defineProperty</p>\n<h4 id=\"Reference-and-Reading\"><a href=\"#Reference-and-Reading\" class=\"headerlink\" title=\"Reference and Reading\"></a>Reference and Reading</h4><ol>\n<li><p><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841\" target=\"_blank\" rel=\"noopener\">Exploring EcmaScript Decorators</a></p>\n</li>\n<li><p><a href=\"https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3\" target=\"_blank\" rel=\"noopener\">Javascript Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener\">Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.sitepoint.com/javascript-decorators-what-they-are/\" target=\"_blank\" rel=\"noopener\">JavaScript Decorators: What They Are and When to Use Them</a></p>\n</li>\n<li><p><a href=\"http://react-dnd.github.io/react-dnd/\" target=\"_blank\" rel=\"noopener\">React DnD</a></p>\n</li>\n</ol>\n"},{"title":"Regret Minimization and Multi-task Serially","abbrlink":"eaf5670e","date":"2018-02-24T01:29:46.000Z","_content":"\n前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。\n\n第一个就是之前听他说的 \"regret minimization\"。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 \"a better idea for someone who didn't have a good job\"。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 \"path not taken\" 而后悔。\n\n我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。\n\n第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，\"be doing whatever I'm doing\"。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，\"multi-task serially\"，按顺序的多任务。\n\n关于这点，我近年来也算是感触很深了。原来总觉得自己聪明（其实都是耍小聪明罢了），喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。\n\n现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。\n\n最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。\n\n目前就想到这么多吧，希望时刻能督促自己。\n","source":"_posts/Regret-Minimization-and-Multi-task-Serially.md","raw":"---\ntitle: Regret Minimization and Multi-task Serially\ncategories:\n  - life\nabbrlink: eaf5670e\ndate: 2018-02-23 17:29:46\ntags:\n---\n\n前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。\n\n第一个就是之前听他说的 \"regret minimization\"。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 \"a better idea for someone who didn't have a good job\"。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 \"path not taken\" 而后悔。\n\n我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。\n\n第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，\"be doing whatever I'm doing\"。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，\"multi-task serially\"，按顺序的多任务。\n\n关于这点，我近年来也算是感触很深了。原来总觉得自己聪明（其实都是耍小聪明罢了），喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。\n\n现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。\n\n最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。\n\n目前就想到这么多吧，希望时刻能督促自己。\n","slug":"Regret-Minimization-and-Multi-task-Serially","published":1,"updated":"2019-11-15T09:39:12.471Z","_id":"cka6xu6wo00058cmhz0xol66m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。</p>\n<p>第一个就是之前听他说的 “regret minimization”。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 “a better idea for someone who didn’t have a good job”。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 “path not taken” 而后悔。</p>\n<p>我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。</p>\n<p>第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，”be doing whatever I’m doing”。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，”multi-task serially”，按顺序的多任务。</p>\n<p>关于这点，我近年来也算是感触很深了。原来总觉得自己聪明（其实都是耍小聪明罢了），喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。</p>\n<p>现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。</p>\n<p>最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。</p>\n<p>目前就想到这么多吧，希望时刻能督促自己。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。</p>\n<p>第一个就是之前听他说的 “regret minimization”。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 “a better idea for someone who didn’t have a good job”。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 “path not taken” 而后悔。</p>\n<p>我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。</p>\n<p>第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，”be doing whatever I’m doing”。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，”multi-task serially”，按顺序的多任务。</p>\n<p>关于这点，我近年来也算是感触很深了。原来总觉得自己聪明（其实都是耍小聪明罢了），喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。</p>\n<p>现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。</p>\n<p>最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。</p>\n<p>目前就想到这么多吧，希望时刻能督促自己。</p>\n"},{"title":"Run React Native App on Mac","abbrlink":"b18b9540","date":"2018-02-05T09:05:04.000Z","_content":"\n1. make sure installed LATEST Xcode on your mac. Be make sure check your app store to upgrade your Xcode to latest version.\n2. install homebrew or nvm, so you can install node and manage your nodejs version.\n3. install nodejs and npm\n4. install watchman\n5. install react native cli such as `react-native-cli`\n6. create your react native project using `react-native init <project-name>`\n\nAfter installing these tools, use `react-native run-ios` to start your simulator.\n\nAnd in case if you met this error code when you run `react-native run-ios [--simulator=\"iPhone X\"]`\n\n```shell\nFound Xcode project TestProject.xcodeproj\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n\nCommand failed: xcrun instruments -s\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n```\n\nthis is because you did not set your xcode's command line tools, so your can go to `preference -> locations -> Command Line Tools` to select.\n\n![xcode command line tools](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/760e08710688460499ed894397ed156a~tplv-k3u1fbpfcp-watermark.image)\n","source":"_posts/Run-react-native-app-on-Mac.md","raw":"---\ntitle: Run React Native App on Mac\ncategories:\n  - web\ntags:\n  - react\n  - react native\n  - Xcode\nabbrlink: b18b9540\ndate: 2018-02-05 01:05:04\n---\n\n1. make sure installed LATEST Xcode on your mac. Be make sure check your app store to upgrade your Xcode to latest version.\n2. install homebrew or nvm, so you can install node and manage your nodejs version.\n3. install nodejs and npm\n4. install watchman\n5. install react native cli such as `react-native-cli`\n6. create your react native project using `react-native init <project-name>`\n\nAfter installing these tools, use `react-native run-ios` to start your simulator.\n\nAnd in case if you met this error code when you run `react-native run-ios [--simulator=\"iPhone X\"]`\n\n```shell\nFound Xcode project TestProject.xcodeproj\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n\nCommand failed: xcrun instruments -s\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n```\n\nthis is because you did not set your xcode's command line tools, so your can go to `preference -> locations -> Command Line Tools` to select.\n\n![xcode command line tools](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/760e08710688460499ed894397ed156a~tplv-k3u1fbpfcp-watermark.image)\n","slug":"Run-react-native-app-on-Mac","published":1,"updated":"2020-10-28T06:29:10.916Z","_id":"cka6xu6wp00068cmhbtds9u3a","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li>make sure installed LATEST Xcode on your mac. Be make sure check your app store to upgrade your Xcode to latest version.</li>\n<li>install homebrew or nvm, so you can install node and manage your nodejs version.</li>\n<li>install nodejs and npm</li>\n<li>install watchman</li>\n<li>install react native cli such as <code>react-native-cli</code></li>\n<li>create your react native project using <code>react-native init &lt;project-name&gt;</code></li>\n</ol>\n<p>After installing these tools, use <code>react-native run-ios</code> to start your simulator.</p>\n<p>And in case if you met this error code when you run <code>react-native run-ios [--simulator=&quot;iPhone X&quot;]</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found Xcode project TestProject.xcodeproj</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br><span class=\"line\"></span><br><span class=\"line\">Command failed: xcrun instruments -s</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br></pre></td></tr></table></figure>\n<p>this is because you did not set your xcode’s command line tools, so your can go to <code>preference -&gt; locations -&gt; Command Line Tools</code> to select.</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/760e08710688460499ed894397ed156a~tplv-k3u1fbpfcp-watermark.image\" alt=\"xcode command line tools\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>make sure installed LATEST Xcode on your mac. Be make sure check your app store to upgrade your Xcode to latest version.</li>\n<li>install homebrew or nvm, so you can install node and manage your nodejs version.</li>\n<li>install nodejs and npm</li>\n<li>install watchman</li>\n<li>install react native cli such as <code>react-native-cli</code></li>\n<li>create your react native project using <code>react-native init &lt;project-name&gt;</code></li>\n</ol>\n<p>After installing these tools, use <code>react-native run-ios</code> to start your simulator.</p>\n<p>And in case if you met this error code when you run <code>react-native run-ios [--simulator=&quot;iPhone X&quot;]</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found Xcode project TestProject.xcodeproj</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br><span class=\"line\"></span><br><span class=\"line\">Command failed: xcrun instruments -s</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br></pre></td></tr></table></figure>\n<p>this is because you did not set your xcode’s command line tools, so your can go to <code>preference -&gt; locations -&gt; Command Line Tools</code> to select.</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/760e08710688460499ed894397ed156a~tplv-k3u1fbpfcp-watermark.image\" alt=\"xcode command line tools\"></p>\n"},{"title":"ECMAScript2015 modules","abbrlink":"646f8dec","date":"2018-04-08T00:30:40.000Z","_content":"\nA module is Javascript code that automatically runs in **strict** mode with no way opt out.\n\nmodule and script are not the same.\n\n#### import and export\n\n##### 1. named export (several per module)\n\n```javascript\n//------ lib.js ------\nexport const sqrt = Math.sqrt;\nexport function square(x) {\n  return x * x;\n}\nexport function diag(x, y) {\n  return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\n\nimport { square, diag } from './lib.js';\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n\n// can not reassign imported bindings\nsuqare = 2; // throw an error\n\n// or\n\n//------ main.js ------\nimport * as lib from 'lib';\nconsole.log(lib.square(11)); // 121\nconsole.log(lib.diag(4, 3)); // 5\n```\n\n- syntax: import { identifiers } from './example.js' -> module specifier\n\n- the list of binding to imports is not a destructured object\n\n- the last one this is called _namespace_ import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.\n\n- Be sure to include /, ./ or ../ at the beginning of the string representing the file for the best compatibility across browsers and node.js.\n\n- lib.js is only execute once, no matter how many import statements have been declared. After the code to import the module executes, the instantiated module is kept in **memory** and reused whenever another import statement reference to it. e.g.\n\n```javascript\n// just execute lib.js once\nimport { diag } from './lib.js';\nimport { square } from './lib.js';\n```\n\n- import/export must be used outside condition statement or functions.\n\n```javascript\nif (flag) {\n    export flag; // syntax error\n}\n\nfunction tryImport() {\nimport { diag } from './lib.js'; // syntax error\n}\n```\n\n- ES6 import statement create _read-only_ bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.\n\n```javascript\nexport var name = 'Nico';\nexport function setName(x) {\n  name = x;\n}\n\nimport { name, setName } from './lib.js';\nconsole.log(name); // Nico\nsetName('Jack');\nconsole.log(name); // Jack\n\n// can not reassign imported bindings\nname = 'Nico'; // throw an error\n```\n\n- renaming export and import\n\n```javascript\nexport {sum as add};\nimport {add} form './example.js';\n\n// or\nimport { add as sum } from './example.js';\nconsole.log(typeof add); // udefined\n```\n\n##### 2. default export (one per module)\n\n```javascript\n//------ myFunc.js ------\nexport default function () { ··· } // no semicolon!\n\n//------ main1.js ------\nimport myFunc from 'myFunc';\nmyFunc();\n\n// or\nfunction sum () { ... }\nexport default sum;\n\n// or\nexport sum2() { ... }\nexport {sum as default}\n\n// Or a class:\n\n//------ MyClass.js ------\nexport default class { ··· } // no semicolon!\n\n//------ main2.js ------\nimport MyClass from 'MyClass';\nconst inst = new MyClass();\n```\n\n##### 3. combine\n\nyou can use named export and default together\n\nnote: the default must come before the non-defaults in import statement.\n\n```js\nexport var name = 'Nico';\nexport default function () { ··· }\n\nimport sum, { name } from './example.js';\n\n// or\nimport { default as sum, name } from './example.js';\n```\n\n##### 4. re-exporting\n\n```js\nimport {add} form './example.js';\nexport add;\n\n// or short\nexport { add } from './example.js';\n\n// export with different name\nexport { add as sum } from './example.js';\n\n// export everything\nexport * from './example.js';\n```\n\nnote: by exporting everything, you're including default as well as any named exports.\n\n##### 5. importing without bindings\n\nSome modules may not export anthing; instead they might only modify object in the gloabal scope. _Import without bindings are most likely to be used to create polyfills and shims_.\n\n```js\n// example.js\nArray.prototype.somethingFancy = function () { ...}\n\n// main.js\nimport './example.js'\nlet arr = [];\narr.somethingFancy();\n```\n\n#### loading modules\n\n##### 1. use <\bscript> as `defer`\n\n```html\n<!-- load a module JavaScript file -->\n<script type=\"module\" src=\"module.js\"></script>\n\n<!-- include a module inline -->\n<script type=\"module\">\n  import { sum } from './example.js';\n\n  let result = sum(1, 2);\n</script>\n```\n\n- 'module' is not a content type like 'text/javascript', and browsers ignore `<script>` elements when type is unrecognized, providing good backwards-compatibility.\n\n- in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.\n\n- module sequence; `<script type=\"module\">` always acts as if the `defer` attribute is applied.\n\n```html\n<!-- this will execute first -->\n<script type=\"module\" src=\"module1.js\"></script>\n\n<!-- this will execute second -->\n<script type=\"module\">\n  import { sum } from './example.js';\n\n  let result = sum(1, 2);\n</script>\n```\n\n- synchronies and sequential: **modules are parsed completely first to dientify all `import`, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.**\n\ni. download and parse `module1.js` , recursive download and parse import in `module1.js`;\n\nii. parse inline module\n\nonce loading complete\n\niiii. recursive execute `import` source in `module1.js`, then execute `module1.js`\n\niiiii. recursive execute `import` source in inline module, then execute inline module\n\n##### 2. use <\bscript> as `async`\n\n```html\n<!-- no guarantee which one of these will execute first -->\n<script type=\"module\" async src=\"module1.js\"></script>\n<script type=\"module\" async src=\"module2.js\"></script>\n```\n\nthe `async` causes the script file to be executed as soon as the file is completed downloaded and parsed. the order in document does not affect the order in which the scripts are executed. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.\n\n##### 3. use `Worker`\n\n```js\n// load script.js as a script\nlet worker = new Worker('script.js');\n\n// load module.js as a module\nlet worker = new Worker('module.js', { type: 'module' });\n```\n\n#### related reading material\n\n1. Nicholas C. Zakas, [Understanding ECMAScript 6](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n2. Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n\n3. nodejs document, [Modules](https://nodejs.org/api/modules.html)\n","source":"_posts/ecmascript2015-modules.md","raw":"---\ntitle: ECMAScript2015 modules\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - module\nabbrlink: 646f8dec\ndate: 2018-04-07 17:30:40\n---\n\nA module is Javascript code that automatically runs in **strict** mode with no way opt out.\n\nmodule and script are not the same.\n\n#### import and export\n\n##### 1. named export (several per module)\n\n```javascript\n//------ lib.js ------\nexport const sqrt = Math.sqrt;\nexport function square(x) {\n  return x * x;\n}\nexport function diag(x, y) {\n  return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\n\nimport { square, diag } from './lib.js';\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n\n// can not reassign imported bindings\nsuqare = 2; // throw an error\n\n// or\n\n//------ main.js ------\nimport * as lib from 'lib';\nconsole.log(lib.square(11)); // 121\nconsole.log(lib.diag(4, 3)); // 5\n```\n\n- syntax: import { identifiers } from './example.js' -> module specifier\n\n- the list of binding to imports is not a destructured object\n\n- the last one this is called _namespace_ import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.\n\n- Be sure to include /, ./ or ../ at the beginning of the string representing the file for the best compatibility across browsers and node.js.\n\n- lib.js is only execute once, no matter how many import statements have been declared. After the code to import the module executes, the instantiated module is kept in **memory** and reused whenever another import statement reference to it. e.g.\n\n```javascript\n// just execute lib.js once\nimport { diag } from './lib.js';\nimport { square } from './lib.js';\n```\n\n- import/export must be used outside condition statement or functions.\n\n```javascript\nif (flag) {\n    export flag; // syntax error\n}\n\nfunction tryImport() {\nimport { diag } from './lib.js'; // syntax error\n}\n```\n\n- ES6 import statement create _read-only_ bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.\n\n```javascript\nexport var name = 'Nico';\nexport function setName(x) {\n  name = x;\n}\n\nimport { name, setName } from './lib.js';\nconsole.log(name); // Nico\nsetName('Jack');\nconsole.log(name); // Jack\n\n// can not reassign imported bindings\nname = 'Nico'; // throw an error\n```\n\n- renaming export and import\n\n```javascript\nexport {sum as add};\nimport {add} form './example.js';\n\n// or\nimport { add as sum } from './example.js';\nconsole.log(typeof add); // udefined\n```\n\n##### 2. default export (one per module)\n\n```javascript\n//------ myFunc.js ------\nexport default function () { ··· } // no semicolon!\n\n//------ main1.js ------\nimport myFunc from 'myFunc';\nmyFunc();\n\n// or\nfunction sum () { ... }\nexport default sum;\n\n// or\nexport sum2() { ... }\nexport {sum as default}\n\n// Or a class:\n\n//------ MyClass.js ------\nexport default class { ··· } // no semicolon!\n\n//------ main2.js ------\nimport MyClass from 'MyClass';\nconst inst = new MyClass();\n```\n\n##### 3. combine\n\nyou can use named export and default together\n\nnote: the default must come before the non-defaults in import statement.\n\n```js\nexport var name = 'Nico';\nexport default function () { ··· }\n\nimport sum, { name } from './example.js';\n\n// or\nimport { default as sum, name } from './example.js';\n```\n\n##### 4. re-exporting\n\n```js\nimport {add} form './example.js';\nexport add;\n\n// or short\nexport { add } from './example.js';\n\n// export with different name\nexport { add as sum } from './example.js';\n\n// export everything\nexport * from './example.js';\n```\n\nnote: by exporting everything, you're including default as well as any named exports.\n\n##### 5. importing without bindings\n\nSome modules may not export anthing; instead they might only modify object in the gloabal scope. _Import without bindings are most likely to be used to create polyfills and shims_.\n\n```js\n// example.js\nArray.prototype.somethingFancy = function () { ...}\n\n// main.js\nimport './example.js'\nlet arr = [];\narr.somethingFancy();\n```\n\n#### loading modules\n\n##### 1. use <\bscript> as `defer`\n\n```html\n<!-- load a module JavaScript file -->\n<script type=\"module\" src=\"module.js\"></script>\n\n<!-- include a module inline -->\n<script type=\"module\">\n  import { sum } from './example.js';\n\n  let result = sum(1, 2);\n</script>\n```\n\n- 'module' is not a content type like 'text/javascript', and browsers ignore `<script>` elements when type is unrecognized, providing good backwards-compatibility.\n\n- in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.\n\n- module sequence; `<script type=\"module\">` always acts as if the `defer` attribute is applied.\n\n```html\n<!-- this will execute first -->\n<script type=\"module\" src=\"module1.js\"></script>\n\n<!-- this will execute second -->\n<script type=\"module\">\n  import { sum } from './example.js';\n\n  let result = sum(1, 2);\n</script>\n```\n\n- synchronies and sequential: **modules are parsed completely first to dientify all `import`, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.**\n\ni. download and parse `module1.js` , recursive download and parse import in `module1.js`;\n\nii. parse inline module\n\nonce loading complete\n\niiii. recursive execute `import` source in `module1.js`, then execute `module1.js`\n\niiiii. recursive execute `import` source in inline module, then execute inline module\n\n##### 2. use <\bscript> as `async`\n\n```html\n<!-- no guarantee which one of these will execute first -->\n<script type=\"module\" async src=\"module1.js\"></script>\n<script type=\"module\" async src=\"module2.js\"></script>\n```\n\nthe `async` causes the script file to be executed as soon as the file is completed downloaded and parsed. the order in document does not affect the order in which the scripts are executed. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.\n\n##### 3. use `Worker`\n\n```js\n// load script.js as a script\nlet worker = new Worker('script.js');\n\n// load module.js as a module\nlet worker = new Worker('module.js', { type: 'module' });\n```\n\n#### related reading material\n\n1. Nicholas C. Zakas, [Understanding ECMAScript 6](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n2. Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n\n3. nodejs document, [Modules](https://nodejs.org/api/modules.html)\n","slug":"ecmascript2015-modules","published":1,"updated":"2019-11-15T09:39:12.467Z","_id":"cka6xu6wq00078cmhqkys3a96","comments":1,"layout":"post","photos":[],"link":"","content":"<p>A module is Javascript code that automatically runs in <strong>strict</strong> mode with no way opt out.</p>\n<p>module and script are not the same.</p>\n<h4 id=\"import-and-export\"><a href=\"#import-and-export\" class=\"headerlink\" title=\"import and export\"></a>import and export</h4><h5 id=\"1-named-export-several-per-module\"><a href=\"#1-named-export-several-per-module\" class=\"headerlink\" title=\"1. named export (several per module)\"></a>1. named export (several per module)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ lib.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> sqrt = <span class=\"built_in\">Math</span>.sqrt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diag</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sqrt(square(x) + square(y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square, diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">suqare = <span class=\"number\">2</span>; <span class=\"comment\">// throw an error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lib <span class=\"keyword\">from</span> <span class=\"string\">'lib'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>syntax: import { identifiers } from ‘./example.js’ -&gt; module specifier</p>\n</li>\n<li><p>the list of binding to imports is not a destructured object</p>\n</li>\n<li><p>the last one this is called <em>namespace</em> import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.</p>\n</li>\n<li><p>Be sure to include /, ./ or ../ at the beginning of the string representing the file for the best compatibility across browsers and node.js.</p>\n</li>\n<li><p>lib.js is only execute once, no matter how many import statements have been declared. After the code to import the module executes, the instantiated module is kept in <strong>memory</strong> and reused whenever another import statement reference to it. e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// just execute lib.js once</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>import/export must be used outside condition statement or functions.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> flag; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryImport</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ES6 import statement create <em>read-only</em> bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  name = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, setName &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Nico</span></span><br><span class=\"line\">setName(<span class=\"string\">'Jack'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">name = <span class=\"string\">'Nico'</span>; <span class=\"comment\">// throw an error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>renaming export and import</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> add&#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> add); <span class=\"comment\">// udefined</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-default-export-one-per-module\"><a href=\"#2-default-export-one-per-module\" class=\"headerlink\" title=\"2. default export (one per module)\"></a>2. default export (one per module)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ myFunc.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main1.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myFunc <span class=\"keyword\">from</span> <span class=\"string\">'myFunc'</span>;</span><br><span class=\"line\">myFunc();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\"></span>) </span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> sum2() &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or a class:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ MyClass.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main2.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MyClass <span class=\"keyword\">from</span> <span class=\"string\">'MyClass'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> inst = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-combine\"><a href=\"#3-combine\" class=\"headerlink\" title=\"3. combine\"></a>3. combine</h5><p>you can use named export and default together</p>\n<p>note: the default must come before the non-defaults in import statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum, &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> sum, name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-re-exporting\"><a href=\"#4-re-exporting\" class=\"headerlink\" title=\"4. re-exporting\"></a>4. re-exporting</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or short</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export with different name</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export everything</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<p>note: by exporting everything, you’re including default as well as any named exports.</p>\n<h5 id=\"5-importing-without-bindings\"><a href=\"#5-importing-without-bindings\" class=\"headerlink\" title=\"5. importing without bindings\"></a>5. importing without bindings</h5><p>Some modules may not export anthing; instead they might only modify object in the gloabal scope. <em>Import without bindings are most likely to be used to create polyfills and shims</em>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.js</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.somethingFancy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./example.js'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">arr.somethingFancy();</span><br></pre></td></tr></table></figure>\n<h4 id=\"loading-modules\"><a href=\"#loading-modules\" class=\"headerlink\" title=\"loading modules\"></a>loading modules</h4><h5 id=\"1-use-lt-script-gt-as-defer\"><a href=\"#1-use-lt-script-gt-as-defer\" class=\"headerlink\" title=\"1. use &lt;\bscript&gt; as defer\"></a>1. use &lt;\bscript&gt; as <code>defer</code></h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- load a module JavaScript file --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- include a module inline --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>‘module’ is not a content type like ‘text/javascript’, and browsers ignore <code>&lt;script&gt;</code> elements when type is unrecognized, providing good backwards-compatibility.</p>\n</li>\n<li><p>in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.</p>\n</li>\n<li><p>module sequence; <code>&lt;script type=&quot;module&quot;&gt;</code> always acts as if the <code>defer</code> attribute is applied.</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute second --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>synchronies and sequential: <strong>modules are parsed completely first to dientify all <code>import</code>, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.</strong></li>\n</ul>\n<p>i. download and parse <code>module1.js</code> , recursive download and parse import in <code>module1.js</code>;</p>\n<p>ii. parse inline module</p>\n<p>once loading complete</p>\n<p>iiii. recursive execute <code>import</code> source in <code>module1.js</code>, then execute <code>module1.js</code></p>\n<p>iiiii. recursive execute <code>import</code> source in inline module, then execute inline module</p>\n<h5 id=\"2-use-lt-script-gt-as-async\"><a href=\"#2-use-lt-script-gt-as-async\" class=\"headerlink\" title=\"2. use &lt;\bscript&gt; as async\"></a>2. use &lt;\bscript&gt; as <code>async</code></h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- no guarantee which one of these will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module2.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>the <code>async</code> causes the script file to be executed as soon as the file is completed downloaded and parsed. the order in document does not affect the order in which the scripts are executed. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.</p>\n<h5 id=\"3-use-Worker\"><a href=\"#3-use-Worker\" class=\"headerlink\" title=\"3. use Worker\"></a>3. use <code>Worker</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load script.js as a script</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'script.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load module.js as a module</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'module.js'</span>, &#123; <span class=\"attr\">type</span>: <span class=\"string\">'module'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></p>\n</li>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>A module is Javascript code that automatically runs in <strong>strict</strong> mode with no way opt out.</p>\n<p>module and script are not the same.</p>\n<h4 id=\"import-and-export\"><a href=\"#import-and-export\" class=\"headerlink\" title=\"import and export\"></a>import and export</h4><h5 id=\"1-named-export-several-per-module\"><a href=\"#1-named-export-several-per-module\" class=\"headerlink\" title=\"1. named export (several per module)\"></a>1. named export (several per module)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ lib.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> sqrt = <span class=\"built_in\">Math</span>.sqrt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diag</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sqrt(square(x) + square(y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square, diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">suqare = <span class=\"number\">2</span>; <span class=\"comment\">// throw an error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lib <span class=\"keyword\">from</span> <span class=\"string\">'lib'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>syntax: import { identifiers } from ‘./example.js’ -&gt; module specifier</p>\n</li>\n<li><p>the list of binding to imports is not a destructured object</p>\n</li>\n<li><p>the last one this is called <em>namespace</em> import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.</p>\n</li>\n<li><p>Be sure to include /, ./ or ../ at the beginning of the string representing the file for the best compatibility across browsers and node.js.</p>\n</li>\n<li><p>lib.js is only execute once, no matter how many import statements have been declared. After the code to import the module executes, the instantiated module is kept in <strong>memory</strong> and reused whenever another import statement reference to it. e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// just execute lib.js once</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>import/export must be used outside condition statement or functions.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> flag; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryImport</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ES6 import statement create <em>read-only</em> bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  name = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, setName &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Nico</span></span><br><span class=\"line\">setName(<span class=\"string\">'Jack'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">name = <span class=\"string\">'Nico'</span>; <span class=\"comment\">// throw an error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>renaming export and import</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> add&#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> add); <span class=\"comment\">// udefined</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-default-export-one-per-module\"><a href=\"#2-default-export-one-per-module\" class=\"headerlink\" title=\"2. default export (one per module)\"></a>2. default export (one per module)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ myFunc.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main1.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myFunc <span class=\"keyword\">from</span> <span class=\"string\">'myFunc'</span>;</span><br><span class=\"line\">myFunc();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\"></span>) </span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> sum2() &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or a class:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ MyClass.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main2.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MyClass <span class=\"keyword\">from</span> <span class=\"string\">'MyClass'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> inst = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-combine\"><a href=\"#3-combine\" class=\"headerlink\" title=\"3. combine\"></a>3. combine</h5><p>you can use named export and default together</p>\n<p>note: the default must come before the non-defaults in import statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum, &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> sum, name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-re-exporting\"><a href=\"#4-re-exporting\" class=\"headerlink\" title=\"4. re-exporting\"></a>4. re-exporting</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or short</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export with different name</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export everything</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<p>note: by exporting everything, you’re including default as well as any named exports.</p>\n<h5 id=\"5-importing-without-bindings\"><a href=\"#5-importing-without-bindings\" class=\"headerlink\" title=\"5. importing without bindings\"></a>5. importing without bindings</h5><p>Some modules may not export anthing; instead they might only modify object in the gloabal scope. <em>Import without bindings are most likely to be used to create polyfills and shims</em>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.js</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.somethingFancy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./example.js'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">arr.somethingFancy();</span><br></pre></td></tr></table></figure>\n<h4 id=\"loading-modules\"><a href=\"#loading-modules\" class=\"headerlink\" title=\"loading modules\"></a>loading modules</h4><h5 id=\"1-use-lt-script-gt-as-defer\"><a href=\"#1-use-lt-script-gt-as-defer\" class=\"headerlink\" title=\"1. use &lt;\bscript&gt; as defer\"></a>1. use &lt;\bscript&gt; as <code>defer</code></h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- load a module JavaScript file --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- include a module inline --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>‘module’ is not a content type like ‘text/javascript’, and browsers ignore <code>&lt;script&gt;</code> elements when type is unrecognized, providing good backwards-compatibility.</p>\n</li>\n<li><p>in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.</p>\n</li>\n<li><p>module sequence; <code>&lt;script type=&quot;module&quot;&gt;</code> always acts as if the <code>defer</code> attribute is applied.</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute second --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>synchronies and sequential: <strong>modules are parsed completely first to dientify all <code>import</code>, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.</strong></li>\n</ul>\n<p>i. download and parse <code>module1.js</code> , recursive download and parse import in <code>module1.js</code>;</p>\n<p>ii. parse inline module</p>\n<p>once loading complete</p>\n<p>iiii. recursive execute <code>import</code> source in <code>module1.js</code>, then execute <code>module1.js</code></p>\n<p>iiiii. recursive execute <code>import</code> source in inline module, then execute inline module</p>\n<h5 id=\"2-use-lt-script-gt-as-async\"><a href=\"#2-use-lt-script-gt-as-async\" class=\"headerlink\" title=\"2. use &lt;\bscript&gt; as async\"></a>2. use &lt;\bscript&gt; as <code>async</code></h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- no guarantee which one of these will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module2.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>the <code>async</code> causes the script file to be executed as soon as the file is completed downloaded and parsed. the order in document does not affect the order in which the scripts are executed. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.</p>\n<h5 id=\"3-use-Worker\"><a href=\"#3-use-Worker\" class=\"headerlink\" title=\"3. use Worker\"></a>3. use <code>Worker</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load script.js as a script</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'script.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load module.js as a module</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'module.js'</span>, &#123; <span class=\"attr\">type</span>: <span class=\"string\">'module'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></p>\n</li>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules</a></p>\n</li>\n</ol>\n"},{"title":"搭建 Flutter 环境","abbrlink":"ec9f837c","date":"2020-01-17T06:09:18.000Z","_content":"今年计划学习的新技术栈一个是 vue.js，等 3.0版本发布以后准备尝试一下。 另一个就是flutter。今天看了一下官方文档，按照文档在本机上把环境跑起来了。这里先记录一下搭建环境的步骤，也算是学习过程的一个记录。\n\n这篇文章基本按照 https://flutter.dev/docs/get-started/install/macos 页面的指引一步步操作下来就可以在 mac 和 iphone 上运行 flutter demo 了。我把关键的命令和操作记录下来，过滤掉一些解释性的和暂时无关的文字，方便下次自己回顾，也可以当做一份汉化文档，方便初学者快速搭建环境排除掉一些其他的干扰。\n\n### Flutter SDK ###\n\n首先下载最新的 Flutter SDK，大约 1g 左右。下载完成之后，cd 到开发文件夹，执行 unzip 操作。\n\n```bash\n$ cd ~/development\n$ unzip ~/Downloads/flutter_macos_v1.12.13+hotfix.5-stable.zip\n```\n\n如果不想使用固定版本的话，可以直接使用 git 操作，从 github 拉取最新的 flutter 源码。\n\n```bash\n git clone https://github.com/flutter/flutter.git\n```\n\n之后将 `flutter` 操作添加到 path。\n\n```bash\n$ export PATH=\"$PATH:`pwd`/flutter/bin\"\n```\n\n这只是临时添加到当前的 terminal 窗口，如果需要永久添加，可以阅读官方文档。这里我不想跑题，暂时不做展开，以后再讲。\n\n### Run flutter doctor ###\n\n进行完这三步之后，我们就可以跑一下命令行来看 flutter 是否安装完成。\n\n```bash\n$ flutter doctor\n```\n\n稍等片刻之后，会有一份 Doctor summary。在我的电脑上，因为没有安装 Android toolchain 和 Android Studio，所以这两项之前显示的是×。除此之外， Flutter，Xcode，VS Code， Connected Device 都是√，表明Flutter 已经配置好了。\n\n### iOS setup ###\n\n接下来我们就可以来针对 ios 配置一下开发环境。\n\n首先安装最新版的 Xcode，如果不是最新版可以通过 mac app store 升级。\n\n安装好之后，需要配置一下 Xcode 的命令行工具。执行如下操作\n\n```bash\n$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n$ sudo xcodebuild -runFirstLaunch\n```\n\n最后需要确保同意 Xcode 证书。首次打开Xcode 或者在命令行执行一条语句都可以。\n\n```bash\n$ sudo xcodebuild -license\n```\n\n接下来我们在来配置 iOS 模拟器。\n\n### iOS Simulator ###\n\n命令行输入\n\n```bash\n$ open -a Simulator\n```\n\n该命令会默认打开最新的 iOS 机器，如果想换其他型号的 iphone 或者其他设备，可以从 Hardware > Device 下来选择你想要的机型。\n\n### Create and run a flutter app ###\n\n接下来我们创建一个官方的 demo 项目，并且把它跑起来。先保证 ios 模拟请还在运行，然后分别执行以下三条命令行。\n\n```bash\n$ flutter create my_app\n$ cd my_app\n$ flutter run\n```\n\n这时候我们就可以看到官方的 demo 跑起来了。\n\n### Deploy to iOS devices\n\n如果我们想在自己的 iOS 手机上运行 demo，可以通过 Xcode 来部署。\n\n首先安装 CocoaPods。\n\n```bash\n$ sudo gem install cocoapods\n$ pod setup\n```\n\n然后 cd 到 demo 的文件夹，执行\n\n```bash\n$ open ios/Runner.xcworkspace\n```\n\n打开之后，在 Xcode 左侧边栏选择 Runner项目。接下来我们来配置 Development Team。在 Runner 的配置页面，首先关注 Signing & Capabilities > Team。下来选择 Team，如果没有，可以使用自己的 Apple ID 创建一个 Personal Team， 不花钱，免费。创建完之后，我们需要修改一下 Bundle Identifier，这里的这个 identifier 需要保证)唯一性。\n\n\n这里我遇到一个问题，The app ID \"com.example.myapp\" cannot be registered to your development team. Change your bundle identifier to a unique string to try again.  详情可以参见 https://github.com/flutter/flutter/issues/19498 。 \n\n![github-issue](https://user-gold-cdn.xitu.io/2020/1/16/16faea496ad567c6?w=2526&h=1156&f=png&s=203465)\n\n我解决的方法就是修改自动生成的 Bundle Identifier，按上图的例子，修改 example 或者 myapp 都可以解决问题。\n\n最后可以通过flutter run 或者 点击 Xcode 上方的 build and run 按钮部署 demo app。\n\n部署完之后，还需最后一步，在手机上添加信任 settings > general > profiles & device management ，找到 developer  app 下的自己开发账号的 app，点击 trust。\n\n到此为止我们就完成了 flutter 开发环境的搭建，可以在电脑和自己的上运行 flutter 应用了。\n\n我们下次再会。\n","source":"_posts/flutter-setup.md","raw":"---\ntitle: 搭建 Flutter 环境\ncategories:\n  - web\ntags:\n  - Flutter\n  - setup\nabbrlink: ec9f837c\ndate: 2020-01-16 22:09:18\n---\n今年计划学习的新技术栈一个是 vue.js，等 3.0版本发布以后准备尝试一下。 另一个就是flutter。今天看了一下官方文档，按照文档在本机上把环境跑起来了。这里先记录一下搭建环境的步骤，也算是学习过程的一个记录。\n\n这篇文章基本按照 https://flutter.dev/docs/get-started/install/macos 页面的指引一步步操作下来就可以在 mac 和 iphone 上运行 flutter demo 了。我把关键的命令和操作记录下来，过滤掉一些解释性的和暂时无关的文字，方便下次自己回顾，也可以当做一份汉化文档，方便初学者快速搭建环境排除掉一些其他的干扰。\n\n### Flutter SDK ###\n\n首先下载最新的 Flutter SDK，大约 1g 左右。下载完成之后，cd 到开发文件夹，执行 unzip 操作。\n\n```bash\n$ cd ~/development\n$ unzip ~/Downloads/flutter_macos_v1.12.13+hotfix.5-stable.zip\n```\n\n如果不想使用固定版本的话，可以直接使用 git 操作，从 github 拉取最新的 flutter 源码。\n\n```bash\n git clone https://github.com/flutter/flutter.git\n```\n\n之后将 `flutter` 操作添加到 path。\n\n```bash\n$ export PATH=\"$PATH:`pwd`/flutter/bin\"\n```\n\n这只是临时添加到当前的 terminal 窗口，如果需要永久添加，可以阅读官方文档。这里我不想跑题，暂时不做展开，以后再讲。\n\n### Run flutter doctor ###\n\n进行完这三步之后，我们就可以跑一下命令行来看 flutter 是否安装完成。\n\n```bash\n$ flutter doctor\n```\n\n稍等片刻之后，会有一份 Doctor summary。在我的电脑上，因为没有安装 Android toolchain 和 Android Studio，所以这两项之前显示的是×。除此之外， Flutter，Xcode，VS Code， Connected Device 都是√，表明Flutter 已经配置好了。\n\n### iOS setup ###\n\n接下来我们就可以来针对 ios 配置一下开发环境。\n\n首先安装最新版的 Xcode，如果不是最新版可以通过 mac app store 升级。\n\n安装好之后，需要配置一下 Xcode 的命令行工具。执行如下操作\n\n```bash\n$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n$ sudo xcodebuild -runFirstLaunch\n```\n\n最后需要确保同意 Xcode 证书。首次打开Xcode 或者在命令行执行一条语句都可以。\n\n```bash\n$ sudo xcodebuild -license\n```\n\n接下来我们在来配置 iOS 模拟器。\n\n### iOS Simulator ###\n\n命令行输入\n\n```bash\n$ open -a Simulator\n```\n\n该命令会默认打开最新的 iOS 机器，如果想换其他型号的 iphone 或者其他设备，可以从 Hardware > Device 下来选择你想要的机型。\n\n### Create and run a flutter app ###\n\n接下来我们创建一个官方的 demo 项目，并且把它跑起来。先保证 ios 模拟请还在运行，然后分别执行以下三条命令行。\n\n```bash\n$ flutter create my_app\n$ cd my_app\n$ flutter run\n```\n\n这时候我们就可以看到官方的 demo 跑起来了。\n\n### Deploy to iOS devices\n\n如果我们想在自己的 iOS 手机上运行 demo，可以通过 Xcode 来部署。\n\n首先安装 CocoaPods。\n\n```bash\n$ sudo gem install cocoapods\n$ pod setup\n```\n\n然后 cd 到 demo 的文件夹，执行\n\n```bash\n$ open ios/Runner.xcworkspace\n```\n\n打开之后，在 Xcode 左侧边栏选择 Runner项目。接下来我们来配置 Development Team。在 Runner 的配置页面，首先关注 Signing & Capabilities > Team。下来选择 Team，如果没有，可以使用自己的 Apple ID 创建一个 Personal Team， 不花钱，免费。创建完之后，我们需要修改一下 Bundle Identifier，这里的这个 identifier 需要保证)唯一性。\n\n\n这里我遇到一个问题，The app ID \"com.example.myapp\" cannot be registered to your development team. Change your bundle identifier to a unique string to try again.  详情可以参见 https://github.com/flutter/flutter/issues/19498 。 \n\n![github-issue](https://user-gold-cdn.xitu.io/2020/1/16/16faea496ad567c6?w=2526&h=1156&f=png&s=203465)\n\n我解决的方法就是修改自动生成的 Bundle Identifier，按上图的例子，修改 example 或者 myapp 都可以解决问题。\n\n最后可以通过flutter run 或者 点击 Xcode 上方的 build and run 按钮部署 demo app。\n\n部署完之后，还需最后一步，在手机上添加信任 settings > general > profiles & device management ，找到 developer  app 下的自己开发账号的 app，点击 trust。\n\n到此为止我们就完成了 flutter 开发环境的搭建，可以在电脑和自己的上运行 flutter 应用了。\n\n我们下次再会。\n","slug":"flutter-setup","published":1,"updated":"2020-04-01T16:23:53.488Z","_id":"cka6xu6wq00088cmhlnb6tc3m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今年计划学习的新技术栈一个是 vue.js，等 3.0版本发布以后准备尝试一下。 另一个就是flutter。今天看了一下官方文档，按照文档在本机上把环境跑起来了。这里先记录一下搭建环境的步骤，也算是学习过程的一个记录。</p>\n<p>这篇文章基本按照 <a href=\"https://flutter.dev/docs/get-started/install/macos\" target=\"_blank\" rel=\"noopener\">https://flutter.dev/docs/get-started/install/macos</a> 页面的指引一步步操作下来就可以在 mac 和 iphone 上运行 flutter demo 了。我把关键的命令和操作记录下来，过滤掉一些解释性的和暂时无关的文字，方便下次自己回顾，也可以当做一份汉化文档，方便初学者快速搭建环境排除掉一些其他的干扰。</p>\n<h3 id=\"Flutter-SDK\"><a href=\"#Flutter-SDK\" class=\"headerlink\" title=\"Flutter SDK\"></a>Flutter SDK</h3><p>首先下载最新的 Flutter SDK，大约 1g 左右。下载完成之后，cd 到开发文件夹，执行 unzip 操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/development</span><br><span class=\"line\">$ unzip ~/Downloads/flutter_macos_v1.12.13+hotfix.5-stable.zip</span><br></pre></td></tr></table></figure>\n<p>如果不想使用固定版本的话，可以直接使用 git 操作，从 github 拉取最新的 flutter 源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure>\n<p>之后将 <code>flutter</code> 操作添加到 path。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> PATH=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:`pwd`/flutter/bin\"</span></span><br></pre></td></tr></table></figure>\n<p>这只是临时添加到当前的 terminal 窗口，如果需要永久添加，可以阅读官方文档。这里我不想跑题，暂时不做展开，以后再讲。</p>\n<h3 id=\"Run-flutter-doctor\"><a href=\"#Run-flutter-doctor\" class=\"headerlink\" title=\"Run flutter doctor\"></a>Run flutter doctor</h3><p>进行完这三步之后，我们就可以跑一下命令行来看 flutter 是否安装完成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flutter doctor</span><br></pre></td></tr></table></figure>\n<p>稍等片刻之后，会有一份 Doctor summary。在我的电脑上，因为没有安装 Android toolchain 和 Android Studio，所以这两项之前显示的是×。除此之外， Flutter，Xcode，VS Code， Connected Device 都是√，表明Flutter 已经配置好了。</p>\n<h3 id=\"iOS-setup\"><a href=\"#iOS-setup\" class=\"headerlink\" title=\"iOS setup\"></a>iOS setup</h3><p>接下来我们就可以来针对 ios 配置一下开发环境。</p>\n<p>首先安装最新版的 Xcode，如果不是最新版可以通过 mac app store 升级。</p>\n<p>安装好之后，需要配置一下 Xcode 的命令行工具。执行如下操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br><span class=\"line\">$ sudo xcodebuild -runFirstLaunch</span><br></pre></td></tr></table></figure>\n<p>最后需要确保同意 Xcode 证书。首次打开Xcode 或者在命令行执行一条语句都可以。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo xcodebuild -license</span><br></pre></td></tr></table></figure>\n<p>接下来我们在来配置 iOS 模拟器。</p>\n<h3 id=\"iOS-Simulator\"><a href=\"#iOS-Simulator\" class=\"headerlink\" title=\"iOS Simulator\"></a>iOS Simulator</h3><p>命令行输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open -a Simulator</span><br></pre></td></tr></table></figure>\n<p>该命令会默认打开最新的 iOS 机器，如果想换其他型号的 iphone 或者其他设备，可以从 Hardware &gt; Device 下来选择你想要的机型。</p>\n<h3 id=\"Create-and-run-a-flutter-app\"><a href=\"#Create-and-run-a-flutter-app\" class=\"headerlink\" title=\"Create and run a flutter app\"></a>Create and run a flutter app</h3><p>接下来我们创建一个官方的 demo 项目，并且把它跑起来。先保证 ios 模拟请还在运行，然后分别执行以下三条命令行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flutter create my_app</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my_app</span><br><span class=\"line\">$ flutter run</span><br></pre></td></tr></table></figure>\n<p>这时候我们就可以看到官方的 demo 跑起来了。</p>\n<h3 id=\"Deploy-to-iOS-devices\"><a href=\"#Deploy-to-iOS-devices\" class=\"headerlink\" title=\"Deploy to iOS devices\"></a>Deploy to iOS devices</h3><p>如果我们想在自己的 iOS 手机上运行 demo，可以通过 Xcode 来部署。</p>\n<p>首先安装 CocoaPods。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure>\n<p>然后 cd 到 demo 的文件夹，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open ios/Runner.xcworkspace</span><br></pre></td></tr></table></figure>\n<p>打开之后，在 Xcode 左侧边栏选择 Runner项目。接下来我们来配置 Development Team。在 Runner 的配置页面，首先关注 Signing &amp; Capabilities &gt; Team。下来选择 Team，如果没有，可以使用自己的 Apple ID 创建一个 Personal Team， 不花钱，免费。创建完之后，我们需要修改一下 Bundle Identifier，这里的这个 identifier 需要保证)唯一性。</p>\n<p>这里我遇到一个问题，The app ID “com.example.myapp” cannot be registered to your development team. Change your bundle identifier to a unique string to try again.  详情可以参见 <a href=\"https://github.com/flutter/flutter/issues/19498\" target=\"_blank\" rel=\"noopener\">https://github.com/flutter/flutter/issues/19498</a> 。 </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/16/16faea496ad567c6?w=2526&amp;h=1156&amp;f=png&amp;s=203465\" alt=\"github-issue\"></p>\n<p>我解决的方法就是修改自动生成的 Bundle Identifier，按上图的例子，修改 example 或者 myapp 都可以解决问题。</p>\n<p>最后可以通过flutter run 或者 点击 Xcode 上方的 build and run 按钮部署 demo app。</p>\n<p>部署完之后，还需最后一步，在手机上添加信任 settings &gt; general &gt; profiles &amp; device management ，找到 developer  app 下的自己开发账号的 app，点击 trust。</p>\n<p>到此为止我们就完成了 flutter 开发环境的搭建，可以在电脑和自己的上运行 flutter 应用了。</p>\n<p>我们下次再会。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今年计划学习的新技术栈一个是 vue.js，等 3.0版本发布以后准备尝试一下。 另一个就是flutter。今天看了一下官方文档，按照文档在本机上把环境跑起来了。这里先记录一下搭建环境的步骤，也算是学习过程的一个记录。</p>\n<p>这篇文章基本按照 <a href=\"https://flutter.dev/docs/get-started/install/macos\" target=\"_blank\" rel=\"noopener\">https://flutter.dev/docs/get-started/install/macos</a> 页面的指引一步步操作下来就可以在 mac 和 iphone 上运行 flutter demo 了。我把关键的命令和操作记录下来，过滤掉一些解释性的和暂时无关的文字，方便下次自己回顾，也可以当做一份汉化文档，方便初学者快速搭建环境排除掉一些其他的干扰。</p>\n<h3 id=\"Flutter-SDK\"><a href=\"#Flutter-SDK\" class=\"headerlink\" title=\"Flutter SDK\"></a>Flutter SDK</h3><p>首先下载最新的 Flutter SDK，大约 1g 左右。下载完成之后，cd 到开发文件夹，执行 unzip 操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/development</span><br><span class=\"line\">$ unzip ~/Downloads/flutter_macos_v1.12.13+hotfix.5-stable.zip</span><br></pre></td></tr></table></figure>\n<p>如果不想使用固定版本的话，可以直接使用 git 操作，从 github 拉取最新的 flutter 源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure>\n<p>之后将 <code>flutter</code> 操作添加到 path。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> PATH=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:`pwd`/flutter/bin\"</span></span><br></pre></td></tr></table></figure>\n<p>这只是临时添加到当前的 terminal 窗口，如果需要永久添加，可以阅读官方文档。这里我不想跑题，暂时不做展开，以后再讲。</p>\n<h3 id=\"Run-flutter-doctor\"><a href=\"#Run-flutter-doctor\" class=\"headerlink\" title=\"Run flutter doctor\"></a>Run flutter doctor</h3><p>进行完这三步之后，我们就可以跑一下命令行来看 flutter 是否安装完成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flutter doctor</span><br></pre></td></tr></table></figure>\n<p>稍等片刻之后，会有一份 Doctor summary。在我的电脑上，因为没有安装 Android toolchain 和 Android Studio，所以这两项之前显示的是×。除此之外， Flutter，Xcode，VS Code， Connected Device 都是√，表明Flutter 已经配置好了。</p>\n<h3 id=\"iOS-setup\"><a href=\"#iOS-setup\" class=\"headerlink\" title=\"iOS setup\"></a>iOS setup</h3><p>接下来我们就可以来针对 ios 配置一下开发环境。</p>\n<p>首先安装最新版的 Xcode，如果不是最新版可以通过 mac app store 升级。</p>\n<p>安装好之后，需要配置一下 Xcode 的命令行工具。执行如下操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br><span class=\"line\">$ sudo xcodebuild -runFirstLaunch</span><br></pre></td></tr></table></figure>\n<p>最后需要确保同意 Xcode 证书。首次打开Xcode 或者在命令行执行一条语句都可以。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo xcodebuild -license</span><br></pre></td></tr></table></figure>\n<p>接下来我们在来配置 iOS 模拟器。</p>\n<h3 id=\"iOS-Simulator\"><a href=\"#iOS-Simulator\" class=\"headerlink\" title=\"iOS Simulator\"></a>iOS Simulator</h3><p>命令行输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open -a Simulator</span><br></pre></td></tr></table></figure>\n<p>该命令会默认打开最新的 iOS 机器，如果想换其他型号的 iphone 或者其他设备，可以从 Hardware &gt; Device 下来选择你想要的机型。</p>\n<h3 id=\"Create-and-run-a-flutter-app\"><a href=\"#Create-and-run-a-flutter-app\" class=\"headerlink\" title=\"Create and run a flutter app\"></a>Create and run a flutter app</h3><p>接下来我们创建一个官方的 demo 项目，并且把它跑起来。先保证 ios 模拟请还在运行，然后分别执行以下三条命令行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flutter create my_app</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my_app</span><br><span class=\"line\">$ flutter run</span><br></pre></td></tr></table></figure>\n<p>这时候我们就可以看到官方的 demo 跑起来了。</p>\n<h3 id=\"Deploy-to-iOS-devices\"><a href=\"#Deploy-to-iOS-devices\" class=\"headerlink\" title=\"Deploy to iOS devices\"></a>Deploy to iOS devices</h3><p>如果我们想在自己的 iOS 手机上运行 demo，可以通过 Xcode 来部署。</p>\n<p>首先安装 CocoaPods。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure>\n<p>然后 cd 到 demo 的文件夹，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open ios/Runner.xcworkspace</span><br></pre></td></tr></table></figure>\n<p>打开之后，在 Xcode 左侧边栏选择 Runner项目。接下来我们来配置 Development Team。在 Runner 的配置页面，首先关注 Signing &amp; Capabilities &gt; Team。下来选择 Team，如果没有，可以使用自己的 Apple ID 创建一个 Personal Team， 不花钱，免费。创建完之后，我们需要修改一下 Bundle Identifier，这里的这个 identifier 需要保证)唯一性。</p>\n<p>这里我遇到一个问题，The app ID “com.example.myapp” cannot be registered to your development team. Change your bundle identifier to a unique string to try again.  详情可以参见 <a href=\"https://github.com/flutter/flutter/issues/19498\" target=\"_blank\" rel=\"noopener\">https://github.com/flutter/flutter/issues/19498</a> 。 </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/16/16faea496ad567c6?w=2526&amp;h=1156&amp;f=png&amp;s=203465\" alt=\"github-issue\"></p>\n<p>我解决的方法就是修改自动生成的 Bundle Identifier，按上图的例子，修改 example 或者 myapp 都可以解决问题。</p>\n<p>最后可以通过flutter run 或者 点击 Xcode 上方的 build and run 按钮部署 demo app。</p>\n<p>部署完之后，还需最后一步，在手机上添加信任 settings &gt; general &gt; profiles &amp; device management ，找到 developer  app 下的自己开发账号的 app，点击 trust。</p>\n<p>到此为止我们就完成了 flutter 开发环境的搭建，可以在电脑和自己的上运行 flutter 应用了。</p>\n<p>我们下次再会。</p>\n"},{"title":"我读 Effective JavaScript","abbrlink":"6fb9a62a","date":"2020-04-02T06:44:32.000Z","_content":"\n![Effective JavaScript](https://user-gold-cdn.xitu.io/2020/4/2/171392fedd81055b?w=270&h=354&f=jpeg&s=20991)\n\n\n我是17年6月买的这本书，当时在 HW 工作刚三个月。为了确定一下，我还专门去博客看我17年的年中总结，生活的苦楚又历历在目。我记得那时候开发很紧，从国内派人来湾区，导致我们美研也开始按国内的工作时间来。早上九点半到，二十分钟站会，每个人说昨天做了什么，今天打算做什么，开发联调进度，有没有阻碍。然后一干干到晚上十一点才下班回家。实在不知道是怎么熬过来的。我估摸是业务代码写的扛不住了，就想准备准备，一方面提升提升，再一方面年底拿了签证好跑路，所以就买了几本 JavaScript 的书。结果人算不如天算，事不如人意，书也没看完。\n\n上周刚好休年假，心想也不能天天在家打游戏，还是得搞搞学习，所以这才抽出来这本书开始看。我是从后往前翻的，因为对最后一章并发比较感兴趣。花了三天一口气看完，相见恨晚，后悔要是能早点读读就好了。看的过程中记起很多经历过的面试题目，想起没回答上来的尴尬时刻，有点羞愧和惋惜。\n\n接下来说说这本书。首先在2020年这个时间点，我觉得这本书不太适合初学者看，更适合有过一两年经验的朋友去学习。先不提那些已经过时的知识点，初学者因为没有见太多所谓的好的代码和坏的代码，很难深刻认识到书里提到的 Best Practice 存在的意义，没有比较就没有进步。对于有一些经验的朋友，书中的一些例子可能会让你想起某段自己写的笨比代码，然后去琢磨作者的良苦用心。\n\n回到书的内容，因为这本书出版于12年，距离ES5正式发行才刚刚过去三年，前端领域还有大量项目是跑在非严格环境。所以作者花了不少篇幅来介绍一些特性在strict 和 non strict 环境的区别，以及一些对于现今开发者来说不再是问题的问题。比如逗号插入，现在已经有了比较完善的 Lint 工具来解决这类问题。还有类似 with，eval，caller，callee 等概念，随着 ES 的逐步规范和框架的引入，现在开发中基本不再触碰这类知识了。又如第五章中实现的 Dict，现在已经有成为标准的 Set， Map等对象可供直接调用了。\n\n另一方面，阅读这边书可以帮助我们快速梳理一遍知识点。比如书中提到的prototype inheritance，IIFE，closure 保存私有变量，call apply 的使用场景，arguements 的使用，defineProperty 的使用等等，都是日常开发以及面试常问的问题。所以在面试之前，重点看下第三、四、五章，是个很不错的复习思路。我想起当年去 ebay 面试，第一面印度小姐姐出的第一题是写一个pub-sub，第二题就是自己实现一个Iterator，可以对一个数组调用 next 方法，直到最后没有了打印完成。现在看到书上的 Item 24 就是原题，实在可惜。\n\n书的第六、七章 ，Library 和 API 设计，以及并发，我觉得非常值得阅读，里面提供的一些接口设计规范和代码示例，在日常工作中使用的还是比较多的。就在前不久，大家在讨论中间层如何设计权限接口的问题，这也是当下 BFF 中比较火热的一个话题吧。看完这一章，我有了些新的想法。比如说对于公共接口，应该做好 defensive programming (Item 59)，对于特殊值，边界值，应该抛错让接入方知道。还有比如说提到 options object (Item 55)，大家肯定不会陌生这样的代码:\n\n```js\n// positional arguments \nfunction getAuth(a,b,c,d,e) {\n    // do something\n}\n```\n\n更可怕的是，随着业务的增长，形参的长度还在增加，以至于每次调用都心惊胆战，这是传到第几个参数了。上面这是一个极端情况，还有一种情况，就是提供的接口什么都不传，返回全部信息。甭管你要不要，一把全倒给你：\n\n```js\nfunction getAuth() {\n    return {\n        city: [],\n        region: [],\n        role: [],\n        // more and more fields\n    }\n}\n```\n\n这是另一个极端，图一时之省事。下次业务增长了，我们只需要往 payload 里无脑加数据就好了。一个接口服务公司，也不管别人需不需某个字段。\n\n看过书以后，我想只需再多走一步就可以优化这个接口。当入参为空时，我们返回所有数据，满足当前简单的业务需求。当接入方多了以后，用户只传他们关心的字段，我们就返回子集。这样的接口粒度更小，便于拓展，可以真正的作为提供方去满足业务方的需求:\n\n```js\nfunction getAuth() {\n  // return all\n}\n\nfunction getAuth({ city }) {\n    return {\n        city: []\n    }\n}\n\nfunction getAuth({ notInTheDoc }) {\n   // throw ArgumentsError\n}\n```\n\n这是我看书过程中的一点粗浅的思考。关于接口安全和接口设计，我了解的不够系统和深入，也是今年希望补习的一个领域。\n\n现在看来，作者不愧是 TC39 成员，书中提到的 Iterator，Promise 等概念均在后来的 JS 正式版本中标准化了，我甚至还有点期望能出第二版。此外，明显感到看英文的速度下降，没有原来顺溜。接下来还要多看英文材料，这项技能不能丢。\n\n最后，昨天得知司徒正美猝然离世，大家聊起都唏嘘不已。这两年加班不少，收益无多，身体也不如从前。有些感慨，人生短短数十年，抓紧时间做些开心的事，读些无用的书，爱些可爱的人，足矣。\n\n2020 年 4 月 1 日\n","source":"_posts/effective-javascript.md","raw":"---\ntitle: 我读 Effective JavaScript\ncategories:\n  - life\ntags:\n  - books\n  - reading\n  - javascript\nabbrlink: 6fb9a62a\ndate: 2020-04-01 23:44:32\n---\n\n![Effective JavaScript](https://user-gold-cdn.xitu.io/2020/4/2/171392fedd81055b?w=270&h=354&f=jpeg&s=20991)\n\n\n我是17年6月买的这本书，当时在 HW 工作刚三个月。为了确定一下，我还专门去博客看我17年的年中总结，生活的苦楚又历历在目。我记得那时候开发很紧，从国内派人来湾区，导致我们美研也开始按国内的工作时间来。早上九点半到，二十分钟站会，每个人说昨天做了什么，今天打算做什么，开发联调进度，有没有阻碍。然后一干干到晚上十一点才下班回家。实在不知道是怎么熬过来的。我估摸是业务代码写的扛不住了，就想准备准备，一方面提升提升，再一方面年底拿了签证好跑路，所以就买了几本 JavaScript 的书。结果人算不如天算，事不如人意，书也没看完。\n\n上周刚好休年假，心想也不能天天在家打游戏，还是得搞搞学习，所以这才抽出来这本书开始看。我是从后往前翻的，因为对最后一章并发比较感兴趣。花了三天一口气看完，相见恨晚，后悔要是能早点读读就好了。看的过程中记起很多经历过的面试题目，想起没回答上来的尴尬时刻，有点羞愧和惋惜。\n\n接下来说说这本书。首先在2020年这个时间点，我觉得这本书不太适合初学者看，更适合有过一两年经验的朋友去学习。先不提那些已经过时的知识点，初学者因为没有见太多所谓的好的代码和坏的代码，很难深刻认识到书里提到的 Best Practice 存在的意义，没有比较就没有进步。对于有一些经验的朋友，书中的一些例子可能会让你想起某段自己写的笨比代码，然后去琢磨作者的良苦用心。\n\n回到书的内容，因为这本书出版于12年，距离ES5正式发行才刚刚过去三年，前端领域还有大量项目是跑在非严格环境。所以作者花了不少篇幅来介绍一些特性在strict 和 non strict 环境的区别，以及一些对于现今开发者来说不再是问题的问题。比如逗号插入，现在已经有了比较完善的 Lint 工具来解决这类问题。还有类似 with，eval，caller，callee 等概念，随着 ES 的逐步规范和框架的引入，现在开发中基本不再触碰这类知识了。又如第五章中实现的 Dict，现在已经有成为标准的 Set， Map等对象可供直接调用了。\n\n另一方面，阅读这边书可以帮助我们快速梳理一遍知识点。比如书中提到的prototype inheritance，IIFE，closure 保存私有变量，call apply 的使用场景，arguements 的使用，defineProperty 的使用等等，都是日常开发以及面试常问的问题。所以在面试之前，重点看下第三、四、五章，是个很不错的复习思路。我想起当年去 ebay 面试，第一面印度小姐姐出的第一题是写一个pub-sub，第二题就是自己实现一个Iterator，可以对一个数组调用 next 方法，直到最后没有了打印完成。现在看到书上的 Item 24 就是原题，实在可惜。\n\n书的第六、七章 ，Library 和 API 设计，以及并发，我觉得非常值得阅读，里面提供的一些接口设计规范和代码示例，在日常工作中使用的还是比较多的。就在前不久，大家在讨论中间层如何设计权限接口的问题，这也是当下 BFF 中比较火热的一个话题吧。看完这一章，我有了些新的想法。比如说对于公共接口，应该做好 defensive programming (Item 59)，对于特殊值，边界值，应该抛错让接入方知道。还有比如说提到 options object (Item 55)，大家肯定不会陌生这样的代码:\n\n```js\n// positional arguments \nfunction getAuth(a,b,c,d,e) {\n    // do something\n}\n```\n\n更可怕的是，随着业务的增长，形参的长度还在增加，以至于每次调用都心惊胆战，这是传到第几个参数了。上面这是一个极端情况，还有一种情况，就是提供的接口什么都不传，返回全部信息。甭管你要不要，一把全倒给你：\n\n```js\nfunction getAuth() {\n    return {\n        city: [],\n        region: [],\n        role: [],\n        // more and more fields\n    }\n}\n```\n\n这是另一个极端，图一时之省事。下次业务增长了，我们只需要往 payload 里无脑加数据就好了。一个接口服务公司，也不管别人需不需某个字段。\n\n看过书以后，我想只需再多走一步就可以优化这个接口。当入参为空时，我们返回所有数据，满足当前简单的业务需求。当接入方多了以后，用户只传他们关心的字段，我们就返回子集。这样的接口粒度更小，便于拓展，可以真正的作为提供方去满足业务方的需求:\n\n```js\nfunction getAuth() {\n  // return all\n}\n\nfunction getAuth({ city }) {\n    return {\n        city: []\n    }\n}\n\nfunction getAuth({ notInTheDoc }) {\n   // throw ArgumentsError\n}\n```\n\n这是我看书过程中的一点粗浅的思考。关于接口安全和接口设计，我了解的不够系统和深入，也是今年希望补习的一个领域。\n\n现在看来，作者不愧是 TC39 成员，书中提到的 Iterator，Promise 等概念均在后来的 JS 正式版本中标准化了，我甚至还有点期望能出第二版。此外，明显感到看英文的速度下降，没有原来顺溜。接下来还要多看英文材料，这项技能不能丢。\n\n最后，昨天得知司徒正美猝然离世，大家聊起都唏嘘不已。这两年加班不少，收益无多，身体也不如从前。有些感慨，人生短短数十年，抓紧时间做些开心的事，读些无用的书，爱些可爱的人，足矣。\n\n2020 年 4 月 1 日\n","slug":"effective-javascript","published":1,"updated":"2020-04-02T04:53:51.562Z","_id":"cka6xu6wr00098cmhjkyxr1bz","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/2/171392fedd81055b?w=270&amp;h=354&amp;f=jpeg&amp;s=20991\" alt=\"Effective JavaScript\"></p>\n<p>我是17年6月买的这本书，当时在 HW 工作刚三个月。为了确定一下，我还专门去博客看我17年的年中总结，生活的苦楚又历历在目。我记得那时候开发很紧，从国内派人来湾区，导致我们美研也开始按国内的工作时间来。早上九点半到，二十分钟站会，每个人说昨天做了什么，今天打算做什么，开发联调进度，有没有阻碍。然后一干干到晚上十一点才下班回家。实在不知道是怎么熬过来的。我估摸是业务代码写的扛不住了，就想准备准备，一方面提升提升，再一方面年底拿了签证好跑路，所以就买了几本 JavaScript 的书。结果人算不如天算，事不如人意，书也没看完。</p>\n<p>上周刚好休年假，心想也不能天天在家打游戏，还是得搞搞学习，所以这才抽出来这本书开始看。我是从后往前翻的，因为对最后一章并发比较感兴趣。花了三天一口气看完，相见恨晚，后悔要是能早点读读就好了。看的过程中记起很多经历过的面试题目，想起没回答上来的尴尬时刻，有点羞愧和惋惜。</p>\n<p>接下来说说这本书。首先在2020年这个时间点，我觉得这本书不太适合初学者看，更适合有过一两年经验的朋友去学习。先不提那些已经过时的知识点，初学者因为没有见太多所谓的好的代码和坏的代码，很难深刻认识到书里提到的 Best Practice 存在的意义，没有比较就没有进步。对于有一些经验的朋友，书中的一些例子可能会让你想起某段自己写的笨比代码，然后去琢磨作者的良苦用心。</p>\n<p>回到书的内容，因为这本书出版于12年，距离ES5正式发行才刚刚过去三年，前端领域还有大量项目是跑在非严格环境。所以作者花了不少篇幅来介绍一些特性在strict 和 non strict 环境的区别，以及一些对于现今开发者来说不再是问题的问题。比如逗号插入，现在已经有了比较完善的 Lint 工具来解决这类问题。还有类似 with，eval，caller，callee 等概念，随着 ES 的逐步规范和框架的引入，现在开发中基本不再触碰这类知识了。又如第五章中实现的 Dict，现在已经有成为标准的 Set， Map等对象可供直接调用了。</p>\n<p>另一方面，阅读这边书可以帮助我们快速梳理一遍知识点。比如书中提到的prototype inheritance，IIFE，closure 保存私有变量，call apply 的使用场景，arguements 的使用，defineProperty 的使用等等，都是日常开发以及面试常问的问题。所以在面试之前，重点看下第三、四、五章，是个很不错的复习思路。我想起当年去 ebay 面试，第一面印度小姐姐出的第一题是写一个pub-sub，第二题就是自己实现一个Iterator，可以对一个数组调用 next 方法，直到最后没有了打印完成。现在看到书上的 Item 24 就是原题，实在可惜。</p>\n<p>书的第六、七章 ，Library 和 API 设计，以及并发，我觉得非常值得阅读，里面提供的一些接口设计规范和代码示例，在日常工作中使用的还是比较多的。就在前不久，大家在讨论中间层如何设计权限接口的问题，这也是当下 BFF 中比较火热的一个话题吧。看完这一章，我有了些新的想法。比如说对于公共接口，应该做好 defensive programming (Item 59)，对于特殊值，边界值，应该抛错让接入方知道。还有比如说提到 options object (Item 55)，大家肯定不会陌生这样的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// positional arguments </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\">a,b,c,d,e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更可怕的是，随着业务的增长，形参的长度还在增加，以至于每次调用都心惊胆战，这是传到第几个参数了。上面这是一个极端情况，还有一种情况，就是提供的接口什么都不传，返回全部信息。甭管你要不要，一把全倒给你：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        city: [],</span><br><span class=\"line\">        region: [],</span><br><span class=\"line\">        role: [],</span><br><span class=\"line\">        <span class=\"comment\">// more and more fields</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是另一个极端，图一时之省事。下次业务增长了，我们只需要往 payload 里无脑加数据就好了。一个接口服务公司，也不管别人需不需某个字段。</p>\n<p>看过书以后，我想只需再多走一步就可以优化这个接口。当入参为空时，我们返回所有数据，满足当前简单的业务需求。当接入方多了以后，用户只传他们关心的字段，我们就返回子集。这样的接口粒度更小，便于拓展，可以真正的作为提供方去满足业务方的需求:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// return all</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\">&#123; city &#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        city: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\">&#123; notInTheDoc &#125;</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// throw ArgumentsError</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是我看书过程中的一点粗浅的思考。关于接口安全和接口设计，我了解的不够系统和深入，也是今年希望补习的一个领域。</p>\n<p>现在看来，作者不愧是 TC39 成员，书中提到的 Iterator，Promise 等概念均在后来的 JS 正式版本中标准化了，我甚至还有点期望能出第二版。此外，明显感到看英文的速度下降，没有原来顺溜。接下来还要多看英文材料，这项技能不能丢。</p>\n<p>最后，昨天得知司徒正美猝然离世，大家聊起都唏嘘不已。这两年加班不少，收益无多，身体也不如从前。有些感慨，人生短短数十年，抓紧时间做些开心的事，读些无用的书，爱些可爱的人，足矣。</p>\n<p>2020 年 4 月 1 日</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/2/171392fedd81055b?w=270&amp;h=354&amp;f=jpeg&amp;s=20991\" alt=\"Effective JavaScript\"></p>\n<p>我是17年6月买的这本书，当时在 HW 工作刚三个月。为了确定一下，我还专门去博客看我17年的年中总结，生活的苦楚又历历在目。我记得那时候开发很紧，从国内派人来湾区，导致我们美研也开始按国内的工作时间来。早上九点半到，二十分钟站会，每个人说昨天做了什么，今天打算做什么，开发联调进度，有没有阻碍。然后一干干到晚上十一点才下班回家。实在不知道是怎么熬过来的。我估摸是业务代码写的扛不住了，就想准备准备，一方面提升提升，再一方面年底拿了签证好跑路，所以就买了几本 JavaScript 的书。结果人算不如天算，事不如人意，书也没看完。</p>\n<p>上周刚好休年假，心想也不能天天在家打游戏，还是得搞搞学习，所以这才抽出来这本书开始看。我是从后往前翻的，因为对最后一章并发比较感兴趣。花了三天一口气看完，相见恨晚，后悔要是能早点读读就好了。看的过程中记起很多经历过的面试题目，想起没回答上来的尴尬时刻，有点羞愧和惋惜。</p>\n<p>接下来说说这本书。首先在2020年这个时间点，我觉得这本书不太适合初学者看，更适合有过一两年经验的朋友去学习。先不提那些已经过时的知识点，初学者因为没有见太多所谓的好的代码和坏的代码，很难深刻认识到书里提到的 Best Practice 存在的意义，没有比较就没有进步。对于有一些经验的朋友，书中的一些例子可能会让你想起某段自己写的笨比代码，然后去琢磨作者的良苦用心。</p>\n<p>回到书的内容，因为这本书出版于12年，距离ES5正式发行才刚刚过去三年，前端领域还有大量项目是跑在非严格环境。所以作者花了不少篇幅来介绍一些特性在strict 和 non strict 环境的区别，以及一些对于现今开发者来说不再是问题的问题。比如逗号插入，现在已经有了比较完善的 Lint 工具来解决这类问题。还有类似 with，eval，caller，callee 等概念，随着 ES 的逐步规范和框架的引入，现在开发中基本不再触碰这类知识了。又如第五章中实现的 Dict，现在已经有成为标准的 Set， Map等对象可供直接调用了。</p>\n<p>另一方面，阅读这边书可以帮助我们快速梳理一遍知识点。比如书中提到的prototype inheritance，IIFE，closure 保存私有变量，call apply 的使用场景，arguements 的使用，defineProperty 的使用等等，都是日常开发以及面试常问的问题。所以在面试之前，重点看下第三、四、五章，是个很不错的复习思路。我想起当年去 ebay 面试，第一面印度小姐姐出的第一题是写一个pub-sub，第二题就是自己实现一个Iterator，可以对一个数组调用 next 方法，直到最后没有了打印完成。现在看到书上的 Item 24 就是原题，实在可惜。</p>\n<p>书的第六、七章 ，Library 和 API 设计，以及并发，我觉得非常值得阅读，里面提供的一些接口设计规范和代码示例，在日常工作中使用的还是比较多的。就在前不久，大家在讨论中间层如何设计权限接口的问题，这也是当下 BFF 中比较火热的一个话题吧。看完这一章，我有了些新的想法。比如说对于公共接口，应该做好 defensive programming (Item 59)，对于特殊值，边界值，应该抛错让接入方知道。还有比如说提到 options object (Item 55)，大家肯定不会陌生这样的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// positional arguments </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\">a,b,c,d,e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更可怕的是，随着业务的增长，形参的长度还在增加，以至于每次调用都心惊胆战，这是传到第几个参数了。上面这是一个极端情况，还有一种情况，就是提供的接口什么都不传，返回全部信息。甭管你要不要，一把全倒给你：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        city: [],</span><br><span class=\"line\">        region: [],</span><br><span class=\"line\">        role: [],</span><br><span class=\"line\">        <span class=\"comment\">// more and more fields</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是另一个极端，图一时之省事。下次业务增长了，我们只需要往 payload 里无脑加数据就好了。一个接口服务公司，也不管别人需不需某个字段。</p>\n<p>看过书以后，我想只需再多走一步就可以优化这个接口。当入参为空时，我们返回所有数据，满足当前简单的业务需求。当接入方多了以后，用户只传他们关心的字段，我们就返回子集。这样的接口粒度更小，便于拓展，可以真正的作为提供方去满足业务方的需求:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// return all</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\">&#123; city &#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        city: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\">&#123; notInTheDoc &#125;</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// throw ArgumentsError</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是我看书过程中的一点粗浅的思考。关于接口安全和接口设计，我了解的不够系统和深入，也是今年希望补习的一个领域。</p>\n<p>现在看来，作者不愧是 TC39 成员，书中提到的 Iterator，Promise 等概念均在后来的 JS 正式版本中标准化了，我甚至还有点期望能出第二版。此外，明显感到看英文的速度下降，没有原来顺溜。接下来还要多看英文材料，这项技能不能丢。</p>\n<p>最后，昨天得知司徒正美猝然离世，大家聊起都唏嘘不已。这两年加班不少，收益无多，身体也不如从前。有些感慨，人生短短数十年，抓紧时间做些开心的事，读些无用的书，爱些可爱的人，足矣。</p>\n<p>2020 年 4 月 1 日</p>\n"},{"title":"Timers in JavaScript","abbrlink":"d1698058","date":"2018-10-20T23:55:28.000Z","_content":"\n#### Challenge 1\n\nprint the following 2 messages after their corresponding delays.\n\n- Print the message “_Hello after 4 seconds_” after 4 seconds\n- Print the message “_Hello after 8 seconds_” after 8 seconds.\n\n**Constraints**:\nYou can define only a single function in your solution, which includes inline functions. This means many `setTimeout` calls will have to use the exact same function.\n\n```javascript\nconst func = (time) => {\n  console.log(`Hello after ${time} seconds`);\n};\nsetTimeout(func, 4000, 4);\nsetTimeout(func, 8000, 8);\n```\n\nsetTimeout clearTimeout;\n\nsetInterval clearInterval\n\nsetImmediate clearImmediate\n\ndelay is not guarantee\n\n```js\nsetTimeout(() => console.log('Hello after 0.5 seconds. MAYBE!'), 500);\nfor (let i = 0; i < 1e10; i++) {\n  // Block Things Synchronously\n}\n```\n\n#### Challenge 2\n\nWrite a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.\n\n```js\nlet count = 0;\nconst itv = setInterval(() => {\n  console.log('hello world');\n  count += 1;\n  if (count === 5) {\n    console.log('done');\n    clearInterval(itv);\n  }\n}, 1000);\n```\n\n#### Challenge 3\n\nonly use `const`, can't use `let` or `var`.\n\nWrite a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.\n\nprint\n\nHello World. 1\nHello World. 2\nHello World. 3\n...\n\n```js\nconst recur = (delay) => {\n  setTimeout(() => {\n    console.log('Hello World.', delay);\n    recur(delay + 1);\n  }, delay * 1000);\n};\nrecur(1);\n```\n\n#### Challenge 4\n\nWrite a script to continuously print the message “_Hello World_” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.\n\nprint\n\n```\nHello World. 100  // At 100ms\nHello World. 100  // At 200ms\nHello World. 100  // At 300ms\nHello World. 100  // At 400ms\nHello World. 100  // At 500ms\nHello World. 200  // At 700ms\nHello World. 200  // At 900ms\nHello World. 200  // At 1100ms\n...\n```\n\n**Constraints:** You can use only `setInterval` calls (not `setTimeout`) and you can use only ONE if statement.\n\n```js\nlet lastIntervalId,\n  counter = 5;\nconst greeting = (delay) => {\n  if (counter === 5) {\n    clearInterval(lastIntervalId);\n    lastIntervalId = setInterval(() => {\n      console.log('Hello World. ', delay);\n      greeting(delay + 100);\n    }, delay);\n    counter = 0;\n  }\n  counter += 1;\n};\ngreeting(100);\n```\n\n#### original Article\n\n[JavaScript Timers: Everything you need to know](https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162)\n","source":"_posts/Timers-in-JavaScript.md","raw":"---\ntitle: Timers in JavaScript\ncategories:\n  - tech\ntags:\n  - javascript\n  - setTimeout\n  - setInterval\nabbrlink: d1698058\ndate: 2018-10-20 16:55:28\n---\n\n#### Challenge 1\n\nprint the following 2 messages after their corresponding delays.\n\n- Print the message “_Hello after 4 seconds_” after 4 seconds\n- Print the message “_Hello after 8 seconds_” after 8 seconds.\n\n**Constraints**:\nYou can define only a single function in your solution, which includes inline functions. This means many `setTimeout` calls will have to use the exact same function.\n\n```javascript\nconst func = (time) => {\n  console.log(`Hello after ${time} seconds`);\n};\nsetTimeout(func, 4000, 4);\nsetTimeout(func, 8000, 8);\n```\n\nsetTimeout clearTimeout;\n\nsetInterval clearInterval\n\nsetImmediate clearImmediate\n\ndelay is not guarantee\n\n```js\nsetTimeout(() => console.log('Hello after 0.5 seconds. MAYBE!'), 500);\nfor (let i = 0; i < 1e10; i++) {\n  // Block Things Synchronously\n}\n```\n\n#### Challenge 2\n\nWrite a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.\n\n```js\nlet count = 0;\nconst itv = setInterval(() => {\n  console.log('hello world');\n  count += 1;\n  if (count === 5) {\n    console.log('done');\n    clearInterval(itv);\n  }\n}, 1000);\n```\n\n#### Challenge 3\n\nonly use `const`, can't use `let` or `var`.\n\nWrite a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.\n\nprint\n\nHello World. 1\nHello World. 2\nHello World. 3\n...\n\n```js\nconst recur = (delay) => {\n  setTimeout(() => {\n    console.log('Hello World.', delay);\n    recur(delay + 1);\n  }, delay * 1000);\n};\nrecur(1);\n```\n\n#### Challenge 4\n\nWrite a script to continuously print the message “_Hello World_” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.\n\nprint\n\n```\nHello World. 100  // At 100ms\nHello World. 100  // At 200ms\nHello World. 100  // At 300ms\nHello World. 100  // At 400ms\nHello World. 100  // At 500ms\nHello World. 200  // At 700ms\nHello World. 200  // At 900ms\nHello World. 200  // At 1100ms\n...\n```\n\n**Constraints:** You can use only `setInterval` calls (not `setTimeout`) and you can use only ONE if statement.\n\n```js\nlet lastIntervalId,\n  counter = 5;\nconst greeting = (delay) => {\n  if (counter === 5) {\n    clearInterval(lastIntervalId);\n    lastIntervalId = setInterval(() => {\n      console.log('Hello World. ', delay);\n      greeting(delay + 100);\n    }, delay);\n    counter = 0;\n  }\n  counter += 1;\n};\ngreeting(100);\n```\n\n#### original Article\n\n[JavaScript Timers: Everything you need to know](https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162)\n","slug":"Timers-in-JavaScript","published":1,"updated":"2019-11-15T09:39:12.469Z","_id":"cka6xu6ws000a8cmhqojtklpq","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Challenge-1\"><a href=\"#Challenge-1\" class=\"headerlink\" title=\"Challenge 1\"></a>Challenge 1</h4><p>print the following 2 messages after their corresponding delays.</p>\n<ul>\n<li>Print the message “<em>Hello after 4 seconds</em>” after 4 seconds</li>\n<li>Print the message “<em>Hello after 8 seconds</em>” after 8 seconds.</li>\n</ul>\n<p><strong>Constraints</strong>:<br>You can define only a single function in your solution, which includes inline functions. This means many <code>setTimeout</code> calls will have to use the exact same function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello after <span class=\"subst\">$&#123;time&#125;</span> seconds`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(func, <span class=\"number\">4000</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">setTimeout(func, <span class=\"number\">8000</span>, <span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure>\n<p>setTimeout clearTimeout;</p>\n<p>setInterval clearInterval</p>\n<p>setImmediate clearImmediate</p>\n<p>delay is not guarantee</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello after 0.5 seconds. MAYBE!'</span>), <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Block Things Synchronously</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-2\"><a href=\"#Challenge-2\" class=\"headerlink\" title=\"Challenge 2\"></a>Challenge 2</h4><p>Write a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> itv = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">  count += <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>);</span><br><span class=\"line\">    clearInterval(itv);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-3\"><a href=\"#Challenge-3\" class=\"headerlink\" title=\"Challenge 3\"></a>Challenge 3</h4><p>only use <code>const</code>, can’t use <code>let</code> or <code>var</code>.</p>\n<p>Write a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.</p>\n<p>print</p>\n<p>Hello World. 1<br>Hello World. 2<br>Hello World. 3<br>…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> recur = <span class=\"function\">(<span class=\"params\">delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World.'</span>, delay);</span><br><span class=\"line\">    recur(delay + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;, delay * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">recur(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-4\"><a href=\"#Challenge-4\" class=\"headerlink\" title=\"Challenge 4\"></a>Challenge 4</h4><p>Write a script to continuously print the message “<em>Hello World</em>” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.</p>\n<p>print</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World. 100  &#x2F;&#x2F; At 100ms</span><br><span class=\"line\">Hello World. 100  &#x2F;&#x2F; At 200ms</span><br><span class=\"line\">Hello World. 100  &#x2F;&#x2F; At 300ms</span><br><span class=\"line\">Hello World. 100  &#x2F;&#x2F; At 400ms</span><br><span class=\"line\">Hello World. 100  &#x2F;&#x2F; At 500ms</span><br><span class=\"line\">Hello World. 200  &#x2F;&#x2F; At 700ms</span><br><span class=\"line\">Hello World. 200  &#x2F;&#x2F; At 900ms</span><br><span class=\"line\">Hello World. 200  &#x2F;&#x2F; At 1100ms</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>Constraints:</strong> You can use only <code>setInterval</code> calls (not <code>setTimeout</code>) and you can use only ONE if statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastIntervalId,</span><br><span class=\"line\">  counter = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"function\">(<span class=\"params\">delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (counter === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    clearInterval(lastIntervalId);</span><br><span class=\"line\">    lastIntervalId = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World. '</span>, delay);</span><br><span class=\"line\">      greeting(delay + <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">    counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  counter += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">greeting(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"original-Article\"><a href=\"#original-Article\" class=\"headerlink\" title=\"original Article\"></a>original Article</h4><p><a href=\"https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162\" target=\"_blank\" rel=\"noopener\">JavaScript Timers: Everything you need to know</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Challenge-1\"><a href=\"#Challenge-1\" class=\"headerlink\" title=\"Challenge 1\"></a>Challenge 1</h4><p>print the following 2 messages after their corresponding delays.</p>\n<ul>\n<li>Print the message “<em>Hello after 4 seconds</em>” after 4 seconds</li>\n<li>Print the message “<em>Hello after 8 seconds</em>” after 8 seconds.</li>\n</ul>\n<p><strong>Constraints</strong>:<br>You can define only a single function in your solution, which includes inline functions. This means many <code>setTimeout</code> calls will have to use the exact same function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello after <span class=\"subst\">$&#123;time&#125;</span> seconds`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(func, <span class=\"number\">4000</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">setTimeout(func, <span class=\"number\">8000</span>, <span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure>\n<p>setTimeout clearTimeout;</p>\n<p>setInterval clearInterval</p>\n<p>setImmediate clearImmediate</p>\n<p>delay is not guarantee</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello after 0.5 seconds. MAYBE!'</span>), <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Block Things Synchronously</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-2\"><a href=\"#Challenge-2\" class=\"headerlink\" title=\"Challenge 2\"></a>Challenge 2</h4><p>Write a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> itv = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">  count += <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>);</span><br><span class=\"line\">    clearInterval(itv);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-3\"><a href=\"#Challenge-3\" class=\"headerlink\" title=\"Challenge 3\"></a>Challenge 3</h4><p>only use <code>const</code>, can’t use <code>let</code> or <code>var</code>.</p>\n<p>Write a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.</p>\n<p>print</p>\n<p>Hello World. 1<br>Hello World. 2<br>Hello World. 3<br>…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> recur = <span class=\"function\">(<span class=\"params\">delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World.'</span>, delay);</span><br><span class=\"line\">    recur(delay + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;, delay * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">recur(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-4\"><a href=\"#Challenge-4\" class=\"headerlink\" title=\"Challenge 4\"></a>Challenge 4</h4><p>Write a script to continuously print the message “<em>Hello World</em>” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.</p>\n<p>print</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World. 100  &#x2F;&#x2F; At 100ms</span><br><span class=\"line\">Hello World. 100  &#x2F;&#x2F; At 200ms</span><br><span class=\"line\">Hello World. 100  &#x2F;&#x2F; At 300ms</span><br><span class=\"line\">Hello World. 100  &#x2F;&#x2F; At 400ms</span><br><span class=\"line\">Hello World. 100  &#x2F;&#x2F; At 500ms</span><br><span class=\"line\">Hello World. 200  &#x2F;&#x2F; At 700ms</span><br><span class=\"line\">Hello World. 200  &#x2F;&#x2F; At 900ms</span><br><span class=\"line\">Hello World. 200  &#x2F;&#x2F; At 1100ms</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>Constraints:</strong> You can use only <code>setInterval</code> calls (not <code>setTimeout</code>) and you can use only ONE if statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastIntervalId,</span><br><span class=\"line\">  counter = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"function\">(<span class=\"params\">delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (counter === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    clearInterval(lastIntervalId);</span><br><span class=\"line\">    lastIntervalId = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World. '</span>, delay);</span><br><span class=\"line\">      greeting(delay + <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">    counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  counter += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">greeting(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"original-Article\"><a href=\"#original-Article\" class=\"headerlink\" title=\"original Article\"></a>original Article</h4><p><a href=\"https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162\" target=\"_blank\" rel=\"noopener\">JavaScript Timers: Everything you need to know</a></p>\n"},{"title":"华为面试","abbrlink":"f822c036","date":"2017-01-23T23:53:12.000Z","_content":"\n上周过的有点胆战心惊。\n\n周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。\n\n总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k 的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。\n\n其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。\n\n最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。\n","source":"_posts/interview-with-huawei.md","raw":"---\ntitle: 华为面试\ncategories:\n  - life\nabbrlink: f822c036\ndate: 2017-01-23 15:53:12\ntags:\n---\n\n上周过的有点胆战心惊。\n\n周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。\n\n总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k 的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。\n\n其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。\n\n最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。\n","slug":"interview-with-huawei","published":1,"updated":"2019-11-26T03:25:38.815Z","_id":"cka6xu71j000b8cmhp430j98e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上周过的有点胆战心惊。</p>\n<p>周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。</p>\n<p>总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k 的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。</p>\n<p>其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。</p>\n<p>最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上周过的有点胆战心惊。</p>\n<p>周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。</p>\n<p>总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k 的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。</p>\n<p>其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。</p>\n<p>最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。</p>\n"},{"title":"三月总结","abbrlink":"3cf64c81","date":"2018-04-02T16:24:38.000Z","_content":"\n时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。\n\n今天看 medium，发现关于成功有个观点写的特别好。It's not a  goal, it's a lifestyle. It's not something they do sometimes. It's something they do all the time -- because it's part of who they are.\n\n反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。\n\n之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。\n\n所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.\n\nAnyway, 首先思想得转变过来，再来谈如何训练自己的习惯。\n\n四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。\n\n第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。\n\n最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。\n\n就先这样。\n","source":"_posts/march-summary.md","raw":"---\ntitle: 三月总结\ncategories:\n  - life\nabbrlink: 3cf64c81\ndate: 2018-04-02 09:24:38\ntags:\n---\n\n时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。\n\n今天看 medium，发现关于成功有个观点写的特别好。It's not a  goal, it's a lifestyle. It's not something they do sometimes. It's something they do all the time -- because it's part of who they are.\n\n反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。\n\n之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。\n\n所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.\n\nAnyway, 首先思想得转变过来，再来谈如何训练自己的习惯。\n\n四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。\n\n第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。\n\n最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。\n\n就先这样。\n","slug":"march-summary","published":1,"updated":"2019-11-26T03:25:25.508Z","_id":"cka6xu71u000l8cmhi4wlksh7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。</p>\n<p>今天看 medium，发现关于成功有个观点写的特别好。It’s not a  goal, it’s a lifestyle. It’s not something they do sometimes. It’s something they do all the time – because it’s part of who they are.</p>\n<p>反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。</p>\n<p>之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。</p>\n<p>所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.</p>\n<p>Anyway, 首先思想得转变过来，再来谈如何训练自己的习惯。</p>\n<p>四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。</p>\n<p>第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。</p>\n<p>最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。</p>\n<p>就先这样。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。</p>\n<p>今天看 medium，发现关于成功有个观点写的特别好。It’s not a  goal, it’s a lifestyle. It’s not something they do sometimes. It’s something they do all the time – because it’s part of who they are.</p>\n<p>反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。</p>\n<p>之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。</p>\n<p>所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.</p>\n<p>Anyway, 首先思想得转变过来，再来谈如何训练自己的习惯。</p>\n<p>四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。</p>\n<p>第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。</p>\n<p>最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。</p>\n<p>就先这样。</p>\n"},{"title":"新工作","abbrlink":"fe5ddefd","date":"2017-02-05T23:49:30.000Z","_content":"\n终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。\n\n新的工作还是要居安思危。从明天开始，得好好刷刷题。\n","source":"_posts/new-job.md","raw":"---\ntitle: 新工作\ncategories:\n  - life\nabbrlink: fe5ddefd\ndate: 2017-02-05 15:49:30\ntags:\n---\n\n终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。\n\n新的工作还是要居安思危。从明天开始，得好好刷刷题。\n","slug":"new-job","published":1,"updated":"2019-11-26T03:24:11.227Z","_id":"cka6xu71w000m8cmh56i2oa8i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。</p>\n<p>新的工作还是要居安思危。从明天开始，得好好刷刷题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。</p>\n<p>新的工作还是要居安思危。从明天开始，得好好刷刷题。</p>\n"},{"title":"Node.js modules","abbrlink":"c505c167","date":"2019-02-19T01:11:02.000Z","_content":"\n#### `module.exports` and `exports`\n\n`exports` is a reference to the module.exports that is shorter to type.\n\nThe `exports` variable is available within a module's file-level scope, and is assigned the value of `module.exports` before the module is evaluated.\n\nIt allows a shortcut, so that `module.exports.f = ...` can be written more succinctly as `exports.f = ...`. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to `module.exports`:\n\n```js\n// a.js\nfunction foo() {\n  console.log('foo');\n}\n\nfunction bar() {\n  console.log('bar');\n}\n\nexports.foo = foo;\nexports.bar = bar;\n\n// or\nmodule.exports = {\n  foo: foo,\n  bar: bar,\n};\n\n// This won't work! It assigned a new reference to exports variable\nexports = {\n  foo: foo,\n  bar: bar,\n};\n```\n\n#### Import\n\nWhen loaded via `import` these modules will provide a single `default` export representing the value of module.exports at the time they finished evaluating.\n\n```js\n// foo.js\nmodule.exports = { one: 1 };\n\n// bar.mjs\nimport foo from './foo.js';\nfoo.one === 1; // true\n```\n\n#### Caching\n\nModules are cached after the first time they are loaded. This means (among other things) that every call to `require('foo')` will get exactly the same object returned, if it would resolve to the same file.\n\nProvided `require.cache` is not modified, multiple calls to `require('foo')` will not cause the module code to be executed multiple times.\n\nTo have a module execute code multiple times, export a function, and call that function.\n\n##### Caveats\n\nModules are cached based on their resolved filename.\n\nCaching is case-sensitive. For example, `require('./foo')` and `require('./FOO')` return two different objects, irrespective of whether or not `./foo` and `./FOO` are the same file.\n\n#### Cycles\n\n##### why support\n\n> Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.\n>\n> -- <cite>Axel Rauschmayer</cite>\n\nI think this example from nodejs document can clearly explain cyclic dependencies. <https://nodejs.org/api/modules.html#modules_cycles>\n\n```js\n// a.js\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n\n// b.js\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n\n// main.js\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done = %j, b.done = %j', a.done, b.done);\n```\n\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`. At that point, `b.js` tries to load `a.js`. In order to prevent an **infinite loop**, an **unfinished copy** of the `a.js` exports object is returned to the `b.js` module. `b.js` then finishes loading, and its exports object is provided to the `a.js` module.\n\nThe output is\n\n```bash\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\n```\n\n#### related reading material\n\n1. nodejs document, [Modules](https://nodejs.org/api/modules.html)\n\n2. Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n","source":"_posts/node-modules.md","raw":"---\ntitle: Node.js modules\ncategories:\n  - web\ntags:\n  - nodejs\n  - modules\n  - exports\n  - javascript\nabbrlink: c505c167\ndate: 2019-02-18 17:11:02\n---\n\n#### `module.exports` and `exports`\n\n`exports` is a reference to the module.exports that is shorter to type.\n\nThe `exports` variable is available within a module's file-level scope, and is assigned the value of `module.exports` before the module is evaluated.\n\nIt allows a shortcut, so that `module.exports.f = ...` can be written more succinctly as `exports.f = ...`. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to `module.exports`:\n\n```js\n// a.js\nfunction foo() {\n  console.log('foo');\n}\n\nfunction bar() {\n  console.log('bar');\n}\n\nexports.foo = foo;\nexports.bar = bar;\n\n// or\nmodule.exports = {\n  foo: foo,\n  bar: bar,\n};\n\n// This won't work! It assigned a new reference to exports variable\nexports = {\n  foo: foo,\n  bar: bar,\n};\n```\n\n#### Import\n\nWhen loaded via `import` these modules will provide a single `default` export representing the value of module.exports at the time they finished evaluating.\n\n```js\n// foo.js\nmodule.exports = { one: 1 };\n\n// bar.mjs\nimport foo from './foo.js';\nfoo.one === 1; // true\n```\n\n#### Caching\n\nModules are cached after the first time they are loaded. This means (among other things) that every call to `require('foo')` will get exactly the same object returned, if it would resolve to the same file.\n\nProvided `require.cache` is not modified, multiple calls to `require('foo')` will not cause the module code to be executed multiple times.\n\nTo have a module execute code multiple times, export a function, and call that function.\n\n##### Caveats\n\nModules are cached based on their resolved filename.\n\nCaching is case-sensitive. For example, `require('./foo')` and `require('./FOO')` return two different objects, irrespective of whether or not `./foo` and `./FOO` are the same file.\n\n#### Cycles\n\n##### why support\n\n> Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.\n>\n> -- <cite>Axel Rauschmayer</cite>\n\nI think this example from nodejs document can clearly explain cyclic dependencies. <https://nodejs.org/api/modules.html#modules_cycles>\n\n```js\n// a.js\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n\n// b.js\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n\n// main.js\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done = %j, b.done = %j', a.done, b.done);\n```\n\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`. At that point, `b.js` tries to load `a.js`. In order to prevent an **infinite loop**, an **unfinished copy** of the `a.js` exports object is returned to the `b.js` module. `b.js` then finishes loading, and its exports object is provided to the `a.js` module.\n\nThe output is\n\n```bash\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\n```\n\n#### related reading material\n\n1. nodejs document, [Modules](https://nodejs.org/api/modules.html)\n\n2. Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n","slug":"node-modules","published":1,"updated":"2019-11-15T09:39:12.477Z","_id":"cka6xu71y000p8cmhie3hdsvx","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"module-exports-and-exports\"><a href=\"#module-exports-and-exports\" class=\"headerlink\" title=\"module.exports and exports\"></a><code>module.exports</code> and <code>exports</code></h4><p><code>exports</code> is a reference to the module.exports that is shorter to type.</p>\n<p>The <code>exports</code> variable is available within a module’s file-level scope, and is assigned the value of <code>module.exports</code> before the module is evaluated.</p>\n<p>It allows a shortcut, so that <code>module.exports.f = ...</code> can be written more succinctly as <code>exports.f = ...</code>. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to <code>module.exports</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.foo = foo;</span><br><span class=\"line\">exports.bar = bar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  foo: foo,</span><br><span class=\"line\">  bar: bar,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This won't work! It assigned a new reference to exports variable</span></span><br><span class=\"line\">exports = &#123;</span><br><span class=\"line\">  foo: foo,</span><br><span class=\"line\">  bar: bar,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"Import\"></a>Import</h4><p>When loaded via <code>import</code> these modules will provide a single <code>default</code> export representing the value of module.exports at the time they finished evaluating.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; <span class=\"attr\">one</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bar.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo.js'</span>;</span><br><span class=\"line\">foo.one === <span class=\"number\">1</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h4><p>Modules are cached after the first time they are loaded. This means (among other things) that every call to <code>require(&#39;foo&#39;)</code> will get exactly the same object returned, if it would resolve to the same file.</p>\n<p>Provided <code>require.cache</code> is not modified, multiple calls to <code>require(&#39;foo&#39;)</code> will not cause the module code to be executed multiple times.</p>\n<p>To have a module execute code multiple times, export a function, and call that function.</p>\n<h5 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats\"></a>Caveats</h5><p>Modules are cached based on their resolved filename.</p>\n<p>Caching is case-sensitive. For example, <code>require(&#39;./foo&#39;)</code> and <code>require(&#39;./FOO&#39;)</code> return two different objects, irrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>\n<h4 id=\"Cycles\"><a href=\"#Cycles\" class=\"headerlink\" title=\"Cycles\"></a>Cycles</h4><h5 id=\"why-support\"><a href=\"#why-support\" class=\"headerlink\" title=\"why support\"></a>why support</h5><blockquote>\n<p>Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.</p>\n<p>– <cite>Axel Rauschmayer</cite></p>\n</blockquote>\n<p>I think this example from nodejs document can clearly explain cyclic dependencies. <a href=\"https://nodejs.org/api/modules.html#modules_cycles\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/api/modules.html#modules_cycles</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in a, b.done = %j'</span>, b.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in b, a.done = %j'</span>, a.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main starting'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in main, a.done = %j, b.done = %j'</span>, a.done, b.done);</span><br></pre></td></tr></table></figure>\n<p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an <strong>infinite loop</strong>, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its exports object is provided to the <code>a.js</code> module.</p>\n<p>The output is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">main starting</span><br><span class=\"line\">a starting</span><br><span class=\"line\">b starting</span><br><span class=\"line\"><span class=\"keyword\">in</span> b, a.done = <span class=\"literal\">false</span></span><br><span class=\"line\">b <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> a, b.done = <span class=\"literal\">true</span></span><br><span class=\"line\">a <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> main, a.done = <span class=\"literal\">true</span>, b.done = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"module-exports-and-exports\"><a href=\"#module-exports-and-exports\" class=\"headerlink\" title=\"module.exports and exports\"></a><code>module.exports</code> and <code>exports</code></h4><p><code>exports</code> is a reference to the module.exports that is shorter to type.</p>\n<p>The <code>exports</code> variable is available within a module’s file-level scope, and is assigned the value of <code>module.exports</code> before the module is evaluated.</p>\n<p>It allows a shortcut, so that <code>module.exports.f = ...</code> can be written more succinctly as <code>exports.f = ...</code>. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to <code>module.exports</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.foo = foo;</span><br><span class=\"line\">exports.bar = bar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  foo: foo,</span><br><span class=\"line\">  bar: bar,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This won't work! It assigned a new reference to exports variable</span></span><br><span class=\"line\">exports = &#123;</span><br><span class=\"line\">  foo: foo,</span><br><span class=\"line\">  bar: bar,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"Import\"></a>Import</h4><p>When loaded via <code>import</code> these modules will provide a single <code>default</code> export representing the value of module.exports at the time they finished evaluating.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; <span class=\"attr\">one</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bar.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo.js'</span>;</span><br><span class=\"line\">foo.one === <span class=\"number\">1</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h4><p>Modules are cached after the first time they are loaded. This means (among other things) that every call to <code>require(&#39;foo&#39;)</code> will get exactly the same object returned, if it would resolve to the same file.</p>\n<p>Provided <code>require.cache</code> is not modified, multiple calls to <code>require(&#39;foo&#39;)</code> will not cause the module code to be executed multiple times.</p>\n<p>To have a module execute code multiple times, export a function, and call that function.</p>\n<h5 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats\"></a>Caveats</h5><p>Modules are cached based on their resolved filename.</p>\n<p>Caching is case-sensitive. For example, <code>require(&#39;./foo&#39;)</code> and <code>require(&#39;./FOO&#39;)</code> return two different objects, irrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>\n<h4 id=\"Cycles\"><a href=\"#Cycles\" class=\"headerlink\" title=\"Cycles\"></a>Cycles</h4><h5 id=\"why-support\"><a href=\"#why-support\" class=\"headerlink\" title=\"why support\"></a>why support</h5><blockquote>\n<p>Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.</p>\n<p>– <cite>Axel Rauschmayer</cite></p>\n</blockquote>\n<p>I think this example from nodejs document can clearly explain cyclic dependencies. <a href=\"https://nodejs.org/api/modules.html#modules_cycles\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/api/modules.html#modules_cycles</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in a, b.done = %j'</span>, b.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in b, a.done = %j'</span>, a.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main starting'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in main, a.done = %j, b.done = %j'</span>, a.done, b.done);</span><br></pre></td></tr></table></figure>\n<p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an <strong>infinite loop</strong>, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its exports object is provided to the <code>a.js</code> module.</p>\n<p>The output is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">main starting</span><br><span class=\"line\">a starting</span><br><span class=\"line\">b starting</span><br><span class=\"line\"><span class=\"keyword\">in</span> b, a.done = <span class=\"literal\">false</span></span><br><span class=\"line\">b <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> a, b.done = <span class=\"literal\">true</span></span><br><span class=\"line\">a <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> main, a.done = <span class=\"literal\">true</span>, b.done = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></p>\n</li>\n</ol>\n"},{"title":"Iterators and generators","abbrlink":"f1b3125a","date":"2018-05-01T08:19:28.000Z","_content":"\n#### Iterators\n\nIterators are objects with a specific interface designed for iteration.\n\nIn JavaScript an iterator is an object that provides a `next()` method which returns the next item in the sequence. This method returns an object with two properties: `done` and `value`.\n\nBelow is an implementation of iterator in ES5.\n\n```js\nfunction createIterator(items) {\n  var i = 0;\n  return {\n    next: function() {\n      var done = i >= items.length;\n      var value = !done ? items[i++] : undefined;\n\n      return {\n        done: done,\n        value: value,\n      };\n    },\n  };\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { done: false, value: 1 }\nconsole.log(iterator.next()); // { done: false, value: 2 }\nconsole.log(iterator.next()); // { done: false, value: 3 }\nconsole.log(iterator.next()); // { done: true, value: undefined }\n```\n\n#### Generators\n\nA generator is a function that returns an iterator. Generator functions are indicated by an asterisk (_) after the `function` key word and use the `yield` keyword. It doesn't matter how many whitespace between `function` and `_`. On MDN, the`_`is right next to`function`, however in Zakas's book, the`_` is just before the function name.\n\nGenerators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\n\n> you can use `yield` only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.\n\n```js\n// method 1: function declaration\nfunction* createIterator1(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n}\n\n// method 2: function expression\nlet createIterator2 = function*(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n};\n\nconst iterator = createIterator2([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n> create an arrow function that is also a generator is not possible.\n\n#### Generator Object Method\n\nSince generators are just functions. You can add generators to objects.\n\n```js\n// method 1: es5 style object literal\nlet obj1 = {\n  createIterator: function*(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\n// method 2: es6 shorthand\nlet obj2 = {\n  *createIterator(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\nconst iterator = obj2.createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n#### Iterable and for-of loops\n\n`iterable protocol`: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a `for..of` construct.\n\nAn iterable is an object with a `Symbol.iterator` property.\n\nThese are iterables:\n\n- Arrays and TypedArrays\n- Maps\n- Sets\n- Strings\n- `arguments`\n- DOM Elements `NodeList`\n\n> All iterators created by generators are also iterables, because generators assign the `Symbol.iterator` property by default.\n\n##### Accessing the default Iterator\n\n```js\nlet values = [1, 2, 3];\n\n// same process happens behind the scene when using for-of loop\nlet iterator = values[Symbol.iterator]();\n\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\n\n// check\nfunction isIterable(object) {\n  return typeof object[Symbol.iterator] === 'function';\n}\n\nconsole.log(isIterable([1, 2, 3])); // true\nconsole.log(isIterable('Hello')); // true\nconsole.log(isIterable(new Map())); // true\nconsole.log(isIterable(new Set())); // true\nconsole.log(isIterable(new WeakMap())); // false\nconsole.log(isIterable(new WeakSet())); // false\n```\n\n#### Creating Iterator\n\n```js\nlet collection = {\n  items: [],\n  *[Symbol.iterator]() {\n    for (let item of this.items) {\n      yield item;\n    }\n  },\n};\n\ncollection.items.push(1);\ncollection.items.push(2);\ncollection.items.push(3);\n\nfor (let x of collection) {\n  console.log(x);\n}\n\n// 1\n// 2\n// 3\n```\n\n#### Built-in Iterators\n\n#### collection iterators\n\n- `entries()`\n- `values()`\n- `keys()`\n\n##### `entries()`\n\n- array: [index, value]\n- set: [value, value]\n- map: [key, value]\n\n##### `values()`\n\n- array: value\n- set: value\n- map: value\n\n##### `keys()`\n\n- array: index\n- set: value\n- map: key\n\n#### Default Iterators for Collection Types\n\n- array: `values()`\n- set: `values()`\n- map: `entries()`\n\n```js\n// destructuring and for-of loop\nlet data = new Map();\n\ndata.set('title', 'Understanding ECMAScript 6');\ndata.set('format', 'ebook');\n\n// same as using data.entries()\nfor (let [key, value] of data) {\n  console.log(key + '=' + value);\n}\n```\n\n- NodeList\n\n```js\nvar divs = document.getElementsByTagName('div');\n\nfor (let div of divs) {\n  console.log(div.id);\n}\n```\n\n#### Constructs accept iterables\n\nSome other constructs in JS that use iterables are:\n\n- `for-of`\n- Destructuring of Arrays\n- The spread operator (`…`)\n- `Promise.all` and `Promise.race` accept iterables over Promises.\n- Maps and Sets\n\n```js\nconst map = new Map([[1, 'one'], [2, 'two']]);\nmap.get(1)\n// one\nconst set = new Set(['a', 'b', 'c]);\nset.has('c');\n// true\n```\n\n#### Advanced Iterator Functionality\n\n##### passing arguments to Iterators\n\nThe `next()` method also accepts a value which can be used to modify the internal state of the generator. A value passed to `next()` will be treated as the result of the last yield expression that paused the generator.\n\n```js\nfunction* createIterator() {\n  let first = yield 1;\n  let second = yield first + 2; // 4 + 2\n  yield second + 3; // 5 + 3\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next(4)); // \"{ value: 6, done: false }\"\nconsole.log(iterator.next(5)); // \"{ value: 8, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n#### Throw and Return\n\n- throw\n\nResume the execution of a generator by throwing an error into it and returns an object with two properties done and value.\n\n```js\nfunction* gen() {\n  while (true) {\n    try {\n      yield 42;\n    } catch (e) {\n      console.log('Error caught!');\n    }\n  }\n}\n\nvar g = gen();\ng.next();\n// { value: 42, done: false }\ng.throw(new Error('Something went wrong'));\n// \"Error caught!\"\n// { value: 42, done: false }\n```\n\n- return\n\nReturn the given value and finishes the generator.\n\n```js\nfunction* createIterator() {\n  yield 1;\n  return;\n  yield 2;\n  yield 3;\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n#### Delegating generators\n\n```js\nfunction* g1() {\n  yield 1;\n  yield 2;\n}\n\nfunction* g2() {\n  yield 0;\n  yield* g1();\n  yield* [3, 4];\n  yield* '56';\n  yield* Array.from(arguments);\n}\n\nvar iterator = g2(7, 8);\n\nconsole.log(iterator.next()); // {value: 0, done: false}\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: 4, done: false}\nconsole.log(iterator.next()); // {value: '5', done: false}\nconsole.log(iterator.next()); // {value: '6', done: false}\nconsole.log(iterator.next()); // {value: 7, done: false}\nconsole.log(iterator.next()); // {value: 8, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```\n\n`yield*` is an expression, not a statement, so it evaluates to a value.\n\n```js\nfunction* g4() {\n  yield* [1, 2, 3];\n  return 'foo';\n}\n\nvar result;\n\nfunction* g5() {\n  result = yield* g4();\n}\n\nvar iterator = g5();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true},\n// g4() returned {value: 'foo', done: true} at this point\n\nconsole.log(result); // \"foo\"\n```\n\n#### Asynchronous Task Running\n\n##### tradition callback\n\n```js\nlet fs = require('fs');\n\nfs.readFile('config.json', function(err, contents) {\n  if (err) {\n    throw err;\n  }\n\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n#### Asynchronous task runner\n\n```js\nfunction run(taskDef) {\n  // create the iterator, make available elsewhere\n  let task = taskDef();\n\n  // start the task\n  let result = task.next();\n\n  // recursive function to keep calling next()\n  function step() {\n    // if there's more to do\n    if (!result.done) {\n      if (typeof result.value === 'function') {\n        result.value(function(err, data) {\n          if (err) {\n            result = task.throw(err);\n            return;\n          }\n\n          result = task.next(data);\n          step();\n        });\n      } else {\n        result = task.next(result.value);\n        step();\n      }\n    }\n  }\n\n  // start the process\n  step();\n}\n\nlet fs = require('fs');\n\nfunction readFile(filename) {\n  return function(callback) {\n    fs.readFile(filename, callback);\n  };\n}\n\nrun(function*() {\n  let contents = yield readFile('config.json');\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n#### Pros and Cons\n\nPros:\n\n- Lazy Evaluation: It is calculated as we demand it;\n- Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.\n\nCons:\n\n- Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.\n- Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.\n\n#### Related Reading\n\n1.  Nicholas C. Zakas, [Iterators and Generators](https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators)\n\n2.  Axel Rauschmayer, [Iterables and iterators](http://exploringjs.com/es6/ch_iteration.html)\n\n3.  Axel Rauschmayer, [Generators](http://exploringjs.com/es6/ch_generators.html)\n\n4.  Brandon Morelli, [A Simple Guide to ES6 Iterators in JavaScript with Examples](https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e)\n\n5.  Arfat Salman, [Understanding Generators in ES6 JavaScript with Examples](https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5)\n\n6.  MDN, [Iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n\n7.  MDN, [Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n","source":"_posts/Iterators-and-generators.md","raw":"---\ntitle: Iterators and generators\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - iterators\n  - generators\nabbrlink: f1b3125a\ndate: 2018-05-01 01:19:28\n---\n\n#### Iterators\n\nIterators are objects with a specific interface designed for iteration.\n\nIn JavaScript an iterator is an object that provides a `next()` method which returns the next item in the sequence. This method returns an object with two properties: `done` and `value`.\n\nBelow is an implementation of iterator in ES5.\n\n```js\nfunction createIterator(items) {\n  var i = 0;\n  return {\n    next: function() {\n      var done = i >= items.length;\n      var value = !done ? items[i++] : undefined;\n\n      return {\n        done: done,\n        value: value,\n      };\n    },\n  };\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { done: false, value: 1 }\nconsole.log(iterator.next()); // { done: false, value: 2 }\nconsole.log(iterator.next()); // { done: false, value: 3 }\nconsole.log(iterator.next()); // { done: true, value: undefined }\n```\n\n#### Generators\n\nA generator is a function that returns an iterator. Generator functions are indicated by an asterisk (_) after the `function` key word and use the `yield` keyword. It doesn't matter how many whitespace between `function` and `_`. On MDN, the`_`is right next to`function`, however in Zakas's book, the`_` is just before the function name.\n\nGenerators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\n\n> you can use `yield` only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.\n\n```js\n// method 1: function declaration\nfunction* createIterator1(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n}\n\n// method 2: function expression\nlet createIterator2 = function*(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n};\n\nconst iterator = createIterator2([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n> create an arrow function that is also a generator is not possible.\n\n#### Generator Object Method\n\nSince generators are just functions. You can add generators to objects.\n\n```js\n// method 1: es5 style object literal\nlet obj1 = {\n  createIterator: function*(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\n// method 2: es6 shorthand\nlet obj2 = {\n  *createIterator(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\nconst iterator = obj2.createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n#### Iterable and for-of loops\n\n`iterable protocol`: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a `for..of` construct.\n\nAn iterable is an object with a `Symbol.iterator` property.\n\nThese are iterables:\n\n- Arrays and TypedArrays\n- Maps\n- Sets\n- Strings\n- `arguments`\n- DOM Elements `NodeList`\n\n> All iterators created by generators are also iterables, because generators assign the `Symbol.iterator` property by default.\n\n##### Accessing the default Iterator\n\n```js\nlet values = [1, 2, 3];\n\n// same process happens behind the scene when using for-of loop\nlet iterator = values[Symbol.iterator]();\n\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\n\n// check\nfunction isIterable(object) {\n  return typeof object[Symbol.iterator] === 'function';\n}\n\nconsole.log(isIterable([1, 2, 3])); // true\nconsole.log(isIterable('Hello')); // true\nconsole.log(isIterable(new Map())); // true\nconsole.log(isIterable(new Set())); // true\nconsole.log(isIterable(new WeakMap())); // false\nconsole.log(isIterable(new WeakSet())); // false\n```\n\n#### Creating Iterator\n\n```js\nlet collection = {\n  items: [],\n  *[Symbol.iterator]() {\n    for (let item of this.items) {\n      yield item;\n    }\n  },\n};\n\ncollection.items.push(1);\ncollection.items.push(2);\ncollection.items.push(3);\n\nfor (let x of collection) {\n  console.log(x);\n}\n\n// 1\n// 2\n// 3\n```\n\n#### Built-in Iterators\n\n#### collection iterators\n\n- `entries()`\n- `values()`\n- `keys()`\n\n##### `entries()`\n\n- array: [index, value]\n- set: [value, value]\n- map: [key, value]\n\n##### `values()`\n\n- array: value\n- set: value\n- map: value\n\n##### `keys()`\n\n- array: index\n- set: value\n- map: key\n\n#### Default Iterators for Collection Types\n\n- array: `values()`\n- set: `values()`\n- map: `entries()`\n\n```js\n// destructuring and for-of loop\nlet data = new Map();\n\ndata.set('title', 'Understanding ECMAScript 6');\ndata.set('format', 'ebook');\n\n// same as using data.entries()\nfor (let [key, value] of data) {\n  console.log(key + '=' + value);\n}\n```\n\n- NodeList\n\n```js\nvar divs = document.getElementsByTagName('div');\n\nfor (let div of divs) {\n  console.log(div.id);\n}\n```\n\n#### Constructs accept iterables\n\nSome other constructs in JS that use iterables are:\n\n- `for-of`\n- Destructuring of Arrays\n- The spread operator (`…`)\n- `Promise.all` and `Promise.race` accept iterables over Promises.\n- Maps and Sets\n\n```js\nconst map = new Map([[1, 'one'], [2, 'two']]);\nmap.get(1)\n// one\nconst set = new Set(['a', 'b', 'c]);\nset.has('c');\n// true\n```\n\n#### Advanced Iterator Functionality\n\n##### passing arguments to Iterators\n\nThe `next()` method also accepts a value which can be used to modify the internal state of the generator. A value passed to `next()` will be treated as the result of the last yield expression that paused the generator.\n\n```js\nfunction* createIterator() {\n  let first = yield 1;\n  let second = yield first + 2; // 4 + 2\n  yield second + 3; // 5 + 3\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next(4)); // \"{ value: 6, done: false }\"\nconsole.log(iterator.next(5)); // \"{ value: 8, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n#### Throw and Return\n\n- throw\n\nResume the execution of a generator by throwing an error into it and returns an object with two properties done and value.\n\n```js\nfunction* gen() {\n  while (true) {\n    try {\n      yield 42;\n    } catch (e) {\n      console.log('Error caught!');\n    }\n  }\n}\n\nvar g = gen();\ng.next();\n// { value: 42, done: false }\ng.throw(new Error('Something went wrong'));\n// \"Error caught!\"\n// { value: 42, done: false }\n```\n\n- return\n\nReturn the given value and finishes the generator.\n\n```js\nfunction* createIterator() {\n  yield 1;\n  return;\n  yield 2;\n  yield 3;\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n#### Delegating generators\n\n```js\nfunction* g1() {\n  yield 1;\n  yield 2;\n}\n\nfunction* g2() {\n  yield 0;\n  yield* g1();\n  yield* [3, 4];\n  yield* '56';\n  yield* Array.from(arguments);\n}\n\nvar iterator = g2(7, 8);\n\nconsole.log(iterator.next()); // {value: 0, done: false}\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: 4, done: false}\nconsole.log(iterator.next()); // {value: '5', done: false}\nconsole.log(iterator.next()); // {value: '6', done: false}\nconsole.log(iterator.next()); // {value: 7, done: false}\nconsole.log(iterator.next()); // {value: 8, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```\n\n`yield*` is an expression, not a statement, so it evaluates to a value.\n\n```js\nfunction* g4() {\n  yield* [1, 2, 3];\n  return 'foo';\n}\n\nvar result;\n\nfunction* g5() {\n  result = yield* g4();\n}\n\nvar iterator = g5();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true},\n// g4() returned {value: 'foo', done: true} at this point\n\nconsole.log(result); // \"foo\"\n```\n\n#### Asynchronous Task Running\n\n##### tradition callback\n\n```js\nlet fs = require('fs');\n\nfs.readFile('config.json', function(err, contents) {\n  if (err) {\n    throw err;\n  }\n\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n#### Asynchronous task runner\n\n```js\nfunction run(taskDef) {\n  // create the iterator, make available elsewhere\n  let task = taskDef();\n\n  // start the task\n  let result = task.next();\n\n  // recursive function to keep calling next()\n  function step() {\n    // if there's more to do\n    if (!result.done) {\n      if (typeof result.value === 'function') {\n        result.value(function(err, data) {\n          if (err) {\n            result = task.throw(err);\n            return;\n          }\n\n          result = task.next(data);\n          step();\n        });\n      } else {\n        result = task.next(result.value);\n        step();\n      }\n    }\n  }\n\n  // start the process\n  step();\n}\n\nlet fs = require('fs');\n\nfunction readFile(filename) {\n  return function(callback) {\n    fs.readFile(filename, callback);\n  };\n}\n\nrun(function*() {\n  let contents = yield readFile('config.json');\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n#### Pros and Cons\n\nPros:\n\n- Lazy Evaluation: It is calculated as we demand it;\n- Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.\n\nCons:\n\n- Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.\n- Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.\n\n#### Related Reading\n\n1.  Nicholas C. Zakas, [Iterators and Generators](https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators)\n\n2.  Axel Rauschmayer, [Iterables and iterators](http://exploringjs.com/es6/ch_iteration.html)\n\n3.  Axel Rauschmayer, [Generators](http://exploringjs.com/es6/ch_generators.html)\n\n4.  Brandon Morelli, [A Simple Guide to ES6 Iterators in JavaScript with Examples](https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e)\n\n5.  Arfat Salman, [Understanding Generators in ES6 JavaScript with Examples](https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5)\n\n6.  MDN, [Iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n\n7.  MDN, [Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n","slug":"Iterators-and-generators","published":1,"updated":"2019-11-15T09:39:12.466Z","_id":"cka6xu71z000q8cmhgb6in46l","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Iterators\"><a href=\"#Iterators\" class=\"headerlink\" title=\"Iterators\"></a>Iterators</h4><p>Iterators are objects with a specific interface designed for iteration.</p>\n<p>In JavaScript an iterator is an object that provides a <code>next()</code> method which returns the next item in the sequence. This method returns an object with two properties: <code>done</code> and <code>value</code>.</p>\n<p>Below is an implementation of iterator in ES5.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIterator</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> done = i &gt;= items.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = !done ? items[i++] : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        done: done,</span><br><span class=\"line\">        value: value,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 1 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 2 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h4><p>A generator is a function that returns an iterator. Generator functions are indicated by an asterisk (<em>) after the <code>function</code> key word and use the <code>yield</code> keyword. It doesn’t matter how many whitespace between <code>function</code> and `</em><code>. On MDN, the</code><em><code>is right next to</code>function<code>, however in Zakas&#39;s book, the</code></em>` is just before the function name.</p>\n<p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p>\n<blockquote>\n<p>you can use <code>yield</code> only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: function declaration</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator1</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: function expression</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createIterator2 = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = createIterator2([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>create an arrow function that is also a generator is not possible.</p>\n</blockquote>\n<h4 id=\"Generator-Object-Method\"><a href=\"#Generator-Object-Method\" class=\"headerlink\" title=\"Generator Object Method\"></a>Generator Object Method</h4><p>Since generators are just functions. You can add generators to objects.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: es5 style object literal</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  createIterator: <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: es6 shorthand</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  *createIterator(items) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = obj2.createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Iterable-and-for-of-loops\"><a href=\"#Iterable-and-for-of-loops\" class=\"headerlink\" title=\"Iterable and for-of loops\"></a>Iterable and for-of loops</h4><p><code>iterable protocol</code>: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a <code>for..of</code> construct.</p>\n<p>An iterable is an object with a <code>Symbol.iterator</code> property.</p>\n<p>These are iterables:</p>\n<ul>\n<li>Arrays and TypedArrays</li>\n<li>Maps</li>\n<li>Sets</li>\n<li>Strings</li>\n<li><code>arguments</code></li>\n<li>DOM Elements <code>NodeList</code></li>\n</ul>\n<blockquote>\n<p>All iterators created by generators are also iterables, because generators assign the <code>Symbol.iterator</code> property by default.</p>\n</blockquote>\n<h5 id=\"Accessing-the-default-Iterator\"><a href=\"#Accessing-the-default-Iterator\" class=\"headerlink\" title=\"Accessing the default Iterator\"></a>Accessing the default Iterator</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same process happens behind the scene when using for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = values[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isIterable</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> object[<span class=\"built_in\">Symbol</span>.iterator] === <span class=\"string\">'function'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"string\">'Hello'</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>())); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>())); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Creating-Iterator\"><a href=\"#Creating-Iterator\" class=\"headerlink\" title=\"Creating Iterator\"></a>Creating Iterator</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> collection = &#123;</span><br><span class=\"line\">  items: [],</span><br><span class=\"line\">  *[<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.items) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">collection.items.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> collection) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Built-in-Iterators\"><a href=\"#Built-in-Iterators\" class=\"headerlink\" title=\"Built-in Iterators\"></a>Built-in Iterators</h4><h4 id=\"collection-iterators\"><a href=\"#collection-iterators\" class=\"headerlink\" title=\"collection iterators\"></a>collection iterators</h4><ul>\n<li><code>entries()</code></li>\n<li><code>values()</code></li>\n<li><code>keys()</code></li>\n</ul>\n<h5 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a><code>entries()</code></h5><ul>\n<li>array: [index, value]</li>\n<li>set: [value, value]</li>\n<li>map: [key, value]</li>\n</ul>\n<h5 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a><code>values()</code></h5><ul>\n<li>array: value</li>\n<li>set: value</li>\n<li>map: value</li>\n</ul>\n<h5 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a><code>keys()</code></h5><ul>\n<li>array: index</li>\n<li>set: value</li>\n<li>map: key</li>\n</ul>\n<h4 id=\"Default-Iterators-for-Collection-Types\"><a href=\"#Default-Iterators-for-Collection-Types\" class=\"headerlink\" title=\"Default Iterators for Collection Types\"></a>Default Iterators for Collection Types</h4><ul>\n<li>array: <code>values()</code></li>\n<li>set: <code>values()</code></li>\n<li>map: <code>entries()</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// destructuring and for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">data.set(<span class=\"string\">'title'</span>, <span class=\"string\">'Understanding ECMAScript 6'</span>);</span><br><span class=\"line\">data.set(<span class=\"string\">'format'</span>, <span class=\"string\">'ebook'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same as using data.entries()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">'='</span> + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NodeList</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> div <span class=\"keyword\">of</span> divs) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(div.id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Constructs-accept-iterables\"><a href=\"#Constructs-accept-iterables\" class=\"headerlink\" title=\"Constructs accept iterables\"></a>Constructs accept iterables</h4><p>Some other constructs in JS that use iterables are:</p>\n<ul>\n<li><code>for-of</code></li>\n<li>Destructuring of Arrays</li>\n<li>The spread operator (<code>…</code>)</li>\n<li><code>Promise.all</code> and <code>Promise.race</code> accept iterables over Promises.</li>\n<li>Maps and Sets</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'one'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>]]);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">set</span> = new Set(['a', 'b', 'c]);</span><br><span class=\"line\"><span class=\"keyword\">set</span>.has('c');</span><br><span class=\"line\">// true</span><br></pre></td></tr></table></figure>\n<h4 id=\"Advanced-Iterator-Functionality\"><a href=\"#Advanced-Iterator-Functionality\" class=\"headerlink\" title=\"Advanced Iterator Functionality\"></a>Advanced Iterator Functionality</h4><h5 id=\"passing-arguments-to-Iterators\"><a href=\"#passing-arguments-to-Iterators\" class=\"headerlink\" title=\"passing arguments to Iterators\"></a>passing arguments to Iterators</h5><p>The <code>next()</code> method also accepts a value which can be used to modify the internal state of the generator. A value passed to <code>next()</code> will be treated as the result of the last yield expression that paused the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> second = <span class=\"keyword\">yield</span> first + <span class=\"number\">2</span>; <span class=\"comment\">// 4 + 2</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> second + <span class=\"number\">3</span>; <span class=\"comment\">// 5 + 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">4</span>)); <span class=\"comment\">// \"&#123; value: 6, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">5</span>)); <span class=\"comment\">// \"&#123; value: 8, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Throw-and-Return\"><a href=\"#Throw-and-Return\" class=\"headerlink\" title=\"Throw and Return\"></a>Throw and Return</h4><ul>\n<li>throw</li>\n</ul>\n<p>Resume the execution of a generator by throwing an error into it and returns an object with two properties done and value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error caught!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br><span class=\"line\">g.throw(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Something went wrong'</span>));</span><br><span class=\"line\"><span class=\"comment\">// \"Error caught!\"</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>return</li>\n</ul>\n<p>Return the given value and finishes the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Delegating-generators\"><a href=\"#Delegating-generators\" class=\"headerlink\" title=\"Delegating generators\"></a>Delegating generators</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* g1();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"string\">'56'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g2(<span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 4, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '5', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '6', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 7, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 8, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>yield*</code> is an expression, not a statement, so it evaluates to a value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  result = <span class=\"keyword\">yield</span>* g4();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g5();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// g4() returned &#123;value: 'foo', done: true&#125; at this point</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"foo\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Asynchronous-Task-Running\"><a href=\"#Asynchronous-Task-Running\" class=\"headerlink\" title=\"Asynchronous Task Running\"></a>Asynchronous Task Running</h4><h5 id=\"tradition-callback\"><a href=\"#tradition-callback\" class=\"headerlink\" title=\"tradition callback\"></a>tradition callback</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'config.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Asynchronous-task-runner\"><a href=\"#Asynchronous-task-runner\" class=\"headerlink\" title=\"Asynchronous task runner\"></a>Asynchronous task runner</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">taskDef</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// create the iterator, make available elsewhere</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> task = taskDef();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the task</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = task.next();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// recursive function to keep calling next()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if there's more to do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result.done) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result.value === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        result.value(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            result = task.throw(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          result = task.next(data);</span><br><span class=\"line\">          step();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = task.next(result.value);</span><br><span class=\"line\">        step();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the process</span></span><br><span class=\"line\">  step();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFile</span>(<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filename, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> contents = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'config.json'</span>);</span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h4><p>Pros:</p>\n<ul>\n<li>Lazy Evaluation: It is calculated as we demand it;</li>\n<li>Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.</li>\n<li>Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.</li>\n</ul>\n<h4 id=\"Related-Reading\"><a href=\"#Related-Reading\" class=\"headerlink\" title=\"Related Reading\"></a>Related Reading</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators\" target=\"_blank\" rel=\"noopener\">Iterators and Generators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_iteration.html\" target=\"_blank\" rel=\"noopener\">Iterables and iterators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_generators.html\" target=\"_blank\" rel=\"noopener\">Generators</a></p>\n</li>\n<li><p>Brandon Morelli, <a href=\"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e\" target=\"_blank\" rel=\"noopener\">A Simple Guide to ES6 Iterators in JavaScript with Examples</a></p>\n</li>\n<li><p>Arfat Salman, <a href=\"https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5\" target=\"_blank\" rel=\"noopener\">Understanding Generators in ES6 JavaScript with Examples</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iterators and generators</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iteration protocols</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Iterators\"><a href=\"#Iterators\" class=\"headerlink\" title=\"Iterators\"></a>Iterators</h4><p>Iterators are objects with a specific interface designed for iteration.</p>\n<p>In JavaScript an iterator is an object that provides a <code>next()</code> method which returns the next item in the sequence. This method returns an object with two properties: <code>done</code> and <code>value</code>.</p>\n<p>Below is an implementation of iterator in ES5.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIterator</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> done = i &gt;= items.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = !done ? items[i++] : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        done: done,</span><br><span class=\"line\">        value: value,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 1 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 2 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h4><p>A generator is a function that returns an iterator. Generator functions are indicated by an asterisk (<em>) after the <code>function</code> key word and use the <code>yield</code> keyword. It doesn’t matter how many whitespace between <code>function</code> and `</em><code>. On MDN, the</code><em><code>is right next to</code>function<code>, however in Zakas&#39;s book, the</code></em>` is just before the function name.</p>\n<p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p>\n<blockquote>\n<p>you can use <code>yield</code> only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: function declaration</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator1</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: function expression</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createIterator2 = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = createIterator2([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>create an arrow function that is also a generator is not possible.</p>\n</blockquote>\n<h4 id=\"Generator-Object-Method\"><a href=\"#Generator-Object-Method\" class=\"headerlink\" title=\"Generator Object Method\"></a>Generator Object Method</h4><p>Since generators are just functions. You can add generators to objects.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: es5 style object literal</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  createIterator: <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: es6 shorthand</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  *createIterator(items) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = obj2.createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Iterable-and-for-of-loops\"><a href=\"#Iterable-and-for-of-loops\" class=\"headerlink\" title=\"Iterable and for-of loops\"></a>Iterable and for-of loops</h4><p><code>iterable protocol</code>: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a <code>for..of</code> construct.</p>\n<p>An iterable is an object with a <code>Symbol.iterator</code> property.</p>\n<p>These are iterables:</p>\n<ul>\n<li>Arrays and TypedArrays</li>\n<li>Maps</li>\n<li>Sets</li>\n<li>Strings</li>\n<li><code>arguments</code></li>\n<li>DOM Elements <code>NodeList</code></li>\n</ul>\n<blockquote>\n<p>All iterators created by generators are also iterables, because generators assign the <code>Symbol.iterator</code> property by default.</p>\n</blockquote>\n<h5 id=\"Accessing-the-default-Iterator\"><a href=\"#Accessing-the-default-Iterator\" class=\"headerlink\" title=\"Accessing the default Iterator\"></a>Accessing the default Iterator</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same process happens behind the scene when using for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = values[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isIterable</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> object[<span class=\"built_in\">Symbol</span>.iterator] === <span class=\"string\">'function'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"string\">'Hello'</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>())); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>())); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Creating-Iterator\"><a href=\"#Creating-Iterator\" class=\"headerlink\" title=\"Creating Iterator\"></a>Creating Iterator</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> collection = &#123;</span><br><span class=\"line\">  items: [],</span><br><span class=\"line\">  *[<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.items) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">collection.items.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> collection) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Built-in-Iterators\"><a href=\"#Built-in-Iterators\" class=\"headerlink\" title=\"Built-in Iterators\"></a>Built-in Iterators</h4><h4 id=\"collection-iterators\"><a href=\"#collection-iterators\" class=\"headerlink\" title=\"collection iterators\"></a>collection iterators</h4><ul>\n<li><code>entries()</code></li>\n<li><code>values()</code></li>\n<li><code>keys()</code></li>\n</ul>\n<h5 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a><code>entries()</code></h5><ul>\n<li>array: [index, value]</li>\n<li>set: [value, value]</li>\n<li>map: [key, value]</li>\n</ul>\n<h5 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a><code>values()</code></h5><ul>\n<li>array: value</li>\n<li>set: value</li>\n<li>map: value</li>\n</ul>\n<h5 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a><code>keys()</code></h5><ul>\n<li>array: index</li>\n<li>set: value</li>\n<li>map: key</li>\n</ul>\n<h4 id=\"Default-Iterators-for-Collection-Types\"><a href=\"#Default-Iterators-for-Collection-Types\" class=\"headerlink\" title=\"Default Iterators for Collection Types\"></a>Default Iterators for Collection Types</h4><ul>\n<li>array: <code>values()</code></li>\n<li>set: <code>values()</code></li>\n<li>map: <code>entries()</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// destructuring and for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">data.set(<span class=\"string\">'title'</span>, <span class=\"string\">'Understanding ECMAScript 6'</span>);</span><br><span class=\"line\">data.set(<span class=\"string\">'format'</span>, <span class=\"string\">'ebook'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same as using data.entries()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">'='</span> + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NodeList</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> div <span class=\"keyword\">of</span> divs) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(div.id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Constructs-accept-iterables\"><a href=\"#Constructs-accept-iterables\" class=\"headerlink\" title=\"Constructs accept iterables\"></a>Constructs accept iterables</h4><p>Some other constructs in JS that use iterables are:</p>\n<ul>\n<li><code>for-of</code></li>\n<li>Destructuring of Arrays</li>\n<li>The spread operator (<code>…</code>)</li>\n<li><code>Promise.all</code> and <code>Promise.race</code> accept iterables over Promises.</li>\n<li>Maps and Sets</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'one'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>]]);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">set</span> = new Set(['a', 'b', 'c]);</span><br><span class=\"line\"><span class=\"keyword\">set</span>.has('c');</span><br><span class=\"line\">// true</span><br></pre></td></tr></table></figure>\n<h4 id=\"Advanced-Iterator-Functionality\"><a href=\"#Advanced-Iterator-Functionality\" class=\"headerlink\" title=\"Advanced Iterator Functionality\"></a>Advanced Iterator Functionality</h4><h5 id=\"passing-arguments-to-Iterators\"><a href=\"#passing-arguments-to-Iterators\" class=\"headerlink\" title=\"passing arguments to Iterators\"></a>passing arguments to Iterators</h5><p>The <code>next()</code> method also accepts a value which can be used to modify the internal state of the generator. A value passed to <code>next()</code> will be treated as the result of the last yield expression that paused the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> second = <span class=\"keyword\">yield</span> first + <span class=\"number\">2</span>; <span class=\"comment\">// 4 + 2</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> second + <span class=\"number\">3</span>; <span class=\"comment\">// 5 + 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">4</span>)); <span class=\"comment\">// \"&#123; value: 6, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">5</span>)); <span class=\"comment\">// \"&#123; value: 8, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Throw-and-Return\"><a href=\"#Throw-and-Return\" class=\"headerlink\" title=\"Throw and Return\"></a>Throw and Return</h4><ul>\n<li>throw</li>\n</ul>\n<p>Resume the execution of a generator by throwing an error into it and returns an object with two properties done and value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error caught!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br><span class=\"line\">g.throw(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Something went wrong'</span>));</span><br><span class=\"line\"><span class=\"comment\">// \"Error caught!\"</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>return</li>\n</ul>\n<p>Return the given value and finishes the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Delegating-generators\"><a href=\"#Delegating-generators\" class=\"headerlink\" title=\"Delegating generators\"></a>Delegating generators</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* g1();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"string\">'56'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g2(<span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 4, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '5', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '6', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 7, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 8, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>yield*</code> is an expression, not a statement, so it evaluates to a value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  result = <span class=\"keyword\">yield</span>* g4();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g5();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// g4() returned &#123;value: 'foo', done: true&#125; at this point</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"foo\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Asynchronous-Task-Running\"><a href=\"#Asynchronous-Task-Running\" class=\"headerlink\" title=\"Asynchronous Task Running\"></a>Asynchronous Task Running</h4><h5 id=\"tradition-callback\"><a href=\"#tradition-callback\" class=\"headerlink\" title=\"tradition callback\"></a>tradition callback</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'config.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Asynchronous-task-runner\"><a href=\"#Asynchronous-task-runner\" class=\"headerlink\" title=\"Asynchronous task runner\"></a>Asynchronous task runner</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">taskDef</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// create the iterator, make available elsewhere</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> task = taskDef();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the task</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = task.next();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// recursive function to keep calling next()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if there's more to do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result.done) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result.value === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        result.value(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            result = task.throw(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          result = task.next(data);</span><br><span class=\"line\">          step();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = task.next(result.value);</span><br><span class=\"line\">        step();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the process</span></span><br><span class=\"line\">  step();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFile</span>(<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filename, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> contents = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'config.json'</span>);</span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h4><p>Pros:</p>\n<ul>\n<li>Lazy Evaluation: It is calculated as we demand it;</li>\n<li>Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.</li>\n<li>Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.</li>\n</ul>\n<h4 id=\"Related-Reading\"><a href=\"#Related-Reading\" class=\"headerlink\" title=\"Related Reading\"></a>Related Reading</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators\" target=\"_blank\" rel=\"noopener\">Iterators and Generators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_iteration.html\" target=\"_blank\" rel=\"noopener\">Iterables and iterators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_generators.html\" target=\"_blank\" rel=\"noopener\">Generators</a></p>\n</li>\n<li><p>Brandon Morelli, <a href=\"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e\" target=\"_blank\" rel=\"noopener\">A Simple Guide to ES6 Iterators in JavaScript with Examples</a></p>\n</li>\n<li><p>Arfat Salman, <a href=\"https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5\" target=\"_blank\" rel=\"noopener\">Understanding Generators in ES6 JavaScript with Examples</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iterators and generators</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iteration protocols</a></p>\n</li>\n</ol>\n"},{"title":"三月读书","abbrlink":"23ae8ddc","date":"2020-04-09T02:16:56.000Z","_content":"\n![三月计划](https://wxt.sinaimg.cn/mw1024/71dc9500ly1gdmb5hhs7jj20iw0e6wg9.jpg)\n\n三月的计划，完成四分之三，除了《剑指 offer》。现在每天刷题，刷到对应的话题，过来把书上内容扫一遍。书上的例子是 C++实现的，对我的帮助不大（看不太懂）。\n\nEffective JavaScript 这本非常好，相见恨晚。虽然出版较早，内容有些过时，但是里面提到的 best practice，结合日常开发，给我很多思考，常看常新。\n\n万维钢这本科普读物感觉一般，如果读者也保持每天浏览 medium 或者科技媒体的话，可以发现书中有很多话题都有老生常谈的感觉。此外感觉讲物理的第七章与书的其他章节的水平上的差距，毕竟是物理专业，明显更深入，读的过瘾，其他的章节有点泛泛而谈。\n\n读《周期》的时候正逢美股四次熔断，看起来别有一番风味，仿佛一边读书一边见证历史，而这段历史又是书中反复提及，反复发生的事情。前半章节有点啰嗦，从中间开始读起比较合适。\n","source":"_posts/reading-march.md","raw":"---\ntitle: 三月读书\ncategories:\n  - life\ntags:\n  - books\n  - reading\n  - javascript\n  - investment\nabbrlink: 23ae8ddc\ndate: 2020-04-08 19:16:56\n---\n\n![三月计划](https://wxt.sinaimg.cn/mw1024/71dc9500ly1gdmb5hhs7jj20iw0e6wg9.jpg)\n\n三月的计划，完成四分之三，除了《剑指 offer》。现在每天刷题，刷到对应的话题，过来把书上内容扫一遍。书上的例子是 C++实现的，对我的帮助不大（看不太懂）。\n\nEffective JavaScript 这本非常好，相见恨晚。虽然出版较早，内容有些过时，但是里面提到的 best practice，结合日常开发，给我很多思考，常看常新。\n\n万维钢这本科普读物感觉一般，如果读者也保持每天浏览 medium 或者科技媒体的话，可以发现书中有很多话题都有老生常谈的感觉。此外感觉讲物理的第七章与书的其他章节的水平上的差距，毕竟是物理专业，明显更深入，读的过瘾，其他的章节有点泛泛而谈。\n\n读《周期》的时候正逢美股四次熔断，看起来别有一番风味，仿佛一边读书一边见证历史，而这段历史又是书中反复提及，反复发生的事情。前半章节有点啰嗦，从中间开始读起比较合适。\n","slug":"reading-march","published":1,"updated":"2020-04-08T11:25:58.181Z","_id":"cka6xu721000t8cmhfvynhiv5","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://wxt.sinaimg.cn/mw1024/71dc9500ly1gdmb5hhs7jj20iw0e6wg9.jpg\" alt=\"三月计划\"></p>\n<p>三月的计划，完成四分之三，除了《剑指 offer》。现在每天刷题，刷到对应的话题，过来把书上内容扫一遍。书上的例子是 C++实现的，对我的帮助不大（看不太懂）。</p>\n<p>Effective JavaScript 这本非常好，相见恨晚。虽然出版较早，内容有些过时，但是里面提到的 best practice，结合日常开发，给我很多思考，常看常新。</p>\n<p>万维钢这本科普读物感觉一般，如果读者也保持每天浏览 medium 或者科技媒体的话，可以发现书中有很多话题都有老生常谈的感觉。此外感觉讲物理的第七章与书的其他章节的水平上的差距，毕竟是物理专业，明显更深入，读的过瘾，其他的章节有点泛泛而谈。</p>\n<p>读《周期》的时候正逢美股四次熔断，看起来别有一番风味，仿佛一边读书一边见证历史，而这段历史又是书中反复提及，反复发生的事情。前半章节有点啰嗦，从中间开始读起比较合适。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://wxt.sinaimg.cn/mw1024/71dc9500ly1gdmb5hhs7jj20iw0e6wg9.jpg\" alt=\"三月计划\"></p>\n<p>三月的计划，完成四分之三，除了《剑指 offer》。现在每天刷题，刷到对应的话题，过来把书上内容扫一遍。书上的例子是 C++实现的，对我的帮助不大（看不太懂）。</p>\n<p>Effective JavaScript 这本非常好，相见恨晚。虽然出版较早，内容有些过时，但是里面提到的 best practice，结合日常开发，给我很多思考，常看常新。</p>\n<p>万维钢这本科普读物感觉一般，如果读者也保持每天浏览 medium 或者科技媒体的话，可以发现书中有很多话题都有老生常谈的感觉。此外感觉讲物理的第七章与书的其他章节的水平上的差距，毕竟是物理专业，明显更深入，读的过瘾，其他的章节有点泛泛而谈。</p>\n<p>读《周期》的时候正逢美股四次熔断，看起来别有一番风味，仿佛一边读书一边见证历史，而这段历史又是书中反复提及，反复发生的事情。前半章节有点啰嗦，从中间开始读起比较合适。</p>\n"},{"title":"Promise vs Observables","abbrlink":"24019ac5","date":"2019-01-27T09:37:04.000Z","_content":"\n## Difference\n\n* Single value vs multiple values\n* Eager vs lazy\n* Not cancellable vs cancellable\n* Multicast vs either unicast or multicast\n* Always asynchronous vs possibly asynchronous\n\n## Single value vs multiple values\n\n```js\n// promise\nconst numberPromise = new Promise((resolve) => {\n    resolve(5);\n    resolve(10);\n});\n\n// prints only 5\nnumberPromise.then(value => console.log(value));\n\n// observable\nconst numberObservable = new Observable((observer) => {\n    observer.next(5);\n    observer.next(10);\n});\n\n// prints 5 and 10\nnumberObservable.subscribe(value => console.log(value));\n```\n\nWrapping `setInterval` in Observable: \n\n```js\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n});\n\nsecondsObservable.subscribe(value => console.log(value));\n// logs:\n// 0\n// 1\n// 2\n// and so on, every second\n```\n\n## Eager vs lazy\n\nFor `Promise`, the `executor` function is executed immediately by the Promise implementation, passing `resolve` and `reject` functions.\n\nFor `Observable`, functions passed to `Observable` constructor gets called only when someone actually subscribe to an Observable.\n\n```js\n// promise print immediately\nconst promise = new Promise(() => {\n    console.log('I was called!');\n});\n\nconst observable = new Observable(() => {\n    console.log('I was called!');\n});\n// nothing happens here\n\nobservable.subscribe();\n// just now \"I was called!\" gets printed\n\n\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n});\n```\n\nThanks to laziness, `setInterval` is not called at this point and even `i` variable is not initiated.\n\n## Not cancellable vs cancellable\n\nES6 promise do not support `cancel` method. Some Promise libraries like Bluebird support `cancel` method.\n\n```js\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    const token = setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n  \n    return () => clearInterval(token);\n});\n\nconst subscription = \n    secondsObservable.subscribe(value => console.log(value));\n\nsubscription.unsubscribe();\n```\n\n`subscribe` doesn’t return Observable! This means you cannot chain several subscribe calls like you would chain `then` calls in Promises. `subscribe` returns a Subscription for given Observable. This Subscription has only one method  -- `unsubscribe`  -- which you can call, when you decide you don’t want to listen to certain Observable anymore.\n\n## Multicast vs either unicast or multicast\n\nPromises (because of their eager nature) are always “multicast”. Function passed to Promise constructor is called only when Promise is created and never again (unless you create brand new Promise with that function of course). \n\n```js\n\nconst waitOneSecondPromise = new Promise((resolve) => {\n    console.log('I was called!');\n    setTimeout(() => resolve(), 1000);\n});\n\nwaitOneSecondPromise.then(doSomething);\n\n// 500ms passes\n\nwaitOneSecondPromise.then(doSomethingElse);\n// the console will print only once, and doSomethingElse will be called after only half second.\n\n```\n\nThat person would naturally expect doSomethingElse to be called exactly one second from the moment it was passed to then, but in that case it would be called after half a second.\n\n```js\nconst waitOneSecondObservable = new Observable((observer) => {\n    console.log('I was called');\n  \n    setTimeout(() => observer.next(), 1000);\n});\n\nwaitOneSecondObservable.subscribe(doSomething);\n\n// 500 ms\n\nwaitOneSecondObservable.subscribe(doSomethingElse)\n```\n\nHere every call to `subscribe` will start it’s own clock. Both doSomething and doSomethingElse functions will be called one second from the moment they were passed to `subscribe`. If you look in the console, you will see `\"I was called!\"` printed to console twice, which shows that function passed to `Observable` constructor was indeed called twice and two instances of `setTimeout` timer were created.\n\n\nBy using `share` operator, you can make the `Observable` perform only once and then share between subscribers.\n\n```js\nconst sharedWaitOneSecondObservable =\n    waitOneSecondObservable.share();\n\nsharedWaitOneSecondObservable.subscribe(doSomething);\n\n// 500 ms passes\n\nsharedWaitOneSecondObservable.subscribe(doSomethingElse);\n```\n\nIf Observable shares a result between many subscribers, we say it is “multicast”, since it casts single value to multiple entities.\n\n## Always asynchronous vs possibly asynchronous\n\nPromise is asynchronous even we call `resolve` synchronously.\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(5);\n});\n\npromise.then(value => console.log(value + '!'));\n\nconsole.log('And now we are here.');\n```\n\nFirst `\"And now we are here.\"` is logged and just then `\"5!\"`\n\nObservable may emit values synchronously.\n\n```js\nconst observable = new Observable((observer) => {\n    observer.next(5);\n});\n\nobservable.subscribe(value => console.log(value + '!'));\n\nconsole.log('And now we are here.');\n```\n\n`\"5!\"` appears first and just then we see `\"And now we are here.\"`.\n\n## Reference\n\n1. [promises-vs-observables](https://medium.com/@mpodlasin/promises-vs-observables-4c123c51fe13)\n","source":"_posts/promise-vs-observables.md","raw":"---\ntitle: Promise vs Observables\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - promise\n  - Observables\n  - subscription\n  - subscribe\nabbrlink: 24019ac5\ndate: 2019-01-27 01:37:04\n---\n\n## Difference\n\n* Single value vs multiple values\n* Eager vs lazy\n* Not cancellable vs cancellable\n* Multicast vs either unicast or multicast\n* Always asynchronous vs possibly asynchronous\n\n## Single value vs multiple values\n\n```js\n// promise\nconst numberPromise = new Promise((resolve) => {\n    resolve(5);\n    resolve(10);\n});\n\n// prints only 5\nnumberPromise.then(value => console.log(value));\n\n// observable\nconst numberObservable = new Observable((observer) => {\n    observer.next(5);\n    observer.next(10);\n});\n\n// prints 5 and 10\nnumberObservable.subscribe(value => console.log(value));\n```\n\nWrapping `setInterval` in Observable: \n\n```js\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n});\n\nsecondsObservable.subscribe(value => console.log(value));\n// logs:\n// 0\n// 1\n// 2\n// and so on, every second\n```\n\n## Eager vs lazy\n\nFor `Promise`, the `executor` function is executed immediately by the Promise implementation, passing `resolve` and `reject` functions.\n\nFor `Observable`, functions passed to `Observable` constructor gets called only when someone actually subscribe to an Observable.\n\n```js\n// promise print immediately\nconst promise = new Promise(() => {\n    console.log('I was called!');\n});\n\nconst observable = new Observable(() => {\n    console.log('I was called!');\n});\n// nothing happens here\n\nobservable.subscribe();\n// just now \"I was called!\" gets printed\n\n\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n});\n```\n\nThanks to laziness, `setInterval` is not called at this point and even `i` variable is not initiated.\n\n## Not cancellable vs cancellable\n\nES6 promise do not support `cancel` method. Some Promise libraries like Bluebird support `cancel` method.\n\n```js\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    const token = setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n  \n    return () => clearInterval(token);\n});\n\nconst subscription = \n    secondsObservable.subscribe(value => console.log(value));\n\nsubscription.unsubscribe();\n```\n\n`subscribe` doesn’t return Observable! This means you cannot chain several subscribe calls like you would chain `then` calls in Promises. `subscribe` returns a Subscription for given Observable. This Subscription has only one method  -- `unsubscribe`  -- which you can call, when you decide you don’t want to listen to certain Observable anymore.\n\n## Multicast vs either unicast or multicast\n\nPromises (because of their eager nature) are always “multicast”. Function passed to Promise constructor is called only when Promise is created and never again (unless you create brand new Promise with that function of course). \n\n```js\n\nconst waitOneSecondPromise = new Promise((resolve) => {\n    console.log('I was called!');\n    setTimeout(() => resolve(), 1000);\n});\n\nwaitOneSecondPromise.then(doSomething);\n\n// 500ms passes\n\nwaitOneSecondPromise.then(doSomethingElse);\n// the console will print only once, and doSomethingElse will be called after only half second.\n\n```\n\nThat person would naturally expect doSomethingElse to be called exactly one second from the moment it was passed to then, but in that case it would be called after half a second.\n\n```js\nconst waitOneSecondObservable = new Observable((observer) => {\n    console.log('I was called');\n  \n    setTimeout(() => observer.next(), 1000);\n});\n\nwaitOneSecondObservable.subscribe(doSomething);\n\n// 500 ms\n\nwaitOneSecondObservable.subscribe(doSomethingElse)\n```\n\nHere every call to `subscribe` will start it’s own clock. Both doSomething and doSomethingElse functions will be called one second from the moment they were passed to `subscribe`. If you look in the console, you will see `\"I was called!\"` printed to console twice, which shows that function passed to `Observable` constructor was indeed called twice and two instances of `setTimeout` timer were created.\n\n\nBy using `share` operator, you can make the `Observable` perform only once and then share between subscribers.\n\n```js\nconst sharedWaitOneSecondObservable =\n    waitOneSecondObservable.share();\n\nsharedWaitOneSecondObservable.subscribe(doSomething);\n\n// 500 ms passes\n\nsharedWaitOneSecondObservable.subscribe(doSomethingElse);\n```\n\nIf Observable shares a result between many subscribers, we say it is “multicast”, since it casts single value to multiple entities.\n\n## Always asynchronous vs possibly asynchronous\n\nPromise is asynchronous even we call `resolve` synchronously.\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(5);\n});\n\npromise.then(value => console.log(value + '!'));\n\nconsole.log('And now we are here.');\n```\n\nFirst `\"And now we are here.\"` is logged and just then `\"5!\"`\n\nObservable may emit values synchronously.\n\n```js\nconst observable = new Observable((observer) => {\n    observer.next(5);\n});\n\nobservable.subscribe(value => console.log(value + '!'));\n\nconsole.log('And now we are here.');\n```\n\n`\"5!\"` appears first and just then we see `\"And now we are here.\"`.\n\n## Reference\n\n1. [promises-vs-observables](https://medium.com/@mpodlasin/promises-vs-observables-4c123c51fe13)\n","slug":"promise-vs-observables","published":1,"updated":"2019-11-15T09:39:12.472Z","_id":"cka6xu721000u8cmhnqhiyvd2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Difference\"><a href=\"#Difference\" class=\"headerlink\" title=\"Difference\"></a>Difference</h2><ul>\n<li>Single value vs multiple values</li>\n<li>Eager vs lazy</li>\n<li>Not cancellable vs cancellable</li>\n<li>Multicast vs either unicast or multicast</li>\n<li>Always asynchronous vs possibly asynchronous</li>\n</ul>\n<h2 id=\"Single-value-vs-multiple-values\"><a href=\"#Single-value-vs-multiple-values\" class=\"headerlink\" title=\"Single value vs multiple values\"></a>Single value vs multiple values</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numberPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">5</span>);</span><br><span class=\"line\">    resolve(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints only 5</span></span><br><span class=\"line\">numberPromise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// observable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numberObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.next(<span class=\"number\">5</span>);</span><br><span class=\"line\">    observer.next(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints 5 and 10</span></span><br><span class=\"line\">numberObservable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br></pre></td></tr></table></figure>\n<p>Wrapping <code>setInterval</code> in Observable: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">secondsObservable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"><span class=\"comment\">// logs:</span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// and so on, every second</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Eager-vs-lazy\"><a href=\"#Eager-vs-lazy\" class=\"headerlink\" title=\"Eager vs lazy\"></a>Eager vs lazy</h2><p>For <code>Promise</code>, the <code>executor</code> function is executed immediately by the Promise implementation, passing <code>resolve</code> and <code>reject</code> functions.</p>\n<p>For <code>Observable</code>, functions passed to <code>Observable</code> constructor gets called only when someone actually subscribe to an Observable.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise print immediately</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// nothing happens here</span></span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe();</span><br><span class=\"line\"><span class=\"comment\">// just now \"I was called!\" gets printed</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Thanks to laziness, <code>setInterval</code> is not called at this point and even <code>i</code> variable is not initiated.</p>\n<h2 id=\"Not-cancellable-vs-cancellable\"><a href=\"#Not-cancellable-vs-cancellable\" class=\"headerlink\" title=\"Not cancellable vs cancellable\"></a>Not cancellable vs cancellable</h2><p>ES6 promise do not support <code>cancel</code> method. Some Promise libraries like Bluebird support <code>cancel</code> method.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> clearInterval(token);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> subscription = </span><br><span class=\"line\">    secondsObservable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"></span><br><span class=\"line\">subscription.unsubscribe();</span><br></pre></td></tr></table></figure>\n<p><code>subscribe</code> doesn’t return Observable! This means you cannot chain several subscribe calls like you would chain <code>then</code> calls in Promises. <code>subscribe</code> returns a Subscription for given Observable. This Subscription has only one method  – <code>unsubscribe</code>  – which you can call, when you decide you don’t want to listen to certain Observable anymore.</p>\n<h2 id=\"Multicast-vs-either-unicast-or-multicast\"><a href=\"#Multicast-vs-either-unicast-or-multicast\" class=\"headerlink\" title=\"Multicast vs either unicast or multicast\"></a>Multicast vs either unicast or multicast</h2><p>Promises (because of their eager nature) are always “multicast”. Function passed to Promise constructor is called only when Promise is created and never again (unless you create brand new Promise with that function of course). </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> waitOneSecondPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called!'</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.then(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500ms passes</span></span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.then(doSomethingElse);</span><br><span class=\"line\"><span class=\"comment\">// the console will print only once, and doSomethingElse will be called after only half second.</span></span><br></pre></td></tr></table></figure>\n<p>That person would naturally expect doSomethingElse to be called exactly one second from the moment it was passed to then, but in that case it would be called after half a second.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> waitOneSecondObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called'</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> observer.next(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.subscribe(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500 ms</span></span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.subscribe(doSomethingElse)</span><br></pre></td></tr></table></figure>\n<p>Here every call to <code>subscribe</code> will start it’s own clock. Both doSomething and doSomethingElse functions will be called one second from the moment they were passed to <code>subscribe</code>. If you look in the console, you will see <code>&quot;I was called!&quot;</code> printed to console twice, which shows that function passed to <code>Observable</code> constructor was indeed called twice and two instances of <code>setTimeout</code> timer were created.</p>\n<p>By using <code>share</code> operator, you can make the <code>Observable</code> perform only once and then share between subscribers.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sharedWaitOneSecondObservable =</span><br><span class=\"line\">    waitOneSecondObservable.share();</span><br><span class=\"line\"></span><br><span class=\"line\">sharedWaitOneSecondObservable.subscribe(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500 ms passes</span></span><br><span class=\"line\"></span><br><span class=\"line\">sharedWaitOneSecondObservable.subscribe(doSomethingElse);</span><br></pre></td></tr></table></figure>\n<p>If Observable shares a result between many subscribers, we say it is “multicast”, since it casts single value to multiple entities.</p>\n<h2 id=\"Always-asynchronous-vs-possibly-asynchronous\"><a href=\"#Always-asynchronous-vs-possibly-asynchronous\" class=\"headerlink\" title=\"Always asynchronous vs possibly asynchronous\"></a>Always asynchronous vs possibly asynchronous</h2><p>Promise is asynchronous even we call <code>resolve</code> synchronously.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value + <span class=\"string\">'!'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'And now we are here.'</span>);</span><br></pre></td></tr></table></figure>\n<p>First <code>&quot;And now we are here.&quot;</code> is logged and just then <code>&quot;5!&quot;</code></p>\n<p>Observable may emit values synchronously.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.next(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value + <span class=\"string\">'!'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'And now we are here.'</span>);</span><br></pre></td></tr></table></figure>\n<p><code>&quot;5!&quot;</code> appears first and just then we see <code>&quot;And now we are here.&quot;</code>.</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://medium.com/@mpodlasin/promises-vs-observables-4c123c51fe13\" target=\"_blank\" rel=\"noopener\">promises-vs-observables</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Difference\"><a href=\"#Difference\" class=\"headerlink\" title=\"Difference\"></a>Difference</h2><ul>\n<li>Single value vs multiple values</li>\n<li>Eager vs lazy</li>\n<li>Not cancellable vs cancellable</li>\n<li>Multicast vs either unicast or multicast</li>\n<li>Always asynchronous vs possibly asynchronous</li>\n</ul>\n<h2 id=\"Single-value-vs-multiple-values\"><a href=\"#Single-value-vs-multiple-values\" class=\"headerlink\" title=\"Single value vs multiple values\"></a>Single value vs multiple values</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numberPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">5</span>);</span><br><span class=\"line\">    resolve(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints only 5</span></span><br><span class=\"line\">numberPromise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// observable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numberObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.next(<span class=\"number\">5</span>);</span><br><span class=\"line\">    observer.next(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints 5 and 10</span></span><br><span class=\"line\">numberObservable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br></pre></td></tr></table></figure>\n<p>Wrapping <code>setInterval</code> in Observable: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">secondsObservable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"><span class=\"comment\">// logs:</span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// and so on, every second</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Eager-vs-lazy\"><a href=\"#Eager-vs-lazy\" class=\"headerlink\" title=\"Eager vs lazy\"></a>Eager vs lazy</h2><p>For <code>Promise</code>, the <code>executor</code> function is executed immediately by the Promise implementation, passing <code>resolve</code> and <code>reject</code> functions.</p>\n<p>For <code>Observable</code>, functions passed to <code>Observable</code> constructor gets called only when someone actually subscribe to an Observable.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise print immediately</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// nothing happens here</span></span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe();</span><br><span class=\"line\"><span class=\"comment\">// just now \"I was called!\" gets printed</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Thanks to laziness, <code>setInterval</code> is not called at this point and even <code>i</code> variable is not initiated.</p>\n<h2 id=\"Not-cancellable-vs-cancellable\"><a href=\"#Not-cancellable-vs-cancellable\" class=\"headerlink\" title=\"Not cancellable vs cancellable\"></a>Not cancellable vs cancellable</h2><p>ES6 promise do not support <code>cancel</code> method. Some Promise libraries like Bluebird support <code>cancel</code> method.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> clearInterval(token);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> subscription = </span><br><span class=\"line\">    secondsObservable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"></span><br><span class=\"line\">subscription.unsubscribe();</span><br></pre></td></tr></table></figure>\n<p><code>subscribe</code> doesn’t return Observable! This means you cannot chain several subscribe calls like you would chain <code>then</code> calls in Promises. <code>subscribe</code> returns a Subscription for given Observable. This Subscription has only one method  – <code>unsubscribe</code>  – which you can call, when you decide you don’t want to listen to certain Observable anymore.</p>\n<h2 id=\"Multicast-vs-either-unicast-or-multicast\"><a href=\"#Multicast-vs-either-unicast-or-multicast\" class=\"headerlink\" title=\"Multicast vs either unicast or multicast\"></a>Multicast vs either unicast or multicast</h2><p>Promises (because of their eager nature) are always “multicast”. Function passed to Promise constructor is called only when Promise is created and never again (unless you create brand new Promise with that function of course). </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> waitOneSecondPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called!'</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.then(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500ms passes</span></span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.then(doSomethingElse);</span><br><span class=\"line\"><span class=\"comment\">// the console will print only once, and doSomethingElse will be called after only half second.</span></span><br></pre></td></tr></table></figure>\n<p>That person would naturally expect doSomethingElse to be called exactly one second from the moment it was passed to then, but in that case it would be called after half a second.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> waitOneSecondObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called'</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> observer.next(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.subscribe(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500 ms</span></span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.subscribe(doSomethingElse)</span><br></pre></td></tr></table></figure>\n<p>Here every call to <code>subscribe</code> will start it’s own clock. Both doSomething and doSomethingElse functions will be called one second from the moment they were passed to <code>subscribe</code>. If you look in the console, you will see <code>&quot;I was called!&quot;</code> printed to console twice, which shows that function passed to <code>Observable</code> constructor was indeed called twice and two instances of <code>setTimeout</code> timer were created.</p>\n<p>By using <code>share</code> operator, you can make the <code>Observable</code> perform only once and then share between subscribers.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sharedWaitOneSecondObservable =</span><br><span class=\"line\">    waitOneSecondObservable.share();</span><br><span class=\"line\"></span><br><span class=\"line\">sharedWaitOneSecondObservable.subscribe(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500 ms passes</span></span><br><span class=\"line\"></span><br><span class=\"line\">sharedWaitOneSecondObservable.subscribe(doSomethingElse);</span><br></pre></td></tr></table></figure>\n<p>If Observable shares a result between many subscribers, we say it is “multicast”, since it casts single value to multiple entities.</p>\n<h2 id=\"Always-asynchronous-vs-possibly-asynchronous\"><a href=\"#Always-asynchronous-vs-possibly-asynchronous\" class=\"headerlink\" title=\"Always asynchronous vs possibly asynchronous\"></a>Always asynchronous vs possibly asynchronous</h2><p>Promise is asynchronous even we call <code>resolve</code> synchronously.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value + <span class=\"string\">'!'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'And now we are here.'</span>);</span><br></pre></td></tr></table></figure>\n<p>First <code>&quot;And now we are here.&quot;</code> is logged and just then <code>&quot;5!&quot;</code></p>\n<p>Observable may emit values synchronously.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.next(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value + <span class=\"string\">'!'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'And now we are here.'</span>);</span><br></pre></td></tr></table></figure>\n<p><code>&quot;5!&quot;</code> appears first and just then we see <code>&quot;And now we are here.&quot;</code>.</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://medium.com/@mpodlasin/promises-vs-observables-4c123c51fe13\" target=\"_blank\" rel=\"noopener\">promises-vs-observables</a></li>\n</ol>\n"},{"title":"下班","abbrlink":"9e29172c","date":"2020-05-15T06:33:39.000Z","_content":"\n晚上八点多了，我决定搭公交回去。\n\n出发的时候，在高德的实时公交上看有一辆车刚刚经过，我心想不紧不慢走过去这段时间下一辆怎么也来了。没想到走到车站一看，下一辆车还迟迟不发车。站着等了十多分钟，已经快九点了，后悔还不如老实在工位坐一下再打车呢。但是走都走了，总不能再回去吧，越想越气，这么等也不是办法，我决定骑车回去。\n\n离开车站往前走了大概四五十米，找到一辆青桔单车，打开 App 准备解锁，鬼使神差回头一看，我要坐的公交车进站了。我拿着手机站在路边陷入了迷茫，想起去年冬天狂奔五十米追车，司机在我面前一个身位开走的惨痛经历。思考了三秒钟，那是漫长的三秒钟，思考的结果是我决定再尝试一次。我一边招手一边迎面向车站跑去。在我距离车头大约十米的地方，司机打着转向灯驶离了车站。\n\n在那一霎那，我觉得时间过得很慢，不知怎的，我突然想到阮籍的穷途之哭，这时马路对面广场舞的音乐显得格外刺耳。\n\n我伫立了一会，又返回到那辆单车前，手机上还提示着是否解锁，我狠狠的按下确定。\n","source":"_posts/下班.md","raw":"---\ntitle: 下班\ncategories:\n  - life\nabbrlink: 9e29172c\ndate: 2020-05-14 23:33:39\ntags:\n---\n\n晚上八点多了，我决定搭公交回去。\n\n出发的时候，在高德的实时公交上看有一辆车刚刚经过，我心想不紧不慢走过去这段时间下一辆怎么也来了。没想到走到车站一看，下一辆车还迟迟不发车。站着等了十多分钟，已经快九点了，后悔还不如老实在工位坐一下再打车呢。但是走都走了，总不能再回去吧，越想越气，这么等也不是办法，我决定骑车回去。\n\n离开车站往前走了大概四五十米，找到一辆青桔单车，打开 App 准备解锁，鬼使神差回头一看，我要坐的公交车进站了。我拿着手机站在路边陷入了迷茫，想起去年冬天狂奔五十米追车，司机在我面前一个身位开走的惨痛经历。思考了三秒钟，那是漫长的三秒钟，思考的结果是我决定再尝试一次。我一边招手一边迎面向车站跑去。在我距离车头大约十米的地方，司机打着转向灯驶离了车站。\n\n在那一霎那，我觉得时间过得很慢，不知怎的，我突然想到阮籍的穷途之哭，这时马路对面广场舞的音乐显得格外刺耳。\n\n我伫立了一会，又返回到那辆单车前，手机上还提示着是否解锁，我狠狠的按下确定。\n","slug":"下班","published":1,"updated":"2020-07-08T08:46:18.742Z","_id":"cka6xu722000w8cmhnzm5ghan","comments":1,"layout":"post","photos":[],"link":"","content":"<p>晚上八点多了，我决定搭公交回去。</p>\n<p>出发的时候，在高德的实时公交上看有一辆车刚刚经过，我心想不紧不慢走过去这段时间下一辆怎么也来了。没想到走到车站一看，下一辆车还迟迟不发车。站着等了十多分钟，已经快九点了，后悔还不如老实在工位坐一下再打车呢。但是走都走了，总不能再回去吧，越想越气，这么等也不是办法，我决定骑车回去。</p>\n<p>离开车站往前走了大概四五十米，找到一辆青桔单车，打开 App 准备解锁，鬼使神差回头一看，我要坐的公交车进站了。我拿着手机站在路边陷入了迷茫，想起去年冬天狂奔五十米追车，司机在我面前一个身位开走的惨痛经历。思考了三秒钟，那是漫长的三秒钟，思考的结果是我决定再尝试一次。我一边招手一边迎面向车站跑去。在我距离车头大约十米的地方，司机打着转向灯驶离了车站。</p>\n<p>在那一霎那，我觉得时间过得很慢，不知怎的，我突然想到阮籍的穷途之哭，这时马路对面广场舞的音乐显得格外刺耳。</p>\n<p>我伫立了一会，又返回到那辆单车前，手机上还提示着是否解锁，我狠狠的按下确定。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>晚上八点多了，我决定搭公交回去。</p>\n<p>出发的时候，在高德的实时公交上看有一辆车刚刚经过，我心想不紧不慢走过去这段时间下一辆怎么也来了。没想到走到车站一看，下一辆车还迟迟不发车。站着等了十多分钟，已经快九点了，后悔还不如老实在工位坐一下再打车呢。但是走都走了，总不能再回去吧，越想越气，这么等也不是办法，我决定骑车回去。</p>\n<p>离开车站往前走了大概四五十米，找到一辆青桔单车，打开 App 准备解锁，鬼使神差回头一看，我要坐的公交车进站了。我拿着手机站在路边陷入了迷茫，想起去年冬天狂奔五十米追车，司机在我面前一个身位开走的惨痛经历。思考了三秒钟，那是漫长的三秒钟，思考的结果是我决定再尝试一次。我一边招手一边迎面向车站跑去。在我距离车头大约十米的地方，司机打着转向灯驶离了车站。</p>\n<p>在那一霎那，我觉得时间过得很慢，不知怎的，我突然想到阮籍的穷途之哭，这时马路对面广场舞的音乐显得格外刺耳。</p>\n<p>我伫立了一会，又返回到那辆单车前，手机上还提示着是否解锁，我狠狠的按下确定。</p>\n"},{"title":"我读《前端工程化：体系设计与实践》","abbrlink":"966a6548","date":"2020-04-12T22:35:19.000Z","_content":"\n《前端工程化》这本书也是买了很久，当时读了几个章节，觉得比较浅显。这个周末拿出来又从头到尾翻了一遍，总体的评价一般，可以看看目录脉络，打分 3/5。取决于读者的阅读速度，如果三天看完，我感觉不亏。\n\n这本书出版于2018年1月。书中使用的 Webpack 配置代码还是 V1，V2时期，目前已经更新到 v5 了。所以书中引用的代码估计实用性不太高，大概扫一眼，看看大致是干什么就可以。具体到现实问题，肯定还是得去现查最新的文档。\n\n第一章讲了一下前端的开发历史，SPA的出现以及优缺点，为什么需要前后端分离等问题。算是一些常见面试问题的总结吧。第二章提到的 Yeoman，15年我使用 angular.js 的时候，基本上项目都是用yo搭建。估计现在使用量也下降很多。目前的主流框架都提供了自己的 CLI 工具供用户快速搭建项目。日常开发中，一个团队里说不定好几个小组都有自己的脚手架生成器。第三章相对来说值得阅读。讲了一些常用loader，plugin的使用场景。module 和component 的区别，强制缓存和协商缓存，覆盖更新和增量更新，hash的作用，静态资源 CDN 部署等。对于入门的工程师来说，是一个比较好的了解构建的方向。再后面几章就有点浅尝辄止了，一笔带过。\n\n关于模块和组件的区别——这点我与作者意见相左。看到他引用的英文描述我觉得没有问题，但是中文解释(P102)我不能认同。根据英文的翻译，模块是设计实体，组件是运行实体。模块应该是包含组件的，所以他举得例子“一个button是模块，一个包括多个button的导航栏是一个组件”我认为是恰恰相反，导航栏是模块，模块中包含了若干按钮的组件。关于这点，作者也提到这两者定义的模糊，我这里也只是表述一下自己想法。\n\n剩下的我想谈一谈我对前端工程化的认识。“前端工程化”这个词，我是从准备回国，开始频繁和国内公司面试才得知的。每次面试都一定会有人问我，你怎么看待前端工程化。给我的感受是怎么前端不算工程吗？为什么还要特地说一下工程化呢？当时是确实不明白这个概念。我理解的工程，不论前端后端，都需要一套完善的编译，构建，部署，上线流程。在美国如果出现在JD里，可能会明确写需要你有CI/CD经验，需要你熟悉 git version control，需要你了解 docker 或者有 AWS 经验，会很明确技术栈。现在回过头去看中美之间的面试，侧重确实很不一样。在经验问题上，国内面试有点缥缈，问一些很大的问题，工程化的看法，有点像“道”；美国面试会问你AWS怎么玩，Jenkins怎么用，持续集成怎么弄，比较具体，有点像“术”。\n\n前几天，我想绘制一张前端的知识图谱，有一部分就是前端工程化。但是当时是用英文书写的，所以我一直在想一个贴合的翻译，想了好几个，都觉得很蠢。所以我突然想去查查在英文世界里，有没有这个概念。很遗憾到目前我还没有搜到针对这个词的很精准的对应。如果有朋友了解的，希望可以不吝赐教。不过我在搜索的过程中，找到 Uber Eats 技术团队写的一篇文章，如果感兴趣的话，可以看看 [Counting Calories: How We Improved the Performance and Developer Experience of UberEats.com](https://eng.uber.com/uber-eats-com-web-app-rewrite/)。文章的一部分提到了他们是怎么去做工程化的。但是依旧，没有“工程化”这种概念名词出现。所以如果要我选一个前端工程化的英文翻译，我想我可能会用 Automate。\n\n叫什么不重要，怎么做和为什么做比较重要。\n","source":"_posts/我读前端工程化.md","raw":"---\ntitle: 我读《前端工程化：体系设计与实践》\ncategories:\n  - life\ntags:\n  - books\n  - reading\n  - frontend\n  - 前端工程化\nabbrlink: 966a6548\ndate: 2020-04-12 15:35:19\n---\n\n《前端工程化》这本书也是买了很久，当时读了几个章节，觉得比较浅显。这个周末拿出来又从头到尾翻了一遍，总体的评价一般，可以看看目录脉络，打分 3/5。取决于读者的阅读速度，如果三天看完，我感觉不亏。\n\n这本书出版于2018年1月。书中使用的 Webpack 配置代码还是 V1，V2时期，目前已经更新到 v5 了。所以书中引用的代码估计实用性不太高，大概扫一眼，看看大致是干什么就可以。具体到现实问题，肯定还是得去现查最新的文档。\n\n第一章讲了一下前端的开发历史，SPA的出现以及优缺点，为什么需要前后端分离等问题。算是一些常见面试问题的总结吧。第二章提到的 Yeoman，15年我使用 angular.js 的时候，基本上项目都是用yo搭建。估计现在使用量也下降很多。目前的主流框架都提供了自己的 CLI 工具供用户快速搭建项目。日常开发中，一个团队里说不定好几个小组都有自己的脚手架生成器。第三章相对来说值得阅读。讲了一些常用loader，plugin的使用场景。module 和component 的区别，强制缓存和协商缓存，覆盖更新和增量更新，hash的作用，静态资源 CDN 部署等。对于入门的工程师来说，是一个比较好的了解构建的方向。再后面几章就有点浅尝辄止了，一笔带过。\n\n关于模块和组件的区别——这点我与作者意见相左。看到他引用的英文描述我觉得没有问题，但是中文解释(P102)我不能认同。根据英文的翻译，模块是设计实体，组件是运行实体。模块应该是包含组件的，所以他举得例子“一个button是模块，一个包括多个button的导航栏是一个组件”我认为是恰恰相反，导航栏是模块，模块中包含了若干按钮的组件。关于这点，作者也提到这两者定义的模糊，我这里也只是表述一下自己想法。\n\n剩下的我想谈一谈我对前端工程化的认识。“前端工程化”这个词，我是从准备回国，开始频繁和国内公司面试才得知的。每次面试都一定会有人问我，你怎么看待前端工程化。给我的感受是怎么前端不算工程吗？为什么还要特地说一下工程化呢？当时是确实不明白这个概念。我理解的工程，不论前端后端，都需要一套完善的编译，构建，部署，上线流程。在美国如果出现在JD里，可能会明确写需要你有CI/CD经验，需要你熟悉 git version control，需要你了解 docker 或者有 AWS 经验，会很明确技术栈。现在回过头去看中美之间的面试，侧重确实很不一样。在经验问题上，国内面试有点缥缈，问一些很大的问题，工程化的看法，有点像“道”；美国面试会问你AWS怎么玩，Jenkins怎么用，持续集成怎么弄，比较具体，有点像“术”。\n\n前几天，我想绘制一张前端的知识图谱，有一部分就是前端工程化。但是当时是用英文书写的，所以我一直在想一个贴合的翻译，想了好几个，都觉得很蠢。所以我突然想去查查在英文世界里，有没有这个概念。很遗憾到目前我还没有搜到针对这个词的很精准的对应。如果有朋友了解的，希望可以不吝赐教。不过我在搜索的过程中，找到 Uber Eats 技术团队写的一篇文章，如果感兴趣的话，可以看看 [Counting Calories: How We Improved the Performance and Developer Experience of UberEats.com](https://eng.uber.com/uber-eats-com-web-app-rewrite/)。文章的一部分提到了他们是怎么去做工程化的。但是依旧，没有“工程化”这种概念名词出现。所以如果要我选一个前端工程化的英文翻译，我想我可能会用 Automate。\n\n叫什么不重要，怎么做和为什么做比较重要。\n","slug":"我读前端工程化","published":1,"updated":"2020-05-14T15:38:58.750Z","_id":"cka6xu723000y8cmhu1mxwyha","comments":1,"layout":"post","photos":[],"link":"","content":"<p>《前端工程化》这本书也是买了很久，当时读了几个章节，觉得比较浅显。这个周末拿出来又从头到尾翻了一遍，总体的评价一般，可以看看目录脉络，打分 3/5。取决于读者的阅读速度，如果三天看完，我感觉不亏。</p>\n<p>这本书出版于2018年1月。书中使用的 Webpack 配置代码还是 V1，V2时期，目前已经更新到 v5 了。所以书中引用的代码估计实用性不太高，大概扫一眼，看看大致是干什么就可以。具体到现实问题，肯定还是得去现查最新的文档。</p>\n<p>第一章讲了一下前端的开发历史，SPA的出现以及优缺点，为什么需要前后端分离等问题。算是一些常见面试问题的总结吧。第二章提到的 Yeoman，15年我使用 angular.js 的时候，基本上项目都是用yo搭建。估计现在使用量也下降很多。目前的主流框架都提供了自己的 CLI 工具供用户快速搭建项目。日常开发中，一个团队里说不定好几个小组都有自己的脚手架生成器。第三章相对来说值得阅读。讲了一些常用loader，plugin的使用场景。module 和component 的区别，强制缓存和协商缓存，覆盖更新和增量更新，hash的作用，静态资源 CDN 部署等。对于入门的工程师来说，是一个比较好的了解构建的方向。再后面几章就有点浅尝辄止了，一笔带过。</p>\n<p>关于模块和组件的区别——这点我与作者意见相左。看到他引用的英文描述我觉得没有问题，但是中文解释(P102)我不能认同。根据英文的翻译，模块是设计实体，组件是运行实体。模块应该是包含组件的，所以他举得例子“一个button是模块，一个包括多个button的导航栏是一个组件”我认为是恰恰相反，导航栏是模块，模块中包含了若干按钮的组件。关于这点，作者也提到这两者定义的模糊，我这里也只是表述一下自己想法。</p>\n<p>剩下的我想谈一谈我对前端工程化的认识。“前端工程化”这个词，我是从准备回国，开始频繁和国内公司面试才得知的。每次面试都一定会有人问我，你怎么看待前端工程化。给我的感受是怎么前端不算工程吗？为什么还要特地说一下工程化呢？当时是确实不明白这个概念。我理解的工程，不论前端后端，都需要一套完善的编译，构建，部署，上线流程。在美国如果出现在JD里，可能会明确写需要你有CI/CD经验，需要你熟悉 git version control，需要你了解 docker 或者有 AWS 经验，会很明确技术栈。现在回过头去看中美之间的面试，侧重确实很不一样。在经验问题上，国内面试有点缥缈，问一些很大的问题，工程化的看法，有点像“道”；美国面试会问你AWS怎么玩，Jenkins怎么用，持续集成怎么弄，比较具体，有点像“术”。</p>\n<p>前几天，我想绘制一张前端的知识图谱，有一部分就是前端工程化。但是当时是用英文书写的，所以我一直在想一个贴合的翻译，想了好几个，都觉得很蠢。所以我突然想去查查在英文世界里，有没有这个概念。很遗憾到目前我还没有搜到针对这个词的很精准的对应。如果有朋友了解的，希望可以不吝赐教。不过我在搜索的过程中，找到 Uber Eats 技术团队写的一篇文章，如果感兴趣的话，可以看看 <a href=\"https://eng.uber.com/uber-eats-com-web-app-rewrite/\" target=\"_blank\" rel=\"noopener\">Counting Calories: How We Improved the Performance and Developer Experience of UberEats.com</a>。文章的一部分提到了他们是怎么去做工程化的。但是依旧，没有“工程化”这种概念名词出现。所以如果要我选一个前端工程化的英文翻译，我想我可能会用 Automate。</p>\n<p>叫什么不重要，怎么做和为什么做比较重要。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>《前端工程化》这本书也是买了很久，当时读了几个章节，觉得比较浅显。这个周末拿出来又从头到尾翻了一遍，总体的评价一般，可以看看目录脉络，打分 3/5。取决于读者的阅读速度，如果三天看完，我感觉不亏。</p>\n<p>这本书出版于2018年1月。书中使用的 Webpack 配置代码还是 V1，V2时期，目前已经更新到 v5 了。所以书中引用的代码估计实用性不太高，大概扫一眼，看看大致是干什么就可以。具体到现实问题，肯定还是得去现查最新的文档。</p>\n<p>第一章讲了一下前端的开发历史，SPA的出现以及优缺点，为什么需要前后端分离等问题。算是一些常见面试问题的总结吧。第二章提到的 Yeoman，15年我使用 angular.js 的时候，基本上项目都是用yo搭建。估计现在使用量也下降很多。目前的主流框架都提供了自己的 CLI 工具供用户快速搭建项目。日常开发中，一个团队里说不定好几个小组都有自己的脚手架生成器。第三章相对来说值得阅读。讲了一些常用loader，plugin的使用场景。module 和component 的区别，强制缓存和协商缓存，覆盖更新和增量更新，hash的作用，静态资源 CDN 部署等。对于入门的工程师来说，是一个比较好的了解构建的方向。再后面几章就有点浅尝辄止了，一笔带过。</p>\n<p>关于模块和组件的区别——这点我与作者意见相左。看到他引用的英文描述我觉得没有问题，但是中文解释(P102)我不能认同。根据英文的翻译，模块是设计实体，组件是运行实体。模块应该是包含组件的，所以他举得例子“一个button是模块，一个包括多个button的导航栏是一个组件”我认为是恰恰相反，导航栏是模块，模块中包含了若干按钮的组件。关于这点，作者也提到这两者定义的模糊，我这里也只是表述一下自己想法。</p>\n<p>剩下的我想谈一谈我对前端工程化的认识。“前端工程化”这个词，我是从准备回国，开始频繁和国内公司面试才得知的。每次面试都一定会有人问我，你怎么看待前端工程化。给我的感受是怎么前端不算工程吗？为什么还要特地说一下工程化呢？当时是确实不明白这个概念。我理解的工程，不论前端后端，都需要一套完善的编译，构建，部署，上线流程。在美国如果出现在JD里，可能会明确写需要你有CI/CD经验，需要你熟悉 git version control，需要你了解 docker 或者有 AWS 经验，会很明确技术栈。现在回过头去看中美之间的面试，侧重确实很不一样。在经验问题上，国内面试有点缥缈，问一些很大的问题，工程化的看法，有点像“道”；美国面试会问你AWS怎么玩，Jenkins怎么用，持续集成怎么弄，比较具体，有点像“术”。</p>\n<p>前几天，我想绘制一张前端的知识图谱，有一部分就是前端工程化。但是当时是用英文书写的，所以我一直在想一个贴合的翻译，想了好几个，都觉得很蠢。所以我突然想去查查在英文世界里，有没有这个概念。很遗憾到目前我还没有搜到针对这个词的很精准的对应。如果有朋友了解的，希望可以不吝赐教。不过我在搜索的过程中，找到 Uber Eats 技术团队写的一篇文章，如果感兴趣的话，可以看看 <a href=\"https://eng.uber.com/uber-eats-com-web-app-rewrite/\" target=\"_blank\" rel=\"noopener\">Counting Calories: How We Improved the Performance and Developer Experience of UberEats.com</a>。文章的一部分提到了他们是怎么去做工程化的。但是依旧，没有“工程化”这种概念名词出现。所以如果要我选一个前端工程化的英文翻译，我想我可能会用 Automate。</p>\n<p>叫什么不重要，怎么做和为什么做比较重要。</p>\n"},{"title":"通过 confine 研究 tooltip 的实现过程 -- eCharts 源码解读","abbrlink":"9176cb10","date":"2019-11-06T07:09:13.000Z","_content":"\n实现业务需求时发现 tooltip 中呈现的内容比较多，当出现在边界时会出现一部分在可视范围以外。所幸 echarts 提供了一个 confine 配置给 tooltip，当为 true 时，可以强制使 tooltip 出现在 view 视图中。\n\n接下来来看看源码中是怎样实现 confine 功能的。\n\n首先可以看到，confine 是在 `src/component/tooltip/TooltipModel.js` 中定义，默认值是 `false`\n\n```js\n// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\nexport default echarts.extendComponentModel({\n  type: 'tooltip',\n\n  dependencies: ['axisPointer'],\n\n  defaultOption: {\n    // ...\n    // 'trigger' only works on coordinate system.\n    // 'item' | 'axis' | 'none'\n    trigger: 'item',\n    // 'click' | 'mousemove' | 'none'\n    triggerOn: 'mousemove|click',\n    // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n    confine: false,\n\n    // ...\n  },\n});\n```\n\n接下来，可以看到在同级目录下的 `TooltipView.js` 文件，这里负责定义了 TooltipView 相关的显示、隐藏、更新位置等的方法。在该文件中搜索 confine，发现相关代码主要是两处，一处是 `confineTooltipPosion` function，这里很好理解，通过计算当前 x、y 值，和当前的可视范围的宽高 viewWidth, viewHeight 比较，得到 confine 之后新的 x、y 值。 另一处则是调用`confineTooltipPosion`的 `_updatePosition` 方法.\n\n在这里，一共定义了三种 showTooltip 方法，对应不同的对象。分别是 \\_showAxisTooltip, \\_showComponentItemTooltip 和 \\_showSeriesItemTooltip . 我们只关注 series 中 item 的 tooltip， 至于 AxisTooltip 和 ComponentItemTooltip，在原理上基本一致。\n\n梳理一番之后发现，在该类中，方法的调用链是 `confineTooltipPosion` -> `_updatePosition` -> `_showTooltipContent` -> `_showSeriesItemTooltip` -> `_tryShow` -> `_initGlobalListener` -> `render`. 执行顺序是从右至左。\n\n理清了思路，接下来我们来看代码是如何实现 confine 的过程。\n\n弄清了执行顺序后，就很好理解 tooltip 的渲染过程了。在生命周期 render 函数中，调用了 `_initGlobalListener`，在该方法中， 可以获取到一个共享的全局监听器 `globalListener`. 这个监听器具体实现和属性可参见`src/component/axisPointer/globalListener.js`。 这里我们先关注暴露出来的 `register`方法，他接受三个 arguments: `function register(key, api, handler)`; 所以这里就很好理解了，在初始化阶段，判断 tooltip 的触发条件（triggerOn:'click' | 'mousemove' | 'none' ）， 如果不是`none`， 则 globalListener 给`itemTooltip` 注册了回调 handler。当 `currTrigger`是 `click`或`mousemove` 时，调用 `_tryShow` 显示 tooltip，当 leave 时调用 `_hide`。\n\n```js\n// _initGlobalListener\nvar tooltipModel = this._tooltipModel;\nvar triggerOn = tooltipModel.get('triggerOn');\n\nglobalListener.register(\n  'itemTooltip',\n  this._api,\n  bind(function(currTrigger, e, dispatchAction) {\n    // If 'none', it is not controlled by mouse totally.\n    if (triggerOn !== 'none') {\n      if (triggerOn.indexOf(currTrigger) >= 0) {\n        this._tryShow(e, dispatchAction);\n      } else if (currTrigger === 'leave') {\n        this._hide(dispatchAction);\n      }\n    }\n  }, this),\n);\n```\n\ntryShow 调用后, 我们可以看到这个方法实现非常直观，根据条件来判断显示 series、component 还是 axis 的 tooltip。我们重点关注\\_showSeriesItemTooltip.\n\n走到\\_showSeriesItemTooltip，这个函数声明并计算了一系列的变量，都是为了 function \\_showTooltipContent 的参数做准备。我们可以看到\n\n```js\nthis._showOrMove(tooltipModel, function() {\n  this._showTooltipContent(\n    tooltipModel,\n    defaultHtml,\n    params,\n    asyncTicket,\n    e.offsetX,\n    e.offsetY,\n    e.position,\n    e.target,\n    markers,\n  );\n});\n```\n\n结合 echarts tooltip 的文档和 tooltipModel 来看，我们可以传入一个配置参数 showDelay，如果 delay 大于 0 则 setTimeout，若干秒后执行回调函数，在这里则是显示 toolTip（ \\_showTooltipContent）；否则立即执行 callback。不过官方文档并不建议设置 delay。 所以我们可以认为\\_showOrMove 是个定时器，到了时间后显示 tooltip。\\_showOrMove 实现如下。\n\n```js\n//_showOrMove\n// showDelay is used in this case: tooltip.enterable is set\n// as true. User intent to move mouse into tooltip and click\n// something. `showDelay` makes it easyer to enter the content\n// but tooltip do not move immediately.\nvar delay = tooltipModel.get('showDelay');\ncb = zrUtil.bind(cb, this);\nclearTimeout(this._showTimout);\ndelay > 0 ? (this._showTimout = setTimeout(cb, delay)) : cb();\n```\n\n回到\\_showTooltipContent， 在这个方法里我们知道了 echarts 如何兼容 formatter，传入 string 和 function 时不同的处理方法。通过 typeof 判断后，如果是 string， 则通过 `formatUtil.formatTpl` 直接 replace, return 一个 tpl<string>; 如果 typeof 是 function， 则通过 `.innerHTML` 插入一段新的 string.\n\n关键代码如下, 实现逻辑在这里就不过多关注了。\n\n```js\n// is string formatTpl\n/**\n * Template formatter\n * @param {string} tpl\n * @param {Array.<Object>|Object} paramsList\n * @param {boolean} [encode=false]\n * @return {string}\n */\nexport function formatTpl(tpl, paramsList, encode) {\n  if (!zrUtil.isArray(paramsList)) {\n    paramsList = [paramsList];\n  }\n  var seriesLen = paramsList.length;\n  if (!seriesLen) {\n    return '';\n  }\n\n  var $vars = paramsList[0].$vars || [];\n  for (var i = 0; i < $vars.length; i++) {\n    var alias = TPL_VAR_ALIAS[i];\n    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));\n  }\n  for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n    for (var k = 0; k < $vars.length; k++) {\n      var val = paramsList[seriesIdx][$vars[k]];\n      tpl = tpl.replace(\n        wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n        encode ? encodeHTML(val) : val,\n      );\n    }\n  }\n\n  return tpl;\n}\n```\n\n```js\n// is function, setContent\nsetContent: function (content) {\n  this.el.innerHTML = content == null ? '' : content;\n},\n```\n\n这里插一个题外话， HTML5 规范中表示 `<script>` tag 中的内容在使用 `innerHTML` 插入时是不应该被执行的\n\n```js\nname = \"<script>alert('I am John in an annoying alert!')</script>\";\n el.innerHTML = name; // harmless in this case\n```\n\n但是当不使用 `<script>` tag 并使用 innerHTML 插入 string 时，则会有 croos-site scripting attact 风险\n\n```js\nconst name = \"<img src='x' onerror='alert(1)'>\";\nel.innerHTML = name; // shows the alert\n```\n\n基于这个原因，推荐使用 `Node.textContent` 而不是使用 `innerHTML`\n\n好了，终于生成了 content，和需要的坐标、参数等，这个时候调用了 \\_updatePosition. 在\\_updatePosition 中我们看到 echats 是如何去做当 position 字段传入 string, array 和 function 时的处理方法的。如果对这里感兴趣可以关注一下。 在这个方法的最后，我们看到了对 confine 的判断，如果为 true，则再次调用 confineTooltipPosition, 返回新的 x，y 坐标。然后将 content 移动到新的坐标位置。\n\n```js\nvar viewWidth = this._api.getWidth();\nvar viewHeight = this._api.getHeight();\n\n// ...\n\nif (tooltipModel.get('confine')) {\n  var pos = confineTooltipPosition(x, y, content, viewWidth, viewHeight);\n  x = pos[0];\n  y = pos[1];\n}\n\ncontent.moveTo(x, y);\n```\n\n这里看到 echarts 获取可视范围的高宽，是通过封装在内的 \\_api 内的方法获得。这里涉及到更底层的关于 echarts 调用 zrender 生成 root 绘图容器的过程，基本原理是先获取绘图区域实例，根据该实例再获取高宽。具体过程在此不作赘述。留个记录，有机会再来解析那一部分。具体代码可以参考 `zrender/src/Painter.js`.\n\n回到 `confineTooltipPosition` 方法， 根据前面方法的定义，这里的 x，y 是 e.offsetX 和 e.offsetY. 表示事件发生时鼠标 pointer 到 target node 的 padding 的距离。 而 width 和 height 分别是 clientWidth 和 clientHeight 加上 borderWidth. 通过位置的大小比较，可以保证新的 content 处于可视区域内。第一个 x 判断是否右边溢出，第二个 x 判断是否左边溢出。\n\n```js\nfunction confineTooltipPosition(x, y, content, viewWidth, viewHeight) {\n  var size = content.getOuterSize();\n  var width = size.width;\n  var height = size.height;\n\n  x = Math.min(x + width, viewWidth) - width;\n  y = Math.min(y + height, viewHeight) - height;\n  x = Math.max(x, 0);\n  y = Math.max(y, 0);\n\n  return [x, y];\n}\n\ngetOuterSize: function () {\n    var width = this.el.clientWidth;\n    var height = this.el.clientHeight;\n\n    // Consider browser compatibility.\n    // IE8 does not support getComputedStyle.\n    if (document.defaultView && document.defaultView.getComputedStyle) {\n        var stl = document.defaultView.getComputedStyle(this.el);\n        if (stl) {\n            width += parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);\n            height += parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);\n        }\n    }\n\n    return {width: width, height: height};\n}\n```\n\n然后把 content 移动到新生成的坐标上，至此就完成了 confine 的功能。\n\n最后说一个看代码的心得，平常在实现一些公共 sdk 时，经常需要暴露一些 api，有的时候看到直接定义的是一个 array，然后调用方使用 `array[index]` 去获取某个方法。这样的坏处一个是数组的顺序无法保证，增、删之后 index 可能会变，给调用方造成影响。另外一个是，通过 index 获取时，对调用的方法名感知不到，不能确保使用的方法是否正确。 echarts 中的这个实现比较优雅，apiList 和真正暴露使用的 api 对象解耦。通过遍历 apiList， 产生一个包含 apiList 元素为 key 的对象，调用这个对象时，使用函数名，更直观，更友好，值得学习。\n\n```js\nimport * as zrUtil from 'zrender/src/core/util';\n\nvar echartsAPIList = [\n  'getDom',\n  'getZr',\n  'getWidth',\n  'getHeight',\n  'getDevicePixelRatio',\n  'dispatchAction',\n  'isDisposed',\n  'on',\n  'off',\n  'getDataURL',\n  'getConnectedDataURL',\n  'getModel',\n  'getOption',\n  'getViewOfComponentModel',\n  'getViewOfSeriesModel',\n];\n// And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js\n\nfunction ExtensionAPI(chartInstance) {\n  zrUtil.each(\n    echartsAPIList,\n    function(name) {\n      this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n    },\n    this,\n  );\n}\n\nexport default ExtensionAPI;\n```\n","source":"_posts/tooltip-in-echars.md","raw":"---\ntitle: 通过 confine 研究 tooltip 的实现过程 -- eCharts 源码解读\ncategories:\n  - web\ntags:\n  - echarts\n  - zrender\n  - tooltip\n  - confine\nabbrlink: 9176cb10\ndate: 2019-11-05 23:09:13\n---\n\n实现业务需求时发现 tooltip 中呈现的内容比较多，当出现在边界时会出现一部分在可视范围以外。所幸 echarts 提供了一个 confine 配置给 tooltip，当为 true 时，可以强制使 tooltip 出现在 view 视图中。\n\n接下来来看看源码中是怎样实现 confine 功能的。\n\n首先可以看到，confine 是在 `src/component/tooltip/TooltipModel.js` 中定义，默认值是 `false`\n\n```js\n// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\nexport default echarts.extendComponentModel({\n  type: 'tooltip',\n\n  dependencies: ['axisPointer'],\n\n  defaultOption: {\n    // ...\n    // 'trigger' only works on coordinate system.\n    // 'item' | 'axis' | 'none'\n    trigger: 'item',\n    // 'click' | 'mousemove' | 'none'\n    triggerOn: 'mousemove|click',\n    // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n    confine: false,\n\n    // ...\n  },\n});\n```\n\n接下来，可以看到在同级目录下的 `TooltipView.js` 文件，这里负责定义了 TooltipView 相关的显示、隐藏、更新位置等的方法。在该文件中搜索 confine，发现相关代码主要是两处，一处是 `confineTooltipPosion` function，这里很好理解，通过计算当前 x、y 值，和当前的可视范围的宽高 viewWidth, viewHeight 比较，得到 confine 之后新的 x、y 值。 另一处则是调用`confineTooltipPosion`的 `_updatePosition` 方法.\n\n在这里，一共定义了三种 showTooltip 方法，对应不同的对象。分别是 \\_showAxisTooltip, \\_showComponentItemTooltip 和 \\_showSeriesItemTooltip . 我们只关注 series 中 item 的 tooltip， 至于 AxisTooltip 和 ComponentItemTooltip，在原理上基本一致。\n\n梳理一番之后发现，在该类中，方法的调用链是 `confineTooltipPosion` -> `_updatePosition` -> `_showTooltipContent` -> `_showSeriesItemTooltip` -> `_tryShow` -> `_initGlobalListener` -> `render`. 执行顺序是从右至左。\n\n理清了思路，接下来我们来看代码是如何实现 confine 的过程。\n\n弄清了执行顺序后，就很好理解 tooltip 的渲染过程了。在生命周期 render 函数中，调用了 `_initGlobalListener`，在该方法中， 可以获取到一个共享的全局监听器 `globalListener`. 这个监听器具体实现和属性可参见`src/component/axisPointer/globalListener.js`。 这里我们先关注暴露出来的 `register`方法，他接受三个 arguments: `function register(key, api, handler)`; 所以这里就很好理解了，在初始化阶段，判断 tooltip 的触发条件（triggerOn:'click' | 'mousemove' | 'none' ）， 如果不是`none`， 则 globalListener 给`itemTooltip` 注册了回调 handler。当 `currTrigger`是 `click`或`mousemove` 时，调用 `_tryShow` 显示 tooltip，当 leave 时调用 `_hide`。\n\n```js\n// _initGlobalListener\nvar tooltipModel = this._tooltipModel;\nvar triggerOn = tooltipModel.get('triggerOn');\n\nglobalListener.register(\n  'itemTooltip',\n  this._api,\n  bind(function(currTrigger, e, dispatchAction) {\n    // If 'none', it is not controlled by mouse totally.\n    if (triggerOn !== 'none') {\n      if (triggerOn.indexOf(currTrigger) >= 0) {\n        this._tryShow(e, dispatchAction);\n      } else if (currTrigger === 'leave') {\n        this._hide(dispatchAction);\n      }\n    }\n  }, this),\n);\n```\n\ntryShow 调用后, 我们可以看到这个方法实现非常直观，根据条件来判断显示 series、component 还是 axis 的 tooltip。我们重点关注\\_showSeriesItemTooltip.\n\n走到\\_showSeriesItemTooltip，这个函数声明并计算了一系列的变量，都是为了 function \\_showTooltipContent 的参数做准备。我们可以看到\n\n```js\nthis._showOrMove(tooltipModel, function() {\n  this._showTooltipContent(\n    tooltipModel,\n    defaultHtml,\n    params,\n    asyncTicket,\n    e.offsetX,\n    e.offsetY,\n    e.position,\n    e.target,\n    markers,\n  );\n});\n```\n\n结合 echarts tooltip 的文档和 tooltipModel 来看，我们可以传入一个配置参数 showDelay，如果 delay 大于 0 则 setTimeout，若干秒后执行回调函数，在这里则是显示 toolTip（ \\_showTooltipContent）；否则立即执行 callback。不过官方文档并不建议设置 delay。 所以我们可以认为\\_showOrMove 是个定时器，到了时间后显示 tooltip。\\_showOrMove 实现如下。\n\n```js\n//_showOrMove\n// showDelay is used in this case: tooltip.enterable is set\n// as true. User intent to move mouse into tooltip and click\n// something. `showDelay` makes it easyer to enter the content\n// but tooltip do not move immediately.\nvar delay = tooltipModel.get('showDelay');\ncb = zrUtil.bind(cb, this);\nclearTimeout(this._showTimout);\ndelay > 0 ? (this._showTimout = setTimeout(cb, delay)) : cb();\n```\n\n回到\\_showTooltipContent， 在这个方法里我们知道了 echarts 如何兼容 formatter，传入 string 和 function 时不同的处理方法。通过 typeof 判断后，如果是 string， 则通过 `formatUtil.formatTpl` 直接 replace, return 一个 tpl<string>; 如果 typeof 是 function， 则通过 `.innerHTML` 插入一段新的 string.\n\n关键代码如下, 实现逻辑在这里就不过多关注了。\n\n```js\n// is string formatTpl\n/**\n * Template formatter\n * @param {string} tpl\n * @param {Array.<Object>|Object} paramsList\n * @param {boolean} [encode=false]\n * @return {string}\n */\nexport function formatTpl(tpl, paramsList, encode) {\n  if (!zrUtil.isArray(paramsList)) {\n    paramsList = [paramsList];\n  }\n  var seriesLen = paramsList.length;\n  if (!seriesLen) {\n    return '';\n  }\n\n  var $vars = paramsList[0].$vars || [];\n  for (var i = 0; i < $vars.length; i++) {\n    var alias = TPL_VAR_ALIAS[i];\n    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));\n  }\n  for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n    for (var k = 0; k < $vars.length; k++) {\n      var val = paramsList[seriesIdx][$vars[k]];\n      tpl = tpl.replace(\n        wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n        encode ? encodeHTML(val) : val,\n      );\n    }\n  }\n\n  return tpl;\n}\n```\n\n```js\n// is function, setContent\nsetContent: function (content) {\n  this.el.innerHTML = content == null ? '' : content;\n},\n```\n\n这里插一个题外话， HTML5 规范中表示 `<script>` tag 中的内容在使用 `innerHTML` 插入时是不应该被执行的\n\n```js\nname = \"<script>alert('I am John in an annoying alert!')</script>\";\n el.innerHTML = name; // harmless in this case\n```\n\n但是当不使用 `<script>` tag 并使用 innerHTML 插入 string 时，则会有 croos-site scripting attact 风险\n\n```js\nconst name = \"<img src='x' onerror='alert(1)'>\";\nel.innerHTML = name; // shows the alert\n```\n\n基于这个原因，推荐使用 `Node.textContent` 而不是使用 `innerHTML`\n\n好了，终于生成了 content，和需要的坐标、参数等，这个时候调用了 \\_updatePosition. 在\\_updatePosition 中我们看到 echats 是如何去做当 position 字段传入 string, array 和 function 时的处理方法的。如果对这里感兴趣可以关注一下。 在这个方法的最后，我们看到了对 confine 的判断，如果为 true，则再次调用 confineTooltipPosition, 返回新的 x，y 坐标。然后将 content 移动到新的坐标位置。\n\n```js\nvar viewWidth = this._api.getWidth();\nvar viewHeight = this._api.getHeight();\n\n// ...\n\nif (tooltipModel.get('confine')) {\n  var pos = confineTooltipPosition(x, y, content, viewWidth, viewHeight);\n  x = pos[0];\n  y = pos[1];\n}\n\ncontent.moveTo(x, y);\n```\n\n这里看到 echarts 获取可视范围的高宽，是通过封装在内的 \\_api 内的方法获得。这里涉及到更底层的关于 echarts 调用 zrender 生成 root 绘图容器的过程，基本原理是先获取绘图区域实例，根据该实例再获取高宽。具体过程在此不作赘述。留个记录，有机会再来解析那一部分。具体代码可以参考 `zrender/src/Painter.js`.\n\n回到 `confineTooltipPosition` 方法， 根据前面方法的定义，这里的 x，y 是 e.offsetX 和 e.offsetY. 表示事件发生时鼠标 pointer 到 target node 的 padding 的距离。 而 width 和 height 分别是 clientWidth 和 clientHeight 加上 borderWidth. 通过位置的大小比较，可以保证新的 content 处于可视区域内。第一个 x 判断是否右边溢出，第二个 x 判断是否左边溢出。\n\n```js\nfunction confineTooltipPosition(x, y, content, viewWidth, viewHeight) {\n  var size = content.getOuterSize();\n  var width = size.width;\n  var height = size.height;\n\n  x = Math.min(x + width, viewWidth) - width;\n  y = Math.min(y + height, viewHeight) - height;\n  x = Math.max(x, 0);\n  y = Math.max(y, 0);\n\n  return [x, y];\n}\n\ngetOuterSize: function () {\n    var width = this.el.clientWidth;\n    var height = this.el.clientHeight;\n\n    // Consider browser compatibility.\n    // IE8 does not support getComputedStyle.\n    if (document.defaultView && document.defaultView.getComputedStyle) {\n        var stl = document.defaultView.getComputedStyle(this.el);\n        if (stl) {\n            width += parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);\n            height += parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);\n        }\n    }\n\n    return {width: width, height: height};\n}\n```\n\n然后把 content 移动到新生成的坐标上，至此就完成了 confine 的功能。\n\n最后说一个看代码的心得，平常在实现一些公共 sdk 时，经常需要暴露一些 api，有的时候看到直接定义的是一个 array，然后调用方使用 `array[index]` 去获取某个方法。这样的坏处一个是数组的顺序无法保证，增、删之后 index 可能会变，给调用方造成影响。另外一个是，通过 index 获取时，对调用的方法名感知不到，不能确保使用的方法是否正确。 echarts 中的这个实现比较优雅，apiList 和真正暴露使用的 api 对象解耦。通过遍历 apiList， 产生一个包含 apiList 元素为 key 的对象，调用这个对象时，使用函数名，更直观，更友好，值得学习。\n\n```js\nimport * as zrUtil from 'zrender/src/core/util';\n\nvar echartsAPIList = [\n  'getDom',\n  'getZr',\n  'getWidth',\n  'getHeight',\n  'getDevicePixelRatio',\n  'dispatchAction',\n  'isDisposed',\n  'on',\n  'off',\n  'getDataURL',\n  'getConnectedDataURL',\n  'getModel',\n  'getOption',\n  'getViewOfComponentModel',\n  'getViewOfSeriesModel',\n];\n// And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js\n\nfunction ExtensionAPI(chartInstance) {\n  zrUtil.each(\n    echartsAPIList,\n    function(name) {\n      this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n    },\n    this,\n  );\n}\n\nexport default ExtensionAPI;\n```\n","slug":"tooltip-in-echars","published":1,"updated":"2019-11-15T09:39:12.476Z","_id":"cka6xu72o001t8cmhpsyeqdev","comments":1,"layout":"post","photos":[],"link":"","content":"<p>实现业务需求时发现 tooltip 中呈现的内容比较多，当出现在边界时会出现一部分在可视范围以外。所幸 echarts 提供了一个 confine 配置给 tooltip，当为 true 时，可以强制使 tooltip 出现在 view 视图中。</p>\n<p>接下来来看看源码中是怎样实现 confine 功能的。</p>\n<p>首先可以看到，confine 是在 <code>src/component/tooltip/TooltipModel.js</code> 中定义，默认值是 <code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> echarts.extendComponentModel(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'tooltip'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  dependencies: [<span class=\"string\">'axisPointer'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">  defaultOption: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 'trigger' only works on coordinate system.</span></span><br><span class=\"line\">    <span class=\"comment\">// 'item' | 'axis' | 'none'</span></span><br><span class=\"line\">    trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 'click' | 'mousemove' | 'none'</span></span><br><span class=\"line\">    triggerOn: <span class=\"string\">'mousemove|click'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。</span></span><br><span class=\"line\">    confine: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>接下来，可以看到在同级目录下的 <code>TooltipView.js</code> 文件，这里负责定义了 TooltipView 相关的显示、隐藏、更新位置等的方法。在该文件中搜索 confine，发现相关代码主要是两处，一处是 <code>confineTooltipPosion</code> function，这里很好理解，通过计算当前 x、y 值，和当前的可视范围的宽高 viewWidth, viewHeight 比较，得到 confine 之后新的 x、y 值。 另一处则是调用<code>confineTooltipPosion</code>的 <code>_updatePosition</code> 方法.</p>\n<p>在这里，一共定义了三种 showTooltip 方法，对应不同的对象。分别是 _showAxisTooltip, _showComponentItemTooltip 和 _showSeriesItemTooltip . 我们只关注 series 中 item 的 tooltip， 至于 AxisTooltip 和 ComponentItemTooltip，在原理上基本一致。</p>\n<p>梳理一番之后发现，在该类中，方法的调用链是 <code>confineTooltipPosion</code> -&gt; <code>_updatePosition</code> -&gt; <code>_showTooltipContent</code> -&gt; <code>_showSeriesItemTooltip</code> -&gt; <code>_tryShow</code> -&gt; <code>_initGlobalListener</code> -&gt; <code>render</code>. 执行顺序是从右至左。</p>\n<p>理清了思路，接下来我们来看代码是如何实现 confine 的过程。</p>\n<p>弄清了执行顺序后，就很好理解 tooltip 的渲染过程了。在生命周期 render 函数中，调用了 <code>_initGlobalListener</code>，在该方法中， 可以获取到一个共享的全局监听器 <code>globalListener</code>. 这个监听器具体实现和属性可参见<code>src/component/axisPointer/globalListener.js</code>。 这里我们先关注暴露出来的 <code>register</code>方法，他接受三个 arguments: <code>function register(key, api, handler)</code>; 所以这里就很好理解了，在初始化阶段，判断 tooltip 的触发条件（triggerOn:’click’ | ‘mousemove’ | ‘none’ ）， 如果不是<code>none</code>， 则 globalListener 给<code>itemTooltip</code> 注册了回调 handler。当 <code>currTrigger</code>是 <code>click</code>或<code>mousemove</code> 时，调用 <code>_tryShow</code> 显示 tooltip，当 leave 时调用 <code>_hide</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _initGlobalListener</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tooltipModel = <span class=\"keyword\">this</span>._tooltipModel;</span><br><span class=\"line\"><span class=\"keyword\">var</span> triggerOn = tooltipModel.get(<span class=\"string\">'triggerOn'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">globalListener.register(</span><br><span class=\"line\">  <span class=\"string\">'itemTooltip'</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._api,</span><br><span class=\"line\">  bind(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currTrigger, e, dispatchAction</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// If 'none', it is not controlled by mouse totally.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (triggerOn !== <span class=\"string\">'none'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (triggerOn.indexOf(currTrigger) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._tryShow(e, dispatchAction);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currTrigger === <span class=\"string\">'leave'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._hide(dispatchAction);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"keyword\">this</span>),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>tryShow 调用后, 我们可以看到这个方法实现非常直观，根据条件来判断显示 series、component 还是 axis 的 tooltip。我们重点关注_showSeriesItemTooltip.</p>\n<p>走到_showSeriesItemTooltip，这个函数声明并计算了一系列的变量，都是为了 function _showTooltipContent 的参数做准备。我们可以看到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._showOrMove(tooltipModel, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._showTooltipContent(</span><br><span class=\"line\">    tooltipModel,</span><br><span class=\"line\">    defaultHtml,</span><br><span class=\"line\">    params,</span><br><span class=\"line\">    asyncTicket,</span><br><span class=\"line\">    e.offsetX,</span><br><span class=\"line\">    e.offsetY,</span><br><span class=\"line\">    e.position,</span><br><span class=\"line\">    e.target,</span><br><span class=\"line\">    markers,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结合 echarts tooltip 的文档和 tooltipModel 来看，我们可以传入一个配置参数 showDelay，如果 delay 大于 0 则 setTimeout，若干秒后执行回调函数，在这里则是显示 toolTip（ _showTooltipContent）；否则立即执行 callback。不过官方文档并不建议设置 delay。 所以我们可以认为_showOrMove 是个定时器，到了时间后显示 tooltip。_showOrMove 实现如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//_showOrMove</span></span><br><span class=\"line\"><span class=\"comment\">// showDelay is used in this case: tooltip.enterable is set</span></span><br><span class=\"line\"><span class=\"comment\">// as true. User intent to move mouse into tooltip and click</span></span><br><span class=\"line\"><span class=\"comment\">// something. `showDelay` makes it easyer to enter the content</span></span><br><span class=\"line\"><span class=\"comment\">// but tooltip do not move immediately.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> delay = tooltipModel.get(<span class=\"string\">'showDelay'</span>);</span><br><span class=\"line\">cb = zrUtil.bind(cb, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">clearTimeout(<span class=\"keyword\">this</span>._showTimout);</span><br><span class=\"line\">delay &gt; <span class=\"number\">0</span> ? (<span class=\"keyword\">this</span>._showTimout = setTimeout(cb, delay)) : cb();</span><br></pre></td></tr></table></figure>\n<p>回到_showTooltipContent， 在这个方法里我们知道了 echarts 如何兼容 formatter，传入 string 和 function 时不同的处理方法。通过 typeof 判断后，如果是 string， 则通过 <code>formatUtil.formatTpl</code> 直接 replace, return 一个 tpl<string>; 如果 typeof 是 function， 则通过 <code>.innerHTML</code> 插入一段新的 string.</p>\n<p>关键代码如下, 实现逻辑在这里就不过多关注了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// is string formatTpl</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Template formatter</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">tpl</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array.&lt;Object&gt;|Object&#125;</span> <span class=\"variable\">paramsList</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;boolean&#125;</span> </span>[encode=false]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatTpl</span>(<span class=\"params\">tpl, paramsList, encode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!zrUtil.isArray(paramsList)) &#123;</span><br><span class=\"line\">    paramsList = [paramsList];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> seriesLen = paramsList.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!seriesLen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $vars = paramsList[<span class=\"number\">0</span>].$vars || [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; $vars.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> alias = TPL_VAR_ALIAS[i];</span><br><span class=\"line\">    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, <span class=\"number\">0</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> seriesIdx = <span class=\"number\">0</span>; seriesIdx &lt; seriesLen; seriesIdx++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; $vars.length; k++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> val = paramsList[seriesIdx][$vars[k]];</span><br><span class=\"line\">      tpl = tpl.replace(</span><br><span class=\"line\">        wrapVar(TPL_VAR_ALIAS[k], seriesIdx),</span><br><span class=\"line\">        encode ? encodeHTML(val) : val,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tpl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// is function, setContent</span></span><br><span class=\"line\">setContent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.el.innerHTML = content == <span class=\"literal\">null</span> ? <span class=\"string\">''</span> : content;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这里插一个题外话， HTML5 规范中表示 <code>&lt;script&gt;</code> tag 中的内容在使用 <code>innerHTML</code> 插入时是不应该被执行的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">\"&lt;script&gt;alert('I am John in an annoying alert!')&lt;/script&gt;\"</span>;</span><br><span class=\"line\"> el.innerHTML = name; <span class=\"comment\">// harmless in this case</span></span><br></pre></td></tr></table></figure>\n<p>但是当不使用 <code>&lt;script&gt;</code> tag 并使用 innerHTML 插入 string 时，则会有 croos-site scripting attact 风险</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">\"&lt;img src='x' onerror='alert(1)'&gt;\"</span>;</span><br><span class=\"line\">el.innerHTML = name; <span class=\"comment\">// shows the alert</span></span><br></pre></td></tr></table></figure>\n<p>基于这个原因，推荐使用 <code>Node.textContent</code> 而不是使用 <code>innerHTML</code></p>\n<p>好了，终于生成了 content，和需要的坐标、参数等，这个时候调用了 _updatePosition. 在_updatePosition 中我们看到 echats 是如何去做当 position 字段传入 string, array 和 function 时的处理方法的。如果对这里感兴趣可以关注一下。 在这个方法的最后，我们看到了对 confine 的判断，如果为 true，则再次调用 confineTooltipPosition, 返回新的 x，y 坐标。然后将 content 移动到新的坐标位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> viewWidth = <span class=\"keyword\">this</span>._api.getWidth();</span><br><span class=\"line\"><span class=\"keyword\">var</span> viewHeight = <span class=\"keyword\">this</span>._api.getHeight();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tooltipModel.get(<span class=\"string\">'confine'</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pos = confineTooltipPosition(x, y, content, viewWidth, viewHeight);</span><br><span class=\"line\">  x = pos[<span class=\"number\">0</span>];</span><br><span class=\"line\">  y = pos[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">content.moveTo(x, y);</span><br></pre></td></tr></table></figure>\n<p>这里看到 echarts 获取可视范围的高宽，是通过封装在内的 _api 内的方法获得。这里涉及到更底层的关于 echarts 调用 zrender 生成 root 绘图容器的过程，基本原理是先获取绘图区域实例，根据该实例再获取高宽。具体过程在此不作赘述。留个记录，有机会再来解析那一部分。具体代码可以参考 <code>zrender/src/Painter.js</code>.</p>\n<p>回到 <code>confineTooltipPosition</code> 方法， 根据前面方法的定义，这里的 x，y 是 e.offsetX 和 e.offsetY. 表示事件发生时鼠标 pointer 到 target node 的 padding 的距离。 而 width 和 height 分别是 clientWidth 和 clientHeight 加上 borderWidth. 通过位置的大小比较，可以保证新的 content 处于可视区域内。第一个 x 判断是否右边溢出，第二个 x 判断是否左边溢出。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">confineTooltipPosition</span>(<span class=\"params\">x, y, content, viewWidth, viewHeight</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> size = content.getOuterSize();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> width = size.width;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> height = size.height;</span><br><span class=\"line\"></span><br><span class=\"line\">  x = <span class=\"built_in\">Math</span>.min(x + width, viewWidth) - width;</span><br><span class=\"line\">  y = <span class=\"built_in\">Math</span>.min(y + height, viewHeight) - height;</span><br><span class=\"line\">  x = <span class=\"built_in\">Math</span>.max(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">  y = <span class=\"built_in\">Math</span>.max(y, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getOuterSize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"keyword\">this</span>.el.clientWidth;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> height = <span class=\"keyword\">this</span>.el.clientHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Consider browser compatibility.</span></span><br><span class=\"line\">    <span class=\"comment\">// IE8 does not support getComputedStyle.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.defaultView &amp;&amp; <span class=\"built_in\">document</span>.defaultView.getComputedStyle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stl = <span class=\"built_in\">document</span>.defaultView.getComputedStyle(<span class=\"keyword\">this</span>.el);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stl) &#123;</span><br><span class=\"line\">            width += <span class=\"built_in\">parseInt</span>(stl.borderLeftWidth, <span class=\"number\">10</span>) + <span class=\"built_in\">parseInt</span>(stl.borderRightWidth, <span class=\"number\">10</span>);</span><br><span class=\"line\">            height += <span class=\"built_in\">parseInt</span>(stl.borderTopWidth, <span class=\"number\">10</span>) + <span class=\"built_in\">parseInt</span>(stl.borderBottomWidth, <span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">width</span>: width, <span class=\"attr\">height</span>: height&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后把 content 移动到新生成的坐标上，至此就完成了 confine 的功能。</p>\n<p>最后说一个看代码的心得，平常在实现一些公共 sdk 时，经常需要暴露一些 api，有的时候看到直接定义的是一个 array，然后调用方使用 <code>array[index]</code> 去获取某个方法。这样的坏处一个是数组的顺序无法保证，增、删之后 index 可能会变，给调用方造成影响。另外一个是，通过 index 获取时，对调用的方法名感知不到，不能确保使用的方法是否正确。 echarts 中的这个实现比较优雅，apiList 和真正暴露使用的 api 对象解耦。通过遍历 apiList， 产生一个包含 apiList 元素为 key 的对象，调用这个对象时，使用函数名，更直观，更友好，值得学习。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> zrUtil <span class=\"keyword\">from</span> <span class=\"string\">'zrender/src/core/util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> echartsAPIList = [</span><br><span class=\"line\">  <span class=\"string\">'getDom'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getZr'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getWidth'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getHeight'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getDevicePixelRatio'</span>,</span><br><span class=\"line\">  <span class=\"string\">'dispatchAction'</span>,</span><br><span class=\"line\">  <span class=\"string\">'isDisposed'</span>,</span><br><span class=\"line\">  <span class=\"string\">'on'</span>,</span><br><span class=\"line\">  <span class=\"string\">'off'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getDataURL'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getConnectedDataURL'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getModel'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getOption'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getViewOfComponentModel'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getViewOfSeriesModel'</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExtensionAPI</span>(<span class=\"params\">chartInstance</span>) </span>&#123;</span><br><span class=\"line\">  zrUtil.each(</span><br><span class=\"line\">    echartsAPIList,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>[name] = zrUtil.bind(chartInstance[name], chartInstance);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ExtensionAPI;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>实现业务需求时发现 tooltip 中呈现的内容比较多，当出现在边界时会出现一部分在可视范围以外。所幸 echarts 提供了一个 confine 配置给 tooltip，当为 true 时，可以强制使 tooltip 出现在 view 视图中。</p>\n<p>接下来来看看源码中是怎样实现 confine 功能的。</p>\n<p>首先可以看到，confine 是在 <code>src/component/tooltip/TooltipModel.js</code> 中定义，默认值是 <code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> echarts.extendComponentModel(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'tooltip'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  dependencies: [<span class=\"string\">'axisPointer'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">  defaultOption: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 'trigger' only works on coordinate system.</span></span><br><span class=\"line\">    <span class=\"comment\">// 'item' | 'axis' | 'none'</span></span><br><span class=\"line\">    trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 'click' | 'mousemove' | 'none'</span></span><br><span class=\"line\">    triggerOn: <span class=\"string\">'mousemove|click'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。</span></span><br><span class=\"line\">    confine: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>接下来，可以看到在同级目录下的 <code>TooltipView.js</code> 文件，这里负责定义了 TooltipView 相关的显示、隐藏、更新位置等的方法。在该文件中搜索 confine，发现相关代码主要是两处，一处是 <code>confineTooltipPosion</code> function，这里很好理解，通过计算当前 x、y 值，和当前的可视范围的宽高 viewWidth, viewHeight 比较，得到 confine 之后新的 x、y 值。 另一处则是调用<code>confineTooltipPosion</code>的 <code>_updatePosition</code> 方法.</p>\n<p>在这里，一共定义了三种 showTooltip 方法，对应不同的对象。分别是 _showAxisTooltip, _showComponentItemTooltip 和 _showSeriesItemTooltip . 我们只关注 series 中 item 的 tooltip， 至于 AxisTooltip 和 ComponentItemTooltip，在原理上基本一致。</p>\n<p>梳理一番之后发现，在该类中，方法的调用链是 <code>confineTooltipPosion</code> -&gt; <code>_updatePosition</code> -&gt; <code>_showTooltipContent</code> -&gt; <code>_showSeriesItemTooltip</code> -&gt; <code>_tryShow</code> -&gt; <code>_initGlobalListener</code> -&gt; <code>render</code>. 执行顺序是从右至左。</p>\n<p>理清了思路，接下来我们来看代码是如何实现 confine 的过程。</p>\n<p>弄清了执行顺序后，就很好理解 tooltip 的渲染过程了。在生命周期 render 函数中，调用了 <code>_initGlobalListener</code>，在该方法中， 可以获取到一个共享的全局监听器 <code>globalListener</code>. 这个监听器具体实现和属性可参见<code>src/component/axisPointer/globalListener.js</code>。 这里我们先关注暴露出来的 <code>register</code>方法，他接受三个 arguments: <code>function register(key, api, handler)</code>; 所以这里就很好理解了，在初始化阶段，判断 tooltip 的触发条件（triggerOn:’click’ | ‘mousemove’ | ‘none’ ）， 如果不是<code>none</code>， 则 globalListener 给<code>itemTooltip</code> 注册了回调 handler。当 <code>currTrigger</code>是 <code>click</code>或<code>mousemove</code> 时，调用 <code>_tryShow</code> 显示 tooltip，当 leave 时调用 <code>_hide</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _initGlobalListener</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tooltipModel = <span class=\"keyword\">this</span>._tooltipModel;</span><br><span class=\"line\"><span class=\"keyword\">var</span> triggerOn = tooltipModel.get(<span class=\"string\">'triggerOn'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">globalListener.register(</span><br><span class=\"line\">  <span class=\"string\">'itemTooltip'</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._api,</span><br><span class=\"line\">  bind(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currTrigger, e, dispatchAction</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// If 'none', it is not controlled by mouse totally.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (triggerOn !== <span class=\"string\">'none'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (triggerOn.indexOf(currTrigger) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._tryShow(e, dispatchAction);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currTrigger === <span class=\"string\">'leave'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._hide(dispatchAction);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"keyword\">this</span>),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>tryShow 调用后, 我们可以看到这个方法实现非常直观，根据条件来判断显示 series、component 还是 axis 的 tooltip。我们重点关注_showSeriesItemTooltip.</p>\n<p>走到_showSeriesItemTooltip，这个函数声明并计算了一系列的变量，都是为了 function _showTooltipContent 的参数做准备。我们可以看到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._showOrMove(tooltipModel, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._showTooltipContent(</span><br><span class=\"line\">    tooltipModel,</span><br><span class=\"line\">    defaultHtml,</span><br><span class=\"line\">    params,</span><br><span class=\"line\">    asyncTicket,</span><br><span class=\"line\">    e.offsetX,</span><br><span class=\"line\">    e.offsetY,</span><br><span class=\"line\">    e.position,</span><br><span class=\"line\">    e.target,</span><br><span class=\"line\">    markers,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结合 echarts tooltip 的文档和 tooltipModel 来看，我们可以传入一个配置参数 showDelay，如果 delay 大于 0 则 setTimeout，若干秒后执行回调函数，在这里则是显示 toolTip（ _showTooltipContent）；否则立即执行 callback。不过官方文档并不建议设置 delay。 所以我们可以认为_showOrMove 是个定时器，到了时间后显示 tooltip。_showOrMove 实现如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//_showOrMove</span></span><br><span class=\"line\"><span class=\"comment\">// showDelay is used in this case: tooltip.enterable is set</span></span><br><span class=\"line\"><span class=\"comment\">// as true. User intent to move mouse into tooltip and click</span></span><br><span class=\"line\"><span class=\"comment\">// something. `showDelay` makes it easyer to enter the content</span></span><br><span class=\"line\"><span class=\"comment\">// but tooltip do not move immediately.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> delay = tooltipModel.get(<span class=\"string\">'showDelay'</span>);</span><br><span class=\"line\">cb = zrUtil.bind(cb, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">clearTimeout(<span class=\"keyword\">this</span>._showTimout);</span><br><span class=\"line\">delay &gt; <span class=\"number\">0</span> ? (<span class=\"keyword\">this</span>._showTimout = setTimeout(cb, delay)) : cb();</span><br></pre></td></tr></table></figure>\n<p>回到_showTooltipContent， 在这个方法里我们知道了 echarts 如何兼容 formatter，传入 string 和 function 时不同的处理方法。通过 typeof 判断后，如果是 string， 则通过 <code>formatUtil.formatTpl</code> 直接 replace, return 一个 tpl<string>; 如果 typeof 是 function， 则通过 <code>.innerHTML</code> 插入一段新的 string.</p>\n<p>关键代码如下, 实现逻辑在这里就不过多关注了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// is string formatTpl</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Template formatter</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">tpl</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array.&lt;Object&gt;|Object&#125;</span> <span class=\"variable\">paramsList</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;boolean&#125;</span> </span>[encode=false]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatTpl</span>(<span class=\"params\">tpl, paramsList, encode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!zrUtil.isArray(paramsList)) &#123;</span><br><span class=\"line\">    paramsList = [paramsList];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> seriesLen = paramsList.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!seriesLen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $vars = paramsList[<span class=\"number\">0</span>].$vars || [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; $vars.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> alias = TPL_VAR_ALIAS[i];</span><br><span class=\"line\">    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, <span class=\"number\">0</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> seriesIdx = <span class=\"number\">0</span>; seriesIdx &lt; seriesLen; seriesIdx++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; $vars.length; k++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> val = paramsList[seriesIdx][$vars[k]];</span><br><span class=\"line\">      tpl = tpl.replace(</span><br><span class=\"line\">        wrapVar(TPL_VAR_ALIAS[k], seriesIdx),</span><br><span class=\"line\">        encode ? encodeHTML(val) : val,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tpl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// is function, setContent</span></span><br><span class=\"line\">setContent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.el.innerHTML = content == <span class=\"literal\">null</span> ? <span class=\"string\">''</span> : content;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这里插一个题外话， HTML5 规范中表示 <code>&lt;script&gt;</code> tag 中的内容在使用 <code>innerHTML</code> 插入时是不应该被执行的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">\"&lt;script&gt;alert('I am John in an annoying alert!')&lt;/script&gt;\"</span>;</span><br><span class=\"line\"> el.innerHTML = name; <span class=\"comment\">// harmless in this case</span></span><br></pre></td></tr></table></figure>\n<p>但是当不使用 <code>&lt;script&gt;</code> tag 并使用 innerHTML 插入 string 时，则会有 croos-site scripting attact 风险</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">\"&lt;img src='x' onerror='alert(1)'&gt;\"</span>;</span><br><span class=\"line\">el.innerHTML = name; <span class=\"comment\">// shows the alert</span></span><br></pre></td></tr></table></figure>\n<p>基于这个原因，推荐使用 <code>Node.textContent</code> 而不是使用 <code>innerHTML</code></p>\n<p>好了，终于生成了 content，和需要的坐标、参数等，这个时候调用了 _updatePosition. 在_updatePosition 中我们看到 echats 是如何去做当 position 字段传入 string, array 和 function 时的处理方法的。如果对这里感兴趣可以关注一下。 在这个方法的最后，我们看到了对 confine 的判断，如果为 true，则再次调用 confineTooltipPosition, 返回新的 x，y 坐标。然后将 content 移动到新的坐标位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> viewWidth = <span class=\"keyword\">this</span>._api.getWidth();</span><br><span class=\"line\"><span class=\"keyword\">var</span> viewHeight = <span class=\"keyword\">this</span>._api.getHeight();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tooltipModel.get(<span class=\"string\">'confine'</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pos = confineTooltipPosition(x, y, content, viewWidth, viewHeight);</span><br><span class=\"line\">  x = pos[<span class=\"number\">0</span>];</span><br><span class=\"line\">  y = pos[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">content.moveTo(x, y);</span><br></pre></td></tr></table></figure>\n<p>这里看到 echarts 获取可视范围的高宽，是通过封装在内的 _api 内的方法获得。这里涉及到更底层的关于 echarts 调用 zrender 生成 root 绘图容器的过程，基本原理是先获取绘图区域实例，根据该实例再获取高宽。具体过程在此不作赘述。留个记录，有机会再来解析那一部分。具体代码可以参考 <code>zrender/src/Painter.js</code>.</p>\n<p>回到 <code>confineTooltipPosition</code> 方法， 根据前面方法的定义，这里的 x，y 是 e.offsetX 和 e.offsetY. 表示事件发生时鼠标 pointer 到 target node 的 padding 的距离。 而 width 和 height 分别是 clientWidth 和 clientHeight 加上 borderWidth. 通过位置的大小比较，可以保证新的 content 处于可视区域内。第一个 x 判断是否右边溢出，第二个 x 判断是否左边溢出。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">confineTooltipPosition</span>(<span class=\"params\">x, y, content, viewWidth, viewHeight</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> size = content.getOuterSize();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> width = size.width;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> height = size.height;</span><br><span class=\"line\"></span><br><span class=\"line\">  x = <span class=\"built_in\">Math</span>.min(x + width, viewWidth) - width;</span><br><span class=\"line\">  y = <span class=\"built_in\">Math</span>.min(y + height, viewHeight) - height;</span><br><span class=\"line\">  x = <span class=\"built_in\">Math</span>.max(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">  y = <span class=\"built_in\">Math</span>.max(y, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getOuterSize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"keyword\">this</span>.el.clientWidth;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> height = <span class=\"keyword\">this</span>.el.clientHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Consider browser compatibility.</span></span><br><span class=\"line\">    <span class=\"comment\">// IE8 does not support getComputedStyle.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.defaultView &amp;&amp; <span class=\"built_in\">document</span>.defaultView.getComputedStyle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stl = <span class=\"built_in\">document</span>.defaultView.getComputedStyle(<span class=\"keyword\">this</span>.el);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stl) &#123;</span><br><span class=\"line\">            width += <span class=\"built_in\">parseInt</span>(stl.borderLeftWidth, <span class=\"number\">10</span>) + <span class=\"built_in\">parseInt</span>(stl.borderRightWidth, <span class=\"number\">10</span>);</span><br><span class=\"line\">            height += <span class=\"built_in\">parseInt</span>(stl.borderTopWidth, <span class=\"number\">10</span>) + <span class=\"built_in\">parseInt</span>(stl.borderBottomWidth, <span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">width</span>: width, <span class=\"attr\">height</span>: height&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后把 content 移动到新生成的坐标上，至此就完成了 confine 的功能。</p>\n<p>最后说一个看代码的心得，平常在实现一些公共 sdk 时，经常需要暴露一些 api，有的时候看到直接定义的是一个 array，然后调用方使用 <code>array[index]</code> 去获取某个方法。这样的坏处一个是数组的顺序无法保证，增、删之后 index 可能会变，给调用方造成影响。另外一个是，通过 index 获取时，对调用的方法名感知不到，不能确保使用的方法是否正确。 echarts 中的这个实现比较优雅，apiList 和真正暴露使用的 api 对象解耦。通过遍历 apiList， 产生一个包含 apiList 元素为 key 的对象，调用这个对象时，使用函数名，更直观，更友好，值得学习。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> zrUtil <span class=\"keyword\">from</span> <span class=\"string\">'zrender/src/core/util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> echartsAPIList = [</span><br><span class=\"line\">  <span class=\"string\">'getDom'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getZr'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getWidth'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getHeight'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getDevicePixelRatio'</span>,</span><br><span class=\"line\">  <span class=\"string\">'dispatchAction'</span>,</span><br><span class=\"line\">  <span class=\"string\">'isDisposed'</span>,</span><br><span class=\"line\">  <span class=\"string\">'on'</span>,</span><br><span class=\"line\">  <span class=\"string\">'off'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getDataURL'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getConnectedDataURL'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getModel'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getOption'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getViewOfComponentModel'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getViewOfSeriesModel'</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExtensionAPI</span>(<span class=\"params\">chartInstance</span>) </span>&#123;</span><br><span class=\"line\">  zrUtil.each(</span><br><span class=\"line\">    echartsAPIList,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>[name] = zrUtil.bind(chartInstance[name], chartInstance);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ExtensionAPI;</span><br></pre></td></tr></table></figure>\n"},{"title":"日式吃法","abbrlink":"66075a24","date":"2020-05-22T04:21:22.000Z","_content":"\n天有点热，跟同事去吃兰州拉面。一位同事点了一碗拉面，有汤，比较烫。他用筷子一直扭，把拉面卷到筷子上。大家看着他的表演，他解释道这样凉的更快，是日式吃法，大伙信以为真。紧接着他悠悠地说，这是日照的吃法。\n同事是日照人。\n","source":"_posts/日式吃法.md","raw":"---\ntitle: 日式吃法\ncategories:\n  - life\nabbrlink: 66075a24\ndate: 2020-05-21 21:21:22\ntags:\n---\n\n天有点热，跟同事去吃兰州拉面。一位同事点了一碗拉面，有汤，比较烫。他用筷子一直扭，把拉面卷到筷子上。大家看着他的表演，他解释道这样凉的更快，是日式吃法，大伙信以为真。紧接着他悠悠地说，这是日照的吃法。\n同事是日照人。\n","slug":"日式吃法","published":1,"updated":"2020-06-09T12:32:59.130Z","_id":"ckaguocy200001smh9pqo5umo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>天有点热，跟同事去吃兰州拉面。一位同事点了一碗拉面，有汤，比较烫。他用筷子一直扭，把拉面卷到筷子上。大家看着他的表演，他解释道这样凉的更快，是日式吃法，大伙信以为真。紧接着他悠悠地说，这是日照的吃法。<br>同事是日照人。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>天有点热，跟同事去吃兰州拉面。一位同事点了一碗拉面，有汤，比较烫。他用筷子一直扭，把拉面卷到筷子上。大家看着他的表演，他解释道这样凉的更快，是日式吃法，大伙信以为真。紧接着他悠悠地说，这是日照的吃法。<br>同事是日照人。</p>\n"},{"title":"新还是旧","abbrlink":"de881473","date":"2020-06-05T05:33:22.000Z","_content":"\n今天看了一个崔健的采访。里面有一句话很有感触。“年轻人认为，我看到东西，就是时尚。我看不到的东西都是过时的。”\n\n前段时间，看《世上只有一个京都》的时候，也看到类似的对新和旧的讨论。\n\n在《宗方姐妹》中，姐姐与妹妹似乎就是旧与新的代表。\n\n——“满里，我有那么陈旧吗？那你所谓的崭新又是什么呢？”\n\n——“姐姐去京都，看的是庭园，走的是寺庙。”\n\n——“这些就算是陈旧、腐朽老化的玩意儿吗？我认为不会变老变旧的东西，就是崭新的。真正崭新的东西，就是永远不会变老变旧，不是吗？你所谓的崭新，不过是去年流行的长裙，今年流行的短裙。这些短暂的新鲜事物，你就那么喜欢吗？”\n\n什么是新，什么是旧？值得思考。\n\n补：今天再去看自己转发的那条微博，视频已经被删掉了。意料之外，情理之中。意料之外是因为我感觉整个采访没有聊什么禁忌话题，也没有针对什么部门或者事件，删除的标准或原因实在是难以把握。情理之中是因为前几年，同样是看一个崔健的采访，在对话中谈到政治和音乐的相关话题。过了不知多久再回去看，原视频也被删掉了。可惜当时没有记录下来观点，现在也无从找起了。（2020-06-17）\n","source":"_posts/新还是旧.md","raw":"---\ntitle: 新还是旧\ncategories:\n  - life\nabbrlink: de881473\ndate: 2020-06-04 22:33:22\ntags:\n---\n\n今天看了一个崔健的采访。里面有一句话很有感触。“年轻人认为，我看到东西，就是时尚。我看不到的东西都是过时的。”\n\n前段时间，看《世上只有一个京都》的时候，也看到类似的对新和旧的讨论。\n\n在《宗方姐妹》中，姐姐与妹妹似乎就是旧与新的代表。\n\n——“满里，我有那么陈旧吗？那你所谓的崭新又是什么呢？”\n\n——“姐姐去京都，看的是庭园，走的是寺庙。”\n\n——“这些就算是陈旧、腐朽老化的玩意儿吗？我认为不会变老变旧的东西，就是崭新的。真正崭新的东西，就是永远不会变老变旧，不是吗？你所谓的崭新，不过是去年流行的长裙，今年流行的短裙。这些短暂的新鲜事物，你就那么喜欢吗？”\n\n什么是新，什么是旧？值得思考。\n\n补：今天再去看自己转发的那条微博，视频已经被删掉了。意料之外，情理之中。意料之外是因为我感觉整个采访没有聊什么禁忌话题，也没有针对什么部门或者事件，删除的标准或原因实在是难以把握。情理之中是因为前几年，同样是看一个崔健的采访，在对话中谈到政治和音乐的相关话题。过了不知多久再回去看，原视频也被删掉了。可惜当时没有记录下来观点，现在也无从找起了。（2020-06-17）\n","slug":"新还是旧","published":1,"updated":"2020-06-19T11:22:53.684Z","_id":"ckb6k0nq10000gcmh6etw1hb5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今天看了一个崔健的采访。里面有一句话很有感触。“年轻人认为，我看到东西，就是时尚。我看不到的东西都是过时的。”</p>\n<p>前段时间，看《世上只有一个京都》的时候，也看到类似的对新和旧的讨论。</p>\n<p>在《宗方姐妹》中，姐姐与妹妹似乎就是旧与新的代表。</p>\n<p>——“满里，我有那么陈旧吗？那你所谓的崭新又是什么呢？”</p>\n<p>——“姐姐去京都，看的是庭园，走的是寺庙。”</p>\n<p>——“这些就算是陈旧、腐朽老化的玩意儿吗？我认为不会变老变旧的东西，就是崭新的。真正崭新的东西，就是永远不会变老变旧，不是吗？你所谓的崭新，不过是去年流行的长裙，今年流行的短裙。这些短暂的新鲜事物，你就那么喜欢吗？”</p>\n<p>什么是新，什么是旧？值得思考。</p>\n<p>补：今天再去看自己转发的那条微博，视频已经被删掉了。意料之外，情理之中。意料之外是因为我感觉整个采访没有聊什么禁忌话题，也没有针对什么部门或者事件，删除的标准或原因实在是难以把握。情理之中是因为前几年，同样是看一个崔健的采访，在对话中谈到政治和音乐的相关话题。过了不知多久再回去看，原视频也被删掉了。可惜当时没有记录下来观点，现在也无从找起了。（2020-06-17）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天看了一个崔健的采访。里面有一句话很有感触。“年轻人认为，我看到东西，就是时尚。我看不到的东西都是过时的。”</p>\n<p>前段时间，看《世上只有一个京都》的时候，也看到类似的对新和旧的讨论。</p>\n<p>在《宗方姐妹》中，姐姐与妹妹似乎就是旧与新的代表。</p>\n<p>——“满里，我有那么陈旧吗？那你所谓的崭新又是什么呢？”</p>\n<p>——“姐姐去京都，看的是庭园，走的是寺庙。”</p>\n<p>——“这些就算是陈旧、腐朽老化的玩意儿吗？我认为不会变老变旧的东西，就是崭新的。真正崭新的东西，就是永远不会变老变旧，不是吗？你所谓的崭新，不过是去年流行的长裙，今年流行的短裙。这些短暂的新鲜事物，你就那么喜欢吗？”</p>\n<p>什么是新，什么是旧？值得思考。</p>\n<p>补：今天再去看自己转发的那条微博，视频已经被删掉了。意料之外，情理之中。意料之外是因为我感觉整个采访没有聊什么禁忌话题，也没有针对什么部门或者事件，删除的标准或原因实在是难以把握。情理之中是因为前几年，同样是看一个崔健的采访，在对话中谈到政治和音乐的相关话题。过了不知多久再回去看，原视频也被删掉了。可惜当时没有记录下来观点，现在也无从找起了。（2020-06-17）</p>\n"},{"title":"温度计","abbrlink":"3a5fe83c","date":"2020-06-08T02:27:30.000Z","_content":"\n身体健康的时候测体温，这温度计会不会是坏了？\n发烧了测体温，这温度计会不会是坏了？\n","source":"_posts/温度计.md","raw":"---\ntitle: 温度计\ncategories:\n  - life\nabbrlink: 3a5fe83c\ndate: 2020-06-07 19:27:30\ntags:\n---\n\n身体健康的时候测体温，这温度计会不会是坏了？\n发烧了测体温，这温度计会不会是坏了？\n","slug":"温度计","published":1,"updated":"2020-06-08T13:53:02.024Z","_id":"ckb6k28yh000010mh7yk675vz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>身体健康的时候测体温，这温度计会不会是坏了？<br>发烧了测体温，这温度计会不会是坏了？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>身体健康的时候测体温，这温度计会不会是坏了？<br>发烧了测体温，这温度计会不会是坏了？</p>\n"},{"title":"摆摊","abbrlink":"9dd3c30c","date":"2020-06-09T04:53:45.000Z","_content":"\n最近摆摊这个话题很火。好多公司蹭着这波流量发了些营销活动和视频，朋友圈看到好几个，员工老板齐上阵，支个摊，摆几张打印的 A4 纸，拿个大喇叭喊几句广告口号。不仅互联网公司，不少群众也是跃跃欲试，吆五喝六的表示自己要出去卖点啥啥。虽然绝大部分都是借着这个风头开开玩笑，但也不缺真有此想法的。就跟前两年万众创业，如今风头吹向万众摆摊。\n\n看了不少大伙说的摆摊规划，还没见一个人说我想买什么，一个都没有，全是卖家。我也不记得我上一次走在街上临时起意买东西是什么时候了，瓶装水除外。\n\n起风了，大家蜂拥而至，跑得快的抢得先机，跑得慢的和脑子不聪明的亦步亦趋。风吹往下一个领域，留下一地鸡毛。在这个过程中有两种人挺受伤的，一个是一直干这行的，卖煎饼的卖豆浆的，挣点辛苦钱。大量新人闯进来，挤压了原先这些从业者的生存空间，短期利益可能会下降，撑不过去就死掉了。第二种就是看别人干，自己也去试试的玩票型玩家，成本投入了，时间投入了，一条街上都是同质化商品。卖啥啥不行，摊出来的煎饼只能发发朋友圈，吃下去一言难尽，又吃不了苦，不能起早贪黑，做热干面的活也不行。干这行能说会道的还能赚点，那种看着别人有肉吃就入行的，就只能眼睁睁等死了。\n\n我也干过摆摊。\n\n大二的时候，新生来学校，校方在篮球场上划了一片区域搭了好多遮阳棚，一个棚子下四个摊位。有几个有生意头脑的同学搞定了进货商，同时也通过一些手段，拿到了摊位的经营权。然后再把摊位经营权发给关系要好，或者看得上，信得过的同学。这些拿到经营权的同学，就发动自己认识的同学，老乡，让他们来摊位上购买电话卡和棉被。现在看来这些一级 dealer 们真是即有魄力又有商业头脑，还有组织建设和管理经验，值得学习。当时我与其中一个头头熟络，他做个人情，给我一个摊位。但是两三天的摆摊生涯下来，我感受到了自己的技不如人。摆摊需要会说道，会拉关系。有些学生一个人来的，该怎么卖；有那种家长带着孩子来的，又怎么卖；还有几个学生的小团体，各有门道，不一而论。我们只能接接自己院系的同乡，目标群体大大减少。而且我那时也不太会拉关系（即使现在也不擅长），没法快速忽悠买家，也做不到差异化的营销，可以想象，那么大一片摊位，全卖一样的产品，结果可想而知。后来算下来，业绩十分惨淡，大约赚了几百块，吃了一顿烤鱼，喝了几瓶啤酒。现在回想起来，也是别有一番滋味。\n\n还记得给我摊位的那个朋友姓冯。大学毕业大家各奔前程，他成立了一间公司，在学校旁边开发区租了个办公室。十多年过去了，不知道生意做得怎样了。\n\n后记：前几日北京又有消息说，北京不适合摆摊，想想也是，堂堂首都，摆摊多了市容怎么办。最近北京疫情又爆发，这一波风口暂时算是歇菜，没人提了。2020-06-19。\n","source":"_posts/摆摊.md","raw":"---\ntitle: 摆摊\ncategories:\n  - life\nabbrlink: 9dd3c30c\ndate: 2020-06-08 21:53:45\ntags:\n---\n\n最近摆摊这个话题很火。好多公司蹭着这波流量发了些营销活动和视频，朋友圈看到好几个，员工老板齐上阵，支个摊，摆几张打印的 A4 纸，拿个大喇叭喊几句广告口号。不仅互联网公司，不少群众也是跃跃欲试，吆五喝六的表示自己要出去卖点啥啥。虽然绝大部分都是借着这个风头开开玩笑，但也不缺真有此想法的。就跟前两年万众创业，如今风头吹向万众摆摊。\n\n看了不少大伙说的摆摊规划，还没见一个人说我想买什么，一个都没有，全是卖家。我也不记得我上一次走在街上临时起意买东西是什么时候了，瓶装水除外。\n\n起风了，大家蜂拥而至，跑得快的抢得先机，跑得慢的和脑子不聪明的亦步亦趋。风吹往下一个领域，留下一地鸡毛。在这个过程中有两种人挺受伤的，一个是一直干这行的，卖煎饼的卖豆浆的，挣点辛苦钱。大量新人闯进来，挤压了原先这些从业者的生存空间，短期利益可能会下降，撑不过去就死掉了。第二种就是看别人干，自己也去试试的玩票型玩家，成本投入了，时间投入了，一条街上都是同质化商品。卖啥啥不行，摊出来的煎饼只能发发朋友圈，吃下去一言难尽，又吃不了苦，不能起早贪黑，做热干面的活也不行。干这行能说会道的还能赚点，那种看着别人有肉吃就入行的，就只能眼睁睁等死了。\n\n我也干过摆摊。\n\n大二的时候，新生来学校，校方在篮球场上划了一片区域搭了好多遮阳棚，一个棚子下四个摊位。有几个有生意头脑的同学搞定了进货商，同时也通过一些手段，拿到了摊位的经营权。然后再把摊位经营权发给关系要好，或者看得上，信得过的同学。这些拿到经营权的同学，就发动自己认识的同学，老乡，让他们来摊位上购买电话卡和棉被。现在看来这些一级 dealer 们真是即有魄力又有商业头脑，还有组织建设和管理经验，值得学习。当时我与其中一个头头熟络，他做个人情，给我一个摊位。但是两三天的摆摊生涯下来，我感受到了自己的技不如人。摆摊需要会说道，会拉关系。有些学生一个人来的，该怎么卖；有那种家长带着孩子来的，又怎么卖；还有几个学生的小团体，各有门道，不一而论。我们只能接接自己院系的同乡，目标群体大大减少。而且我那时也不太会拉关系（即使现在也不擅长），没法快速忽悠买家，也做不到差异化的营销，可以想象，那么大一片摊位，全卖一样的产品，结果可想而知。后来算下来，业绩十分惨淡，大约赚了几百块，吃了一顿烤鱼，喝了几瓶啤酒。现在回想起来，也是别有一番滋味。\n\n还记得给我摊位的那个朋友姓冯。大学毕业大家各奔前程，他成立了一间公司，在学校旁边开发区租了个办公室。十多年过去了，不知道生意做得怎样了。\n\n后记：前几日北京又有消息说，北京不适合摆摊，想想也是，堂堂首都，摆摊多了市容怎么办。最近北京疫情又爆发，这一波风口暂时算是歇菜，没人提了。2020-06-19。\n","slug":"摆摊","published":1,"updated":"2020-06-19T11:28:05.884Z","_id":"ckb6k477y0000asmhcqtd62y6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近摆摊这个话题很火。好多公司蹭着这波流量发了些营销活动和视频，朋友圈看到好几个，员工老板齐上阵，支个摊，摆几张打印的 A4 纸，拿个大喇叭喊几句广告口号。不仅互联网公司，不少群众也是跃跃欲试，吆五喝六的表示自己要出去卖点啥啥。虽然绝大部分都是借着这个风头开开玩笑，但也不缺真有此想法的。就跟前两年万众创业，如今风头吹向万众摆摊。</p>\n<p>看了不少大伙说的摆摊规划，还没见一个人说我想买什么，一个都没有，全是卖家。我也不记得我上一次走在街上临时起意买东西是什么时候了，瓶装水除外。</p>\n<p>起风了，大家蜂拥而至，跑得快的抢得先机，跑得慢的和脑子不聪明的亦步亦趋。风吹往下一个领域，留下一地鸡毛。在这个过程中有两种人挺受伤的，一个是一直干这行的，卖煎饼的卖豆浆的，挣点辛苦钱。大量新人闯进来，挤压了原先这些从业者的生存空间，短期利益可能会下降，撑不过去就死掉了。第二种就是看别人干，自己也去试试的玩票型玩家，成本投入了，时间投入了，一条街上都是同质化商品。卖啥啥不行，摊出来的煎饼只能发发朋友圈，吃下去一言难尽，又吃不了苦，不能起早贪黑，做热干面的活也不行。干这行能说会道的还能赚点，那种看着别人有肉吃就入行的，就只能眼睁睁等死了。</p>\n<p>我也干过摆摊。</p>\n<p>大二的时候，新生来学校，校方在篮球场上划了一片区域搭了好多遮阳棚，一个棚子下四个摊位。有几个有生意头脑的同学搞定了进货商，同时也通过一些手段，拿到了摊位的经营权。然后再把摊位经营权发给关系要好，或者看得上，信得过的同学。这些拿到经营权的同学，就发动自己认识的同学，老乡，让他们来摊位上购买电话卡和棉被。现在看来这些一级 dealer 们真是即有魄力又有商业头脑，还有组织建设和管理经验，值得学习。当时我与其中一个头头熟络，他做个人情，给我一个摊位。但是两三天的摆摊生涯下来，我感受到了自己的技不如人。摆摊需要会说道，会拉关系。有些学生一个人来的，该怎么卖；有那种家长带着孩子来的，又怎么卖；还有几个学生的小团体，各有门道，不一而论。我们只能接接自己院系的同乡，目标群体大大减少。而且我那时也不太会拉关系（即使现在也不擅长），没法快速忽悠买家，也做不到差异化的营销，可以想象，那么大一片摊位，全卖一样的产品，结果可想而知。后来算下来，业绩十分惨淡，大约赚了几百块，吃了一顿烤鱼，喝了几瓶啤酒。现在回想起来，也是别有一番滋味。</p>\n<p>还记得给我摊位的那个朋友姓冯。大学毕业大家各奔前程，他成立了一间公司，在学校旁边开发区租了个办公室。十多年过去了，不知道生意做得怎样了。</p>\n<p>后记：前几日北京又有消息说，北京不适合摆摊，想想也是，堂堂首都，摆摊多了市容怎么办。最近北京疫情又爆发，这一波风口暂时算是歇菜，没人提了。2020-06-19。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近摆摊这个话题很火。好多公司蹭着这波流量发了些营销活动和视频，朋友圈看到好几个，员工老板齐上阵，支个摊，摆几张打印的 A4 纸，拿个大喇叭喊几句广告口号。不仅互联网公司，不少群众也是跃跃欲试，吆五喝六的表示自己要出去卖点啥啥。虽然绝大部分都是借着这个风头开开玩笑，但也不缺真有此想法的。就跟前两年万众创业，如今风头吹向万众摆摊。</p>\n<p>看了不少大伙说的摆摊规划，还没见一个人说我想买什么，一个都没有，全是卖家。我也不记得我上一次走在街上临时起意买东西是什么时候了，瓶装水除外。</p>\n<p>起风了，大家蜂拥而至，跑得快的抢得先机，跑得慢的和脑子不聪明的亦步亦趋。风吹往下一个领域，留下一地鸡毛。在这个过程中有两种人挺受伤的，一个是一直干这行的，卖煎饼的卖豆浆的，挣点辛苦钱。大量新人闯进来，挤压了原先这些从业者的生存空间，短期利益可能会下降，撑不过去就死掉了。第二种就是看别人干，自己也去试试的玩票型玩家，成本投入了，时间投入了，一条街上都是同质化商品。卖啥啥不行，摊出来的煎饼只能发发朋友圈，吃下去一言难尽，又吃不了苦，不能起早贪黑，做热干面的活也不行。干这行能说会道的还能赚点，那种看着别人有肉吃就入行的，就只能眼睁睁等死了。</p>\n<p>我也干过摆摊。</p>\n<p>大二的时候，新生来学校，校方在篮球场上划了一片区域搭了好多遮阳棚，一个棚子下四个摊位。有几个有生意头脑的同学搞定了进货商，同时也通过一些手段，拿到了摊位的经营权。然后再把摊位经营权发给关系要好，或者看得上，信得过的同学。这些拿到经营权的同学，就发动自己认识的同学，老乡，让他们来摊位上购买电话卡和棉被。现在看来这些一级 dealer 们真是即有魄力又有商业头脑，还有组织建设和管理经验，值得学习。当时我与其中一个头头熟络，他做个人情，给我一个摊位。但是两三天的摆摊生涯下来，我感受到了自己的技不如人。摆摊需要会说道，会拉关系。有些学生一个人来的，该怎么卖；有那种家长带着孩子来的，又怎么卖；还有几个学生的小团体，各有门道，不一而论。我们只能接接自己院系的同乡，目标群体大大减少。而且我那时也不太会拉关系（即使现在也不擅长），没法快速忽悠买家，也做不到差异化的营销，可以想象，那么大一片摊位，全卖一样的产品，结果可想而知。后来算下来，业绩十分惨淡，大约赚了几百块，吃了一顿烤鱼，喝了几瓶啤酒。现在回想起来，也是别有一番滋味。</p>\n<p>还记得给我摊位的那个朋友姓冯。大学毕业大家各奔前程，他成立了一间公司，在学校旁边开发区租了个办公室。十多年过去了，不知道生意做得怎样了。</p>\n<p>后记：前几日北京又有消息说，北京不适合摆摊，想想也是，堂堂首都，摆摊多了市容怎么办。最近北京疫情又爆发，这一波风口暂时算是歇菜，没人提了。2020-06-19。</p>\n"},{"title":"午夜急诊","abbrlink":"1cc7585a","date":"2020-06-09T18:08:43.000Z","_content":"\n上周放纵了一把，喝了顿大酒。事后感觉难受，头疼牙疼眼睛疼，撑了两天不见消退，朋友建议去医院看看。本计划挂第二天的门诊，朋友又说晚上急诊也可以看，人还少，验血化验不排队。我心想有理，反正可能需要抽血，晚上化验了第二天再给门诊大夫看，省时。于是打车去医院急诊。\n\n到了门诊大楼，因为疫情，门口被几张桌子拦起来，绕出一条路，当中一张桌后坐了一位保安低头玩手机。园区里没什么灯，全靠急诊大厅的灯光照亮，远看仿佛一个山洞，保安如同山大王正坐当中。门外人不多，我一边向门口走去，一边想怎么跟护士描述我的感觉。还没到门口，听见有个女人呻吟，咿呀哎哟的，无法喊出正常的词句，听起来十分痛苦。仔细一看，原来是门右边的黑影里，一个中年妇女坐躺在轮椅上，一个男人站在椅背后，仿佛不知所措，又仿佛无可奈何。那对男女一直在黑影里，我看不出年龄。女子的声音气若游丝，但又真真切切，喊的人心里发毛，虽谈不上害怕，但我还是不自觉地绕开，从门最左边溜进大厅。\n\n进了大厅，里面光亮起来，心里发毛的感觉消失了。一番登记测温，值班护士告诉我医生晚上无法出诊，只能明早挂门诊。于是我退出大厅，准备打车回家。\n\n出到门外，那妇人依旧呻吟不停，于是我走入黑暗里，隔着大门，一边等车一遍远远地观察。妇人身上披着毯子，在这个夏夜显得有些格格不入，她一刻不停的呻吟，有气无力，听不出是喊妈妈还是哎呀。男子此刻盘坐在地上，盯着轮椅发呆，手里夹着一只香烟，烟头的火光如萤火虫一般，在黑夜里忽明忽暗。几米外的停车位，两个黑车司机抽着烟闲聊，有说有笑，对这场面已经见怪不怪。他们手里刷着短视频，时不时传出僵硬的罐头笑声。这笑声在黑夜里，配合着妇人的呻吟，显得尤其阴森恐怖。\n\n车很快到了，我上车之后盯着窗外发呆。那个妇人凄惨的叫声让我有点难受，久久不能忘怀。在那一刹那，我突然有点怀疑北漂的意义，如果今晚那个妇人是我的家人，甚至我自己，我该怎么办，偌大的北京，也不知在哪能弄到一张急诊病床，来一针镇痛药。我感受到个体的渺小，肌体在病痛前不堪一击。我有些怀疑，假使若干年后孤身一人，自己该如何应对今夜的状况。我该怎么去医院，该怎么挂号，疼痛难忍时，该怎么向大夫表述我的感觉。曾经看到一种论调，说婚姻和家庭是个体应对风险的机制（不是唯一的，其他的方式方法包括不仅限医疗，保险等），在这个夜里我有些更深的认识。\n\n我为那位陌生的妇女祈祷，为那位坐在黑影里的男人祝福，虽然我的祈祷并不值钱。\n","source":"_posts/午夜急诊.md","raw":"---\ntitle: 午夜急诊\ncategories:\n  - life\nabbrlink: 1cc7585a\ndate: 2020-06-09 11:08:43\ntags:\n---\n\n上周放纵了一把，喝了顿大酒。事后感觉难受，头疼牙疼眼睛疼，撑了两天不见消退，朋友建议去医院看看。本计划挂第二天的门诊，朋友又说晚上急诊也可以看，人还少，验血化验不排队。我心想有理，反正可能需要抽血，晚上化验了第二天再给门诊大夫看，省时。于是打车去医院急诊。\n\n到了门诊大楼，因为疫情，门口被几张桌子拦起来，绕出一条路，当中一张桌后坐了一位保安低头玩手机。园区里没什么灯，全靠急诊大厅的灯光照亮，远看仿佛一个山洞，保安如同山大王正坐当中。门外人不多，我一边向门口走去，一边想怎么跟护士描述我的感觉。还没到门口，听见有个女人呻吟，咿呀哎哟的，无法喊出正常的词句，听起来十分痛苦。仔细一看，原来是门右边的黑影里，一个中年妇女坐躺在轮椅上，一个男人站在椅背后，仿佛不知所措，又仿佛无可奈何。那对男女一直在黑影里，我看不出年龄。女子的声音气若游丝，但又真真切切，喊的人心里发毛，虽谈不上害怕，但我还是不自觉地绕开，从门最左边溜进大厅。\n\n进了大厅，里面光亮起来，心里发毛的感觉消失了。一番登记测温，值班护士告诉我医生晚上无法出诊，只能明早挂门诊。于是我退出大厅，准备打车回家。\n\n出到门外，那妇人依旧呻吟不停，于是我走入黑暗里，隔着大门，一边等车一遍远远地观察。妇人身上披着毯子，在这个夏夜显得有些格格不入，她一刻不停的呻吟，有气无力，听不出是喊妈妈还是哎呀。男子此刻盘坐在地上，盯着轮椅发呆，手里夹着一只香烟，烟头的火光如萤火虫一般，在黑夜里忽明忽暗。几米外的停车位，两个黑车司机抽着烟闲聊，有说有笑，对这场面已经见怪不怪。他们手里刷着短视频，时不时传出僵硬的罐头笑声。这笑声在黑夜里，配合着妇人的呻吟，显得尤其阴森恐怖。\n\n车很快到了，我上车之后盯着窗外发呆。那个妇人凄惨的叫声让我有点难受，久久不能忘怀。在那一刹那，我突然有点怀疑北漂的意义，如果今晚那个妇人是我的家人，甚至我自己，我该怎么办，偌大的北京，也不知在哪能弄到一张急诊病床，来一针镇痛药。我感受到个体的渺小，肌体在病痛前不堪一击。我有些怀疑，假使若干年后孤身一人，自己该如何应对今夜的状况。我该怎么去医院，该怎么挂号，疼痛难忍时，该怎么向大夫表述我的感觉。曾经看到一种论调，说婚姻和家庭是个体应对风险的机制（不是唯一的，其他的方式方法包括不仅限医疗，保险等），在这个夜里我有些更深的认识。\n\n我为那位陌生的妇女祈祷，为那位坐在黑影里的男人祝福，虽然我的祈祷并不值钱。\n","slug":"午夜急诊","published":1,"updated":"2020-07-06T12:04:21.368Z","_id":"ckb7cj43900004nfyengy8boo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上周放纵了一把，喝了顿大酒。事后感觉难受，头疼牙疼眼睛疼，撑了两天不见消退，朋友建议去医院看看。本计划挂第二天的门诊，朋友又说晚上急诊也可以看，人还少，验血化验不排队。我心想有理，反正可能需要抽血，晚上化验了第二天再给门诊大夫看，省时。于是打车去医院急诊。</p>\n<p>到了门诊大楼，因为疫情，门口被几张桌子拦起来，绕出一条路，当中一张桌后坐了一位保安低头玩手机。园区里没什么灯，全靠急诊大厅的灯光照亮，远看仿佛一个山洞，保安如同山大王正坐当中。门外人不多，我一边向门口走去，一边想怎么跟护士描述我的感觉。还没到门口，听见有个女人呻吟，咿呀哎哟的，无法喊出正常的词句，听起来十分痛苦。仔细一看，原来是门右边的黑影里，一个中年妇女坐躺在轮椅上，一个男人站在椅背后，仿佛不知所措，又仿佛无可奈何。那对男女一直在黑影里，我看不出年龄。女子的声音气若游丝，但又真真切切，喊的人心里发毛，虽谈不上害怕，但我还是不自觉地绕开，从门最左边溜进大厅。</p>\n<p>进了大厅，里面光亮起来，心里发毛的感觉消失了。一番登记测温，值班护士告诉我医生晚上无法出诊，只能明早挂门诊。于是我退出大厅，准备打车回家。</p>\n<p>出到门外，那妇人依旧呻吟不停，于是我走入黑暗里，隔着大门，一边等车一遍远远地观察。妇人身上披着毯子，在这个夏夜显得有些格格不入，她一刻不停的呻吟，有气无力，听不出是喊妈妈还是哎呀。男子此刻盘坐在地上，盯着轮椅发呆，手里夹着一只香烟，烟头的火光如萤火虫一般，在黑夜里忽明忽暗。几米外的停车位，两个黑车司机抽着烟闲聊，有说有笑，对这场面已经见怪不怪。他们手里刷着短视频，时不时传出僵硬的罐头笑声。这笑声在黑夜里，配合着妇人的呻吟，显得尤其阴森恐怖。</p>\n<p>车很快到了，我上车之后盯着窗外发呆。那个妇人凄惨的叫声让我有点难受，久久不能忘怀。在那一刹那，我突然有点怀疑北漂的意义，如果今晚那个妇人是我的家人，甚至我自己，我该怎么办，偌大的北京，也不知在哪能弄到一张急诊病床，来一针镇痛药。我感受到个体的渺小，肌体在病痛前不堪一击。我有些怀疑，假使若干年后孤身一人，自己该如何应对今夜的状况。我该怎么去医院，该怎么挂号，疼痛难忍时，该怎么向大夫表述我的感觉。曾经看到一种论调，说婚姻和家庭是个体应对风险的机制（不是唯一的，其他的方式方法包括不仅限医疗，保险等），在这个夜里我有些更深的认识。</p>\n<p>我为那位陌生的妇女祈祷，为那位坐在黑影里的男人祝福，虽然我的祈祷并不值钱。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上周放纵了一把，喝了顿大酒。事后感觉难受，头疼牙疼眼睛疼，撑了两天不见消退，朋友建议去医院看看。本计划挂第二天的门诊，朋友又说晚上急诊也可以看，人还少，验血化验不排队。我心想有理，反正可能需要抽血，晚上化验了第二天再给门诊大夫看，省时。于是打车去医院急诊。</p>\n<p>到了门诊大楼，因为疫情，门口被几张桌子拦起来，绕出一条路，当中一张桌后坐了一位保安低头玩手机。园区里没什么灯，全靠急诊大厅的灯光照亮，远看仿佛一个山洞，保安如同山大王正坐当中。门外人不多，我一边向门口走去，一边想怎么跟护士描述我的感觉。还没到门口，听见有个女人呻吟，咿呀哎哟的，无法喊出正常的词句，听起来十分痛苦。仔细一看，原来是门右边的黑影里，一个中年妇女坐躺在轮椅上，一个男人站在椅背后，仿佛不知所措，又仿佛无可奈何。那对男女一直在黑影里，我看不出年龄。女子的声音气若游丝，但又真真切切，喊的人心里发毛，虽谈不上害怕，但我还是不自觉地绕开，从门最左边溜进大厅。</p>\n<p>进了大厅，里面光亮起来，心里发毛的感觉消失了。一番登记测温，值班护士告诉我医生晚上无法出诊，只能明早挂门诊。于是我退出大厅，准备打车回家。</p>\n<p>出到门外，那妇人依旧呻吟不停，于是我走入黑暗里，隔着大门，一边等车一遍远远地观察。妇人身上披着毯子，在这个夏夜显得有些格格不入，她一刻不停的呻吟，有气无力，听不出是喊妈妈还是哎呀。男子此刻盘坐在地上，盯着轮椅发呆，手里夹着一只香烟，烟头的火光如萤火虫一般，在黑夜里忽明忽暗。几米外的停车位，两个黑车司机抽着烟闲聊，有说有笑，对这场面已经见怪不怪。他们手里刷着短视频，时不时传出僵硬的罐头笑声。这笑声在黑夜里，配合着妇人的呻吟，显得尤其阴森恐怖。</p>\n<p>车很快到了，我上车之后盯着窗外发呆。那个妇人凄惨的叫声让我有点难受，久久不能忘怀。在那一刹那，我突然有点怀疑北漂的意义，如果今晚那个妇人是我的家人，甚至我自己，我该怎么办，偌大的北京，也不知在哪能弄到一张急诊病床，来一针镇痛药。我感受到个体的渺小，肌体在病痛前不堪一击。我有些怀疑，假使若干年后孤身一人，自己该如何应对今夜的状况。我该怎么去医院，该怎么挂号，疼痛难忍时，该怎么向大夫表述我的感觉。曾经看到一种论调，说婚姻和家庭是个体应对风险的机制（不是唯一的，其他的方式方法包括不仅限医疗，保险等），在这个夜里我有些更深的认识。</p>\n<p>我为那位陌生的妇女祈祷，为那位坐在黑影里的男人祝福，虽然我的祈祷并不值钱。</p>\n"},{"title":"天文课","abbrlink":"26feb4d9","date":"2020-07-09T03:32:03.000Z","_content":"\n晚上去理发，迎面走来四个小男孩儿，约摸五六岁的样子，其中一个抱着篮球，估计刚从球场玩完回家。他们排成一溜，边走边大声说话。\n\n其中一个问，地壳下面是什么？\n\n其中一个回答，地壳下面是地幔！\n\n之前一个小孩紧接着问到，那地幔下面是什么？\n\n还是前面那个小孩道，地幔下面是地核，我上过天文课！\n\n之后我和他们擦肩而过。\n","source":"_posts/天文课.md","raw":"---\ntitle: 天文课\ncategories:\n  - life\nabbrlink: 26feb4d9\ndate: 2020-07-08 20:32:03\ntags:\n---\n\n晚上去理发，迎面走来四个小男孩儿，约摸五六岁的样子，其中一个抱着篮球，估计刚从球场玩完回家。他们排成一溜，边走边大声说话。\n\n其中一个问，地壳下面是什么？\n\n其中一个回答，地壳下面是地幔！\n\n之前一个小孩紧接着问到，那地幔下面是什么？\n\n还是前面那个小孩道，地幔下面是地核，我上过天文课！\n\n之后我和他们擦肩而过。\n","slug":"天文课","published":1,"updated":"2020-07-08T13:31:45.934Z","_id":"ckcdcedex00009nfy3emy4uu1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>晚上去理发，迎面走来四个小男孩儿，约摸五六岁的样子，其中一个抱着篮球，估计刚从球场玩完回家。他们排成一溜，边走边大声说话。</p>\n<p>其中一个问，地壳下面是什么？</p>\n<p>其中一个回答，地壳下面是地幔！</p>\n<p>之前一个小孩紧接着问到，那地幔下面是什么？</p>\n<p>还是前面那个小孩道，地幔下面是地核，我上过天文课！</p>\n<p>之后我和他们擦肩而过。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>晚上去理发，迎面走来四个小男孩儿，约摸五六岁的样子，其中一个抱着篮球，估计刚从球场玩完回家。他们排成一溜，边走边大声说话。</p>\n<p>其中一个问，地壳下面是什么？</p>\n<p>其中一个回答，地壳下面是地幔！</p>\n<p>之前一个小孩紧接着问到，那地幔下面是什么？</p>\n<p>还是前面那个小孩道，地幔下面是地核，我上过天文课！</p>\n<p>之后我和他们擦肩而过。</p>\n"},{"title":"彼得原理","abbrlink":"46cfbd3d","date":"2020-07-21T21:44:40.000Z","_content":"\n最近公司架构有些变化，从原来的三层管理变为了四层。队伍还是那个队伍，老板变多了。当然也是几家欢喜几家愁。虽然对我也有些影响，但是远谈不上冲击，不过在心里倒是有些看法。\n\n公司蓬勃向上的时候，可以选择横向扩展，业务多，蛋糕大，进去之后容易做出成绩，得到反馈也大，有点像占山为王，划地盘。这种通常发生在创业阶段。在这个时候，甚至还会发生职级跟不上职权的情况。可一旦发展速率跟不上了，尤其是业务成熟的部门，蛋糕不够分了，这个时候就没法横向扩展，只能纵向增加，稀释原有的职级，插入新的管理层，原本应该开疆扩土的，只能在切过的蛋糕上继续分割。\n\n企业管理里有一个“彼得原理”：在一个等级制度中，每个员工趋向于上升到他所不能胜任的地位。想来有些道理，公司谋发展，员工也要进步，也需要职级的提升来激励个体，谁不想当领导呢？\n","source":"_posts/彼得原理.md","raw":"---\ntitle: 彼得原理\ncategories:\n  - life\nabbrlink: 46cfbd3d\ndate: 2020-07-21 14:44:40\ntags:\n---\n\n最近公司架构有些变化，从原来的三层管理变为了四层。队伍还是那个队伍，老板变多了。当然也是几家欢喜几家愁。虽然对我也有些影响，但是远谈不上冲击，不过在心里倒是有些看法。\n\n公司蓬勃向上的时候，可以选择横向扩展，业务多，蛋糕大，进去之后容易做出成绩，得到反馈也大，有点像占山为王，划地盘。这种通常发生在创业阶段。在这个时候，甚至还会发生职级跟不上职权的情况。可一旦发展速率跟不上了，尤其是业务成熟的部门，蛋糕不够分了，这个时候就没法横向扩展，只能纵向增加，稀释原有的职级，插入新的管理层，原本应该开疆扩土的，只能在切过的蛋糕上继续分割。\n\n企业管理里有一个“彼得原理”：在一个等级制度中，每个员工趋向于上升到他所不能胜任的地位。想来有些道理，公司谋发展，员工也要进步，也需要职级的提升来激励个体，谁不想当领导呢？\n","slug":"彼得原理","published":1,"updated":"2020-09-05T16:56:17.198Z","_id":"ckcvlqb7z0000bkfybsaaf6kf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近公司架构有些变化，从原来的三层管理变为了四层。队伍还是那个队伍，老板变多了。当然也是几家欢喜几家愁。虽然对我也有些影响，但是远谈不上冲击，不过在心里倒是有些看法。</p>\n<p>公司蓬勃向上的时候，可以选择横向扩展，业务多，蛋糕大，进去之后容易做出成绩，得到反馈也大，有点像占山为王，划地盘。这种通常发生在创业阶段。在这个时候，甚至还会发生职级跟不上职权的情况。可一旦发展速率跟不上了，尤其是业务成熟的部门，蛋糕不够分了，这个时候就没法横向扩展，只能纵向增加，稀释原有的职级，插入新的管理层，原本应该开疆扩土的，只能在切过的蛋糕上继续分割。</p>\n<p>企业管理里有一个“彼得原理”：在一个等级制度中，每个员工趋向于上升到他所不能胜任的地位。想来有些道理，公司谋发展，员工也要进步，也需要职级的提升来激励个体，谁不想当领导呢？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近公司架构有些变化，从原来的三层管理变为了四层。队伍还是那个队伍，老板变多了。当然也是几家欢喜几家愁。虽然对我也有些影响，但是远谈不上冲击，不过在心里倒是有些看法。</p>\n<p>公司蓬勃向上的时候，可以选择横向扩展，业务多，蛋糕大，进去之后容易做出成绩，得到反馈也大，有点像占山为王，划地盘。这种通常发生在创业阶段。在这个时候，甚至还会发生职级跟不上职权的情况。可一旦发展速率跟不上了，尤其是业务成熟的部门，蛋糕不够分了，这个时候就没法横向扩展，只能纵向增加，稀释原有的职级，插入新的管理层，原本应该开疆扩土的，只能在切过的蛋糕上继续分割。</p>\n<p>企业管理里有一个“彼得原理”：在一个等级制度中，每个员工趋向于上升到他所不能胜任的地位。想来有些道理，公司谋发展，员工也要进步，也需要职级的提升来激励个体，谁不想当领导呢？</p>\n"},{"title":"三十而立","abbrlink":"3052b9d9","date":"2020-10-25T07:57:53.000Z","_content":"\n年轻时为赋新词强说愁，年纪大了抽刀断水水更流。现在对中年人不太友好，地位比狗低。动辄打上油腻的标签。再加上现在身边大多是小自己一圈的年轻人，生怕自己不经意间表现得油腻而不自知，年轻人估计面子也不点破。思前想后，总结了几条，引以为戒，也算是行为准则。\n\n第一，戒好为人师。长辈看晚辈不知进取，晚辈叹长辈顽固不化，一代人有一代人的哲学与活法，看不惯就一笑而过。过往的经验也许早就不适应现在的节奏，不用还揣在怀里当宝贝传递给下一代。年轻人见得多，学得快，多向他们学习才是正道。不用再把过去的事情反复提及，当年勇就留在当年的回忆之中。\n\n第二，少喝酒，喝酒少说话。清醒的时候都是言多必失，何况喝了酒，不知道会捅出什么篓子。身体不再年轻了，不像大学时候，喝啤酒像喝水，喝完还能翻墙回宿舍爬上高低床。现在喝酒，适可而止，年轻时逞强抖狠，年纪大了，被社会锤了几回，早都甘拜下风。小聚时品几杯白酒，清谈闲聊，到点回家。谨慎选择喝酒对象，聊得来举几次杯，聊不来找个由头早点溜，自己也不是什么大咖，别把自己太当回事。朋友、同学聚餐，闷声吃就行，少回忆，一回忆就油腻。尤其是在场有年轻姑娘，自觉找个角落闷声歇着。酒局完了多跑步，多吃几天沙拉。\n\n第三，对自己有清醒的认识，别自恋，别戏精。年轻时不受女孩子欢迎，年纪大了被人喜欢的概率为零。和姑娘聊天交往要坦诚，大大方方，合适就合适，不合适别扭捏。算计太多终将一无所获。现代人手机不离身，不回就是默拒，不要强求，留点颜面和尊严。\n\n第四，注意形象，保重身体，抬头挺胸收腹提臀。肚子一定不能有，比票子多不如比腰围小。深蹲跑步不能停，家庭和谐不可少。头发稀疏了就戴个帽子装扮成艺术家。每年置办一两身合适衣物。干净熨帖就行，纯色没有标识最佳。定时体检警示自己，中年人谨防心脑血管疾病，不抽烟，少喝酒，多喝水，多走动。\n\n第五，保持学习，少看手机。如果不能用手机赚大钱，就少看点手机。多读点书，不为孩子做榜样，也让自己充实一点，内心安宁最重要。多研究技术，吃饭的手艺不能丢。也多看看小说，生活循规蹈矩，冷漠的日子里也需要一点温情和浪漫。\n\n第六，发展几个花时间爱好，动起来。人到中年，不会消磨时间可不行。写字钓鱼都可以，活动健康有保障。冬天滑滑雪，刺激一下肾上腺素，在山顶找回一下十八岁的感觉。有机会带着老婆孩子去看看朝霞落日，哪天孩子不听话，内心一边默念不能动手不能动手，一边想想幸福时光，也就忍住了。练练毛笔字，让自己有点安静的时间。跟父亲钓钓鱼，爷俩沉默，话题不多，多些陪伴也好。\n\n第七，莫谈国是。既不在高堂，也不开出租，就少聊政治。不是认识了十年的朋友，少谈政治。认识十年以上的朋友，更少谈政治。前者容易多个敌人，后者容易少个朋友。聊聊花鸟虫鱼，聊聊哪里的少年培训班质量高，哪里的雪场雪质好。生活不易，少谈点沉重的话题。\n\n最近又看了一遍王小波的《三十而立》，原来觉得幽默，现在读出酸楚。如果不是为了生活，谁不愿每天去看母猪配种，无奈工作里尽是病床守夜的活。小时候世界很大，想当科学家。长大了世界很小，我只想早点下班回家。","source":"_posts/三十而立.md","raw":"---\ntitle: 三十而立\ncategories:\n  - life\nabbrlink: 3052b9d9\ndate: 2020-10-25 00:57:53\ntags:\n---\n\n年轻时为赋新词强说愁，年纪大了抽刀断水水更流。现在对中年人不太友好，地位比狗低。动辄打上油腻的标签。再加上现在身边大多是小自己一圈的年轻人，生怕自己不经意间表现得油腻而不自知，年轻人估计面子也不点破。思前想后，总结了几条，引以为戒，也算是行为准则。\n\n第一，戒好为人师。长辈看晚辈不知进取，晚辈叹长辈顽固不化，一代人有一代人的哲学与活法，看不惯就一笑而过。过往的经验也许早就不适应现在的节奏，不用还揣在怀里当宝贝传递给下一代。年轻人见得多，学得快，多向他们学习才是正道。不用再把过去的事情反复提及，当年勇就留在当年的回忆之中。\n\n第二，少喝酒，喝酒少说话。清醒的时候都是言多必失，何况喝了酒，不知道会捅出什么篓子。身体不再年轻了，不像大学时候，喝啤酒像喝水，喝完还能翻墙回宿舍爬上高低床。现在喝酒，适可而止，年轻时逞强抖狠，年纪大了，被社会锤了几回，早都甘拜下风。小聚时品几杯白酒，清谈闲聊，到点回家。谨慎选择喝酒对象，聊得来举几次杯，聊不来找个由头早点溜，自己也不是什么大咖，别把自己太当回事。朋友、同学聚餐，闷声吃就行，少回忆，一回忆就油腻。尤其是在场有年轻姑娘，自觉找个角落闷声歇着。酒局完了多跑步，多吃几天沙拉。\n\n第三，对自己有清醒的认识，别自恋，别戏精。年轻时不受女孩子欢迎，年纪大了被人喜欢的概率为零。和姑娘聊天交往要坦诚，大大方方，合适就合适，不合适别扭捏。算计太多终将一无所获。现代人手机不离身，不回就是默拒，不要强求，留点颜面和尊严。\n\n第四，注意形象，保重身体，抬头挺胸收腹提臀。肚子一定不能有，比票子多不如比腰围小。深蹲跑步不能停，家庭和谐不可少。头发稀疏了就戴个帽子装扮成艺术家。每年置办一两身合适衣物。干净熨帖就行，纯色没有标识最佳。定时体检警示自己，中年人谨防心脑血管疾病，不抽烟，少喝酒，多喝水，多走动。\n\n第五，保持学习，少看手机。如果不能用手机赚大钱，就少看点手机。多读点书，不为孩子做榜样，也让自己充实一点，内心安宁最重要。多研究技术，吃饭的手艺不能丢。也多看看小说，生活循规蹈矩，冷漠的日子里也需要一点温情和浪漫。\n\n第六，发展几个花时间爱好，动起来。人到中年，不会消磨时间可不行。写字钓鱼都可以，活动健康有保障。冬天滑滑雪，刺激一下肾上腺素，在山顶找回一下十八岁的感觉。有机会带着老婆孩子去看看朝霞落日，哪天孩子不听话，内心一边默念不能动手不能动手，一边想想幸福时光，也就忍住了。练练毛笔字，让自己有点安静的时间。跟父亲钓钓鱼，爷俩沉默，话题不多，多些陪伴也好。\n\n第七，莫谈国是。既不在高堂，也不开出租，就少聊政治。不是认识了十年的朋友，少谈政治。认识十年以上的朋友，更少谈政治。前者容易多个敌人，后者容易少个朋友。聊聊花鸟虫鱼，聊聊哪里的少年培训班质量高，哪里的雪场雪质好。生活不易，少谈点沉重的话题。\n\n最近又看了一遍王小波的《三十而立》，原来觉得幽默，现在读出酸楚。如果不是为了生活，谁不愿每天去看母猪配种，无奈工作里尽是病床守夜的活。小时候世界很大，想当科学家。长大了世界很小，我只想早点下班回家。","slug":"三十而立","published":1,"updated":"2021-03-24T08:41:53.677Z","_id":"ckev41f160001jqs6cgxo6fgz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>年轻时为赋新词强说愁，年纪大了抽刀断水水更流。现在对中年人不太友好，地位比狗低。动辄打上油腻的标签。再加上现在身边大多是小自己一圈的年轻人，生怕自己不经意间表现得油腻而不自知，年轻人估计面子也不点破。思前想后，总结了几条，引以为戒，也算是行为准则。</p>\n<p>第一，戒好为人师。长辈看晚辈不知进取，晚辈叹长辈顽固不化，一代人有一代人的哲学与活法，看不惯就一笑而过。过往的经验也许早就不适应现在的节奏，不用还揣在怀里当宝贝传递给下一代。年轻人见得多，学得快，多向他们学习才是正道。不用再把过去的事情反复提及，当年勇就留在当年的回忆之中。</p>\n<p>第二，少喝酒，喝酒少说话。清醒的时候都是言多必失，何况喝了酒，不知道会捅出什么篓子。身体不再年轻了，不像大学时候，喝啤酒像喝水，喝完还能翻墙回宿舍爬上高低床。现在喝酒，适可而止，年轻时逞强抖狠，年纪大了，被社会锤了几回，早都甘拜下风。小聚时品几杯白酒，清谈闲聊，到点回家。谨慎选择喝酒对象，聊得来举几次杯，聊不来找个由头早点溜，自己也不是什么大咖，别把自己太当回事。朋友、同学聚餐，闷声吃就行，少回忆，一回忆就油腻。尤其是在场有年轻姑娘，自觉找个角落闷声歇着。酒局完了多跑步，多吃几天沙拉。</p>\n<p>第三，对自己有清醒的认识，别自恋，别戏精。年轻时不受女孩子欢迎，年纪大了被人喜欢的概率为零。和姑娘聊天交往要坦诚，大大方方，合适就合适，不合适别扭捏。算计太多终将一无所获。现代人手机不离身，不回就是默拒，不要强求，留点颜面和尊严。</p>\n<p>第四，注意形象，保重身体，抬头挺胸收腹提臀。肚子一定不能有，比票子多不如比腰围小。深蹲跑步不能停，家庭和谐不可少。头发稀疏了就戴个帽子装扮成艺术家。每年置办一两身合适衣物。干净熨帖就行，纯色没有标识最佳。定时体检警示自己，中年人谨防心脑血管疾病，不抽烟，少喝酒，多喝水，多走动。</p>\n<p>第五，保持学习，少看手机。如果不能用手机赚大钱，就少看点手机。多读点书，不为孩子做榜样，也让自己充实一点，内心安宁最重要。多研究技术，吃饭的手艺不能丢。也多看看小说，生活循规蹈矩，冷漠的日子里也需要一点温情和浪漫。</p>\n<p>第六，发展几个花时间爱好，动起来。人到中年，不会消磨时间可不行。写字钓鱼都可以，活动健康有保障。冬天滑滑雪，刺激一下肾上腺素，在山顶找回一下十八岁的感觉。有机会带着老婆孩子去看看朝霞落日，哪天孩子不听话，内心一边默念不能动手不能动手，一边想想幸福时光，也就忍住了。练练毛笔字，让自己有点安静的时间。跟父亲钓钓鱼，爷俩沉默，话题不多，多些陪伴也好。</p>\n<p>第七，莫谈国是。既不在高堂，也不开出租，就少聊政治。不是认识了十年的朋友，少谈政治。认识十年以上的朋友，更少谈政治。前者容易多个敌人，后者容易少个朋友。聊聊花鸟虫鱼，聊聊哪里的少年培训班质量高，哪里的雪场雪质好。生活不易，少谈点沉重的话题。</p>\n<p>最近又看了一遍王小波的《三十而立》，原来觉得幽默，现在读出酸楚。如果不是为了生活，谁不愿每天去看母猪配种，无奈工作里尽是病床守夜的活。小时候世界很大，想当科学家。长大了世界很小，我只想早点下班回家。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>年轻时为赋新词强说愁，年纪大了抽刀断水水更流。现在对中年人不太友好，地位比狗低。动辄打上油腻的标签。再加上现在身边大多是小自己一圈的年轻人，生怕自己不经意间表现得油腻而不自知，年轻人估计面子也不点破。思前想后，总结了几条，引以为戒，也算是行为准则。</p>\n<p>第一，戒好为人师。长辈看晚辈不知进取，晚辈叹长辈顽固不化，一代人有一代人的哲学与活法，看不惯就一笑而过。过往的经验也许早就不适应现在的节奏，不用还揣在怀里当宝贝传递给下一代。年轻人见得多，学得快，多向他们学习才是正道。不用再把过去的事情反复提及，当年勇就留在当年的回忆之中。</p>\n<p>第二，少喝酒，喝酒少说话。清醒的时候都是言多必失，何况喝了酒，不知道会捅出什么篓子。身体不再年轻了，不像大学时候，喝啤酒像喝水，喝完还能翻墙回宿舍爬上高低床。现在喝酒，适可而止，年轻时逞强抖狠，年纪大了，被社会锤了几回，早都甘拜下风。小聚时品几杯白酒，清谈闲聊，到点回家。谨慎选择喝酒对象，聊得来举几次杯，聊不来找个由头早点溜，自己也不是什么大咖，别把自己太当回事。朋友、同学聚餐，闷声吃就行，少回忆，一回忆就油腻。尤其是在场有年轻姑娘，自觉找个角落闷声歇着。酒局完了多跑步，多吃几天沙拉。</p>\n<p>第三，对自己有清醒的认识，别自恋，别戏精。年轻时不受女孩子欢迎，年纪大了被人喜欢的概率为零。和姑娘聊天交往要坦诚，大大方方，合适就合适，不合适别扭捏。算计太多终将一无所获。现代人手机不离身，不回就是默拒，不要强求，留点颜面和尊严。</p>\n<p>第四，注意形象，保重身体，抬头挺胸收腹提臀。肚子一定不能有，比票子多不如比腰围小。深蹲跑步不能停，家庭和谐不可少。头发稀疏了就戴个帽子装扮成艺术家。每年置办一两身合适衣物。干净熨帖就行，纯色没有标识最佳。定时体检警示自己，中年人谨防心脑血管疾病，不抽烟，少喝酒，多喝水，多走动。</p>\n<p>第五，保持学习，少看手机。如果不能用手机赚大钱，就少看点手机。多读点书，不为孩子做榜样，也让自己充实一点，内心安宁最重要。多研究技术，吃饭的手艺不能丢。也多看看小说，生活循规蹈矩，冷漠的日子里也需要一点温情和浪漫。</p>\n<p>第六，发展几个花时间爱好，动起来。人到中年，不会消磨时间可不行。写字钓鱼都可以，活动健康有保障。冬天滑滑雪，刺激一下肾上腺素，在山顶找回一下十八岁的感觉。有机会带着老婆孩子去看看朝霞落日，哪天孩子不听话，内心一边默念不能动手不能动手，一边想想幸福时光，也就忍住了。练练毛笔字，让自己有点安静的时间。跟父亲钓钓鱼，爷俩沉默，话题不多，多些陪伴也好。</p>\n<p>第七，莫谈国是。既不在高堂，也不开出租，就少聊政治。不是认识了十年的朋友，少谈政治。认识十年以上的朋友，更少谈政治。前者容易多个敌人，后者容易少个朋友。聊聊花鸟虫鱼，聊聊哪里的少年培训班质量高，哪里的雪场雪质好。生活不易，少谈点沉重的话题。</p>\n<p>最近又看了一遍王小波的《三十而立》，原来觉得幽默，现在读出酸楚。如果不是为了生活，谁不愿每天去看母猪配种，无奈工作里尽是病床守夜的活。小时候世界很大，想当科学家。长大了世界很小，我只想早点下班回家。</p>\n"},{"title":"JavaScript Events","abbrlink":"96058034","date":"2018-04-15T23:47:42.000Z","_content":"\n#### Register\n\n```js\nmyElement.onclick = functionA;\nmyElement.onclick = functionB;\n```\n\nsecond row will overwrite first row\n\n```js\nmyElement.addEventListener('click', functionA);\nmyElement.addEventListener('click', functionB);\n```\n\nboth would run\n\nwhich should use\n\n- inline event handlers `<button onclick=\"bgChange()\">Press me</button>` （don't use）\n- Event handler properties; element.onclick; better cross-browser compatibility (IE8)\n- DOM Level 2 Events; element.addEventListener('click', functionA); (IE9, can register multiple events，can be removed)\n\n#### event objects\n\ne/evt/event\n\nevent.target\n\n#### Preventing default behavior\n\ne.preventDefault();\n\n#### Event bubbling\n\nEvent bubbling and capture are two mechanisms that describe what happens when two handlers\nof the same event type are activated on one element.\n\nIn the capturing phase:\n\nThe browser checks to see if the element's outer-most ancestor (`<html>`) has an onclick event handler registered on it in the capturing phase, and runs it if so.\nThen it moves on to the next element inside `<html>` and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.\n\nIn the bubbling phase, the exact opposite occurs:\n\nThe browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.\nThen it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the `<html>` element.\n\nEvent handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.\n\n```js\nelement1.addEventListener('click', doSomething2, true); // fire at capture phase\nelement2.addEventListener('click', doSomething, false);\n```\n\n#### Event delegation\n\nif you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.\n\n```html\n<ul id=\"parent-list\">\n  <li id=\"post-1\">Item 1</li>\n  <li id=\"post-2\">Item 2</li>\n  <li id=\"post-3\">Item 3</li>\n  <li id=\"post-4\">Item 4</li>\n  <li id=\"post-5\">Item 5</li>\n  <li id=\"post-6\" class=\"endangered\">Item 6</li>\n</ul>\n```\n\n```js\n// Get the element, add a click listener...\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  // e.target is the clicked element!\n  // If it was a list item\n  if (e.target && e.target.nodeName == 'LI') {\n    // List item found!  Output the ID!\n    console.log(\n      'List item ',\n      e.target.id.replace('post-', ''),\n      ' was clicked!',\n    );\n  }\n});\n\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  if (e.target && e.target.matches('li.endangered')) {\n    // List item found!  Output the ID!\n    console.log('The ' + e.target.textContent + ' is endangered!');\n  }\n});\n```\n\n#### related reading\n\nmdn <https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture>\n\nevent order <https://www.quirksmode.org/js/events_order.html>\n\nevent delegate <https://davidwalsh.name/event-delegate>\n\nEvent delegation <https://javascript.info/event-delegation>\n","source":"_posts/javascript-events.md","raw":"---\ntitle: JavaScript Events\ncategories:\n  - web\ntags:\n  - window\n  - events\n  - capture/bubbling\n  - delegate\n  - javascript\nabbrlink: '96058034'\ndate: 2018-04-15 16:47:42\n---\n\n#### Register\n\n```js\nmyElement.onclick = functionA;\nmyElement.onclick = functionB;\n```\n\nsecond row will overwrite first row\n\n```js\nmyElement.addEventListener('click', functionA);\nmyElement.addEventListener('click', functionB);\n```\n\nboth would run\n\nwhich should use\n\n- inline event handlers `<button onclick=\"bgChange()\">Press me</button>` （don't use）\n- Event handler properties; element.onclick; better cross-browser compatibility (IE8)\n- DOM Level 2 Events; element.addEventListener('click', functionA); (IE9, can register multiple events，can be removed)\n\n#### event objects\n\ne/evt/event\n\nevent.target\n\n#### Preventing default behavior\n\ne.preventDefault();\n\n#### Event bubbling\n\nEvent bubbling and capture are two mechanisms that describe what happens when two handlers\nof the same event type are activated on one element.\n\nIn the capturing phase:\n\nThe browser checks to see if the element's outer-most ancestor (`<html>`) has an onclick event handler registered on it in the capturing phase, and runs it if so.\nThen it moves on to the next element inside `<html>` and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.\n\nIn the bubbling phase, the exact opposite occurs:\n\nThe browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.\nThen it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the `<html>` element.\n\nEvent handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.\n\n```js\nelement1.addEventListener('click', doSomething2, true); // fire at capture phase\nelement2.addEventListener('click', doSomething, false);\n```\n\n#### Event delegation\n\nif you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.\n\n```html\n<ul id=\"parent-list\">\n  <li id=\"post-1\">Item 1</li>\n  <li id=\"post-2\">Item 2</li>\n  <li id=\"post-3\">Item 3</li>\n  <li id=\"post-4\">Item 4</li>\n  <li id=\"post-5\">Item 5</li>\n  <li id=\"post-6\" class=\"endangered\">Item 6</li>\n</ul>\n```\n\n```js\n// Get the element, add a click listener...\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  // e.target is the clicked element!\n  // If it was a list item\n  if (e.target && e.target.nodeName == 'LI') {\n    // List item found!  Output the ID!\n    console.log(\n      'List item ',\n      e.target.id.replace('post-', ''),\n      ' was clicked!',\n    );\n  }\n});\n\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  if (e.target && e.target.matches('li.endangered')) {\n    // List item found!  Output the ID!\n    console.log('The ' + e.target.textContent + ' is endangered!');\n  }\n});\n```\n\n#### related reading\n\nmdn <https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture>\n\nevent order <https://www.quirksmode.org/js/events_order.html>\n\nevent delegate <https://davidwalsh.name/event-delegate>\n\nEvent delegation <https://javascript.info/event-delegation>\n","slug":"javascript-events","published":1,"updated":"2020-09-09T08:19:11.098Z","_id":"ckev435fo0000njs6ga936lti","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Register\"><a href=\"#Register\" class=\"headerlink\" title=\"Register\"></a>Register</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.onclick = functionA;</span><br><span class=\"line\">myElement.onclick = functionB;</span><br></pre></td></tr></table></figure>\n<p>second row will overwrite first row</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionA);</span><br><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionB);</span><br></pre></td></tr></table></figure>\n<p>both would run</p>\n<p>which should use</p>\n<ul>\n<li>inline event handlers <code>&lt;button onclick=&quot;bgChange()&quot;&gt;Press me&lt;/button&gt;</code> （don’t use）</li>\n<li>Event handler properties; element.onclick; better cross-browser compatibility (IE8)</li>\n<li>DOM Level 2 Events; element.addEventListener(‘click’, functionA); (IE9, can register multiple events，can be removed)</li>\n</ul>\n<h4 id=\"event-objects\"><a href=\"#event-objects\" class=\"headerlink\" title=\"event objects\"></a>event objects</h4><p>e/evt/event</p>\n<p>event.target</p>\n<h4 id=\"Preventing-default-behavior\"><a href=\"#Preventing-default-behavior\" class=\"headerlink\" title=\"Preventing default behavior\"></a>Preventing default behavior</h4><p>e.preventDefault();</p>\n<h4 id=\"Event-bubbling\"><a href=\"#Event-bubbling\" class=\"headerlink\" title=\"Event bubbling\"></a>Event bubbling</h4><p>Event bubbling and capture are two mechanisms that describe what happens when two handlers<br>of the same event type are activated on one element.</p>\n<p>In the capturing phase:</p>\n<p>The browser checks to see if the element’s outer-most ancestor (<code>&lt;html&gt;</code>) has an onclick event handler registered on it in the capturing phase, and runs it if so.<br>Then it moves on to the next element inside <code>&lt;html&gt;</code> and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.</p>\n<p>In the bubbling phase, the exact opposite occurs:</p>\n<p>The browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.<br>Then it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the <code>&lt;html&gt;</code> element.</p>\n<p>Event handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element1.addEventListener(<span class=\"string\">'click'</span>, doSomething2, <span class=\"literal\">true</span>); <span class=\"comment\">// fire at capture phase</span></span><br><span class=\"line\">element2.addEventListener(<span class=\"string\">'click'</span>, doSomething, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Event-delegation\"><a href=\"#Event-delegation\" class=\"headerlink\" title=\"Event delegation\"></a>Event delegation</h4><p>if you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-1\"</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-2\"</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-3\"</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-4\"</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-5\"</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-6\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"endangered\"</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the element, add a click listener...</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// e.target is the clicked element!</span></span><br><span class=\"line\">  <span class=\"comment\">// If it was a list item</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.nodeName == <span class=\"string\">'LI'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">      <span class=\"string\">'List item '</span>,</span><br><span class=\"line\">      e.target.id.replace(<span class=\"string\">'post-'</span>, <span class=\"string\">''</span>),</span><br><span class=\"line\">      <span class=\"string\">' was clicked!'</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.matches(<span class=\"string\">'li.endangered'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The '</span> + e.target.textContent + <span class=\"string\">' is endangered!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"related-reading\"><a href=\"#related-reading\" class=\"headerlink\" title=\"related reading\"></a>related reading</h4><p>mdn <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture</a></p>\n<p>event order <a href=\"https://www.quirksmode.org/js/events_order.html\" target=\"_blank\" rel=\"noopener\">https://www.quirksmode.org/js/events_order.html</a></p>\n<p>event delegate <a href=\"https://davidwalsh.name/event-delegate\" target=\"_blank\" rel=\"noopener\">https://davidwalsh.name/event-delegate</a></p>\n<p>Event delegation <a href=\"https://javascript.info/event-delegation\" target=\"_blank\" rel=\"noopener\">https://javascript.info/event-delegation</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Register\"><a href=\"#Register\" class=\"headerlink\" title=\"Register\"></a>Register</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.onclick = functionA;</span><br><span class=\"line\">myElement.onclick = functionB;</span><br></pre></td></tr></table></figure>\n<p>second row will overwrite first row</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionA);</span><br><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionB);</span><br></pre></td></tr></table></figure>\n<p>both would run</p>\n<p>which should use</p>\n<ul>\n<li>inline event handlers <code>&lt;button onclick=&quot;bgChange()&quot;&gt;Press me&lt;/button&gt;</code> （don’t use）</li>\n<li>Event handler properties; element.onclick; better cross-browser compatibility (IE8)</li>\n<li>DOM Level 2 Events; element.addEventListener(‘click’, functionA); (IE9, can register multiple events，can be removed)</li>\n</ul>\n<h4 id=\"event-objects\"><a href=\"#event-objects\" class=\"headerlink\" title=\"event objects\"></a>event objects</h4><p>e/evt/event</p>\n<p>event.target</p>\n<h4 id=\"Preventing-default-behavior\"><a href=\"#Preventing-default-behavior\" class=\"headerlink\" title=\"Preventing default behavior\"></a>Preventing default behavior</h4><p>e.preventDefault();</p>\n<h4 id=\"Event-bubbling\"><a href=\"#Event-bubbling\" class=\"headerlink\" title=\"Event bubbling\"></a>Event bubbling</h4><p>Event bubbling and capture are two mechanisms that describe what happens when two handlers<br>of the same event type are activated on one element.</p>\n<p>In the capturing phase:</p>\n<p>The browser checks to see if the element’s outer-most ancestor (<code>&lt;html&gt;</code>) has an onclick event handler registered on it in the capturing phase, and runs it if so.<br>Then it moves on to the next element inside <code>&lt;html&gt;</code> and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.</p>\n<p>In the bubbling phase, the exact opposite occurs:</p>\n<p>The browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.<br>Then it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the <code>&lt;html&gt;</code> element.</p>\n<p>Event handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element1.addEventListener(<span class=\"string\">'click'</span>, doSomething2, <span class=\"literal\">true</span>); <span class=\"comment\">// fire at capture phase</span></span><br><span class=\"line\">element2.addEventListener(<span class=\"string\">'click'</span>, doSomething, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Event-delegation\"><a href=\"#Event-delegation\" class=\"headerlink\" title=\"Event delegation\"></a>Event delegation</h4><p>if you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-1\"</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-2\"</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-3\"</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-4\"</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-5\"</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-6\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"endangered\"</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the element, add a click listener...</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// e.target is the clicked element!</span></span><br><span class=\"line\">  <span class=\"comment\">// If it was a list item</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.nodeName == <span class=\"string\">'LI'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">      <span class=\"string\">'List item '</span>,</span><br><span class=\"line\">      e.target.id.replace(<span class=\"string\">'post-'</span>, <span class=\"string\">''</span>),</span><br><span class=\"line\">      <span class=\"string\">' was clicked!'</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.matches(<span class=\"string\">'li.endangered'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The '</span> + e.target.textContent + <span class=\"string\">' is endangered!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"related-reading\"><a href=\"#related-reading\" class=\"headerlink\" title=\"related reading\"></a>related reading</h4><p>mdn <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture</a></p>\n<p>event order <a href=\"https://www.quirksmode.org/js/events_order.html\" target=\"_blank\" rel=\"noopener\">https://www.quirksmode.org/js/events_order.html</a></p>\n<p>event delegate <a href=\"https://davidwalsh.name/event-delegate\" target=\"_blank\" rel=\"noopener\">https://davidwalsh.name/event-delegate</a></p>\n<p>Event delegation <a href=\"https://javascript.info/event-delegation\" target=\"_blank\" rel=\"noopener\">https://javascript.info/event-delegation</a></p>\n"},{"title":"游恭王府","abbrlink":"23a06402","date":"2020-10-12T06:13:12.000Z","_content":"\n国庆假期刚过，周末就休一天，闲着无事，恰好今天起了风，吹走前几天的雾霾，天空湛蓝，秋高气爽，于是决定出去走走。\n\n来北京两年多了，总是往外走，爬山徒步之类的。城里没去逛过几次，历史古迹去的少。因为喜欢红楼梦，所以一直想去恭王府看看，感受一番。心想一个人，可走可停，走马观花，无拘无束。于是买票出发。\n\n到了路边下车，游人如织，丝毫不见王府的踪影。跟着指示牌和人流往里走，进入一条胡同，四周都是平房。不过两百米，豁然开朗。\n\n穿过检票口，来到王府正门。朱红的大门，上面悬挂匾额工整书写恭王府三个大字。门上的金钉纵九横七，表名郡王身份。\n\n![gongwangfu](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e43672558134f24b6a0c6c5e5614b73~tplv-k3u1fbpfcp-watermark.image)\n\n关于门钉，还有些说法。明代之前，无明文规定。到了清代，才把门钉数量和等级制度联系起来。天子是横纵各九，亲王纵九横七，世子减亲王七之二，郡王、贝勒、贝子、镇国公和辅国公与世子府同。公门钉纵横皆七，候以下至男递减至五五，均以铁。平民百姓家不能用门钉。另外，大门的漆色也有规定。皇宫和官府红漆门，富家黑漆门，平民为本色门。\n\n![tianxiangtingyuan](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b716e34f5344b7ca51f930cc75fc494~tplv-k3u1fbpfcp-watermark.image)\n\n天香庭院，位于葆光室和锡进堂的中间。据说是康熙之子慎郡王允禧题写。拍照是因为想到《红楼梦》里提到的天香楼。当然这两者有无关系，只能让后人玩味了。\n\n![pingbuqingyunlu](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aed4cc5ff625416da3698852e2c0cb00~tplv-k3u1fbpfcp-watermark.image)\n\n平步青云路，从山两侧的爬山斜廊最下方只有两蹬台阶，再往上则斜坡平坦而无台阶。听讲解器里的小故事解说，据说是因为和珅早年贫寒，地位卑微，二十多岁遇到乾隆皇帝后才平步青云。两蹬台阶寓意早年的艰辛，跨过之后，则是一帆风顺，再无坎坷。\n\n迈上平步青云路，则上到了邀月台。这里是全园的最高处，居高俯览园中，也是主人与家人或亲朋共同赏月的好地方。站在台上，可以想象某个中秋，王府里人们在这里赏月，周边树木森森，底下则是滴翠岩传来的涓涓细流声；又或是一个雪夜，某位王公身披裘衣独立雪中，一声鸣啼，几片残雪从枝头跌落。\n\n现在这里是一个佛堂，几位游客路过时祈福跪拜。游人凭栏歇息，喧喧扰扰。\n\n![fangtangshuixie](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0f7165100b4feebaeb98c8e33bcfda~tplv-k3u1fbpfcp-watermark.image)\n\n最后走到澄怀撷秀，堂前有海棠数株，故又名海棠轩。据说原来是恭亲王奕訢年轻时读书之处。从堂前刚好观赏方塘水榭，四周柳树依依。原本府中并无浮桥，需要乘船登亭。现在海棠轩里成立一个纪念品零售店，原本僻静的读书处挤满了买福字的游客，真是可惜。\n\n![yangjiaodenghutong1](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab016affd476486b84124d28bc55db43~tplv-k3u1fbpfcp-watermark.image)\n\n从王府出来，心想也别原路返回了，绕着另一条羊角灯胡同走出去。胡同扭曲狭窄，让我想起小时候的湾子。虽然都是翻新过的平房，但仿佛依然可以感受到当年住在王府边上人们的生活气息。\n\n![yangjiaodenghutong2](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afaca6e832624677bee589837ad5d5b2~tplv-k3u1fbpfcp-watermark.image)\n\n胡同里安静极了，还能听见风吹过树枝的声音。不知哪家的婴儿啼哭，喊着找妈妈。\n\n从胡同里走出来，地铁站边刚好有个公园。坐在太阳底下放空。两百多年前，是否也有一位读书人在哪晒着太阳发呆呢？\n","source":"_posts/游恭王府.md","raw":"---\ntitle: 游恭王府\nabbrlink: 23a06402\ndate: 2020-10-11 23:13:12\ncategories:\n  - 生活随笔\ntags:\n---\n\n国庆假期刚过，周末就休一天，闲着无事，恰好今天起了风，吹走前几天的雾霾，天空湛蓝，秋高气爽，于是决定出去走走。\n\n来北京两年多了，总是往外走，爬山徒步之类的。城里没去逛过几次，历史古迹去的少。因为喜欢红楼梦，所以一直想去恭王府看看，感受一番。心想一个人，可走可停，走马观花，无拘无束。于是买票出发。\n\n到了路边下车，游人如织，丝毫不见王府的踪影。跟着指示牌和人流往里走，进入一条胡同，四周都是平房。不过两百米，豁然开朗。\n\n穿过检票口，来到王府正门。朱红的大门，上面悬挂匾额工整书写恭王府三个大字。门上的金钉纵九横七，表名郡王身份。\n\n![gongwangfu](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e43672558134f24b6a0c6c5e5614b73~tplv-k3u1fbpfcp-watermark.image)\n\n关于门钉，还有些说法。明代之前，无明文规定。到了清代，才把门钉数量和等级制度联系起来。天子是横纵各九，亲王纵九横七，世子减亲王七之二，郡王、贝勒、贝子、镇国公和辅国公与世子府同。公门钉纵横皆七，候以下至男递减至五五，均以铁。平民百姓家不能用门钉。另外，大门的漆色也有规定。皇宫和官府红漆门，富家黑漆门，平民为本色门。\n\n![tianxiangtingyuan](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b716e34f5344b7ca51f930cc75fc494~tplv-k3u1fbpfcp-watermark.image)\n\n天香庭院，位于葆光室和锡进堂的中间。据说是康熙之子慎郡王允禧题写。拍照是因为想到《红楼梦》里提到的天香楼。当然这两者有无关系，只能让后人玩味了。\n\n![pingbuqingyunlu](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aed4cc5ff625416da3698852e2c0cb00~tplv-k3u1fbpfcp-watermark.image)\n\n平步青云路，从山两侧的爬山斜廊最下方只有两蹬台阶，再往上则斜坡平坦而无台阶。听讲解器里的小故事解说，据说是因为和珅早年贫寒，地位卑微，二十多岁遇到乾隆皇帝后才平步青云。两蹬台阶寓意早年的艰辛，跨过之后，则是一帆风顺，再无坎坷。\n\n迈上平步青云路，则上到了邀月台。这里是全园的最高处，居高俯览园中，也是主人与家人或亲朋共同赏月的好地方。站在台上，可以想象某个中秋，王府里人们在这里赏月，周边树木森森，底下则是滴翠岩传来的涓涓细流声；又或是一个雪夜，某位王公身披裘衣独立雪中，一声鸣啼，几片残雪从枝头跌落。\n\n现在这里是一个佛堂，几位游客路过时祈福跪拜。游人凭栏歇息，喧喧扰扰。\n\n![fangtangshuixie](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0f7165100b4feebaeb98c8e33bcfda~tplv-k3u1fbpfcp-watermark.image)\n\n最后走到澄怀撷秀，堂前有海棠数株，故又名海棠轩。据说原来是恭亲王奕訢年轻时读书之处。从堂前刚好观赏方塘水榭，四周柳树依依。原本府中并无浮桥，需要乘船登亭。现在海棠轩里成立一个纪念品零售店，原本僻静的读书处挤满了买福字的游客，真是可惜。\n\n![yangjiaodenghutong1](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab016affd476486b84124d28bc55db43~tplv-k3u1fbpfcp-watermark.image)\n\n从王府出来，心想也别原路返回了，绕着另一条羊角灯胡同走出去。胡同扭曲狭窄，让我想起小时候的湾子。虽然都是翻新过的平房，但仿佛依然可以感受到当年住在王府边上人们的生活气息。\n\n![yangjiaodenghutong2](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afaca6e832624677bee589837ad5d5b2~tplv-k3u1fbpfcp-watermark.image)\n\n胡同里安静极了，还能听见风吹过树枝的声音。不知哪家的婴儿啼哭，喊着找妈妈。\n\n从胡同里走出来，地铁站边刚好有个公园。坐在太阳底下放空。两百多年前，是否也有一位读书人在哪晒着太阳发呆呢？\n","slug":"游恭王府","published":1,"updated":"2020-10-28T06:36:18.321Z","_id":"ckg59273800001kmh6rla9ivb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>国庆假期刚过，周末就休一天，闲着无事，恰好今天起了风，吹走前几天的雾霾，天空湛蓝，秋高气爽，于是决定出去走走。</p>\n<p>来北京两年多了，总是往外走，爬山徒步之类的。城里没去逛过几次，历史古迹去的少。因为喜欢红楼梦，所以一直想去恭王府看看，感受一番。心想一个人，可走可停，走马观花，无拘无束。于是买票出发。</p>\n<p>到了路边下车，游人如织，丝毫不见王府的踪影。跟着指示牌和人流往里走，进入一条胡同，四周都是平房。不过两百米，豁然开朗。</p>\n<p>穿过检票口，来到王府正门。朱红的大门，上面悬挂匾额工整书写恭王府三个大字。门上的金钉纵九横七，表名郡王身份。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e43672558134f24b6a0c6c5e5614b73~tplv-k3u1fbpfcp-watermark.image\" alt=\"gongwangfu\"></p>\n<p>关于门钉，还有些说法。明代之前，无明文规定。到了清代，才把门钉数量和等级制度联系起来。天子是横纵各九，亲王纵九横七，世子减亲王七之二，郡王、贝勒、贝子、镇国公和辅国公与世子府同。公门钉纵横皆七，候以下至男递减至五五，均以铁。平民百姓家不能用门钉。另外，大门的漆色也有规定。皇宫和官府红漆门，富家黑漆门，平民为本色门。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b716e34f5344b7ca51f930cc75fc494~tplv-k3u1fbpfcp-watermark.image\" alt=\"tianxiangtingyuan\"></p>\n<p>天香庭院，位于葆光室和锡进堂的中间。据说是康熙之子慎郡王允禧题写。拍照是因为想到《红楼梦》里提到的天香楼。当然这两者有无关系，只能让后人玩味了。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aed4cc5ff625416da3698852e2c0cb00~tplv-k3u1fbpfcp-watermark.image\" alt=\"pingbuqingyunlu\"></p>\n<p>平步青云路，从山两侧的爬山斜廊最下方只有两蹬台阶，再往上则斜坡平坦而无台阶。听讲解器里的小故事解说，据说是因为和珅早年贫寒，地位卑微，二十多岁遇到乾隆皇帝后才平步青云。两蹬台阶寓意早年的艰辛，跨过之后，则是一帆风顺，再无坎坷。</p>\n<p>迈上平步青云路，则上到了邀月台。这里是全园的最高处，居高俯览园中，也是主人与家人或亲朋共同赏月的好地方。站在台上，可以想象某个中秋，王府里人们在这里赏月，周边树木森森，底下则是滴翠岩传来的涓涓细流声；又或是一个雪夜，某位王公身披裘衣独立雪中，一声鸣啼，几片残雪从枝头跌落。</p>\n<p>现在这里是一个佛堂，几位游客路过时祈福跪拜。游人凭栏歇息，喧喧扰扰。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0f7165100b4feebaeb98c8e33bcfda~tplv-k3u1fbpfcp-watermark.image\" alt=\"fangtangshuixie\"></p>\n<p>最后走到澄怀撷秀，堂前有海棠数株，故又名海棠轩。据说原来是恭亲王奕訢年轻时读书之处。从堂前刚好观赏方塘水榭，四周柳树依依。原本府中并无浮桥，需要乘船登亭。现在海棠轩里成立一个纪念品零售店，原本僻静的读书处挤满了买福字的游客，真是可惜。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab016affd476486b84124d28bc55db43~tplv-k3u1fbpfcp-watermark.image\" alt=\"yangjiaodenghutong1\"></p>\n<p>从王府出来，心想也别原路返回了，绕着另一条羊角灯胡同走出去。胡同扭曲狭窄，让我想起小时候的湾子。虽然都是翻新过的平房，但仿佛依然可以感受到当年住在王府边上人们的生活气息。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afaca6e832624677bee589837ad5d5b2~tplv-k3u1fbpfcp-watermark.image\" alt=\"yangjiaodenghutong2\"></p>\n<p>胡同里安静极了，还能听见风吹过树枝的声音。不知哪家的婴儿啼哭，喊着找妈妈。</p>\n<p>从胡同里走出来，地铁站边刚好有个公园。坐在太阳底下放空。两百多年前，是否也有一位读书人在哪晒着太阳发呆呢？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>国庆假期刚过，周末就休一天，闲着无事，恰好今天起了风，吹走前几天的雾霾，天空湛蓝，秋高气爽，于是决定出去走走。</p>\n<p>来北京两年多了，总是往外走，爬山徒步之类的。城里没去逛过几次，历史古迹去的少。因为喜欢红楼梦，所以一直想去恭王府看看，感受一番。心想一个人，可走可停，走马观花，无拘无束。于是买票出发。</p>\n<p>到了路边下车，游人如织，丝毫不见王府的踪影。跟着指示牌和人流往里走，进入一条胡同，四周都是平房。不过两百米，豁然开朗。</p>\n<p>穿过检票口，来到王府正门。朱红的大门，上面悬挂匾额工整书写恭王府三个大字。门上的金钉纵九横七，表名郡王身份。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e43672558134f24b6a0c6c5e5614b73~tplv-k3u1fbpfcp-watermark.image\" alt=\"gongwangfu\"></p>\n<p>关于门钉，还有些说法。明代之前，无明文规定。到了清代，才把门钉数量和等级制度联系起来。天子是横纵各九，亲王纵九横七，世子减亲王七之二，郡王、贝勒、贝子、镇国公和辅国公与世子府同。公门钉纵横皆七，候以下至男递减至五五，均以铁。平民百姓家不能用门钉。另外，大门的漆色也有规定。皇宫和官府红漆门，富家黑漆门，平民为本色门。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b716e34f5344b7ca51f930cc75fc494~tplv-k3u1fbpfcp-watermark.image\" alt=\"tianxiangtingyuan\"></p>\n<p>天香庭院，位于葆光室和锡进堂的中间。据说是康熙之子慎郡王允禧题写。拍照是因为想到《红楼梦》里提到的天香楼。当然这两者有无关系，只能让后人玩味了。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aed4cc5ff625416da3698852e2c0cb00~tplv-k3u1fbpfcp-watermark.image\" alt=\"pingbuqingyunlu\"></p>\n<p>平步青云路，从山两侧的爬山斜廊最下方只有两蹬台阶，再往上则斜坡平坦而无台阶。听讲解器里的小故事解说，据说是因为和珅早年贫寒，地位卑微，二十多岁遇到乾隆皇帝后才平步青云。两蹬台阶寓意早年的艰辛，跨过之后，则是一帆风顺，再无坎坷。</p>\n<p>迈上平步青云路，则上到了邀月台。这里是全园的最高处，居高俯览园中，也是主人与家人或亲朋共同赏月的好地方。站在台上，可以想象某个中秋，王府里人们在这里赏月，周边树木森森，底下则是滴翠岩传来的涓涓细流声；又或是一个雪夜，某位王公身披裘衣独立雪中，一声鸣啼，几片残雪从枝头跌落。</p>\n<p>现在这里是一个佛堂，几位游客路过时祈福跪拜。游人凭栏歇息，喧喧扰扰。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0f7165100b4feebaeb98c8e33bcfda~tplv-k3u1fbpfcp-watermark.image\" alt=\"fangtangshuixie\"></p>\n<p>最后走到澄怀撷秀，堂前有海棠数株，故又名海棠轩。据说原来是恭亲王奕訢年轻时读书之处。从堂前刚好观赏方塘水榭，四周柳树依依。原本府中并无浮桥，需要乘船登亭。现在海棠轩里成立一个纪念品零售店，原本僻静的读书处挤满了买福字的游客，真是可惜。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab016affd476486b84124d28bc55db43~tplv-k3u1fbpfcp-watermark.image\" alt=\"yangjiaodenghutong1\"></p>\n<p>从王府出来，心想也别原路返回了，绕着另一条羊角灯胡同走出去。胡同扭曲狭窄，让我想起小时候的湾子。虽然都是翻新过的平房，但仿佛依然可以感受到当年住在王府边上人们的生活气息。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afaca6e832624677bee589837ad5d5b2~tplv-k3u1fbpfcp-watermark.image\" alt=\"yangjiaodenghutong2\"></p>\n<p>胡同里安静极了，还能听见风吹过树枝的声音。不知哪家的婴儿啼哭，喊着找妈妈。</p>\n<p>从胡同里走出来，地铁站边刚好有个公园。坐在太阳底下放空。两百多年前，是否也有一位读书人在哪晒着太阳发呆呢？</p>\n"},{"title":"聊聊柯里化","abbrlink":"23651091","date":"2021-03-24T23:42:44.000Z","_content":"\n最近在看柯里化（currying），发现网上的资料众说纷纭，鱼龙混杂。再加上也算是一道高频面试题，所以也试试实现了一下，顺便记录一下心得。\n\n首先明确一点，currying 的定义，根据 wiki 的解释，柯里化是一种将接受多参数函数转换成一个接受单一序列参数的函数（ currying is the technique of conveting a function that takes multiple arguments into a sequence of functions that each take a single arguments. ）\n\n数学表达式：\n\n```mathematica\nx= f(a,b,c)  becomse :\n\nh = g(a);\n\ni = h(b);\n\nx = i(c);\n\n或者可以链式调用 x = g(a)(b)(c).\n\n```\n\n根据定义我们可以得知，currying 需要函数有一个固定数量入参，这样才能将对应的函数正确的“柯里”。至于非固定的入参，我们后面再讲。\n\n先看一个简单的实现。\n\n我们来实现一个基本的 sum 方法，接受三个参数，返回加和。\n\n```js\nfunction sum(a, b, c) {\n  return a + b + c;\n}\n```\n\n我们再来实现柯里方法。\n\n```js\nfunction curry(fn) {\n  return function curried(...args) {\n    // fn.length 返回需要科里化的方法的 arguments 的长度,\n    // 如果不到这个长度，则说明需要继续接受参数，\n    if (args.length >= fn.length) {\n      return fn.apply(this, args);\n    } else {\n      return function (...args2) {\n        return curried.apply(this, args.concat(args2));\n      };\n    }\n  };\n}\n```\n\n实现比较直观，如果长度不及原始函数规定的入参，则继续 concat，直到满足长度，调用 apply 立刻执行。\n\n使用方法如下。\n\n```js\nconst curried = curry(sum);\n\nconsole.log(\"curried sum result\", curried(1, 2, 3));\nconsole.log(\"curried sum result\", curried(1, 2)(3));\nconsole.log(\"curried sum result\", curried(1)(2)(3));\n```\n\n有三个小点值得注意。\n\n第一是 arguments 对象，是一个 array like object， 它拥有 length 属性，但是想直接调用数组的方法是不行的。\n\n记录一下茴字的四种写法。\n\n```javascript\n\nvar args = Array.prototype.slice.call(arguments)\n\nvar args = [].slice.call(arguments)\n\nvar args = Array.from(arguments)\n\nvar args = [… arguments]\n```\n\n第二个是上面代码里的第 3 行， fn.length， 返回的是原始函数的入参长度。\n\n第三，调用时，不仅可以 `curried(1)(2)(3)`, 还能`curried(1, 2)(3)`。 后者称作 partial function。有机会再聊。\n\n当然市面上会有各种实现方式，配合 es5，es6，检查各种边际条件。查一查会有很多，这里不做赘述。\n\n接下来聊聊柯里化的使用场景。\n\n柯里化提供了一种封装方式，减少代码冗余，增加代码的可读性。\n\n最常见的例子就是 log 函数，比如 log 可以接受 time ，level， message 三个参数。\n\n```js\nfunction log(date, importance, message) {\n  alert(`[${date.getHours()}:${date.getMinutes()}] [${importance}] ${message}`);\n}\n```\n\n如果我想在此基础上封装，logNow ，我可以这么做\n\n```js\nconst curriedLog = _.curry(log);\n\n// logNow will be the partial of log with fixed first argument\nlet logNow = curriedLog(new Date());\n\n// use it\nlogNow(\"INFO\", \"message\"); // [HH:mm] INFO message\n```\n\n或者我们想再进一步，想封装一个 debugNow 函数\n\n```js\nlet debugNow = logNow(\"DEBUG\");\n\ndebugNow(\"message\"); // [HH:mm] DEBUG message\n```\n\n谈完了应用场景，再说说效率。\n\n是的，柯里化很慢，性能损耗很大。为什么？大量的嵌套作用域和闭包，带来了不小的内存占用。至于网上说的， fn.apply 和 fn.call 比直接调用 fn 慢（看上去是的）， 老版本浏览器在 arguments.length 的实现相当慢（不知道），存取 arguments 对象比存取命名参数要慢一些（不确定），这些原因，看上去可能，但是我觉得主要原因还是内存方面。昨晚在看《函数式编程》里面，有做过柯里化和普通函数的性能对比，有空附上结果和页码。\n\n最后说说前面遗留的一个问题，也是面试中常见的一道题，题目如下\n\n```js\nsum(1)();\nsum(1)(2)();\nsum(1)(2)(3)();\n```\n\n题目大致如此，基本就是非固定的入参，求加和。关于这点，我想想说说我的看法。\n\n我认为这道题要往柯里化上靠，有点勉强。放在 closure 门类里，比较合适。\n\n附上我写的一个题解。\n\n```js\n//首先定义一个方法，不限定入参数量\nfunction sum() {\n  return Array.prototype.slice.apply(arguments).reduce((p, c) => {\n    return p + c;\n  }, 0);\n}\n\nconsole.log(\"sum\", sum(1, 2, 3, 4));\n\nfunction curry2(fn) {\n  return function curried(...args) {\n    // 累计保存的 arguments\n    return function (...args2) {\n      // 真正接受的 arguments\n      if (!args2.length) {\n        // 最后传的空，告知返回结果\n        return fn.apply(this, args);\n      } else {\n        // 如果入参不为空， 则继续 concat，返回 curried 方法，等待下一次调用\n        return curried.apply(this, args.concat(args2));\n      }\n    };\n  };\n}\n\nconst curried = curry2(sum);\n\nconsole.log(\"curried sum result\", curried(1)(2)(3)(4)());\n```\n\n除了上述对 arguments 反复摩擦，我觉得基于 closure 的实现更加直接。主要思想就一点，也是闭包的基本概念，内层函数可以访问外层作用域。\n\n实现如下。\n\n```js\nfunction add(n) {\n  let s = n;\n\n  return function fun(m) {\n    if (!m) return s;\n    s += m;\n    return fun;\n  };\n}\n\nconsole.log(add(1)(2)(3)(4)()); //10\n```\n\n这种求和方式，除了最后传入一个空以外，还有各种变体，比如给 sum 对象加一个 toString 方法，通过`+sum(\u00101)` 来进行隐式类型转换（type coercion），那种太 hack 了，我觉得 duck 不必。\n\n最后，Curry 命名不是因为咖喱，而是因为 Haskell Curry。\n\n谢谢阅读。\n","source":"_posts/聊聊柯里化.md","raw":"---\ntitle: 聊聊柯里化\ncategories:\n  - web\ntags:\n  - javascript\n  - curry\n  - closure\nabbrlink: \"23651091\"\ndate: 2021-03-24 16:42:44\n---\n\n最近在看柯里化（currying），发现网上的资料众说纷纭，鱼龙混杂。再加上也算是一道高频面试题，所以也试试实现了一下，顺便记录一下心得。\n\n首先明确一点，currying 的定义，根据 wiki 的解释，柯里化是一种将接受多参数函数转换成一个接受单一序列参数的函数（ currying is the technique of conveting a function that takes multiple arguments into a sequence of functions that each take a single arguments. ）\n\n数学表达式：\n\n```mathematica\nx= f(a,b,c)  becomse :\n\nh = g(a);\n\ni = h(b);\n\nx = i(c);\n\n或者可以链式调用 x = g(a)(b)(c).\n\n```\n\n根据定义我们可以得知，currying 需要函数有一个固定数量入参，这样才能将对应的函数正确的“柯里”。至于非固定的入参，我们后面再讲。\n\n先看一个简单的实现。\n\n我们来实现一个基本的 sum 方法，接受三个参数，返回加和。\n\n```js\nfunction sum(a, b, c) {\n  return a + b + c;\n}\n```\n\n我们再来实现柯里方法。\n\n```js\nfunction curry(fn) {\n  return function curried(...args) {\n    // fn.length 返回需要科里化的方法的 arguments 的长度,\n    // 如果不到这个长度，则说明需要继续接受参数，\n    if (args.length >= fn.length) {\n      return fn.apply(this, args);\n    } else {\n      return function (...args2) {\n        return curried.apply(this, args.concat(args2));\n      };\n    }\n  };\n}\n```\n\n实现比较直观，如果长度不及原始函数规定的入参，则继续 concat，直到满足长度，调用 apply 立刻执行。\n\n使用方法如下。\n\n```js\nconst curried = curry(sum);\n\nconsole.log(\"curried sum result\", curried(1, 2, 3));\nconsole.log(\"curried sum result\", curried(1, 2)(3));\nconsole.log(\"curried sum result\", curried(1)(2)(3));\n```\n\n有三个小点值得注意。\n\n第一是 arguments 对象，是一个 array like object， 它拥有 length 属性，但是想直接调用数组的方法是不行的。\n\n记录一下茴字的四种写法。\n\n```javascript\n\nvar args = Array.prototype.slice.call(arguments)\n\nvar args = [].slice.call(arguments)\n\nvar args = Array.from(arguments)\n\nvar args = [… arguments]\n```\n\n第二个是上面代码里的第 3 行， fn.length， 返回的是原始函数的入参长度。\n\n第三，调用时，不仅可以 `curried(1)(2)(3)`, 还能`curried(1, 2)(3)`。 后者称作 partial function。有机会再聊。\n\n当然市面上会有各种实现方式，配合 es5，es6，检查各种边际条件。查一查会有很多，这里不做赘述。\n\n接下来聊聊柯里化的使用场景。\n\n柯里化提供了一种封装方式，减少代码冗余，增加代码的可读性。\n\n最常见的例子就是 log 函数，比如 log 可以接受 time ，level， message 三个参数。\n\n```js\nfunction log(date, importance, message) {\n  alert(`[${date.getHours()}:${date.getMinutes()}] [${importance}] ${message}`);\n}\n```\n\n如果我想在此基础上封装，logNow ，我可以这么做\n\n```js\nconst curriedLog = _.curry(log);\n\n// logNow will be the partial of log with fixed first argument\nlet logNow = curriedLog(new Date());\n\n// use it\nlogNow(\"INFO\", \"message\"); // [HH:mm] INFO message\n```\n\n或者我们想再进一步，想封装一个 debugNow 函数\n\n```js\nlet debugNow = logNow(\"DEBUG\");\n\ndebugNow(\"message\"); // [HH:mm] DEBUG message\n```\n\n谈完了应用场景，再说说效率。\n\n是的，柯里化很慢，性能损耗很大。为什么？大量的嵌套作用域和闭包，带来了不小的内存占用。至于网上说的， fn.apply 和 fn.call 比直接调用 fn 慢（看上去是的）， 老版本浏览器在 arguments.length 的实现相当慢（不知道），存取 arguments 对象比存取命名参数要慢一些（不确定），这些原因，看上去可能，但是我觉得主要原因还是内存方面。昨晚在看《函数式编程》里面，有做过柯里化和普通函数的性能对比，有空附上结果和页码。\n\n最后说说前面遗留的一个问题，也是面试中常见的一道题，题目如下\n\n```js\nsum(1)();\nsum(1)(2)();\nsum(1)(2)(3)();\n```\n\n题目大致如此，基本就是非固定的入参，求加和。关于这点，我想想说说我的看法。\n\n我认为这道题要往柯里化上靠，有点勉强。放在 closure 门类里，比较合适。\n\n附上我写的一个题解。\n\n```js\n//首先定义一个方法，不限定入参数量\nfunction sum() {\n  return Array.prototype.slice.apply(arguments).reduce((p, c) => {\n    return p + c;\n  }, 0);\n}\n\nconsole.log(\"sum\", sum(1, 2, 3, 4));\n\nfunction curry2(fn) {\n  return function curried(...args) {\n    // 累计保存的 arguments\n    return function (...args2) {\n      // 真正接受的 arguments\n      if (!args2.length) {\n        // 最后传的空，告知返回结果\n        return fn.apply(this, args);\n      } else {\n        // 如果入参不为空， 则继续 concat，返回 curried 方法，等待下一次调用\n        return curried.apply(this, args.concat(args2));\n      }\n    };\n  };\n}\n\nconst curried = curry2(sum);\n\nconsole.log(\"curried sum result\", curried(1)(2)(3)(4)());\n```\n\n除了上述对 arguments 反复摩擦，我觉得基于 closure 的实现更加直接。主要思想就一点，也是闭包的基本概念，内层函数可以访问外层作用域。\n\n实现如下。\n\n```js\nfunction add(n) {\n  let s = n;\n\n  return function fun(m) {\n    if (!m) return s;\n    s += m;\n    return fun;\n  };\n}\n\nconsole.log(add(1)(2)(3)(4)()); //10\n```\n\n这种求和方式，除了最后传入一个空以外，还有各种变体，比如给 sum 对象加一个 toString 方法，通过`+sum(\u00101)` 来进行隐式类型转换（type coercion），那种太 hack 了，我觉得 duck 不必。\n\n最后，Curry 命名不是因为咖喱，而是因为 Haskell Curry。\n\n谢谢阅读。\n","slug":"聊聊柯里化","published":1,"updated":"2021-03-24T10:21:27.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckn7220hi00017pfy9j1sae2n","content":"<p>最近在看柯里化（currying），发现网上的资料众说纷纭，鱼龙混杂。再加上也算是一道高频面试题，所以也试试实现了一下，顺便记录一下心得。</p>\n<p>首先明确一点，currying 的定义，根据 wiki 的解释，柯里化是一种将接受多参数函数转换成一个接受单一序列参数的函数（ currying is the technique of conveting a function that takes multiple arguments into a sequence of functions that each take a single arguments. ）</p>\n<p>数学表达式：</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x= f(a,b,c)  becomse :</span><br><span class=\"line\"></span><br><span class=\"line\">h = g(a);</span><br><span class=\"line\"></span><br><span class=\"line\">i = h(b);</span><br><span class=\"line\"></span><br><span class=\"line\">x = i(c);</span><br><span class=\"line\"></span><br><span class=\"line\">或者可以链式调用 x = g(a)(b)(c).</span><br></pre></td></tr></table></figure>\n<p>根据定义我们可以得知，currying 需要函数有一个固定数量入参，这样才能将对应的函数正确的“柯里”。至于非固定的入参，我们后面再讲。</p>\n<p>先看一个简单的实现。</p>\n<p>我们来实现一个基本的 sum 方法，接受三个参数，返回加和。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来实现柯里方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curried</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// fn.length 返回需要科里化的方法的 arguments 的长度,</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果不到这个长度，则说明需要继续接受参数，</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length &gt;= fn.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curried.apply(<span class=\"keyword\">this</span>, args.concat(args2));</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现比较直观，如果长度不及原始函数规定的入参，则继续 concat，直到满足长度，调用 apply 立刻执行。</p>\n<p>使用方法如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> curried = curry(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"curried sum result\"</span>, curried(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"curried sum result\"</span>, curried(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"curried sum result\"</span>, curried(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n<p>有三个小点值得注意。</p>\n<p>第一是 arguments 对象，是一个 array like object， 它拥有 length 属性，但是想直接调用数组的方法是不行的。</p>\n<p>记录一下茴字的四种写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [… <span class=\"built_in\">arguments</span>]</span><br></pre></td></tr></table></figure>\n<p>第二个是上面代码里的第 3 行， fn.length， 返回的是原始函数的入参长度。</p>\n<p>第三，调用时，不仅可以 <code>curried(1)(2)(3)</code>, 还能<code>curried(1, 2)(3)</code>。 后者称作 partial function。有机会再聊。</p>\n<p>当然市面上会有各种实现方式，配合 es5，es6，检查各种边际条件。查一查会有很多，这里不做赘述。</p>\n<p>接下来聊聊柯里化的使用场景。</p>\n<p>柯里化提供了一种封装方式，减少代码冗余，增加代码的可读性。</p>\n<p>最常见的例子就是 log 函数，比如 log 可以接受 time ，level， message 三个参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">date, importance, message</span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">`[<span class=\"subst\">$&#123;date.getHours()&#125;</span>:<span class=\"subst\">$&#123;date.getMinutes()&#125;</span>] [<span class=\"subst\">$&#123;importance&#125;</span>] <span class=\"subst\">$&#123;message&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我想在此基础上封装，logNow ，我可以这么做</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> curriedLog = _.curry(log);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logNow will be the partial of log with fixed first argument</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> logNow = curriedLog(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use it</span></span><br><span class=\"line\">logNow(<span class=\"string\">\"INFO\"</span>, <span class=\"string\">\"message\"</span>); <span class=\"comment\">// [HH:mm] INFO message</span></span><br></pre></td></tr></table></figure>\n<p>或者我们想再进一步，想封装一个 debugNow 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> debugNow = logNow(<span class=\"string\">\"DEBUG\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">debugNow(<span class=\"string\">\"message\"</span>); <span class=\"comment\">// [HH:mm] DEBUG message</span></span><br></pre></td></tr></table></figure>\n<p>谈完了应用场景，再说说效率。</p>\n<p>是的，柯里化很慢，性能损耗很大。为什么？大量的嵌套作用域和闭包，带来了不小的内存占用。至于网上说的， fn.apply 和 fn.call 比直接调用 fn 慢（看上去是的）， 老版本浏览器在 arguments.length 的实现相当慢（不知道），存取 arguments 对象比存取命名参数要慢一些（不确定），这些原因，看上去可能，但是我觉得主要原因还是内存方面。昨晚在看《函数式编程》里面，有做过柯里化和普通函数的性能对比，有空附上结果和页码。</p>\n<p>最后说说前面遗留的一个问题，也是面试中常见的一道题，题目如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(<span class=\"number\">1</span>)();</span><br><span class=\"line\">sum(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)();</span><br><span class=\"line\">sum(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)();</span><br></pre></td></tr></table></figure>\n<p>题目大致如此，基本就是非固定的入参，求加和。关于这点，我想想说说我的看法。</p>\n<p>我认为这道题要往柯里化上靠，有点勉强。放在 closure 门类里，比较合适。</p>\n<p>附上我写的一个题解。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先定义一个方法，不限定入参数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.apply(<span class=\"built_in\">arguments</span>).reduce(<span class=\"function\">(<span class=\"params\">p, c</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p + c;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"sum\"</span>, sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry2</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curried</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 累计保存的 arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 真正接受的 arguments</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!args2.length) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 最后传的空，告知返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果入参不为空， 则继续 concat，返回 curried 方法，等待下一次调用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> curried.apply(<span class=\"keyword\">this</span>, args.concat(args2));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> curried = curry2(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"curried sum result\"</span>, curried(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)());</span><br></pre></td></tr></table></figure>\n<p>除了上述对 arguments 反复摩擦，我觉得基于 closure 的实现更加直接。主要思想就一点，也是闭包的基本概念，内层函数可以访问外层作用域。</p>\n<p>实现如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = n;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!m) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    s += m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fun;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)()); <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n<p>这种求和方式，除了最后传入一个空以外，还有各种变体，比如给 sum 对象加一个 toString 方法，通过<code>+sum(\u00101)</code> 来进行隐式类型转换（type coercion），那种太 hack 了，我觉得 duck 不必。</p>\n<p>最后，Curry 命名不是因为咖喱，而是因为 Haskell Curry。</p>\n<p>谢谢阅读。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在看柯里化（currying），发现网上的资料众说纷纭，鱼龙混杂。再加上也算是一道高频面试题，所以也试试实现了一下，顺便记录一下心得。</p>\n<p>首先明确一点，currying 的定义，根据 wiki 的解释，柯里化是一种将接受多参数函数转换成一个接受单一序列参数的函数（ currying is the technique of conveting a function that takes multiple arguments into a sequence of functions that each take a single arguments. ）</p>\n<p>数学表达式：</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x= f(a,b,c)  becomse :</span><br><span class=\"line\"></span><br><span class=\"line\">h = g(a);</span><br><span class=\"line\"></span><br><span class=\"line\">i = h(b);</span><br><span class=\"line\"></span><br><span class=\"line\">x = i(c);</span><br><span class=\"line\"></span><br><span class=\"line\">或者可以链式调用 x = g(a)(b)(c).</span><br></pre></td></tr></table></figure>\n<p>根据定义我们可以得知，currying 需要函数有一个固定数量入参，这样才能将对应的函数正确的“柯里”。至于非固定的入参，我们后面再讲。</p>\n<p>先看一个简单的实现。</p>\n<p>我们来实现一个基本的 sum 方法，接受三个参数，返回加和。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来实现柯里方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curried</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// fn.length 返回需要科里化的方法的 arguments 的长度,</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果不到这个长度，则说明需要继续接受参数，</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length &gt;= fn.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curried.apply(<span class=\"keyword\">this</span>, args.concat(args2));</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现比较直观，如果长度不及原始函数规定的入参，则继续 concat，直到满足长度，调用 apply 立刻执行。</p>\n<p>使用方法如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> curried = curry(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"curried sum result\"</span>, curried(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"curried sum result\"</span>, curried(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"curried sum result\"</span>, curried(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n<p>有三个小点值得注意。</p>\n<p>第一是 arguments 对象，是一个 array like object， 它拥有 length 属性，但是想直接调用数组的方法是不行的。</p>\n<p>记录一下茴字的四种写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [… <span class=\"built_in\">arguments</span>]</span><br></pre></td></tr></table></figure>\n<p>第二个是上面代码里的第 3 行， fn.length， 返回的是原始函数的入参长度。</p>\n<p>第三，调用时，不仅可以 <code>curried(1)(2)(3)</code>, 还能<code>curried(1, 2)(3)</code>。 后者称作 partial function。有机会再聊。</p>\n<p>当然市面上会有各种实现方式，配合 es5，es6，检查各种边际条件。查一查会有很多，这里不做赘述。</p>\n<p>接下来聊聊柯里化的使用场景。</p>\n<p>柯里化提供了一种封装方式，减少代码冗余，增加代码的可读性。</p>\n<p>最常见的例子就是 log 函数，比如 log 可以接受 time ，level， message 三个参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">date, importance, message</span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">`[<span class=\"subst\">$&#123;date.getHours()&#125;</span>:<span class=\"subst\">$&#123;date.getMinutes()&#125;</span>] [<span class=\"subst\">$&#123;importance&#125;</span>] <span class=\"subst\">$&#123;message&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我想在此基础上封装，logNow ，我可以这么做</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> curriedLog = _.curry(log);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logNow will be the partial of log with fixed first argument</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> logNow = curriedLog(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use it</span></span><br><span class=\"line\">logNow(<span class=\"string\">\"INFO\"</span>, <span class=\"string\">\"message\"</span>); <span class=\"comment\">// [HH:mm] INFO message</span></span><br></pre></td></tr></table></figure>\n<p>或者我们想再进一步，想封装一个 debugNow 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> debugNow = logNow(<span class=\"string\">\"DEBUG\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">debugNow(<span class=\"string\">\"message\"</span>); <span class=\"comment\">// [HH:mm] DEBUG message</span></span><br></pre></td></tr></table></figure>\n<p>谈完了应用场景，再说说效率。</p>\n<p>是的，柯里化很慢，性能损耗很大。为什么？大量的嵌套作用域和闭包，带来了不小的内存占用。至于网上说的， fn.apply 和 fn.call 比直接调用 fn 慢（看上去是的）， 老版本浏览器在 arguments.length 的实现相当慢（不知道），存取 arguments 对象比存取命名参数要慢一些（不确定），这些原因，看上去可能，但是我觉得主要原因还是内存方面。昨晚在看《函数式编程》里面，有做过柯里化和普通函数的性能对比，有空附上结果和页码。</p>\n<p>最后说说前面遗留的一个问题，也是面试中常见的一道题，题目如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(<span class=\"number\">1</span>)();</span><br><span class=\"line\">sum(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)();</span><br><span class=\"line\">sum(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)();</span><br></pre></td></tr></table></figure>\n<p>题目大致如此，基本就是非固定的入参，求加和。关于这点，我想想说说我的看法。</p>\n<p>我认为这道题要往柯里化上靠，有点勉强。放在 closure 门类里，比较合适。</p>\n<p>附上我写的一个题解。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先定义一个方法，不限定入参数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.apply(<span class=\"built_in\">arguments</span>).reduce(<span class=\"function\">(<span class=\"params\">p, c</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p + c;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"sum\"</span>, sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry2</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curried</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 累计保存的 arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 真正接受的 arguments</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!args2.length) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 最后传的空，告知返回结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果入参不为空， 则继续 concat，返回 curried 方法，等待下一次调用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> curried.apply(<span class=\"keyword\">this</span>, args.concat(args2));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> curried = curry2(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"curried sum result\"</span>, curried(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)());</span><br></pre></td></tr></table></figure>\n<p>除了上述对 arguments 反复摩擦，我觉得基于 closure 的实现更加直接。主要思想就一点，也是闭包的基本概念，内层函数可以访问外层作用域。</p>\n<p>实现如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = n;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!m) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    s += m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fun;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)()); <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n<p>这种求和方式，除了最后传入一个空以外，还有各种变体，比如给 sum 对象加一个 toString 方法，通过<code>+sum(\u00101)</code> 来进行隐式类型转换（type coercion），那种太 hack 了，我觉得 duck 不必。</p>\n<p>最后，Curry 命名不是因为咖喱，而是因为 Haskell Curry。</p>\n<p>谢谢阅读。</p>\n"},{"title":"聊聊事件循环","abbrlink":"282aa8cf","date":"2021-04-07T21:08:30.000Z","_content":"\n大家在面试中经常会被问到，浏览器事件循环和 node 事件循环有什么区别？\n\n好问题。\n\n简短说来，**从执行结果来看**，早期有区别，后来统一了。v11.0.0 (2018.10.23 release) 之后，没区别。\n\n为什么？\n\n看下面这段代码。\n\n```js\nsetTimeout(() => console.log('timeout1'));\nsetTimeout(() => {\n    console.log('timeout2')\n    Promise.resolve().then(() => console.log('promise resolve'))\n});\nsetTimeout(() => console.log('timeout3'));\nsetTimeout(() => console.log('timeout4'));\n```\n\n在浏览器中（chrome v89）\n\n```shell\ntimeout1\ntimeout2\npromise resolve\ntimeout3\ntimeout4\n```\n\n在 node 低于 v11.0.0环境中（在v6.11.2中验证，附赠一个[运行环境连接](https://www.tutorialspoint.com/execute_nodejs_online.php)）。\n\n```sh\ntimeout1\ntimeout2\ntimeout3\ntimeout4\npromise resolve\n```\n\n先看下node 11版本之前，node 是怎么执行的呢？\n\n1. 执行完一个阶段的所有任务\n2. 执行完nextTick队列里的内容\n3. 执行完微任务队列里的内容\n\n所以，可以理解上面的结果，先打完了timeout ，最后才来resolve。\n\n但是这些都已经旧船票了，已经登不上新时代的大船了。\n\n接下来看看浏览器里的执行顺序，也就是node 11以后的执行顺序，从那时起，大伙就是相亲相爱一家人了。\n\n通俗说来，在浏览器环境中，事件循环分3步（第3步就是回到最初的起点）：\n\n1. 运行时在每个事件循环开始时，依次执行task queue 中的每个task，在执行task的过程中，如果又有新的task添加进来怎么办。没办法，先来后到，你只能等下一次循环了。 \n2. 第二步，当每一个 task 结束了，会去检查还有没有待执行的microtask，这里和 task 的显著区别是，他会等到microtask 队列为空才会停止。什么意思，如果一个微任务，不停的往微任务队列里添加新的微任务，那么，这一步骤就会头铁的进行下去。\n3. microtask 执行完了，回到第1歩循环往复。\n\n言归正传，我们再来看下面这个例子（验证环境 chrome 89 & node v14.16.0）。\n\n```js\nconsole.log(1);\nsetTimeout(function () {\n  console.log(2);\n  setTimeout(function () {\n    console.log(3);\n    Promise.resolve(4)\n      .then((res) => {\n        console.log(res); // 4\n        setTimeout(function () {\n          console.log(6);\n        }, 0);\n      })\n      .then((res) => {\n        console.log(res);\n      })\n      .then((res) => {\n        console.log(res);\n      })\n      .then((res) => {\n        console.log(res);\n      });\n  }, 0);\n  setTimeout(function () {\n    console.log(5);\n  }, 0);\n}, 0);\n\n```\n\n为了方便看一点，多 then 了几次。看看结果\n\n```sh\n1\n2\n3\n4\nundefined\nundefined\nundefined\n5\n6\n```\n\n可以看到，我们在then 中不断添加了新的 microtask 时，会继续执行下去，今日事今日毕。但是对于 task，不好意思，您往后稍稍。\n\nv8博客上有张图，挺好。需要注意一点，图中 microtask 描述的是一个动态的过程，他还可以继续往 queue 里添加新的微任务，理解这点很重要。\n\n![micro-tasks-vs-tasks.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b1a464bf2a64aafb65ab790fdbf4bde~tplv-k3u1fbpfcp-watermark.image)\n\n再来看下 node 中的event loop。\n\n在这之前，解释一下为什么文章开头，我加粗的“从执行结果来看”。\n\n本质上，事件循环是由宿主环境来实现，常见的宿主环境有web浏览器，nodejs，还有 Adobe Flash（没错，还有这个老哥，参见高程）。由于不同环境实现的不同，这也产生了这个古老的问题，“浏览器事件循环和 node 事件循环有什么区别？” 对于这种行为，这好吗？这不好。所以为了消除这种宿主环境之间执行的差异， node 11 之后改善了这个问题。\n\n回到 node 官方文档，我们可以看到这么一张图流程图。\n\n```\n   ┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n```\n\n这张图有点抽象，换一张。\n\n![d502f94b-cc6c-4be7-ac8c-172897eefb05-original.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9aa3e314b504fcfb4e4d78d760c44bf~tplv-k3u1fbpfcp-watermark.image)\n\n关于事件循环的解释，网上的解释数不胜数。感觉不少都是把官方文档的内容颠来倒去拼凑一下。除了官方文档以外，还有一篇文章觉得值得一读（上图就是我借来的），同样也附在最后的链接部分。在这里我就不展开，或许下次专门写一篇文章来记录一下自己的阅读心得。\n\n再说点题外话，截止到今天（2021-3-16）， 对于 task, microtask 的官方用词和翻译还是 “任务 task  vs 微任务 microtask”。没有所谓的“宏任务”，也没有“macrotask” 这玩意什么事。用于谦于老爷的话说，这都不挨着。\n\n关于宏任务/ macrotask，打开掘金知乎，包括英文环境，随便搜一搜，大把的文章，到处都在说，到处都在用。但是去查官方文档，mdn，v8 blog，html spec 等等，很难找到这个词出现的源头。一个没有源头的词，出现了人传人现象，在各种文章图片中出现，很有趣。如果有朋友知道这个词的来历，欢迎指点。\n\n好了，文章到此为止，谢谢大家的阅读，欢迎讨论和指正。\n\n接下来补充一些辅助阅读材料。\n\n1. mdn 文档。\n\n   1. https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide\n   2. https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\n\n   一个小彩蛋，英文版的子标题， Run, JavaScript, run 是 Forrest Gump  里的经典台词，Run, Forrest , run!\n\n2. Promise/A+: https://promisesaplus.com/#notes   \n\n   文档中关于 platform code 的解释中有这么一段话 `This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick`。 这也是我为数不多检索到明确使用“macro”的一处，当然还特意加上了引号。\n\n3. html 文档：https://html.spec.whatwg.org/multipage/webappapis.html#concept-agent-event-loop\n4. nodejs 文档：https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/ \n5. nodejs 事件循环：https://www.voidcanvas.com/nodejs-event-loop/ ； 这篇文章的中文翻译：https://zhuanlan.zhihu.com/p/35918797\n6. [What you should know to really understand the Node.js Event Loop](https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c)\n7. v8 博客关于任务，微任务的描述：https://v8.dev/blog/fast-async#tasks-vs.-microtasks\n8. Jake Archibald 关于microtask 的文章：https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n9. 关于task 名称的讨论。\n   1. https://www.zhihu.com/question/302612139\n   2. https://www.zhihu.com/question/362096226\n   3. https://weibo.com/1660579792/IkzWTc7FH\n10. 起因是看到这篇 issue [浏览器和Node 事件循环的区别]( https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/26)\n\n后记：\n\n在写的过程中，看了不少材料，中文的，英文的，都有。发现可能只有1%的文章是经典，值得一读。其余的99%都是机械复制粘贴，不说人话。甚至都不知道写完之后作者自己会不会去看。所以当我整理的过程中，也在思考，怎么尽量把这件事用能被理解的方式，说清楚、讲明白，不仅是方便自己以后可以快速总结、回顾，也为不了解的朋友提供一些资料和思路。这也是写这篇文章的初衷。\n","source":"_posts/聊聊事件循环.md","raw":"---\ntitle: 聊聊事件循环\ncategories:\n  - web\ntags:\n  - javascript\n  - event loop\n  - nodejs\n  - browser\nabbrlink: 282aa8cf\ndate: 2021-04-07 14:08:30\n---\n\n大家在面试中经常会被问到，浏览器事件循环和 node 事件循环有什么区别？\n\n好问题。\n\n简短说来，**从执行结果来看**，早期有区别，后来统一了。v11.0.0 (2018.10.23 release) 之后，没区别。\n\n为什么？\n\n看下面这段代码。\n\n```js\nsetTimeout(() => console.log('timeout1'));\nsetTimeout(() => {\n    console.log('timeout2')\n    Promise.resolve().then(() => console.log('promise resolve'))\n});\nsetTimeout(() => console.log('timeout3'));\nsetTimeout(() => console.log('timeout4'));\n```\n\n在浏览器中（chrome v89）\n\n```shell\ntimeout1\ntimeout2\npromise resolve\ntimeout3\ntimeout4\n```\n\n在 node 低于 v11.0.0环境中（在v6.11.2中验证，附赠一个[运行环境连接](https://www.tutorialspoint.com/execute_nodejs_online.php)）。\n\n```sh\ntimeout1\ntimeout2\ntimeout3\ntimeout4\npromise resolve\n```\n\n先看下node 11版本之前，node 是怎么执行的呢？\n\n1. 执行完一个阶段的所有任务\n2. 执行完nextTick队列里的内容\n3. 执行完微任务队列里的内容\n\n所以，可以理解上面的结果，先打完了timeout ，最后才来resolve。\n\n但是这些都已经旧船票了，已经登不上新时代的大船了。\n\n接下来看看浏览器里的执行顺序，也就是node 11以后的执行顺序，从那时起，大伙就是相亲相爱一家人了。\n\n通俗说来，在浏览器环境中，事件循环分3步（第3步就是回到最初的起点）：\n\n1. 运行时在每个事件循环开始时，依次执行task queue 中的每个task，在执行task的过程中，如果又有新的task添加进来怎么办。没办法，先来后到，你只能等下一次循环了。 \n2. 第二步，当每一个 task 结束了，会去检查还有没有待执行的microtask，这里和 task 的显著区别是，他会等到microtask 队列为空才会停止。什么意思，如果一个微任务，不停的往微任务队列里添加新的微任务，那么，这一步骤就会头铁的进行下去。\n3. microtask 执行完了，回到第1歩循环往复。\n\n言归正传，我们再来看下面这个例子（验证环境 chrome 89 & node v14.16.0）。\n\n```js\nconsole.log(1);\nsetTimeout(function () {\n  console.log(2);\n  setTimeout(function () {\n    console.log(3);\n    Promise.resolve(4)\n      .then((res) => {\n        console.log(res); // 4\n        setTimeout(function () {\n          console.log(6);\n        }, 0);\n      })\n      .then((res) => {\n        console.log(res);\n      })\n      .then((res) => {\n        console.log(res);\n      })\n      .then((res) => {\n        console.log(res);\n      });\n  }, 0);\n  setTimeout(function () {\n    console.log(5);\n  }, 0);\n}, 0);\n\n```\n\n为了方便看一点，多 then 了几次。看看结果\n\n```sh\n1\n2\n3\n4\nundefined\nundefined\nundefined\n5\n6\n```\n\n可以看到，我们在then 中不断添加了新的 microtask 时，会继续执行下去，今日事今日毕。但是对于 task，不好意思，您往后稍稍。\n\nv8博客上有张图，挺好。需要注意一点，图中 microtask 描述的是一个动态的过程，他还可以继续往 queue 里添加新的微任务，理解这点很重要。\n\n![micro-tasks-vs-tasks.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b1a464bf2a64aafb65ab790fdbf4bde~tplv-k3u1fbpfcp-watermark.image)\n\n再来看下 node 中的event loop。\n\n在这之前，解释一下为什么文章开头，我加粗的“从执行结果来看”。\n\n本质上，事件循环是由宿主环境来实现，常见的宿主环境有web浏览器，nodejs，还有 Adobe Flash（没错，还有这个老哥，参见高程）。由于不同环境实现的不同，这也产生了这个古老的问题，“浏览器事件循环和 node 事件循环有什么区别？” 对于这种行为，这好吗？这不好。所以为了消除这种宿主环境之间执行的差异， node 11 之后改善了这个问题。\n\n回到 node 官方文档，我们可以看到这么一张图流程图。\n\n```\n   ┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n```\n\n这张图有点抽象，换一张。\n\n![d502f94b-cc6c-4be7-ac8c-172897eefb05-original.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9aa3e314b504fcfb4e4d78d760c44bf~tplv-k3u1fbpfcp-watermark.image)\n\n关于事件循环的解释，网上的解释数不胜数。感觉不少都是把官方文档的内容颠来倒去拼凑一下。除了官方文档以外，还有一篇文章觉得值得一读（上图就是我借来的），同样也附在最后的链接部分。在这里我就不展开，或许下次专门写一篇文章来记录一下自己的阅读心得。\n\n再说点题外话，截止到今天（2021-3-16）， 对于 task, microtask 的官方用词和翻译还是 “任务 task  vs 微任务 microtask”。没有所谓的“宏任务”，也没有“macrotask” 这玩意什么事。用于谦于老爷的话说，这都不挨着。\n\n关于宏任务/ macrotask，打开掘金知乎，包括英文环境，随便搜一搜，大把的文章，到处都在说，到处都在用。但是去查官方文档，mdn，v8 blog，html spec 等等，很难找到这个词出现的源头。一个没有源头的词，出现了人传人现象，在各种文章图片中出现，很有趣。如果有朋友知道这个词的来历，欢迎指点。\n\n好了，文章到此为止，谢谢大家的阅读，欢迎讨论和指正。\n\n接下来补充一些辅助阅读材料。\n\n1. mdn 文档。\n\n   1. https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide\n   2. https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\n\n   一个小彩蛋，英文版的子标题， Run, JavaScript, run 是 Forrest Gump  里的经典台词，Run, Forrest , run!\n\n2. Promise/A+: https://promisesaplus.com/#notes   \n\n   文档中关于 platform code 的解释中有这么一段话 `This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick`。 这也是我为数不多检索到明确使用“macro”的一处，当然还特意加上了引号。\n\n3. html 文档：https://html.spec.whatwg.org/multipage/webappapis.html#concept-agent-event-loop\n4. nodejs 文档：https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/ \n5. nodejs 事件循环：https://www.voidcanvas.com/nodejs-event-loop/ ； 这篇文章的中文翻译：https://zhuanlan.zhihu.com/p/35918797\n6. [What you should know to really understand the Node.js Event Loop](https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c)\n7. v8 博客关于任务，微任务的描述：https://v8.dev/blog/fast-async#tasks-vs.-microtasks\n8. Jake Archibald 关于microtask 的文章：https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n9. 关于task 名称的讨论。\n   1. https://www.zhihu.com/question/302612139\n   2. https://www.zhihu.com/question/362096226\n   3. https://weibo.com/1660579792/IkzWTc7FH\n10. 起因是看到这篇 issue [浏览器和Node 事件循环的区别]( https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/26)\n\n后记：\n\n在写的过程中，看了不少材料，中文的，英文的，都有。发现可能只有1%的文章是经典，值得一读。其余的99%都是机械复制粘贴，不说人话。甚至都不知道写完之后作者自己会不会去看。所以当我整理的过程中，也在思考，怎么尽量把这件事用能被理解的方式，说清楚、讲明白，不仅是方便自己以后可以快速总结、回顾，也为不了解的朋友提供一些资料和思路。这也是写这篇文章的初衷。\n","slug":"聊聊事件循环","published":1,"updated":"2021-04-07T06:13:48.578Z","_id":"ckn7220hk00027pfy3fep2jts","comments":1,"layout":"post","photos":[],"link":"","content":"<p>大家在面试中经常会被问到，浏览器事件循环和 node 事件循环有什么区别？</p>\n<p>好问题。</p>\n<p>简短说来，<strong>从执行结果来看</strong>，早期有区别，后来统一了。v11.0.0 (2018.10.23 release) 之后，没区别。</p>\n<p>为什么？</p>\n<p>看下面这段代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1'</span>));</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout2'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise resolve'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout3'</span>));</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout4'</span>));</span><br></pre></td></tr></table></figure>\n<p>在浏览器中（chrome v89）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout1</span><br><span class=\"line\">timeout2</span><br><span class=\"line\">promise resolve</span><br><span class=\"line\">timeout3</span><br><span class=\"line\">timeout4</span><br></pre></td></tr></table></figure>\n<p>在 node 低于 v11.0.0环境中（在v6.11.2中验证，附赠一个<a href=\"https://www.tutorialspoint.com/execute_nodejs_online.php\" target=\"_blank\" rel=\"noopener\">运行环境连接</a>）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout1</span><br><span class=\"line\">timeout2</span><br><span class=\"line\">timeout3</span><br><span class=\"line\">timeout4</span><br><span class=\"line\">promise resolve</span><br></pre></td></tr></table></figure>\n<p>先看下node 11版本之前，node 是怎么执行的呢？</p>\n<ol>\n<li>执行完一个阶段的所有任务</li>\n<li>执行完nextTick队列里的内容</li>\n<li>执行完微任务队列里的内容</li>\n</ol>\n<p>所以，可以理解上面的结果，先打完了timeout ，最后才来resolve。</p>\n<p>但是这些都已经旧船票了，已经登不上新时代的大船了。</p>\n<p>接下来看看浏览器里的执行顺序，也就是node 11以后的执行顺序，从那时起，大伙就是相亲相爱一家人了。</p>\n<p>通俗说来，在浏览器环境中，事件循环分3步（第3步就是回到最初的起点）：</p>\n<ol>\n<li>运行时在每个事件循环开始时，依次执行task queue 中的每个task，在执行task的过程中，如果又有新的task添加进来怎么办。没办法，先来后到，你只能等下一次循环了。 </li>\n<li>第二步，当每一个 task 结束了，会去检查还有没有待执行的microtask，这里和 task 的显著区别是，他会等到microtask 队列为空才会停止。什么意思，如果一个微任务，不停的往微任务队列里添加新的微任务，那么，这一步骤就会头铁的进行下去。</li>\n<li>microtask 执行完了，回到第1歩循环往复。</li>\n</ol>\n<p>言归正传，我们再来看下面这个例子（验证环境 chrome 89 &amp; node v14.16.0）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">4</span>)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res); <span class=\"comment\">// 4</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>为了方便看一点，多 then 了几次。看看结果</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">undefined</span><br><span class=\"line\">undefined</span><br><span class=\"line\">undefined</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们在then 中不断添加了新的 microtask 时，会继续执行下去，今日事今日毕。但是对于 task，不好意思，您往后稍稍。</p>\n<p>v8博客上有张图，挺好。需要注意一点，图中 microtask 描述的是一个动态的过程，他还可以继续往 queue 里添加新的微任务，理解这点很重要。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b1a464bf2a64aafb65ab790fdbf4bde~tplv-k3u1fbpfcp-watermark.image\" alt=\"micro-tasks-vs-tasks.png\"></p>\n<p>再来看下 node 中的event loop。</p>\n<p>在这之前，解释一下为什么文章开头，我加粗的“从执行结果来看”。</p>\n<p>本质上，事件循环是由宿主环境来实现，常见的宿主环境有web浏览器，nodejs，还有 Adobe Flash（没错，还有这个老哥，参见高程）。由于不同环境实现的不同，这也产生了这个古老的问题，“浏览器事件循环和 node 事件循环有什么区别？” 对于这种行为，这好吗？这不好。所以为了消除这种宿主环境之间执行的差异， node 11 之后改善了这个问题。</p>\n<p>回到 node 官方文档，我们可以看到这么一张图流程图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ┌───────────────────────────┐</span><br><span class=\"line\">┌─&gt;│           timers          │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">│  │     pending callbacks     │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">│  │       idle, prepare       │</span><br><span class=\"line\">│  └─────────────┬─────────────┘      ┌───────────────┐</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐      │   incoming:   │</span><br><span class=\"line\">│  │           poll            │&lt;─────┤  connections, │</span><br><span class=\"line\">│  └─────────────┬─────────────┘      │   data, etc.  │</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐      └───────────────┘</span><br><span class=\"line\">│  │           check           │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">└──┤      close callbacks      │</span><br><span class=\"line\">   └───────────────────────────┘</span><br></pre></td></tr></table></figure>\n<p>这张图有点抽象，换一张。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9aa3e314b504fcfb4e4d78d760c44bf~tplv-k3u1fbpfcp-watermark.image\" alt=\"d502f94b-cc6c-4be7-ac8c-172897eefb05-original.png\"></p>\n<p>关于事件循环的解释，网上的解释数不胜数。感觉不少都是把官方文档的内容颠来倒去拼凑一下。除了官方文档以外，还有一篇文章觉得值得一读（上图就是我借来的），同样也附在最后的链接部分。在这里我就不展开，或许下次专门写一篇文章来记录一下自己的阅读心得。</p>\n<p>再说点题外话，截止到今天（2021-3-16）， 对于 task, microtask 的官方用词和翻译还是 “任务 task  vs 微任务 microtask”。没有所谓的“宏任务”，也没有“macrotask” 这玩意什么事。用于谦于老爷的话说，这都不挨着。</p>\n<p>关于宏任务/ macrotask，打开掘金知乎，包括英文环境，随便搜一搜，大把的文章，到处都在说，到处都在用。但是去查官方文档，mdn，v8 blog，html spec 等等，很难找到这个词出现的源头。一个没有源头的词，出现了人传人现象，在各种文章图片中出现，很有趣。如果有朋友知道这个词的来历，欢迎指点。</p>\n<p>好了，文章到此为止，谢谢大家的阅读，欢迎讨论和指正。</p>\n<p>接下来补充一些辅助阅读材料。</p>\n<ol>\n<li><p>mdn 文档。</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth</a></li>\n</ol>\n<p>一个小彩蛋，英文版的子标题， Run, JavaScript, run 是 Forrest Gump  里的经典台词，Run, Forrest , run!</p>\n</li>\n<li><p>Promise/A+: <a href=\"https://promisesaplus.com/#notes\" target=\"_blank\" rel=\"noopener\">https://promisesaplus.com/#notes</a>   </p>\n<p>文档中关于 platform code 的解释中有这么一段话 <code>This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick</code>。 这也是我为数不多检索到明确使用“macro”的一处，当然还特意加上了引号。</p>\n</li>\n<li><p>html 文档：<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#concept-agent-event-loop\" target=\"_blank\" rel=\"noopener\">https://html.spec.whatwg.org/multipage/webappapis.html#concept-agent-event-loop</a></p>\n</li>\n<li>nodejs 文档：<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/</a> </li>\n<li>nodejs 事件循环：<a href=\"https://www.voidcanvas.com/nodejs-event-loop/\" target=\"_blank\" rel=\"noopener\">https://www.voidcanvas.com/nodejs-event-loop/</a> ； 这篇文章的中文翻译：<a href=\"https://zhuanlan.zhihu.com/p/35918797\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/35918797</a></li>\n<li><a href=\"https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c\" target=\"_blank\" rel=\"noopener\">What you should know to really understand the Node.js Event Loop</a></li>\n<li>v8 博客关于任务，微任务的描述：<a href=\"https://v8.dev/blog/fast-async#tasks-vs.-microtasks\" target=\"_blank\" rel=\"noopener\">https://v8.dev/blog/fast-async#tasks-vs.-microtasks</a></li>\n<li>Jake Archibald 关于microtask 的文章：<a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></li>\n<li>关于task 名称的讨论。<ol>\n<li><a href=\"https://www.zhihu.com/question/302612139\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/302612139</a></li>\n<li><a href=\"https://www.zhihu.com/question/362096226\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/362096226</a></li>\n<li><a href=\"https://weibo.com/1660579792/IkzWTc7FH\" target=\"_blank\" rel=\"noopener\">https://weibo.com/1660579792/IkzWTc7FH</a></li>\n</ol>\n</li>\n<li>起因是看到这篇 issue <a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/26\" target=\"_blank\" rel=\"noopener\">浏览器和Node 事件循环的区别</a></li>\n</ol>\n<p>后记：</p>\n<p>在写的过程中，看了不少材料，中文的，英文的，都有。发现可能只有1%的文章是经典，值得一读。其余的99%都是机械复制粘贴，不说人话。甚至都不知道写完之后作者自己会不会去看。所以当我整理的过程中，也在思考，怎么尽量把这件事用能被理解的方式，说清楚、讲明白，不仅是方便自己以后可以快速总结、回顾，也为不了解的朋友提供一些资料和思路。这也是写这篇文章的初衷。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大家在面试中经常会被问到，浏览器事件循环和 node 事件循环有什么区别？</p>\n<p>好问题。</p>\n<p>简短说来，<strong>从执行结果来看</strong>，早期有区别，后来统一了。v11.0.0 (2018.10.23 release) 之后，没区别。</p>\n<p>为什么？</p>\n<p>看下面这段代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1'</span>));</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout2'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise resolve'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout3'</span>));</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout4'</span>));</span><br></pre></td></tr></table></figure>\n<p>在浏览器中（chrome v89）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout1</span><br><span class=\"line\">timeout2</span><br><span class=\"line\">promise resolve</span><br><span class=\"line\">timeout3</span><br><span class=\"line\">timeout4</span><br></pre></td></tr></table></figure>\n<p>在 node 低于 v11.0.0环境中（在v6.11.2中验证，附赠一个<a href=\"https://www.tutorialspoint.com/execute_nodejs_online.php\" target=\"_blank\" rel=\"noopener\">运行环境连接</a>）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout1</span><br><span class=\"line\">timeout2</span><br><span class=\"line\">timeout3</span><br><span class=\"line\">timeout4</span><br><span class=\"line\">promise resolve</span><br></pre></td></tr></table></figure>\n<p>先看下node 11版本之前，node 是怎么执行的呢？</p>\n<ol>\n<li>执行完一个阶段的所有任务</li>\n<li>执行完nextTick队列里的内容</li>\n<li>执行完微任务队列里的内容</li>\n</ol>\n<p>所以，可以理解上面的结果，先打完了timeout ，最后才来resolve。</p>\n<p>但是这些都已经旧船票了，已经登不上新时代的大船了。</p>\n<p>接下来看看浏览器里的执行顺序，也就是node 11以后的执行顺序，从那时起，大伙就是相亲相爱一家人了。</p>\n<p>通俗说来，在浏览器环境中，事件循环分3步（第3步就是回到最初的起点）：</p>\n<ol>\n<li>运行时在每个事件循环开始时，依次执行task queue 中的每个task，在执行task的过程中，如果又有新的task添加进来怎么办。没办法，先来后到，你只能等下一次循环了。 </li>\n<li>第二步，当每一个 task 结束了，会去检查还有没有待执行的microtask，这里和 task 的显著区别是，他会等到microtask 队列为空才会停止。什么意思，如果一个微任务，不停的往微任务队列里添加新的微任务，那么，这一步骤就会头铁的进行下去。</li>\n<li>microtask 执行完了，回到第1歩循环往复。</li>\n</ol>\n<p>言归正传，我们再来看下面这个例子（验证环境 chrome 89 &amp; node v14.16.0）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">4</span>)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res); <span class=\"comment\">// 4</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>为了方便看一点，多 then 了几次。看看结果</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">undefined</span><br><span class=\"line\">undefined</span><br><span class=\"line\">undefined</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们在then 中不断添加了新的 microtask 时，会继续执行下去，今日事今日毕。但是对于 task，不好意思，您往后稍稍。</p>\n<p>v8博客上有张图，挺好。需要注意一点，图中 microtask 描述的是一个动态的过程，他还可以继续往 queue 里添加新的微任务，理解这点很重要。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b1a464bf2a64aafb65ab790fdbf4bde~tplv-k3u1fbpfcp-watermark.image\" alt=\"micro-tasks-vs-tasks.png\"></p>\n<p>再来看下 node 中的event loop。</p>\n<p>在这之前，解释一下为什么文章开头，我加粗的“从执行结果来看”。</p>\n<p>本质上，事件循环是由宿主环境来实现，常见的宿主环境有web浏览器，nodejs，还有 Adobe Flash（没错，还有这个老哥，参见高程）。由于不同环境实现的不同，这也产生了这个古老的问题，“浏览器事件循环和 node 事件循环有什么区别？” 对于这种行为，这好吗？这不好。所以为了消除这种宿主环境之间执行的差异， node 11 之后改善了这个问题。</p>\n<p>回到 node 官方文档，我们可以看到这么一张图流程图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ┌───────────────────────────┐</span><br><span class=\"line\">┌─&gt;│           timers          │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">│  │     pending callbacks     │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">│  │       idle, prepare       │</span><br><span class=\"line\">│  └─────────────┬─────────────┘      ┌───────────────┐</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐      │   incoming:   │</span><br><span class=\"line\">│  │           poll            │&lt;─────┤  connections, │</span><br><span class=\"line\">│  └─────────────┬─────────────┘      │   data, etc.  │</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐      └───────────────┘</span><br><span class=\"line\">│  │           check           │</span><br><span class=\"line\">│  └─────────────┬─────────────┘</span><br><span class=\"line\">│  ┌─────────────┴─────────────┐</span><br><span class=\"line\">└──┤      close callbacks      │</span><br><span class=\"line\">   └───────────────────────────┘</span><br></pre></td></tr></table></figure>\n<p>这张图有点抽象，换一张。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9aa3e314b504fcfb4e4d78d760c44bf~tplv-k3u1fbpfcp-watermark.image\" alt=\"d502f94b-cc6c-4be7-ac8c-172897eefb05-original.png\"></p>\n<p>关于事件循环的解释，网上的解释数不胜数。感觉不少都是把官方文档的内容颠来倒去拼凑一下。除了官方文档以外，还有一篇文章觉得值得一读（上图就是我借来的），同样也附在最后的链接部分。在这里我就不展开，或许下次专门写一篇文章来记录一下自己的阅读心得。</p>\n<p>再说点题外话，截止到今天（2021-3-16）， 对于 task, microtask 的官方用词和翻译还是 “任务 task  vs 微任务 microtask”。没有所谓的“宏任务”，也没有“macrotask” 这玩意什么事。用于谦于老爷的话说，这都不挨着。</p>\n<p>关于宏任务/ macrotask，打开掘金知乎，包括英文环境，随便搜一搜，大把的文章，到处都在说，到处都在用。但是去查官方文档，mdn，v8 blog，html spec 等等，很难找到这个词出现的源头。一个没有源头的词，出现了人传人现象，在各种文章图片中出现，很有趣。如果有朋友知道这个词的来历，欢迎指点。</p>\n<p>好了，文章到此为止，谢谢大家的阅读，欢迎讨论和指正。</p>\n<p>接下来补充一些辅助阅读材料。</p>\n<ol>\n<li><p>mdn 文档。</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth</a></li>\n</ol>\n<p>一个小彩蛋，英文版的子标题， Run, JavaScript, run 是 Forrest Gump  里的经典台词，Run, Forrest , run!</p>\n</li>\n<li><p>Promise/A+: <a href=\"https://promisesaplus.com/#notes\" target=\"_blank\" rel=\"noopener\">https://promisesaplus.com/#notes</a>   </p>\n<p>文档中关于 platform code 的解释中有这么一段话 <code>This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick</code>。 这也是我为数不多检索到明确使用“macro”的一处，当然还特意加上了引号。</p>\n</li>\n<li><p>html 文档：<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#concept-agent-event-loop\" target=\"_blank\" rel=\"noopener\">https://html.spec.whatwg.org/multipage/webappapis.html#concept-agent-event-loop</a></p>\n</li>\n<li>nodejs 文档：<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/</a> </li>\n<li>nodejs 事件循环：<a href=\"https://www.voidcanvas.com/nodejs-event-loop/\" target=\"_blank\" rel=\"noopener\">https://www.voidcanvas.com/nodejs-event-loop/</a> ； 这篇文章的中文翻译：<a href=\"https://zhuanlan.zhihu.com/p/35918797\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/35918797</a></li>\n<li><a href=\"https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c\" target=\"_blank\" rel=\"noopener\">What you should know to really understand the Node.js Event Loop</a></li>\n<li>v8 博客关于任务，微任务的描述：<a href=\"https://v8.dev/blog/fast-async#tasks-vs.-microtasks\" target=\"_blank\" rel=\"noopener\">https://v8.dev/blog/fast-async#tasks-vs.-microtasks</a></li>\n<li>Jake Archibald 关于microtask 的文章：<a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></li>\n<li>关于task 名称的讨论。<ol>\n<li><a href=\"https://www.zhihu.com/question/302612139\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/302612139</a></li>\n<li><a href=\"https://www.zhihu.com/question/362096226\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/362096226</a></li>\n<li><a href=\"https://weibo.com/1660579792/IkzWTc7FH\" target=\"_blank\" rel=\"noopener\">https://weibo.com/1660579792/IkzWTc7FH</a></li>\n</ol>\n</li>\n<li>起因是看到这篇 issue <a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/26\" target=\"_blank\" rel=\"noopener\">浏览器和Node 事件循环的区别</a></li>\n</ol>\n<p>后记：</p>\n<p>在写的过程中，看了不少材料，中文的，英文的，都有。发现可能只有1%的文章是经典，值得一读。其余的99%都是机械复制粘贴，不说人话。甚至都不知道写完之后作者自己会不会去看。所以当我整理的过程中，也在思考，怎么尽量把这件事用能被理解的方式，说清楚、讲明白，不仅是方便自己以后可以快速总结、回顾，也为不了解的朋友提供一些资料和思路。这也是写这篇文章的初衷。</p>\n"},{"title":"手机坏掉之后","abbrlink":"387a3740","date":"2021-05-03T18:08:42.000Z","_content":"\n手机坏了一天。\n\n升级之后可能触发了某个bug，屏幕触控没反应了，解锁重启都不行。一下子变成原始人，什么也干不了。好在也无甚急事找我，偶尔还能用手表语音回回微信。\n\n唯二比较的麻烦是出行和付款。早上急着出门去黄州参加朋友的婚礼，担心扫不了自己的健康码，出入高铁站不方便。只好用我爸的手机下载滴滴打车，准备打个顺风车试试。输入手机号接受验证码，直接登录，不拖泥带水。又尝试在他的手机上登我的微信，除了验证码，还需要找两位常联系好友发送数字。我这大清早上哪去找人？当场就想问候问候张小龙。\n\n约好了车，下楼过早。打开支付宝扫码付账，发现不知道我爸的支付密码，刚好钱包里有钱，就直接给了五块现金。直到端着我的宽粉坐下开吃，发现手机还停在支付页面，想也没想直接点了返回，这时店子里突然出现一句提示音，“顾客发起取消支付”。我还来不及多想，老板娘站在门口操着典型的武汉老嫂子的口气，那种起调高昂响亮引起注意，随后逐渐低沉意味着你麻烦来了。“是哪——个——取消支付啊？”我一下就愣住，突然早餐店里安静下来，仿佛都想看看是谁用这么蹩脚的手法来骗碗素粉。我赶紧解释，“我刚刚给了现金！”老板娘瞟我一眼，径直去忙了。我明明付了钱，竟然有种做贼心虚的感觉。赶紧给爸爸打个电话，当着食客大声问道，你支付密码几多撒？嗯，嗯，哦，哦。挂断电话。\n\n到了酒席，寒暄坐定。一个人来吃酒，手机又坏了，当然没法假装很忙沉迷手机，只能多听听旁边人聊天，小城生活离不开房价二胎，谁谁发了财，谁谁换车了。坐我旁边两位也是新郎官的同学，原来没少一起打球，年少时一头烫发放荡不羁，现在拖家带口衣冠楚楚。可乐过三巡，旁边一位同学拆开桌上的华子，给他的同学们散了一圈，也递我一根。虽然同桌也有坐几个小孩，但大家似乎并不觉得有什么问题。他点了烟，忽然问我，你原来是几班的？看你好眼熟，记不起来了。我说，我是隔壁理科班的，刚来也觉得你眼熟。他吐一口烟，说，是吧，好久了，都毕业十多年了。旁边的另一位同学也附和道，十几年了。我说，嗯，那可不。继续喝可乐。\n\n酒席散场，约了当地一家维修店去抢救手机，进门大概叙述了一下病情。师傅使用了一种新的组合按键技能重启了我的手机，上上下下左左右右baba，不到两分钟就好了。我非常激动，一边掏钱包一边问多少钱，老板说就这要什么钱。我道完谢拿起手机就出门。老板赶快将我喊住，说我还没教你怎么重启！我说对，授人以鱼不如授人以渔，上网查半天没搞定。出了门解锁手机的那一霎那，感觉今天才真的活过来了。\n\n我的手机起死回生，也不用着急回武汉。于是在黄州街头溜达。路过宝塔公园，我二十多年前就听亲戚介绍过，香火很旺，但一直没去过。听朋友讲，他们小时候可以爬上去，收门票一个人五毛。现在不行了，门上了锁，只能塔下看看。可惜。\n\n今天自己摸索出爱疯多种快速拨打紧急电话的方式。这要真的是很紧急偷偷报警，那蜂鸣声估计连歹徒都被吓到。\n\n我还是怀念那个死机了直接拔电池的时代。\n","source":"_posts/手机坏掉之后.md","raw":"---\ntitle: 手机坏掉之后\nabbrlink: 387a3740\ndate: 2021-05-03 11:08:42\ncategories:\n  - life\ntags:\n---\n\n手机坏了一天。\n\n升级之后可能触发了某个bug，屏幕触控没反应了，解锁重启都不行。一下子变成原始人，什么也干不了。好在也无甚急事找我，偶尔还能用手表语音回回微信。\n\n唯二比较的麻烦是出行和付款。早上急着出门去黄州参加朋友的婚礼，担心扫不了自己的健康码，出入高铁站不方便。只好用我爸的手机下载滴滴打车，准备打个顺风车试试。输入手机号接受验证码，直接登录，不拖泥带水。又尝试在他的手机上登我的微信，除了验证码，还需要找两位常联系好友发送数字。我这大清早上哪去找人？当场就想问候问候张小龙。\n\n约好了车，下楼过早。打开支付宝扫码付账，发现不知道我爸的支付密码，刚好钱包里有钱，就直接给了五块现金。直到端着我的宽粉坐下开吃，发现手机还停在支付页面，想也没想直接点了返回，这时店子里突然出现一句提示音，“顾客发起取消支付”。我还来不及多想，老板娘站在门口操着典型的武汉老嫂子的口气，那种起调高昂响亮引起注意，随后逐渐低沉意味着你麻烦来了。“是哪——个——取消支付啊？”我一下就愣住，突然早餐店里安静下来，仿佛都想看看是谁用这么蹩脚的手法来骗碗素粉。我赶紧解释，“我刚刚给了现金！”老板娘瞟我一眼，径直去忙了。我明明付了钱，竟然有种做贼心虚的感觉。赶紧给爸爸打个电话，当着食客大声问道，你支付密码几多撒？嗯，嗯，哦，哦。挂断电话。\n\n到了酒席，寒暄坐定。一个人来吃酒，手机又坏了，当然没法假装很忙沉迷手机，只能多听听旁边人聊天，小城生活离不开房价二胎，谁谁发了财，谁谁换车了。坐我旁边两位也是新郎官的同学，原来没少一起打球，年少时一头烫发放荡不羁，现在拖家带口衣冠楚楚。可乐过三巡，旁边一位同学拆开桌上的华子，给他的同学们散了一圈，也递我一根。虽然同桌也有坐几个小孩，但大家似乎并不觉得有什么问题。他点了烟，忽然问我，你原来是几班的？看你好眼熟，记不起来了。我说，我是隔壁理科班的，刚来也觉得你眼熟。他吐一口烟，说，是吧，好久了，都毕业十多年了。旁边的另一位同学也附和道，十几年了。我说，嗯，那可不。继续喝可乐。\n\n酒席散场，约了当地一家维修店去抢救手机，进门大概叙述了一下病情。师傅使用了一种新的组合按键技能重启了我的手机，上上下下左左右右baba，不到两分钟就好了。我非常激动，一边掏钱包一边问多少钱，老板说就这要什么钱。我道完谢拿起手机就出门。老板赶快将我喊住，说我还没教你怎么重启！我说对，授人以鱼不如授人以渔，上网查半天没搞定。出了门解锁手机的那一霎那，感觉今天才真的活过来了。\n\n我的手机起死回生，也不用着急回武汉。于是在黄州街头溜达。路过宝塔公园，我二十多年前就听亲戚介绍过，香火很旺，但一直没去过。听朋友讲，他们小时候可以爬上去，收门票一个人五毛。现在不行了，门上了锁，只能塔下看看。可惜。\n\n今天自己摸索出爱疯多种快速拨打紧急电话的方式。这要真的是很紧急偷偷报警，那蜂鸣声估计连歹徒都被吓到。\n\n我还是怀念那个死机了直接拔电池的时代。\n","slug":"手机坏掉之后","published":1,"updated":"2021-05-14T04:12:44.896Z","_id":"ckonsxvma000037s6chohgwv0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>手机坏了一天。</p>\n<p>升级之后可能触发了某个bug，屏幕触控没反应了，解锁重启都不行。一下子变成原始人，什么也干不了。好在也无甚急事找我，偶尔还能用手表语音回回微信。</p>\n<p>唯二比较的麻烦是出行和付款。早上急着出门去黄州参加朋友的婚礼，担心扫不了自己的健康码，出入高铁站不方便。只好用我爸的手机下载滴滴打车，准备打个顺风车试试。输入手机号接受验证码，直接登录，不拖泥带水。又尝试在他的手机上登我的微信，除了验证码，还需要找两位常联系好友发送数字。我这大清早上哪去找人？当场就想问候问候张小龙。</p>\n<p>约好了车，下楼过早。打开支付宝扫码付账，发现不知道我爸的支付密码，刚好钱包里有钱，就直接给了五块现金。直到端着我的宽粉坐下开吃，发现手机还停在支付页面，想也没想直接点了返回，这时店子里突然出现一句提示音，“顾客发起取消支付”。我还来不及多想，老板娘站在门口操着典型的武汉老嫂子的口气，那种起调高昂响亮引起注意，随后逐渐低沉意味着你麻烦来了。“是哪——个——取消支付啊？”我一下就愣住，突然早餐店里安静下来，仿佛都想看看是谁用这么蹩脚的手法来骗碗素粉。我赶紧解释，“我刚刚给了现金！”老板娘瞟我一眼，径直去忙了。我明明付了钱，竟然有种做贼心虚的感觉。赶紧给爸爸打个电话，当着食客大声问道，你支付密码几多撒？嗯，嗯，哦，哦。挂断电话。</p>\n<p>到了酒席，寒暄坐定。一个人来吃酒，手机又坏了，当然没法假装很忙沉迷手机，只能多听听旁边人聊天，小城生活离不开房价二胎，谁谁发了财，谁谁换车了。坐我旁边两位也是新郎官的同学，原来没少一起打球，年少时一头烫发放荡不羁，现在拖家带口衣冠楚楚。可乐过三巡，旁边一位同学拆开桌上的华子，给他的同学们散了一圈，也递我一根。虽然同桌也有坐几个小孩，但大家似乎并不觉得有什么问题。他点了烟，忽然问我，你原来是几班的？看你好眼熟，记不起来了。我说，我是隔壁理科班的，刚来也觉得你眼熟。他吐一口烟，说，是吧，好久了，都毕业十多年了。旁边的另一位同学也附和道，十几年了。我说，嗯，那可不。继续喝可乐。</p>\n<p>酒席散场，约了当地一家维修店去抢救手机，进门大概叙述了一下病情。师傅使用了一种新的组合按键技能重启了我的手机，上上下下左左右右baba，不到两分钟就好了。我非常激动，一边掏钱包一边问多少钱，老板说就这要什么钱。我道完谢拿起手机就出门。老板赶快将我喊住，说我还没教你怎么重启！我说对，授人以鱼不如授人以渔，上网查半天没搞定。出了门解锁手机的那一霎那，感觉今天才真的活过来了。</p>\n<p>我的手机起死回生，也不用着急回武汉。于是在黄州街头溜达。路过宝塔公园，我二十多年前就听亲戚介绍过，香火很旺，但一直没去过。听朋友讲，他们小时候可以爬上去，收门票一个人五毛。现在不行了，门上了锁，只能塔下看看。可惜。</p>\n<p>今天自己摸索出爱疯多种快速拨打紧急电话的方式。这要真的是很紧急偷偷报警，那蜂鸣声估计连歹徒都被吓到。</p>\n<p>我还是怀念那个死机了直接拔电池的时代。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>手机坏了一天。</p>\n<p>升级之后可能触发了某个bug，屏幕触控没反应了，解锁重启都不行。一下子变成原始人，什么也干不了。好在也无甚急事找我，偶尔还能用手表语音回回微信。</p>\n<p>唯二比较的麻烦是出行和付款。早上急着出门去黄州参加朋友的婚礼，担心扫不了自己的健康码，出入高铁站不方便。只好用我爸的手机下载滴滴打车，准备打个顺风车试试。输入手机号接受验证码，直接登录，不拖泥带水。又尝试在他的手机上登我的微信，除了验证码，还需要找两位常联系好友发送数字。我这大清早上哪去找人？当场就想问候问候张小龙。</p>\n<p>约好了车，下楼过早。打开支付宝扫码付账，发现不知道我爸的支付密码，刚好钱包里有钱，就直接给了五块现金。直到端着我的宽粉坐下开吃，发现手机还停在支付页面，想也没想直接点了返回，这时店子里突然出现一句提示音，“顾客发起取消支付”。我还来不及多想，老板娘站在门口操着典型的武汉老嫂子的口气，那种起调高昂响亮引起注意，随后逐渐低沉意味着你麻烦来了。“是哪——个——取消支付啊？”我一下就愣住，突然早餐店里安静下来，仿佛都想看看是谁用这么蹩脚的手法来骗碗素粉。我赶紧解释，“我刚刚给了现金！”老板娘瞟我一眼，径直去忙了。我明明付了钱，竟然有种做贼心虚的感觉。赶紧给爸爸打个电话，当着食客大声问道，你支付密码几多撒？嗯，嗯，哦，哦。挂断电话。</p>\n<p>到了酒席，寒暄坐定。一个人来吃酒，手机又坏了，当然没法假装很忙沉迷手机，只能多听听旁边人聊天，小城生活离不开房价二胎，谁谁发了财，谁谁换车了。坐我旁边两位也是新郎官的同学，原来没少一起打球，年少时一头烫发放荡不羁，现在拖家带口衣冠楚楚。可乐过三巡，旁边一位同学拆开桌上的华子，给他的同学们散了一圈，也递我一根。虽然同桌也有坐几个小孩，但大家似乎并不觉得有什么问题。他点了烟，忽然问我，你原来是几班的？看你好眼熟，记不起来了。我说，我是隔壁理科班的，刚来也觉得你眼熟。他吐一口烟，说，是吧，好久了，都毕业十多年了。旁边的另一位同学也附和道，十几年了。我说，嗯，那可不。继续喝可乐。</p>\n<p>酒席散场，约了当地一家维修店去抢救手机，进门大概叙述了一下病情。师傅使用了一种新的组合按键技能重启了我的手机，上上下下左左右右baba，不到两分钟就好了。我非常激动，一边掏钱包一边问多少钱，老板说就这要什么钱。我道完谢拿起手机就出门。老板赶快将我喊住，说我还没教你怎么重启！我说对，授人以鱼不如授人以渔，上网查半天没搞定。出了门解锁手机的那一霎那，感觉今天才真的活过来了。</p>\n<p>我的手机起死回生，也不用着急回武汉。于是在黄州街头溜达。路过宝塔公园，我二十多年前就听亲戚介绍过，香火很旺，但一直没去过。听朋友讲，他们小时候可以爬上去，收门票一个人五毛。现在不行了，门上了锁，只能塔下看看。可惜。</p>\n<p>今天自己摸索出爱疯多种快速拨打紧急电话的方式。这要真的是很紧急偷偷报警，那蜂鸣声估计连歹徒都被吓到。</p>\n<p>我还是怀念那个死机了直接拔电池的时代。</p>\n"},{"title":"我读《复盘网飞》","abbrlink":"fcbbfd3c","date":"2021-05-14T05:07:33.000Z","_content":"\n作者文笔很好，翻译水平也在线。细节满满，读起来感觉特别有意思，收获也不少。印象比较深刻的几点，也有一些自己的思考，揉在一起记录下来，不一定是按章节的顺序：\n\n里德哈斯廷斯给人感觉是一个理性的人，有时候理性到近乎绝情，直来直去，不拘礼节。相较于里德，伦道夫则多些人情味。两人虽然都态度强硬，绝不妥协，但是合作却十分融洽，重点在于“争论是为了更好地合作，而不是为了自己的面子。谁是对的并不重要，重要的是我们做对了”。里德是更好的领导者，但是我更愿意和兰多夫合作。\n\n\n每个用户提供独一无二的产品实在太难，做一打产品需要付出的努力就是做一个产品所付出努力的12倍。所以邮寄狗粮，定制棒球棒，冲浪板都被pass了。最终的目的是可以规模化生产的东西，卖出一打和卖出一个所付出的努力是完全想等的，需要找到一种不仅仅是一次性销售的产品，这样一旦获取了一个客户，就可以一次又一次地把产品卖给他。\n\n\n用我自己的理解，就是寻找一件可以快速复制的模式，一种控制投入，但产出可以容易 scalable 的产品。当然我觉得上面这点也有时代背景。现在开始走精细化运营，定制化的市场也不算小众。前段时间刷广告还看到定制维生素的产品。（我还发现一些比较小众的服装品牌，可能会推广上衣，或者局限在T恤，但是很少会提供多种下装，或者完全就不提供裤装产线。可能也是因为如上原因，我不了解这个领域，random guess）\n\n\n加拿大原则。美国加拿大毗邻，生活习惯类似。有没有必要在早期增加成本，人力投入，来打入加拿大市场。答案是没必要， 因为需要针对法语区进行翻译，当地邮政系统差别，结算货币不同等麻烦事，容易使得核心业务精力分散。\n\n\n计划是美好的，但是要尽快落地。“关键是要让你的想法尽快和现实亲密接触”。这点我深有感触，这一年来一直强迫自己多写作锻炼思维能力。一开始总会过于在意许多方面，以至于有时会陷入对细节的纠结中，下笔进展缓慢。后来慢慢改善，列好提纲，然后分段扩展。完成初版之后再修改。以期获得螺旋式的进展和进步。\n\n\n头衔通胀。公司给员工派发各种唬人的高级头衔，从而在不增加成本的情况下提供晋升机会，以留住员工。\n\n\n回音室效应，指在一个相对封闭的环境里，意见相近的声音以夸张或其他扭曲的形式不断重复，令环境中的大多数人认为这些扭曲的故事就是事实的全部。\n\n\n要钱很难。大部分对待一个项目，可能会说我喜欢你的点子，但是立马追问一句，你愿意投资几千美元吗？对方前后态度的转变之迅速一定能让你头脑更加清醒。\n\n\n作者曾参加NOLS，一个培训学生在荒野户外生存的项目，大概查了下，主要针对青少年，短的半个月，长的90天，在alaska， patagonia这些地方。看着真馋，不知道国内有没有类似的活动。兰道夫曾经被没收钱包手表不带一毛钱，扔在一个任意的十字路口，自生自灭生活三天，自己找吃的，自己找地方住，需要蹭吃蹭喝，乞讨要钱。美国玩这套还真挺虎的。\n\n\n要有心理预期，如果全力投入的新项目失败了，回来后自己的角色已被人取代，只能走人。\n\n\n每个星期二，无论如何都会在下午5点准时离开办公室，与妻子过二人世界，吃饭，品酒，看电影。每周留一个晚上给我的妻子，能让我们都不再焦虑烦忧，也能让我们彼此的步调一致。关于这点，在互联网行业，我十分敬佩，羡慕非常。\n","source":"_posts/我读《复盘网飞》.md","raw":"---\ntitle: 我读《复盘网飞》\nabbrlink: fcbbfd3c\ndate: 2021-05-13 22:07:33\ncategories:\n  - life\n  - reading\ntags:\n  - books\n---\n\n作者文笔很好，翻译水平也在线。细节满满，读起来感觉特别有意思，收获也不少。印象比较深刻的几点，也有一些自己的思考，揉在一起记录下来，不一定是按章节的顺序：\n\n里德哈斯廷斯给人感觉是一个理性的人，有时候理性到近乎绝情，直来直去，不拘礼节。相较于里德，伦道夫则多些人情味。两人虽然都态度强硬，绝不妥协，但是合作却十分融洽，重点在于“争论是为了更好地合作，而不是为了自己的面子。谁是对的并不重要，重要的是我们做对了”。里德是更好的领导者，但是我更愿意和兰多夫合作。\n\n\n每个用户提供独一无二的产品实在太难，做一打产品需要付出的努力就是做一个产品所付出努力的12倍。所以邮寄狗粮，定制棒球棒，冲浪板都被pass了。最终的目的是可以规模化生产的东西，卖出一打和卖出一个所付出的努力是完全想等的，需要找到一种不仅仅是一次性销售的产品，这样一旦获取了一个客户，就可以一次又一次地把产品卖给他。\n\n\n用我自己的理解，就是寻找一件可以快速复制的模式，一种控制投入，但产出可以容易 scalable 的产品。当然我觉得上面这点也有时代背景。现在开始走精细化运营，定制化的市场也不算小众。前段时间刷广告还看到定制维生素的产品。（我还发现一些比较小众的服装品牌，可能会推广上衣，或者局限在T恤，但是很少会提供多种下装，或者完全就不提供裤装产线。可能也是因为如上原因，我不了解这个领域，random guess）\n\n\n加拿大原则。美国加拿大毗邻，生活习惯类似。有没有必要在早期增加成本，人力投入，来打入加拿大市场。答案是没必要， 因为需要针对法语区进行翻译，当地邮政系统差别，结算货币不同等麻烦事，容易使得核心业务精力分散。\n\n\n计划是美好的，但是要尽快落地。“关键是要让你的想法尽快和现实亲密接触”。这点我深有感触，这一年来一直强迫自己多写作锻炼思维能力。一开始总会过于在意许多方面，以至于有时会陷入对细节的纠结中，下笔进展缓慢。后来慢慢改善，列好提纲，然后分段扩展。完成初版之后再修改。以期获得螺旋式的进展和进步。\n\n\n头衔通胀。公司给员工派发各种唬人的高级头衔，从而在不增加成本的情况下提供晋升机会，以留住员工。\n\n\n回音室效应，指在一个相对封闭的环境里，意见相近的声音以夸张或其他扭曲的形式不断重复，令环境中的大多数人认为这些扭曲的故事就是事实的全部。\n\n\n要钱很难。大部分对待一个项目，可能会说我喜欢你的点子，但是立马追问一句，你愿意投资几千美元吗？对方前后态度的转变之迅速一定能让你头脑更加清醒。\n\n\n作者曾参加NOLS，一个培训学生在荒野户外生存的项目，大概查了下，主要针对青少年，短的半个月，长的90天，在alaska， patagonia这些地方。看着真馋，不知道国内有没有类似的活动。兰道夫曾经被没收钱包手表不带一毛钱，扔在一个任意的十字路口，自生自灭生活三天，自己找吃的，自己找地方住，需要蹭吃蹭喝，乞讨要钱。美国玩这套还真挺虎的。\n\n\n要有心理预期，如果全力投入的新项目失败了，回来后自己的角色已被人取代，只能走人。\n\n\n每个星期二，无论如何都会在下午5点准时离开办公室，与妻子过二人世界，吃饭，品酒，看电影。每周留一个晚上给我的妻子，能让我们都不再焦虑烦忧，也能让我们彼此的步调一致。关于这点，在互联网行业，我十分敬佩，羡慕非常。\n","slug":"我读《复盘网飞》","published":1,"updated":"2021-06-17T03:35:30.407Z","_id":"ckonsxvmf000137s6bg40g6n8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>作者文笔很好，翻译水平也在线。细节满满，读起来感觉特别有意思，收获也不少。印象比较深刻的几点，也有一些自己的思考，揉在一起记录下来，不一定是按章节的顺序：</p>\n<p>里德哈斯廷斯给人感觉是一个理性的人，有时候理性到近乎绝情，直来直去，不拘礼节。相较于里德，伦道夫则多些人情味。两人虽然都态度强硬，绝不妥协，但是合作却十分融洽，重点在于“争论是为了更好地合作，而不是为了自己的面子。谁是对的并不重要，重要的是我们做对了”。里德是更好的领导者，但是我更愿意和兰多夫合作。</p>\n<p>每个用户提供独一无二的产品实在太难，做一打产品需要付出的努力就是做一个产品所付出努力的12倍。所以邮寄狗粮，定制棒球棒，冲浪板都被pass了。最终的目的是可以规模化生产的东西，卖出一打和卖出一个所付出的努力是完全想等的，需要找到一种不仅仅是一次性销售的产品，这样一旦获取了一个客户，就可以一次又一次地把产品卖给他。</p>\n<p>用我自己的理解，就是寻找一件可以快速复制的模式，一种控制投入，但产出可以容易 scalable 的产品。当然我觉得上面这点也有时代背景。现在开始走精细化运营，定制化的市场也不算小众。前段时间刷广告还看到定制维生素的产品。（我还发现一些比较小众的服装品牌，可能会推广上衣，或者局限在T恤，但是很少会提供多种下装，或者完全就不提供裤装产线。可能也是因为如上原因，我不了解这个领域，random guess）</p>\n<p>加拿大原则。美国加拿大毗邻，生活习惯类似。有没有必要在早期增加成本，人力投入，来打入加拿大市场。答案是没必要， 因为需要针对法语区进行翻译，当地邮政系统差别，结算货币不同等麻烦事，容易使得核心业务精力分散。</p>\n<p>计划是美好的，但是要尽快落地。“关键是要让你的想法尽快和现实亲密接触”。这点我深有感触，这一年来一直强迫自己多写作锻炼思维能力。一开始总会过于在意许多方面，以至于有时会陷入对细节的纠结中，下笔进展缓慢。后来慢慢改善，列好提纲，然后分段扩展。完成初版之后再修改。以期获得螺旋式的进展和进步。</p>\n<p>头衔通胀。公司给员工派发各种唬人的高级头衔，从而在不增加成本的情况下提供晋升机会，以留住员工。</p>\n<p>回音室效应，指在一个相对封闭的环境里，意见相近的声音以夸张或其他扭曲的形式不断重复，令环境中的大多数人认为这些扭曲的故事就是事实的全部。</p>\n<p>要钱很难。大部分对待一个项目，可能会说我喜欢你的点子，但是立马追问一句，你愿意投资几千美元吗？对方前后态度的转变之迅速一定能让你头脑更加清醒。</p>\n<p>作者曾参加NOLS，一个培训学生在荒野户外生存的项目，大概查了下，主要针对青少年，短的半个月，长的90天，在alaska， patagonia这些地方。看着真馋，不知道国内有没有类似的活动。兰道夫曾经被没收钱包手表不带一毛钱，扔在一个任意的十字路口，自生自灭生活三天，自己找吃的，自己找地方住，需要蹭吃蹭喝，乞讨要钱。美国玩这套还真挺虎的。</p>\n<p>要有心理预期，如果全力投入的新项目失败了，回来后自己的角色已被人取代，只能走人。</p>\n<p>每个星期二，无论如何都会在下午5点准时离开办公室，与妻子过二人世界，吃饭，品酒，看电影。每周留一个晚上给我的妻子，能让我们都不再焦虑烦忧，也能让我们彼此的步调一致。关于这点，在互联网行业，我十分敬佩，羡慕非常。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>作者文笔很好，翻译水平也在线。细节满满，读起来感觉特别有意思，收获也不少。印象比较深刻的几点，也有一些自己的思考，揉在一起记录下来，不一定是按章节的顺序：</p>\n<p>里德哈斯廷斯给人感觉是一个理性的人，有时候理性到近乎绝情，直来直去，不拘礼节。相较于里德，伦道夫则多些人情味。两人虽然都态度强硬，绝不妥协，但是合作却十分融洽，重点在于“争论是为了更好地合作，而不是为了自己的面子。谁是对的并不重要，重要的是我们做对了”。里德是更好的领导者，但是我更愿意和兰多夫合作。</p>\n<p>每个用户提供独一无二的产品实在太难，做一打产品需要付出的努力就是做一个产品所付出努力的12倍。所以邮寄狗粮，定制棒球棒，冲浪板都被pass了。最终的目的是可以规模化生产的东西，卖出一打和卖出一个所付出的努力是完全想等的，需要找到一种不仅仅是一次性销售的产品，这样一旦获取了一个客户，就可以一次又一次地把产品卖给他。</p>\n<p>用我自己的理解，就是寻找一件可以快速复制的模式，一种控制投入，但产出可以容易 scalable 的产品。当然我觉得上面这点也有时代背景。现在开始走精细化运营，定制化的市场也不算小众。前段时间刷广告还看到定制维生素的产品。（我还发现一些比较小众的服装品牌，可能会推广上衣，或者局限在T恤，但是很少会提供多种下装，或者完全就不提供裤装产线。可能也是因为如上原因，我不了解这个领域，random guess）</p>\n<p>加拿大原则。美国加拿大毗邻，生活习惯类似。有没有必要在早期增加成本，人力投入，来打入加拿大市场。答案是没必要， 因为需要针对法语区进行翻译，当地邮政系统差别，结算货币不同等麻烦事，容易使得核心业务精力分散。</p>\n<p>计划是美好的，但是要尽快落地。“关键是要让你的想法尽快和现实亲密接触”。这点我深有感触，这一年来一直强迫自己多写作锻炼思维能力。一开始总会过于在意许多方面，以至于有时会陷入对细节的纠结中，下笔进展缓慢。后来慢慢改善，列好提纲，然后分段扩展。完成初版之后再修改。以期获得螺旋式的进展和进步。</p>\n<p>头衔通胀。公司给员工派发各种唬人的高级头衔，从而在不增加成本的情况下提供晋升机会，以留住员工。</p>\n<p>回音室效应，指在一个相对封闭的环境里，意见相近的声音以夸张或其他扭曲的形式不断重复，令环境中的大多数人认为这些扭曲的故事就是事实的全部。</p>\n<p>要钱很难。大部分对待一个项目，可能会说我喜欢你的点子，但是立马追问一句，你愿意投资几千美元吗？对方前后态度的转变之迅速一定能让你头脑更加清醒。</p>\n<p>作者曾参加NOLS，一个培训学生在荒野户外生存的项目，大概查了下，主要针对青少年，短的半个月，长的90天，在alaska， patagonia这些地方。看着真馋，不知道国内有没有类似的活动。兰道夫曾经被没收钱包手表不带一毛钱，扔在一个任意的十字路口，自生自灭生活三天，自己找吃的，自己找地方住，需要蹭吃蹭喝，乞讨要钱。美国玩这套还真挺虎的。</p>\n<p>要有心理预期，如果全力投入的新项目失败了，回来后自己的角色已被人取代，只能走人。</p>\n<p>每个星期二，无论如何都会在下午5点准时离开办公室，与妻子过二人世界，吃饭，品酒，看电影。每周留一个晚上给我的妻子，能让我们都不再焦虑烦忧，也能让我们彼此的步调一致。关于这点，在互联网行业，我十分敬佩，羡慕非常。</p>\n"},{"title":"我读《负动产时代》","abbrlink":"7171b58c","date":"2021-05-31T18:33:52.000Z","_content":"\n题材很好，但是文章有些啰嗦，车轱辘话来回说。不知是不是因为原本是在报刊连载的原因。好在主题结构比较明确清晰，读起来还算顺畅。\n\n第一章提到一个概念，所有人不明土地。2016年，全日本找不到所有人的土地面积约410万公顷，比九州岛还要大，到2040年，预计达到720万公顷，接近北海道的面积。为什么会有这么多土地找不到所有人，主要提到两点，一个是日本的遗产登记不是强制的，如果几代人没有办理过户登记手续，从子女到孙辈，曾孙辈，继承人就会越来越多，所有继承人都是土地的共有人，到最后无法确定到底是谁的土地了，甚至出现一块土地，有100多位继承人。第二点，日本的土地制度没有考虑到会有人“抛弃”土地和房产的情况，即使人们放弃继承土地和房产，国家或地方政府也无法直接接收。\n\n为什么有人不要土地，因为每年需要交纳物业费，维修基金和固定资产税，是一份看不到尽头的负担。 \n\n第二章主要谈度假公寓。在新潟县汤泽町，由于滑雪热成为过去时，需求减少，但是度假公寓还需要不断缴纳固定资产税和物业费，使之成为“负资产”。在这个背景下，出现了“一万日元”房产。只需一万块，就可以买下一套房子，平均每平100,200日元。原因是因为购买者需还清上一任房主的欠费。\n\n这里有个小故事印象深刻。临近泡沫经济结束的1991年初，一位老人以1300万日元在静冈县伊豆半岛买下一块300平的别墅用地，从这里可以看到富士山。他当时是住在首都圈的工薪族，身边有一些人到了假期就去别墅小住，在那个年代，这是“身份”的象征。他想在退休之前盖上一栋房子，老了以后悠闲地安度晚年。于是便和妻子开着车一边兜风一边寻找目标，最后高价买下这里，就连合同都是特意到东京帝国饭店的咖啡厅签的。\n\n由于两个女儿都无意继承，2017年，老人卖掉了一直没盖起别墅的这片地，售价10万日元，是当初买入价的1/130。扣除手续费广告费，这比交易最后的结果是-11万日元。\n\n汤泽町也称越后汤泽，是《雪国》所描写故事的发生地。新潟有好几个雪场，希望疫情结束之后有机会去滑雪。\n\n第三章讲长租陷阱。由于遗产税增税，人们为了少交遗产税，就去办理贷款投资长租公寓。因为土地所有人未还清的贷款可以从待继承财产中扣除。但是这么干的人越来越多，长租公寓也越来越多。在首都圈一都三县，长租公寓的空房率已达到35%以上。\n\n原本说好的保证30年之内的房租，才过十年，多方就要求降低租金。导致租金收入无法支付修缮费和还款额。\n\n关于不动产公司找寻目标客户，这一段也挺有意思。据说他们的主要目标，是在土地所有人中寻找“人际交往比较少，自尊心强，不愿意请教别人的人”。公务员、学校老师和一些农户都属于这种类型。他们虽然自己不具备土地和管理的相关知识，却由于自尊心很强，而不愿意找人商量，完全自己独断专行。这些人都是不动产公司的“好主顾”。\n\n这一章还有一个插曲，报道了地产销售人员的加班问题。不仅加班，上报的加班时间还要少于实际时间。如果提交的加班时间超了，上司就要打回重写，还要交检讨书。公司老这么干，后来被工会给告了，于是公司公开了配给每名员工工作用车的行驶日志。这份记录能反映出比较接近实际状态的加班时间。但也会存在“为了不留下工作的证据，外出销售时不用公司的配车，或者工作时关掉电脑的电源”的情况。\n\n后面就有点啰嗦重复了。第四章主要讲固定资产税和遗产税过高。第五章记录了法国美国德国等国家如何解决负动产的问题。第六章讲放弃土地的可行性及对政策改革的呼吁。\n\n整个看下来，也有不少收获。虽然在少子化，老年化，税收制度，发展程度等方面中国和日本有很大的区别，但是以小见大，也能提供一些思考和方向。\n","source":"_posts/我读《负动产时代》.md","raw":"---\ntitle: 我读《负动产时代》\nabbrlink: 7171b58c\ndate: 2021-05-31 11:33:52\ncategories:\n  - life\n  - reading\ntags:\n  - books\n---\n\n题材很好，但是文章有些啰嗦，车轱辘话来回说。不知是不是因为原本是在报刊连载的原因。好在主题结构比较明确清晰，读起来还算顺畅。\n\n第一章提到一个概念，所有人不明土地。2016年，全日本找不到所有人的土地面积约410万公顷，比九州岛还要大，到2040年，预计达到720万公顷，接近北海道的面积。为什么会有这么多土地找不到所有人，主要提到两点，一个是日本的遗产登记不是强制的，如果几代人没有办理过户登记手续，从子女到孙辈，曾孙辈，继承人就会越来越多，所有继承人都是土地的共有人，到最后无法确定到底是谁的土地了，甚至出现一块土地，有100多位继承人。第二点，日本的土地制度没有考虑到会有人“抛弃”土地和房产的情况，即使人们放弃继承土地和房产，国家或地方政府也无法直接接收。\n\n为什么有人不要土地，因为每年需要交纳物业费，维修基金和固定资产税，是一份看不到尽头的负担。 \n\n第二章主要谈度假公寓。在新潟县汤泽町，由于滑雪热成为过去时，需求减少，但是度假公寓还需要不断缴纳固定资产税和物业费，使之成为“负资产”。在这个背景下，出现了“一万日元”房产。只需一万块，就可以买下一套房子，平均每平100,200日元。原因是因为购买者需还清上一任房主的欠费。\n\n这里有个小故事印象深刻。临近泡沫经济结束的1991年初，一位老人以1300万日元在静冈县伊豆半岛买下一块300平的别墅用地，从这里可以看到富士山。他当时是住在首都圈的工薪族，身边有一些人到了假期就去别墅小住，在那个年代，这是“身份”的象征。他想在退休之前盖上一栋房子，老了以后悠闲地安度晚年。于是便和妻子开着车一边兜风一边寻找目标，最后高价买下这里，就连合同都是特意到东京帝国饭店的咖啡厅签的。\n\n由于两个女儿都无意继承，2017年，老人卖掉了一直没盖起别墅的这片地，售价10万日元，是当初买入价的1/130。扣除手续费广告费，这比交易最后的结果是-11万日元。\n\n汤泽町也称越后汤泽，是《雪国》所描写故事的发生地。新潟有好几个雪场，希望疫情结束之后有机会去滑雪。\n\n第三章讲长租陷阱。由于遗产税增税，人们为了少交遗产税，就去办理贷款投资长租公寓。因为土地所有人未还清的贷款可以从待继承财产中扣除。但是这么干的人越来越多，长租公寓也越来越多。在首都圈一都三县，长租公寓的空房率已达到35%以上。\n\n原本说好的保证30年之内的房租，才过十年，多方就要求降低租金。导致租金收入无法支付修缮费和还款额。\n\n关于不动产公司找寻目标客户，这一段也挺有意思。据说他们的主要目标，是在土地所有人中寻找“人际交往比较少，自尊心强，不愿意请教别人的人”。公务员、学校老师和一些农户都属于这种类型。他们虽然自己不具备土地和管理的相关知识，却由于自尊心很强，而不愿意找人商量，完全自己独断专行。这些人都是不动产公司的“好主顾”。\n\n这一章还有一个插曲，报道了地产销售人员的加班问题。不仅加班，上报的加班时间还要少于实际时间。如果提交的加班时间超了，上司就要打回重写，还要交检讨书。公司老这么干，后来被工会给告了，于是公司公开了配给每名员工工作用车的行驶日志。这份记录能反映出比较接近实际状态的加班时间。但也会存在“为了不留下工作的证据，外出销售时不用公司的配车，或者工作时关掉电脑的电源”的情况。\n\n后面就有点啰嗦重复了。第四章主要讲固定资产税和遗产税过高。第五章记录了法国美国德国等国家如何解决负动产的问题。第六章讲放弃土地的可行性及对政策改革的呼吁。\n\n整个看下来，也有不少收获。虽然在少子化，老年化，税收制度，发展程度等方面中国和日本有很大的区别，但是以小见大，也能提供一些思考和方向。\n","slug":"我读《负动产时代》","published":1,"updated":"2021-06-17T03:36:43.648Z","_id":"ckq0cnvuc0000b4fy1ni8gjtw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>题材很好，但是文章有些啰嗦，车轱辘话来回说。不知是不是因为原本是在报刊连载的原因。好在主题结构比较明确清晰，读起来还算顺畅。</p>\n<p>第一章提到一个概念，所有人不明土地。2016年，全日本找不到所有人的土地面积约410万公顷，比九州岛还要大，到2040年，预计达到720万公顷，接近北海道的面积。为什么会有这么多土地找不到所有人，主要提到两点，一个是日本的遗产登记不是强制的，如果几代人没有办理过户登记手续，从子女到孙辈，曾孙辈，继承人就会越来越多，所有继承人都是土地的共有人，到最后无法确定到底是谁的土地了，甚至出现一块土地，有100多位继承人。第二点，日本的土地制度没有考虑到会有人“抛弃”土地和房产的情况，即使人们放弃继承土地和房产，国家或地方政府也无法直接接收。</p>\n<p>为什么有人不要土地，因为每年需要交纳物业费，维修基金和固定资产税，是一份看不到尽头的负担。 </p>\n<p>第二章主要谈度假公寓。在新潟县汤泽町，由于滑雪热成为过去时，需求减少，但是度假公寓还需要不断缴纳固定资产税和物业费，使之成为“负资产”。在这个背景下，出现了“一万日元”房产。只需一万块，就可以买下一套房子，平均每平100,200日元。原因是因为购买者需还清上一任房主的欠费。</p>\n<p>这里有个小故事印象深刻。临近泡沫经济结束的1991年初，一位老人以1300万日元在静冈县伊豆半岛买下一块300平的别墅用地，从这里可以看到富士山。他当时是住在首都圈的工薪族，身边有一些人到了假期就去别墅小住，在那个年代，这是“身份”的象征。他想在退休之前盖上一栋房子，老了以后悠闲地安度晚年。于是便和妻子开着车一边兜风一边寻找目标，最后高价买下这里，就连合同都是特意到东京帝国饭店的咖啡厅签的。</p>\n<p>由于两个女儿都无意继承，2017年，老人卖掉了一直没盖起别墅的这片地，售价10万日元，是当初买入价的1/130。扣除手续费广告费，这比交易最后的结果是-11万日元。</p>\n<p>汤泽町也称越后汤泽，是《雪国》所描写故事的发生地。新潟有好几个雪场，希望疫情结束之后有机会去滑雪。</p>\n<p>第三章讲长租陷阱。由于遗产税增税，人们为了少交遗产税，就去办理贷款投资长租公寓。因为土地所有人未还清的贷款可以从待继承财产中扣除。但是这么干的人越来越多，长租公寓也越来越多。在首都圈一都三县，长租公寓的空房率已达到35%以上。</p>\n<p>原本说好的保证30年之内的房租，才过十年，多方就要求降低租金。导致租金收入无法支付修缮费和还款额。</p>\n<p>关于不动产公司找寻目标客户，这一段也挺有意思。据说他们的主要目标，是在土地所有人中寻找“人际交往比较少，自尊心强，不愿意请教别人的人”。公务员、学校老师和一些农户都属于这种类型。他们虽然自己不具备土地和管理的相关知识，却由于自尊心很强，而不愿意找人商量，完全自己独断专行。这些人都是不动产公司的“好主顾”。</p>\n<p>这一章还有一个插曲，报道了地产销售人员的加班问题。不仅加班，上报的加班时间还要少于实际时间。如果提交的加班时间超了，上司就要打回重写，还要交检讨书。公司老这么干，后来被工会给告了，于是公司公开了配给每名员工工作用车的行驶日志。这份记录能反映出比较接近实际状态的加班时间。但也会存在“为了不留下工作的证据，外出销售时不用公司的配车，或者工作时关掉电脑的电源”的情况。</p>\n<p>后面就有点啰嗦重复了。第四章主要讲固定资产税和遗产税过高。第五章记录了法国美国德国等国家如何解决负动产的问题。第六章讲放弃土地的可行性及对政策改革的呼吁。</p>\n<p>整个看下来，也有不少收获。虽然在少子化，老年化，税收制度，发展程度等方面中国和日本有很大的区别，但是以小见大，也能提供一些思考和方向。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>题材很好，但是文章有些啰嗦，车轱辘话来回说。不知是不是因为原本是在报刊连载的原因。好在主题结构比较明确清晰，读起来还算顺畅。</p>\n<p>第一章提到一个概念，所有人不明土地。2016年，全日本找不到所有人的土地面积约410万公顷，比九州岛还要大，到2040年，预计达到720万公顷，接近北海道的面积。为什么会有这么多土地找不到所有人，主要提到两点，一个是日本的遗产登记不是强制的，如果几代人没有办理过户登记手续，从子女到孙辈，曾孙辈，继承人就会越来越多，所有继承人都是土地的共有人，到最后无法确定到底是谁的土地了，甚至出现一块土地，有100多位继承人。第二点，日本的土地制度没有考虑到会有人“抛弃”土地和房产的情况，即使人们放弃继承土地和房产，国家或地方政府也无法直接接收。</p>\n<p>为什么有人不要土地，因为每年需要交纳物业费，维修基金和固定资产税，是一份看不到尽头的负担。 </p>\n<p>第二章主要谈度假公寓。在新潟县汤泽町，由于滑雪热成为过去时，需求减少，但是度假公寓还需要不断缴纳固定资产税和物业费，使之成为“负资产”。在这个背景下，出现了“一万日元”房产。只需一万块，就可以买下一套房子，平均每平100,200日元。原因是因为购买者需还清上一任房主的欠费。</p>\n<p>这里有个小故事印象深刻。临近泡沫经济结束的1991年初，一位老人以1300万日元在静冈县伊豆半岛买下一块300平的别墅用地，从这里可以看到富士山。他当时是住在首都圈的工薪族，身边有一些人到了假期就去别墅小住，在那个年代，这是“身份”的象征。他想在退休之前盖上一栋房子，老了以后悠闲地安度晚年。于是便和妻子开着车一边兜风一边寻找目标，最后高价买下这里，就连合同都是特意到东京帝国饭店的咖啡厅签的。</p>\n<p>由于两个女儿都无意继承，2017年，老人卖掉了一直没盖起别墅的这片地，售价10万日元，是当初买入价的1/130。扣除手续费广告费，这比交易最后的结果是-11万日元。</p>\n<p>汤泽町也称越后汤泽，是《雪国》所描写故事的发生地。新潟有好几个雪场，希望疫情结束之后有机会去滑雪。</p>\n<p>第三章讲长租陷阱。由于遗产税增税，人们为了少交遗产税，就去办理贷款投资长租公寓。因为土地所有人未还清的贷款可以从待继承财产中扣除。但是这么干的人越来越多，长租公寓也越来越多。在首都圈一都三县，长租公寓的空房率已达到35%以上。</p>\n<p>原本说好的保证30年之内的房租，才过十年，多方就要求降低租金。导致租金收入无法支付修缮费和还款额。</p>\n<p>关于不动产公司找寻目标客户，这一段也挺有意思。据说他们的主要目标，是在土地所有人中寻找“人际交往比较少，自尊心强，不愿意请教别人的人”。公务员、学校老师和一些农户都属于这种类型。他们虽然自己不具备土地和管理的相关知识，却由于自尊心很强，而不愿意找人商量，完全自己独断专行。这些人都是不动产公司的“好主顾”。</p>\n<p>这一章还有一个插曲，报道了地产销售人员的加班问题。不仅加班，上报的加班时间还要少于实际时间。如果提交的加班时间超了，上司就要打回重写，还要交检讨书。公司老这么干，后来被工会给告了，于是公司公开了配给每名员工工作用车的行驶日志。这份记录能反映出比较接近实际状态的加班时间。但也会存在“为了不留下工作的证据，外出销售时不用公司的配车，或者工作时关掉电脑的电源”的情况。</p>\n<p>后面就有点啰嗦重复了。第四章主要讲固定资产税和遗产税过高。第五章记录了法国美国德国等国家如何解决负动产的问题。第六章讲放弃土地的可行性及对政策改革的呼吁。</p>\n<p>整个看下来，也有不少收获。虽然在少子化，老年化，税收制度，发展程度等方面中国和日本有很大的区别，但是以小见大，也能提供一些思考和方向。</p>\n"},{"title":"我读《一生的旅程》","abbrlink":"e7498c6f","date":"2021-06-20T22:01:19.000Z","_content":"\n端午节回武汉，随手抄了本书准备打发高铁上的时光，没有想到内容十分精彩，来回的路上读的七七八八，收假回来熬夜看完。结合自己的观察，写点感想。\n\n我曾经非常讨厌读个人传记，主要是觉得这种书都是为尊者讳，说的做的肯定都被美化一番。而且想也不用想，我都能猜到文章的脉络，一定是作者曾经非常困苦迷惘，经历了一番不懈努力，最后走上人生巅峰。\n\n但是这本书并不是这般单调。当然，从结果来说，成功者的书籍会比失败者更多。从大众世俗的角度来看，可能对成功的关注势必会比失败的关注更多。但是这并不是我说这本书精彩的原因。\n\n说回到书的本身，这本书的设计不太讨巧，封面和腰封都透露着一股浓浓的机场成功学气息。“洞悉全球最佳 CEO 的神级领导力秘密”，神级！还有“比尔盖茨罕见 2000 字推荐”，估摸出版的时候盖茨还没离婚。\n\n吐槽归吐槽，余下部分记录一下我觉得有意思的内容。\n\n关于 Bob，原来是 Robert 的简称。\n\n关于父亲。由于家中有一间摆满书的书房，以及父亲热爱阅读的习惯，把作者培养成了一个爱书之人。同时还提到在晚餐时与孩子讨论世界大事。关于这点，我也在想，在社会生活碎片化趋势下，在这个环境中我能做些什么来影响子女，养成好的习惯。父母是最初的老师，孩子有样学样。有太多左手拿手机，右手牵孩子，在餐桌上默不作声，各玩电子产品的场景。我不相信一个长时间生活在手机里的家长可以提供给孩子们一个好的榜样。\n\n关于早起。发了朋友圈之后好几个人问我，作者几点睡觉。其实作者也给出了答案，“这样的作息时间虽然不适用于所有人，但无论你如何选择如何腾出时间，每天创造空间让你的思绪远离眼前的工作职责尽情徜徉……，这些都是至关重要的。”独处和思考，可能是在创意型的工作中必不可少的一个环节。几点起床不是问题，有的人是 morning person，有的人就是晚上脑子活跃，早晚不重要，重要的是有一段不被打扰的时光。但是我还是想尝试一下早起，不知道能不能成功。\n\n关于喜怒无常的老板。鲁尼是第一个教导作者拼死创新的老板，但同时“鲁尼是一个喜怒无常的上司，时间一长，这种反复无常会对团队的时期造成严重的削弱……，他懂得如何巧妙的挑拨人心，而我一直没弄明白这到底是有意而为还是他的性格使然。……他也会把我逼到下定决心辞职不干的绝境。我并不是唯一一个有过这种念头的人。”在工作中，有时我们无法选择老板和同事，在这种情况下，一味抱怨也起不到作用。作者的做法是将绝大部分的注意力放在努力工作上，而不是去关注鲁尼喜怒无常的情绪。\n\n关于如何提出问题。在与董事会的沟通中，作者提到不仅需要提出问题，作出预测，并且还需要给出解决方案。“一般来说，只抛出问题而不提供解决方案不是我的作风（我也是这样敦促我的团队——你可以带着问题找我，但也请提供可行的解决方案）。”现在我也是这条准则的践行者，在和产品经理或后端沟通的过程中，如果我觉得有问题，我也会提出自己的解法，这解法可能是正确的，可能是错误的。你需要大胆的说出自己的看法，经受别人的考验，而不是闷声思考，或者放弃思考。\n\n关于自尊心和韧性。在 Bob 竞选 CEO，通过董事会漫长的面试过程中谈到，“对于自尊心的打击虽然往往是真枪实弹，但也不要让这些打击过多地占据你大脑的空间或是耗损你太多的经历，……，当每个人都在夸赞你时，想要保持乐观是很容易的。但当你的自我认知如此公然地受到挑战的时候，保持乐观就困难了很多，也必要了很多”。 不要轻易怀疑自己（不是不反思自己），抵抗 pua 有奇效。\n\n关于压力透传。是否应该将压力层层施压到执行的人员身上，在这点上我赞成作者的观点。“没有什么规章手册能告诉你该如何应对这样的挑战，但你通常需要试着认识到，面对一个牵涉重大利益的项目，往项目工作人员的身上施压是收效甚微的。将你的焦虑投射到团队的身上，往往适得其反。表达你与团队分担压力，和大家共同奋战，以及表达你需要大家拿出好的结果以减轻你的压力，这二者之间的区别虽小，但却能造成完全不同的效果。” 在日常项目中，每个人或多或少都能清晰意识到自己在做的项目的重要性，作为领导在这个时候如果还是一味施压，可能会取得反作用。leader 在这个时候应该做的是确定大家有一个明确的终极目标，以及调派资源，协调解决方法。\n\n关于微观管理。细节决定成败，但凡是都有度。作为最高管理人员，过度的微观管理往往会给人留下锱铢必较和固执己见的影响。Bob提到他的前任 CEO迈克尔。“有一次，我看到他在一家酒店大堂里接受采访时对记者说：‘你看到那边的台灯了吗？都是我挑的’。这可不是一个首席执行官应有的风范。”前段时间雷军的屏保火了，能不管的事情一定不管，可能也是异曲同工吧。\n\n关于一言堂。“随着在这个职位上权利的累积，对于如何使用这种权利也就越发难以把控了……你的自信很容易就会越界成为自大，继而变成一种累赘。你或许会觉得没有什么提议是自己没有听过的，因此对其他人的看法变得缺少耐心或不屑一顾。” 对于这点，我倒觉得与职位和级别无关，在工作中经常会遇到。你在自己所做的领域小有成就，于是觉得其他人都不如自己深刻。解决方法除了告诉自己时刻保持包容，保持开放以外，作者也提到需要最紧密的高管在发现“我”表现出不屑或不耐烦，那就一定要告知。可见在自己身边，能有几个敢于说真话的人是十分必要的。\n\n以上是结合我的工作和生活，提供了一些反思和素材。除此之外，书中还记录了不少轶事，比如上海迪士尼的创建过程，迪士尼曾想收购 twitter但在最后一刻放弃，作者与乔布斯的相处，disney+的诞生和运营，凯文梅尔的事迹（去年在 tiktok 的事件里常看到报道），Bob梦见自己站在总统竞选辩论台上却感觉毫无准备，然后半夜从噩梦中惊醒（原来大老板们也会做类似的噩梦）等等，限于篇幅，就不一一记录了。\n\n最后说一点题外话，上周读完书我发了个朋友圈，几位朋友可能没有看过内容，以为我鸡汤中毒，我也打个哈哈一笑了之。不过事后也引起我的思考，如何去区分一本书到底是爽文，鸡汤还是励志。我想关键点可能在于行为。读完一本书，觉得不错，一拍大腿，然后束之高阁，这种对自己的认知和行为无法产生反馈，说的再天花乱坠，也没什么用。前脚看完，后脚就忘了。相反，如果看完了，从书中能够获得一套合理的行为准则，能反思到自己存在的不足，找到未来实践的指引，做到知行合一，我想这样就足够了。\n\n一些思考，欢迎指正。如果朋友感兴趣，推荐大家阅读。\n","source":"_posts/我读《一生的旅程》.md","raw":"---\ntitle: 我读《一生的旅程》\ncategories:\n  - life\n  - reading\ntags:\n  - books\n  - leadership\nabbrlink: e7498c6f\ndate: 2021-06-20 15:01:19\n---\n\n端午节回武汉，随手抄了本书准备打发高铁上的时光，没有想到内容十分精彩，来回的路上读的七七八八，收假回来熬夜看完。结合自己的观察，写点感想。\n\n我曾经非常讨厌读个人传记，主要是觉得这种书都是为尊者讳，说的做的肯定都被美化一番。而且想也不用想，我都能猜到文章的脉络，一定是作者曾经非常困苦迷惘，经历了一番不懈努力，最后走上人生巅峰。\n\n但是这本书并不是这般单调。当然，从结果来说，成功者的书籍会比失败者更多。从大众世俗的角度来看，可能对成功的关注势必会比失败的关注更多。但是这并不是我说这本书精彩的原因。\n\n说回到书的本身，这本书的设计不太讨巧，封面和腰封都透露着一股浓浓的机场成功学气息。“洞悉全球最佳 CEO 的神级领导力秘密”，神级！还有“比尔盖茨罕见 2000 字推荐”，估摸出版的时候盖茨还没离婚。\n\n吐槽归吐槽，余下部分记录一下我觉得有意思的内容。\n\n关于 Bob，原来是 Robert 的简称。\n\n关于父亲。由于家中有一间摆满书的书房，以及父亲热爱阅读的习惯，把作者培养成了一个爱书之人。同时还提到在晚餐时与孩子讨论世界大事。关于这点，我也在想，在社会生活碎片化趋势下，在这个环境中我能做些什么来影响子女，养成好的习惯。父母是最初的老师，孩子有样学样。有太多左手拿手机，右手牵孩子，在餐桌上默不作声，各玩电子产品的场景。我不相信一个长时间生活在手机里的家长可以提供给孩子们一个好的榜样。\n\n关于早起。发了朋友圈之后好几个人问我，作者几点睡觉。其实作者也给出了答案，“这样的作息时间虽然不适用于所有人，但无论你如何选择如何腾出时间，每天创造空间让你的思绪远离眼前的工作职责尽情徜徉……，这些都是至关重要的。”独处和思考，可能是在创意型的工作中必不可少的一个环节。几点起床不是问题，有的人是 morning person，有的人就是晚上脑子活跃，早晚不重要，重要的是有一段不被打扰的时光。但是我还是想尝试一下早起，不知道能不能成功。\n\n关于喜怒无常的老板。鲁尼是第一个教导作者拼死创新的老板，但同时“鲁尼是一个喜怒无常的上司，时间一长，这种反复无常会对团队的时期造成严重的削弱……，他懂得如何巧妙的挑拨人心，而我一直没弄明白这到底是有意而为还是他的性格使然。……他也会把我逼到下定决心辞职不干的绝境。我并不是唯一一个有过这种念头的人。”在工作中，有时我们无法选择老板和同事，在这种情况下，一味抱怨也起不到作用。作者的做法是将绝大部分的注意力放在努力工作上，而不是去关注鲁尼喜怒无常的情绪。\n\n关于如何提出问题。在与董事会的沟通中，作者提到不仅需要提出问题，作出预测，并且还需要给出解决方案。“一般来说，只抛出问题而不提供解决方案不是我的作风（我也是这样敦促我的团队——你可以带着问题找我，但也请提供可行的解决方案）。”现在我也是这条准则的践行者，在和产品经理或后端沟通的过程中，如果我觉得有问题，我也会提出自己的解法，这解法可能是正确的，可能是错误的。你需要大胆的说出自己的看法，经受别人的考验，而不是闷声思考，或者放弃思考。\n\n关于自尊心和韧性。在 Bob 竞选 CEO，通过董事会漫长的面试过程中谈到，“对于自尊心的打击虽然往往是真枪实弹，但也不要让这些打击过多地占据你大脑的空间或是耗损你太多的经历，……，当每个人都在夸赞你时，想要保持乐观是很容易的。但当你的自我认知如此公然地受到挑战的时候，保持乐观就困难了很多，也必要了很多”。 不要轻易怀疑自己（不是不反思自己），抵抗 pua 有奇效。\n\n关于压力透传。是否应该将压力层层施压到执行的人员身上，在这点上我赞成作者的观点。“没有什么规章手册能告诉你该如何应对这样的挑战，但你通常需要试着认识到，面对一个牵涉重大利益的项目，往项目工作人员的身上施压是收效甚微的。将你的焦虑投射到团队的身上，往往适得其反。表达你与团队分担压力，和大家共同奋战，以及表达你需要大家拿出好的结果以减轻你的压力，这二者之间的区别虽小，但却能造成完全不同的效果。” 在日常项目中，每个人或多或少都能清晰意识到自己在做的项目的重要性，作为领导在这个时候如果还是一味施压，可能会取得反作用。leader 在这个时候应该做的是确定大家有一个明确的终极目标，以及调派资源，协调解决方法。\n\n关于微观管理。细节决定成败，但凡是都有度。作为最高管理人员，过度的微观管理往往会给人留下锱铢必较和固执己见的影响。Bob提到他的前任 CEO迈克尔。“有一次，我看到他在一家酒店大堂里接受采访时对记者说：‘你看到那边的台灯了吗？都是我挑的’。这可不是一个首席执行官应有的风范。”前段时间雷军的屏保火了，能不管的事情一定不管，可能也是异曲同工吧。\n\n关于一言堂。“随着在这个职位上权利的累积，对于如何使用这种权利也就越发难以把控了……你的自信很容易就会越界成为自大，继而变成一种累赘。你或许会觉得没有什么提议是自己没有听过的，因此对其他人的看法变得缺少耐心或不屑一顾。” 对于这点，我倒觉得与职位和级别无关，在工作中经常会遇到。你在自己所做的领域小有成就，于是觉得其他人都不如自己深刻。解决方法除了告诉自己时刻保持包容，保持开放以外，作者也提到需要最紧密的高管在发现“我”表现出不屑或不耐烦，那就一定要告知。可见在自己身边，能有几个敢于说真话的人是十分必要的。\n\n以上是结合我的工作和生活，提供了一些反思和素材。除此之外，书中还记录了不少轶事，比如上海迪士尼的创建过程，迪士尼曾想收购 twitter但在最后一刻放弃，作者与乔布斯的相处，disney+的诞生和运营，凯文梅尔的事迹（去年在 tiktok 的事件里常看到报道），Bob梦见自己站在总统竞选辩论台上却感觉毫无准备，然后半夜从噩梦中惊醒（原来大老板们也会做类似的噩梦）等等，限于篇幅，就不一一记录了。\n\n最后说一点题外话，上周读完书我发了个朋友圈，几位朋友可能没有看过内容，以为我鸡汤中毒，我也打个哈哈一笑了之。不过事后也引起我的思考，如何去区分一本书到底是爽文，鸡汤还是励志。我想关键点可能在于行为。读完一本书，觉得不错，一拍大腿，然后束之高阁，这种对自己的认知和行为无法产生反馈，说的再天花乱坠，也没什么用。前脚看完，后脚就忘了。相反，如果看完了，从书中能够获得一套合理的行为准则，能反思到自己存在的不足，找到未来实践的指引，做到知行合一，我想这样就足够了。\n\n一些思考，欢迎指正。如果朋友感兴趣，推荐大家阅读。\n","slug":"我读《一生的旅程》","published":1,"updated":"2021-09-14T11:40:19.907Z","_id":"ckq4ue26u0000i0fy2mnrc4hs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>端午节回武汉，随手抄了本书准备打发高铁上的时光，没有想到内容十分精彩，来回的路上读的七七八八，收假回来熬夜看完。结合自己的观察，写点感想。</p>\n<p>我曾经非常讨厌读个人传记，主要是觉得这种书都是为尊者讳，说的做的肯定都被美化一番。而且想也不用想，我都能猜到文章的脉络，一定是作者曾经非常困苦迷惘，经历了一番不懈努力，最后走上人生巅峰。</p>\n<p>但是这本书并不是这般单调。当然，从结果来说，成功者的书籍会比失败者更多。从大众世俗的角度来看，可能对成功的关注势必会比失败的关注更多。但是这并不是我说这本书精彩的原因。</p>\n<p>说回到书的本身，这本书的设计不太讨巧，封面和腰封都透露着一股浓浓的机场成功学气息。“洞悉全球最佳 CEO 的神级领导力秘密”，神级！还有“比尔盖茨罕见 2000 字推荐”，估摸出版的时候盖茨还没离婚。</p>\n<p>吐槽归吐槽，余下部分记录一下我觉得有意思的内容。</p>\n<p>关于 Bob，原来是 Robert 的简称。</p>\n<p>关于父亲。由于家中有一间摆满书的书房，以及父亲热爱阅读的习惯，把作者培养成了一个爱书之人。同时还提到在晚餐时与孩子讨论世界大事。关于这点，我也在想，在社会生活碎片化趋势下，在这个环境中我能做些什么来影响子女，养成好的习惯。父母是最初的老师，孩子有样学样。有太多左手拿手机，右手牵孩子，在餐桌上默不作声，各玩电子产品的场景。我不相信一个长时间生活在手机里的家长可以提供给孩子们一个好的榜样。</p>\n<p>关于早起。发了朋友圈之后好几个人问我，作者几点睡觉。其实作者也给出了答案，“这样的作息时间虽然不适用于所有人，但无论你如何选择如何腾出时间，每天创造空间让你的思绪远离眼前的工作职责尽情徜徉……，这些都是至关重要的。”独处和思考，可能是在创意型的工作中必不可少的一个环节。几点起床不是问题，有的人是 morning person，有的人就是晚上脑子活跃，早晚不重要，重要的是有一段不被打扰的时光。但是我还是想尝试一下早起，不知道能不能成功。</p>\n<p>关于喜怒无常的老板。鲁尼是第一个教导作者拼死创新的老板，但同时“鲁尼是一个喜怒无常的上司，时间一长，这种反复无常会对团队的时期造成严重的削弱……，他懂得如何巧妙的挑拨人心，而我一直没弄明白这到底是有意而为还是他的性格使然。……他也会把我逼到下定决心辞职不干的绝境。我并不是唯一一个有过这种念头的人。”在工作中，有时我们无法选择老板和同事，在这种情况下，一味抱怨也起不到作用。作者的做法是将绝大部分的注意力放在努力工作上，而不是去关注鲁尼喜怒无常的情绪。</p>\n<p>关于如何提出问题。在与董事会的沟通中，作者提到不仅需要提出问题，作出预测，并且还需要给出解决方案。“一般来说，只抛出问题而不提供解决方案不是我的作风（我也是这样敦促我的团队——你可以带着问题找我，但也请提供可行的解决方案）。”现在我也是这条准则的践行者，在和产品经理或后端沟通的过程中，如果我觉得有问题，我也会提出自己的解法，这解法可能是正确的，可能是错误的。你需要大胆的说出自己的看法，经受别人的考验，而不是闷声思考，或者放弃思考。</p>\n<p>关于自尊心和韧性。在 Bob 竞选 CEO，通过董事会漫长的面试过程中谈到，“对于自尊心的打击虽然往往是真枪实弹，但也不要让这些打击过多地占据你大脑的空间或是耗损你太多的经历，……，当每个人都在夸赞你时，想要保持乐观是很容易的。但当你的自我认知如此公然地受到挑战的时候，保持乐观就困难了很多，也必要了很多”。 不要轻易怀疑自己（不是不反思自己），抵抗 pua 有奇效。</p>\n<p>关于压力透传。是否应该将压力层层施压到执行的人员身上，在这点上我赞成作者的观点。“没有什么规章手册能告诉你该如何应对这样的挑战，但你通常需要试着认识到，面对一个牵涉重大利益的项目，往项目工作人员的身上施压是收效甚微的。将你的焦虑投射到团队的身上，往往适得其反。表达你与团队分担压力，和大家共同奋战，以及表达你需要大家拿出好的结果以减轻你的压力，这二者之间的区别虽小，但却能造成完全不同的效果。” 在日常项目中，每个人或多或少都能清晰意识到自己在做的项目的重要性，作为领导在这个时候如果还是一味施压，可能会取得反作用。leader 在这个时候应该做的是确定大家有一个明确的终极目标，以及调派资源，协调解决方法。</p>\n<p>关于微观管理。细节决定成败，但凡是都有度。作为最高管理人员，过度的微观管理往往会给人留下锱铢必较和固执己见的影响。Bob提到他的前任 CEO迈克尔。“有一次，我看到他在一家酒店大堂里接受采访时对记者说：‘你看到那边的台灯了吗？都是我挑的’。这可不是一个首席执行官应有的风范。”前段时间雷军的屏保火了，能不管的事情一定不管，可能也是异曲同工吧。</p>\n<p>关于一言堂。“随着在这个职位上权利的累积，对于如何使用这种权利也就越发难以把控了……你的自信很容易就会越界成为自大，继而变成一种累赘。你或许会觉得没有什么提议是自己没有听过的，因此对其他人的看法变得缺少耐心或不屑一顾。” 对于这点，我倒觉得与职位和级别无关，在工作中经常会遇到。你在自己所做的领域小有成就，于是觉得其他人都不如自己深刻。解决方法除了告诉自己时刻保持包容，保持开放以外，作者也提到需要最紧密的高管在发现“我”表现出不屑或不耐烦，那就一定要告知。可见在自己身边，能有几个敢于说真话的人是十分必要的。</p>\n<p>以上是结合我的工作和生活，提供了一些反思和素材。除此之外，书中还记录了不少轶事，比如上海迪士尼的创建过程，迪士尼曾想收购 twitter但在最后一刻放弃，作者与乔布斯的相处，disney+的诞生和运营，凯文梅尔的事迹（去年在 tiktok 的事件里常看到报道），Bob梦见自己站在总统竞选辩论台上却感觉毫无准备，然后半夜从噩梦中惊醒（原来大老板们也会做类似的噩梦）等等，限于篇幅，就不一一记录了。</p>\n<p>最后说一点题外话，上周读完书我发了个朋友圈，几位朋友可能没有看过内容，以为我鸡汤中毒，我也打个哈哈一笑了之。不过事后也引起我的思考，如何去区分一本书到底是爽文，鸡汤还是励志。我想关键点可能在于行为。读完一本书，觉得不错，一拍大腿，然后束之高阁，这种对自己的认知和行为无法产生反馈，说的再天花乱坠，也没什么用。前脚看完，后脚就忘了。相反，如果看完了，从书中能够获得一套合理的行为准则，能反思到自己存在的不足，找到未来实践的指引，做到知行合一，我想这样就足够了。</p>\n<p>一些思考，欢迎指正。如果朋友感兴趣，推荐大家阅读。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>端午节回武汉，随手抄了本书准备打发高铁上的时光，没有想到内容十分精彩，来回的路上读的七七八八，收假回来熬夜看完。结合自己的观察，写点感想。</p>\n<p>我曾经非常讨厌读个人传记，主要是觉得这种书都是为尊者讳，说的做的肯定都被美化一番。而且想也不用想，我都能猜到文章的脉络，一定是作者曾经非常困苦迷惘，经历了一番不懈努力，最后走上人生巅峰。</p>\n<p>但是这本书并不是这般单调。当然，从结果来说，成功者的书籍会比失败者更多。从大众世俗的角度来看，可能对成功的关注势必会比失败的关注更多。但是这并不是我说这本书精彩的原因。</p>\n<p>说回到书的本身，这本书的设计不太讨巧，封面和腰封都透露着一股浓浓的机场成功学气息。“洞悉全球最佳 CEO 的神级领导力秘密”，神级！还有“比尔盖茨罕见 2000 字推荐”，估摸出版的时候盖茨还没离婚。</p>\n<p>吐槽归吐槽，余下部分记录一下我觉得有意思的内容。</p>\n<p>关于 Bob，原来是 Robert 的简称。</p>\n<p>关于父亲。由于家中有一间摆满书的书房，以及父亲热爱阅读的习惯，把作者培养成了一个爱书之人。同时还提到在晚餐时与孩子讨论世界大事。关于这点，我也在想，在社会生活碎片化趋势下，在这个环境中我能做些什么来影响子女，养成好的习惯。父母是最初的老师，孩子有样学样。有太多左手拿手机，右手牵孩子，在餐桌上默不作声，各玩电子产品的场景。我不相信一个长时间生活在手机里的家长可以提供给孩子们一个好的榜样。</p>\n<p>关于早起。发了朋友圈之后好几个人问我，作者几点睡觉。其实作者也给出了答案，“这样的作息时间虽然不适用于所有人，但无论你如何选择如何腾出时间，每天创造空间让你的思绪远离眼前的工作职责尽情徜徉……，这些都是至关重要的。”独处和思考，可能是在创意型的工作中必不可少的一个环节。几点起床不是问题，有的人是 morning person，有的人就是晚上脑子活跃，早晚不重要，重要的是有一段不被打扰的时光。但是我还是想尝试一下早起，不知道能不能成功。</p>\n<p>关于喜怒无常的老板。鲁尼是第一个教导作者拼死创新的老板，但同时“鲁尼是一个喜怒无常的上司，时间一长，这种反复无常会对团队的时期造成严重的削弱……，他懂得如何巧妙的挑拨人心，而我一直没弄明白这到底是有意而为还是他的性格使然。……他也会把我逼到下定决心辞职不干的绝境。我并不是唯一一个有过这种念头的人。”在工作中，有时我们无法选择老板和同事，在这种情况下，一味抱怨也起不到作用。作者的做法是将绝大部分的注意力放在努力工作上，而不是去关注鲁尼喜怒无常的情绪。</p>\n<p>关于如何提出问题。在与董事会的沟通中，作者提到不仅需要提出问题，作出预测，并且还需要给出解决方案。“一般来说，只抛出问题而不提供解决方案不是我的作风（我也是这样敦促我的团队——你可以带着问题找我，但也请提供可行的解决方案）。”现在我也是这条准则的践行者，在和产品经理或后端沟通的过程中，如果我觉得有问题，我也会提出自己的解法，这解法可能是正确的，可能是错误的。你需要大胆的说出自己的看法，经受别人的考验，而不是闷声思考，或者放弃思考。</p>\n<p>关于自尊心和韧性。在 Bob 竞选 CEO，通过董事会漫长的面试过程中谈到，“对于自尊心的打击虽然往往是真枪实弹，但也不要让这些打击过多地占据你大脑的空间或是耗损你太多的经历，……，当每个人都在夸赞你时，想要保持乐观是很容易的。但当你的自我认知如此公然地受到挑战的时候，保持乐观就困难了很多，也必要了很多”。 不要轻易怀疑自己（不是不反思自己），抵抗 pua 有奇效。</p>\n<p>关于压力透传。是否应该将压力层层施压到执行的人员身上，在这点上我赞成作者的观点。“没有什么规章手册能告诉你该如何应对这样的挑战，但你通常需要试着认识到，面对一个牵涉重大利益的项目，往项目工作人员的身上施压是收效甚微的。将你的焦虑投射到团队的身上，往往适得其反。表达你与团队分担压力，和大家共同奋战，以及表达你需要大家拿出好的结果以减轻你的压力，这二者之间的区别虽小，但却能造成完全不同的效果。” 在日常项目中，每个人或多或少都能清晰意识到自己在做的项目的重要性，作为领导在这个时候如果还是一味施压，可能会取得反作用。leader 在这个时候应该做的是确定大家有一个明确的终极目标，以及调派资源，协调解决方法。</p>\n<p>关于微观管理。细节决定成败，但凡是都有度。作为最高管理人员，过度的微观管理往往会给人留下锱铢必较和固执己见的影响。Bob提到他的前任 CEO迈克尔。“有一次，我看到他在一家酒店大堂里接受采访时对记者说：‘你看到那边的台灯了吗？都是我挑的’。这可不是一个首席执行官应有的风范。”前段时间雷军的屏保火了，能不管的事情一定不管，可能也是异曲同工吧。</p>\n<p>关于一言堂。“随着在这个职位上权利的累积，对于如何使用这种权利也就越发难以把控了……你的自信很容易就会越界成为自大，继而变成一种累赘。你或许会觉得没有什么提议是自己没有听过的，因此对其他人的看法变得缺少耐心或不屑一顾。” 对于这点，我倒觉得与职位和级别无关，在工作中经常会遇到。你在自己所做的领域小有成就，于是觉得其他人都不如自己深刻。解决方法除了告诉自己时刻保持包容，保持开放以外，作者也提到需要最紧密的高管在发现“我”表现出不屑或不耐烦，那就一定要告知。可见在自己身边，能有几个敢于说真话的人是十分必要的。</p>\n<p>以上是结合我的工作和生活，提供了一些反思和素材。除此之外，书中还记录了不少轶事，比如上海迪士尼的创建过程，迪士尼曾想收购 twitter但在最后一刻放弃，作者与乔布斯的相处，disney+的诞生和运营，凯文梅尔的事迹（去年在 tiktok 的事件里常看到报道），Bob梦见自己站在总统竞选辩论台上却感觉毫无准备，然后半夜从噩梦中惊醒（原来大老板们也会做类似的噩梦）等等，限于篇幅，就不一一记录了。</p>\n<p>最后说一点题外话，上周读完书我发了个朋友圈，几位朋友可能没有看过内容，以为我鸡汤中毒，我也打个哈哈一笑了之。不过事后也引起我的思考，如何去区分一本书到底是爽文，鸡汤还是励志。我想关键点可能在于行为。读完一本书，觉得不错，一拍大腿，然后束之高阁，这种对自己的认知和行为无法产生反馈，说的再天花乱坠，也没什么用。前脚看完，后脚就忘了。相反，如果看完了，从书中能够获得一套合理的行为准则，能反思到自己存在的不足，找到未来实践的指引，做到知行合一，我想这样就足够了。</p>\n<p>一些思考，欢迎指正。如果朋友感兴趣，推荐大家阅读。</p>\n"},{"title":"我读《上学记》","date":"2021-09-15T02:46:32.000Z","_content":"\n端午节回武汉，随手抄了本书准备打发高铁上的时光，没有想到内容十分精彩，来回的路上读的七七八八，收假回来熬夜看完。结合自己的观察，写点感想。\n\n我曾经非常讨厌读个人传记，主要是觉得这种书都是为尊者讳，说的做的肯定都被美化一番。而且想也不用想，我都能猜到文章的脉络，一定是作者曾经非常困苦迷惘，经历了一番不懈努力，最后走上人生巅峰。\n\n但是这本书并不是这般单调。当然，从结果来说，成功者的书籍会比失败者更多。从大众世俗的角度来看，可能对成功的关注势必会比失败的关注更多。但是这并不是我说这本书精彩的原因。\n\n说回到书的本身，这本书的设计不太讨巧，封面和腰封都透露着一股浓浓的机场成功学气息。“洞悉全球最佳 CEO 的神级领导力秘密”，神级！还有“比尔盖茨罕见 2000 字推荐”，估摸出版的时候盖茨还没离婚。\n\n吐槽归吐槽，余下部分记录一下我觉得有意思的内容。\n\n关于 Bob，原来是 Robert 的简称。\n\n关于父亲。由于家中有一间摆满书的书房，以及父亲热爱阅读的习惯，把作者培养成了一个爱书之人。同时还提到在晚餐时与孩子讨论世界大事。关于这点，我也在想，在社会生活碎片化趋势下，在这个环境中我能做些什么来影响子女，养成好的习惯。父母是最初的老师，孩子有样学样。有太多左手拿手机，右手牵孩子，在餐桌上默不作声，各玩电子产品的场景。我不相信一个长时间生活在手机里的家长可以提供给孩子们一个好的榜样。\n\n关于早起。发了朋友圈之后好几个人问我，作者几点睡觉。其实作者也给出了答案，“这样的作息时间虽然不适用于所有人，但无论你如何选择如何腾出时间，每天创造空间让你的思绪远离眼前的工作职责尽情徜徉……，这些都是至关重要的。”独处和思考，可能是在创意型的工作中必不可少的一个环节。几点起床不是问题，有的人是 morning person，有的人就是晚上脑子活跃，早晚不重要，重要的是有一段不被打扰的时光。但是我还是想尝试一下早起，不知道能不能成功。\n\n关于喜怒无常的老板。鲁尼是第一个教导作者拼死创新的老板，但同时“鲁尼是一个喜怒无常的上司，时间一长，这种反复无常会对团队的时期造成严重的削弱……，他懂得如何巧妙的挑拨人心，而我一直没弄明白这到底是有意而为还是他的性格使然。……他也会把我逼到下定决心辞职不干的绝境。我并不是唯一一个有过这种念头的人。”在工作中，有时我们无法选择老板和同事，在这种情况下，一味抱怨也起不到作用。作者的做法是将绝大部分的注意力放在努力工作上，而不是去关注鲁尼喜怒无常的情绪。\n\n关于如何提出问题。在与董事会的沟通中，作者提到不仅需要提出问题，作出预测，并且还需要给出解决方案。“一般来说，只抛出问题而不提供解决方案不是我的作风（我也是这样敦促我的团队——你可以带着问题找我，但也请提供可行的解决方案）。”现在我也是这条准则的践行者，在和产品经理或后端沟通的过程中，如果我觉得有问题，我也会提出自己的解法，这解法可能是正确的，可能是错误的。你需要大胆的说出自己的看法，经受别人的考验，而不是闷声思考，或者放弃思考。\n\n关于自尊心和韧性。在 Bob 竞选 CEO，通过董事会漫长的面试过程中谈到，“对于自尊心的打击虽然往往是真枪实弹，但也不要让这些打击过多地占据你大脑的空间或是耗损你太多的经历，……，当每个人都在夸赞你时，想要保持乐观是很容易的。但当你的自我认知如此公然地受到挑战的时候，保持乐观就困难了很多，也必要了很多”。 不要轻易怀疑自己（不是不反思自己），抵抗 pua 有奇效。\n\n关于压力透传。是否应该将压力层层施压到执行的人员身上，在这点上我赞成作者的观点。“没有什么规章手册能告诉你该如何应对这样的挑战，但你通常需要试着认识到，面对一个牵涉重大利益的项目，往项目工作人员的身上施压是收效甚微的。将你的焦虑投射到团队的身上，往往适得其反。表达你与团队分担压力，和大家共同奋战，以及表达你需要大家拿出好的结果以减轻你的压力，这二者之间的区别虽小，但却能造成完全不同的效果。” 在日常项目中，每个人或多或少都能清晰意识到自己在做的项目的重要性，作为领导在这个时候如果还是一味施压，可能会取得反作用。leader 在这个时候应该做的是确定大家有一个明确的终极目标，以及调派资源，协调解决方法。\n\n关于微观管理。细节决定成败，但凡是都有度。作为最高管理人员，过度的微观管理往往会给人留下锱铢必较和固执己见的影响。Bob提到他的前任 CEO迈克尔。“有一次，我看到他在一家酒店大堂里接受采访时对记者说：‘你看到那边的台灯了吗？都是我挑的’。这可不是一个首席执行官应有的风范。”前段时间雷军的屏保火了，能不管的事情一定不管，可能也是异曲同工吧。\n\n关于一言堂。“随着在这个职位上权利的累积，对于如何使用这种权利也就越发难以把控了……你的自信很容易就会越界成为自大，继而变成一种累赘。你或许会觉得没有什么提议是自己没有听过的，因此对其他人的看法变得缺少耐心或不屑一顾。” 对于这点，我倒觉得与职位和级别无关，在工作中经常会遇到。你在自己所做的领域小有成就，于是觉得其他人都不如自己深刻。解决方法除了告诉自己时刻保持包容，保持开放以外，作者也提到需要最紧密的高管在发现“我”表现出不屑或不耐烦，那就一定要告知。可见在自己身边，能有几个敢于说真话的人是十分必要的。\n\n以上是结合我的工作和生活，提供了一些反思和素材。除此之外，书中还记录了不少轶事，比如上海迪士尼的创建过程，迪士尼曾想收购 twitter但在最后一刻放弃，作者与乔布斯的相处，disney+的诞生和运营，凯文梅尔的事迹（去年在 tiktok 的事件里常看到报道），Bob梦见自己站在总统竞选辩论台上却感觉毫无准备，然后半夜从噩梦中惊醒（原来大老板们也会做类似的噩梦）等等，限于篇幅，就不一一记录了。\n\n最后说一点题外话，上周读完书我发了个朋友圈，几位朋友可能没有看过内容，以为我鸡汤中毒，我也打个哈哈一笑了之。不过事后也引起我的思考，如何去区分一本书到底是爽文，鸡汤还是励志。我想关键点可能在于行为。读完一本书，觉得不错，一拍大腿，然后束之高阁，这种对自己的认知和行为无法产生反馈，说的再天花乱坠，也没什么用。前脚看完，后脚就忘了。相反，如果看完了，从书中能够获得一套合理的行为准则，能反思到自己存在的不足，找到未来实践的指引，做到知行合一，我想这样就足够了。\n\n一些思考，欢迎指正。如果朋友感兴趣，推荐大家阅读。\n","source":"_posts/我读《上学记》.md","raw":"---\ntitle: 我读《上学记》\ndate: 2021-09-14 19:46:32\ncategories:\n  - life\n  - reading\ntags:\n  - books\n  - history\n---\n\n端午节回武汉，随手抄了本书准备打发高铁上的时光，没有想到内容十分精彩，来回的路上读的七七八八，收假回来熬夜看完。结合自己的观察，写点感想。\n\n我曾经非常讨厌读个人传记，主要是觉得这种书都是为尊者讳，说的做的肯定都被美化一番。而且想也不用想，我都能猜到文章的脉络，一定是作者曾经非常困苦迷惘，经历了一番不懈努力，最后走上人生巅峰。\n\n但是这本书并不是这般单调。当然，从结果来说，成功者的书籍会比失败者更多。从大众世俗的角度来看，可能对成功的关注势必会比失败的关注更多。但是这并不是我说这本书精彩的原因。\n\n说回到书的本身，这本书的设计不太讨巧，封面和腰封都透露着一股浓浓的机场成功学气息。“洞悉全球最佳 CEO 的神级领导力秘密”，神级！还有“比尔盖茨罕见 2000 字推荐”，估摸出版的时候盖茨还没离婚。\n\n吐槽归吐槽，余下部分记录一下我觉得有意思的内容。\n\n关于 Bob，原来是 Robert 的简称。\n\n关于父亲。由于家中有一间摆满书的书房，以及父亲热爱阅读的习惯，把作者培养成了一个爱书之人。同时还提到在晚餐时与孩子讨论世界大事。关于这点，我也在想，在社会生活碎片化趋势下，在这个环境中我能做些什么来影响子女，养成好的习惯。父母是最初的老师，孩子有样学样。有太多左手拿手机，右手牵孩子，在餐桌上默不作声，各玩电子产品的场景。我不相信一个长时间生活在手机里的家长可以提供给孩子们一个好的榜样。\n\n关于早起。发了朋友圈之后好几个人问我，作者几点睡觉。其实作者也给出了答案，“这样的作息时间虽然不适用于所有人，但无论你如何选择如何腾出时间，每天创造空间让你的思绪远离眼前的工作职责尽情徜徉……，这些都是至关重要的。”独处和思考，可能是在创意型的工作中必不可少的一个环节。几点起床不是问题，有的人是 morning person，有的人就是晚上脑子活跃，早晚不重要，重要的是有一段不被打扰的时光。但是我还是想尝试一下早起，不知道能不能成功。\n\n关于喜怒无常的老板。鲁尼是第一个教导作者拼死创新的老板，但同时“鲁尼是一个喜怒无常的上司，时间一长，这种反复无常会对团队的时期造成严重的削弱……，他懂得如何巧妙的挑拨人心，而我一直没弄明白这到底是有意而为还是他的性格使然。……他也会把我逼到下定决心辞职不干的绝境。我并不是唯一一个有过这种念头的人。”在工作中，有时我们无法选择老板和同事，在这种情况下，一味抱怨也起不到作用。作者的做法是将绝大部分的注意力放在努力工作上，而不是去关注鲁尼喜怒无常的情绪。\n\n关于如何提出问题。在与董事会的沟通中，作者提到不仅需要提出问题，作出预测，并且还需要给出解决方案。“一般来说，只抛出问题而不提供解决方案不是我的作风（我也是这样敦促我的团队——你可以带着问题找我，但也请提供可行的解决方案）。”现在我也是这条准则的践行者，在和产品经理或后端沟通的过程中，如果我觉得有问题，我也会提出自己的解法，这解法可能是正确的，可能是错误的。你需要大胆的说出自己的看法，经受别人的考验，而不是闷声思考，或者放弃思考。\n\n关于自尊心和韧性。在 Bob 竞选 CEO，通过董事会漫长的面试过程中谈到，“对于自尊心的打击虽然往往是真枪实弹，但也不要让这些打击过多地占据你大脑的空间或是耗损你太多的经历，……，当每个人都在夸赞你时，想要保持乐观是很容易的。但当你的自我认知如此公然地受到挑战的时候，保持乐观就困难了很多，也必要了很多”。 不要轻易怀疑自己（不是不反思自己），抵抗 pua 有奇效。\n\n关于压力透传。是否应该将压力层层施压到执行的人员身上，在这点上我赞成作者的观点。“没有什么规章手册能告诉你该如何应对这样的挑战，但你通常需要试着认识到，面对一个牵涉重大利益的项目，往项目工作人员的身上施压是收效甚微的。将你的焦虑投射到团队的身上，往往适得其反。表达你与团队分担压力，和大家共同奋战，以及表达你需要大家拿出好的结果以减轻你的压力，这二者之间的区别虽小，但却能造成完全不同的效果。” 在日常项目中，每个人或多或少都能清晰意识到自己在做的项目的重要性，作为领导在这个时候如果还是一味施压，可能会取得反作用。leader 在这个时候应该做的是确定大家有一个明确的终极目标，以及调派资源，协调解决方法。\n\n关于微观管理。细节决定成败，但凡是都有度。作为最高管理人员，过度的微观管理往往会给人留下锱铢必较和固执己见的影响。Bob提到他的前任 CEO迈克尔。“有一次，我看到他在一家酒店大堂里接受采访时对记者说：‘你看到那边的台灯了吗？都是我挑的’。这可不是一个首席执行官应有的风范。”前段时间雷军的屏保火了，能不管的事情一定不管，可能也是异曲同工吧。\n\n关于一言堂。“随着在这个职位上权利的累积，对于如何使用这种权利也就越发难以把控了……你的自信很容易就会越界成为自大，继而变成一种累赘。你或许会觉得没有什么提议是自己没有听过的，因此对其他人的看法变得缺少耐心或不屑一顾。” 对于这点，我倒觉得与职位和级别无关，在工作中经常会遇到。你在自己所做的领域小有成就，于是觉得其他人都不如自己深刻。解决方法除了告诉自己时刻保持包容，保持开放以外，作者也提到需要最紧密的高管在发现“我”表现出不屑或不耐烦，那就一定要告知。可见在自己身边，能有几个敢于说真话的人是十分必要的。\n\n以上是结合我的工作和生活，提供了一些反思和素材。除此之外，书中还记录了不少轶事，比如上海迪士尼的创建过程，迪士尼曾想收购 twitter但在最后一刻放弃，作者与乔布斯的相处，disney+的诞生和运营，凯文梅尔的事迹（去年在 tiktok 的事件里常看到报道），Bob梦见自己站在总统竞选辩论台上却感觉毫无准备，然后半夜从噩梦中惊醒（原来大老板们也会做类似的噩梦）等等，限于篇幅，就不一一记录了。\n\n最后说一点题外话，上周读完书我发了个朋友圈，几位朋友可能没有看过内容，以为我鸡汤中毒，我也打个哈哈一笑了之。不过事后也引起我的思考，如何去区分一本书到底是爽文，鸡汤还是励志。我想关键点可能在于行为。读完一本书，觉得不错，一拍大腿，然后束之高阁，这种对自己的认知和行为无法产生反馈，说的再天花乱坠，也没什么用。前脚看完，后脚就忘了。相反，如果看完了，从书中能够获得一套合理的行为准则，能反思到自己存在的不足，找到未来实践的指引，做到知行合一，我想这样就足够了。\n\n一些思考，欢迎指正。如果朋友感兴趣，推荐大家阅读。\n","slug":"我读《上学记》","published":1,"updated":"2021-09-14T11:47:05.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk0fy8v0000b34n9h0nb5wi","content":"<p>端午节回武汉，随手抄了本书准备打发高铁上的时光，没有想到内容十分精彩，来回的路上读的七七八八，收假回来熬夜看完。结合自己的观察，写点感想。</p>\n<p>我曾经非常讨厌读个人传记，主要是觉得这种书都是为尊者讳，说的做的肯定都被美化一番。而且想也不用想，我都能猜到文章的脉络，一定是作者曾经非常困苦迷惘，经历了一番不懈努力，最后走上人生巅峰。</p>\n<p>但是这本书并不是这般单调。当然，从结果来说，成功者的书籍会比失败者更多。从大众世俗的角度来看，可能对成功的关注势必会比失败的关注更多。但是这并不是我说这本书精彩的原因。</p>\n<p>说回到书的本身，这本书的设计不太讨巧，封面和腰封都透露着一股浓浓的机场成功学气息。“洞悉全球最佳 CEO 的神级领导力秘密”，神级！还有“比尔盖茨罕见 2000 字推荐”，估摸出版的时候盖茨还没离婚。</p>\n<p>吐槽归吐槽，余下部分记录一下我觉得有意思的内容。</p>\n<p>关于 Bob，原来是 Robert 的简称。</p>\n<p>关于父亲。由于家中有一间摆满书的书房，以及父亲热爱阅读的习惯，把作者培养成了一个爱书之人。同时还提到在晚餐时与孩子讨论世界大事。关于这点，我也在想，在社会生活碎片化趋势下，在这个环境中我能做些什么来影响子女，养成好的习惯。父母是最初的老师，孩子有样学样。有太多左手拿手机，右手牵孩子，在餐桌上默不作声，各玩电子产品的场景。我不相信一个长时间生活在手机里的家长可以提供给孩子们一个好的榜样。</p>\n<p>关于早起。发了朋友圈之后好几个人问我，作者几点睡觉。其实作者也给出了答案，“这样的作息时间虽然不适用于所有人，但无论你如何选择如何腾出时间，每天创造空间让你的思绪远离眼前的工作职责尽情徜徉……，这些都是至关重要的。”独处和思考，可能是在创意型的工作中必不可少的一个环节。几点起床不是问题，有的人是 morning person，有的人就是晚上脑子活跃，早晚不重要，重要的是有一段不被打扰的时光。但是我还是想尝试一下早起，不知道能不能成功。</p>\n<p>关于喜怒无常的老板。鲁尼是第一个教导作者拼死创新的老板，但同时“鲁尼是一个喜怒无常的上司，时间一长，这种反复无常会对团队的时期造成严重的削弱……，他懂得如何巧妙的挑拨人心，而我一直没弄明白这到底是有意而为还是他的性格使然。……他也会把我逼到下定决心辞职不干的绝境。我并不是唯一一个有过这种念头的人。”在工作中，有时我们无法选择老板和同事，在这种情况下，一味抱怨也起不到作用。作者的做法是将绝大部分的注意力放在努力工作上，而不是去关注鲁尼喜怒无常的情绪。</p>\n<p>关于如何提出问题。在与董事会的沟通中，作者提到不仅需要提出问题，作出预测，并且还需要给出解决方案。“一般来说，只抛出问题而不提供解决方案不是我的作风（我也是这样敦促我的团队——你可以带着问题找我，但也请提供可行的解决方案）。”现在我也是这条准则的践行者，在和产品经理或后端沟通的过程中，如果我觉得有问题，我也会提出自己的解法，这解法可能是正确的，可能是错误的。你需要大胆的说出自己的看法，经受别人的考验，而不是闷声思考，或者放弃思考。</p>\n<p>关于自尊心和韧性。在 Bob 竞选 CEO，通过董事会漫长的面试过程中谈到，“对于自尊心的打击虽然往往是真枪实弹，但也不要让这些打击过多地占据你大脑的空间或是耗损你太多的经历，……，当每个人都在夸赞你时，想要保持乐观是很容易的。但当你的自我认知如此公然地受到挑战的时候，保持乐观就困难了很多，也必要了很多”。 不要轻易怀疑自己（不是不反思自己），抵抗 pua 有奇效。</p>\n<p>关于压力透传。是否应该将压力层层施压到执行的人员身上，在这点上我赞成作者的观点。“没有什么规章手册能告诉你该如何应对这样的挑战，但你通常需要试着认识到，面对一个牵涉重大利益的项目，往项目工作人员的身上施压是收效甚微的。将你的焦虑投射到团队的身上，往往适得其反。表达你与团队分担压力，和大家共同奋战，以及表达你需要大家拿出好的结果以减轻你的压力，这二者之间的区别虽小，但却能造成完全不同的效果。” 在日常项目中，每个人或多或少都能清晰意识到自己在做的项目的重要性，作为领导在这个时候如果还是一味施压，可能会取得反作用。leader 在这个时候应该做的是确定大家有一个明确的终极目标，以及调派资源，协调解决方法。</p>\n<p>关于微观管理。细节决定成败，但凡是都有度。作为最高管理人员，过度的微观管理往往会给人留下锱铢必较和固执己见的影响。Bob提到他的前任 CEO迈克尔。“有一次，我看到他在一家酒店大堂里接受采访时对记者说：‘你看到那边的台灯了吗？都是我挑的’。这可不是一个首席执行官应有的风范。”前段时间雷军的屏保火了，能不管的事情一定不管，可能也是异曲同工吧。</p>\n<p>关于一言堂。“随着在这个职位上权利的累积，对于如何使用这种权利也就越发难以把控了……你的自信很容易就会越界成为自大，继而变成一种累赘。你或许会觉得没有什么提议是自己没有听过的，因此对其他人的看法变得缺少耐心或不屑一顾。” 对于这点，我倒觉得与职位和级别无关，在工作中经常会遇到。你在自己所做的领域小有成就，于是觉得其他人都不如自己深刻。解决方法除了告诉自己时刻保持包容，保持开放以外，作者也提到需要最紧密的高管在发现“我”表现出不屑或不耐烦，那就一定要告知。可见在自己身边，能有几个敢于说真话的人是十分必要的。</p>\n<p>以上是结合我的工作和生活，提供了一些反思和素材。除此之外，书中还记录了不少轶事，比如上海迪士尼的创建过程，迪士尼曾想收购 twitter但在最后一刻放弃，作者与乔布斯的相处，disney+的诞生和运营，凯文梅尔的事迹（去年在 tiktok 的事件里常看到报道），Bob梦见自己站在总统竞选辩论台上却感觉毫无准备，然后半夜从噩梦中惊醒（原来大老板们也会做类似的噩梦）等等，限于篇幅，就不一一记录了。</p>\n<p>最后说一点题外话，上周读完书我发了个朋友圈，几位朋友可能没有看过内容，以为我鸡汤中毒，我也打个哈哈一笑了之。不过事后也引起我的思考，如何去区分一本书到底是爽文，鸡汤还是励志。我想关键点可能在于行为。读完一本书，觉得不错，一拍大腿，然后束之高阁，这种对自己的认知和行为无法产生反馈，说的再天花乱坠，也没什么用。前脚看完，后脚就忘了。相反，如果看完了，从书中能够获得一套合理的行为准则，能反思到自己存在的不足，找到未来实践的指引，做到知行合一，我想这样就足够了。</p>\n<p>一些思考，欢迎指正。如果朋友感兴趣，推荐大家阅读。</p>\n","site":{"data":{}},"abbrlink":"4989ceb5","excerpt":"","more":"<p>端午节回武汉，随手抄了本书准备打发高铁上的时光，没有想到内容十分精彩，来回的路上读的七七八八，收假回来熬夜看完。结合自己的观察，写点感想。</p>\n<p>我曾经非常讨厌读个人传记，主要是觉得这种书都是为尊者讳，说的做的肯定都被美化一番。而且想也不用想，我都能猜到文章的脉络，一定是作者曾经非常困苦迷惘，经历了一番不懈努力，最后走上人生巅峰。</p>\n<p>但是这本书并不是这般单调。当然，从结果来说，成功者的书籍会比失败者更多。从大众世俗的角度来看，可能对成功的关注势必会比失败的关注更多。但是这并不是我说这本书精彩的原因。</p>\n<p>说回到书的本身，这本书的设计不太讨巧，封面和腰封都透露着一股浓浓的机场成功学气息。“洞悉全球最佳 CEO 的神级领导力秘密”，神级！还有“比尔盖茨罕见 2000 字推荐”，估摸出版的时候盖茨还没离婚。</p>\n<p>吐槽归吐槽，余下部分记录一下我觉得有意思的内容。</p>\n<p>关于 Bob，原来是 Robert 的简称。</p>\n<p>关于父亲。由于家中有一间摆满书的书房，以及父亲热爱阅读的习惯，把作者培养成了一个爱书之人。同时还提到在晚餐时与孩子讨论世界大事。关于这点，我也在想，在社会生活碎片化趋势下，在这个环境中我能做些什么来影响子女，养成好的习惯。父母是最初的老师，孩子有样学样。有太多左手拿手机，右手牵孩子，在餐桌上默不作声，各玩电子产品的场景。我不相信一个长时间生活在手机里的家长可以提供给孩子们一个好的榜样。</p>\n<p>关于早起。发了朋友圈之后好几个人问我，作者几点睡觉。其实作者也给出了答案，“这样的作息时间虽然不适用于所有人，但无论你如何选择如何腾出时间，每天创造空间让你的思绪远离眼前的工作职责尽情徜徉……，这些都是至关重要的。”独处和思考，可能是在创意型的工作中必不可少的一个环节。几点起床不是问题，有的人是 morning person，有的人就是晚上脑子活跃，早晚不重要，重要的是有一段不被打扰的时光。但是我还是想尝试一下早起，不知道能不能成功。</p>\n<p>关于喜怒无常的老板。鲁尼是第一个教导作者拼死创新的老板，但同时“鲁尼是一个喜怒无常的上司，时间一长，这种反复无常会对团队的时期造成严重的削弱……，他懂得如何巧妙的挑拨人心，而我一直没弄明白这到底是有意而为还是他的性格使然。……他也会把我逼到下定决心辞职不干的绝境。我并不是唯一一个有过这种念头的人。”在工作中，有时我们无法选择老板和同事，在这种情况下，一味抱怨也起不到作用。作者的做法是将绝大部分的注意力放在努力工作上，而不是去关注鲁尼喜怒无常的情绪。</p>\n<p>关于如何提出问题。在与董事会的沟通中，作者提到不仅需要提出问题，作出预测，并且还需要给出解决方案。“一般来说，只抛出问题而不提供解决方案不是我的作风（我也是这样敦促我的团队——你可以带着问题找我，但也请提供可行的解决方案）。”现在我也是这条准则的践行者，在和产品经理或后端沟通的过程中，如果我觉得有问题，我也会提出自己的解法，这解法可能是正确的，可能是错误的。你需要大胆的说出自己的看法，经受别人的考验，而不是闷声思考，或者放弃思考。</p>\n<p>关于自尊心和韧性。在 Bob 竞选 CEO，通过董事会漫长的面试过程中谈到，“对于自尊心的打击虽然往往是真枪实弹，但也不要让这些打击过多地占据你大脑的空间或是耗损你太多的经历，……，当每个人都在夸赞你时，想要保持乐观是很容易的。但当你的自我认知如此公然地受到挑战的时候，保持乐观就困难了很多，也必要了很多”。 不要轻易怀疑自己（不是不反思自己），抵抗 pua 有奇效。</p>\n<p>关于压力透传。是否应该将压力层层施压到执行的人员身上，在这点上我赞成作者的观点。“没有什么规章手册能告诉你该如何应对这样的挑战，但你通常需要试着认识到，面对一个牵涉重大利益的项目，往项目工作人员的身上施压是收效甚微的。将你的焦虑投射到团队的身上，往往适得其反。表达你与团队分担压力，和大家共同奋战，以及表达你需要大家拿出好的结果以减轻你的压力，这二者之间的区别虽小，但却能造成完全不同的效果。” 在日常项目中，每个人或多或少都能清晰意识到自己在做的项目的重要性，作为领导在这个时候如果还是一味施压，可能会取得反作用。leader 在这个时候应该做的是确定大家有一个明确的终极目标，以及调派资源，协调解决方法。</p>\n<p>关于微观管理。细节决定成败，但凡是都有度。作为最高管理人员，过度的微观管理往往会给人留下锱铢必较和固执己见的影响。Bob提到他的前任 CEO迈克尔。“有一次，我看到他在一家酒店大堂里接受采访时对记者说：‘你看到那边的台灯了吗？都是我挑的’。这可不是一个首席执行官应有的风范。”前段时间雷军的屏保火了，能不管的事情一定不管，可能也是异曲同工吧。</p>\n<p>关于一言堂。“随着在这个职位上权利的累积，对于如何使用这种权利也就越发难以把控了……你的自信很容易就会越界成为自大，继而变成一种累赘。你或许会觉得没有什么提议是自己没有听过的，因此对其他人的看法变得缺少耐心或不屑一顾。” 对于这点，我倒觉得与职位和级别无关，在工作中经常会遇到。你在自己所做的领域小有成就，于是觉得其他人都不如自己深刻。解决方法除了告诉自己时刻保持包容，保持开放以外，作者也提到需要最紧密的高管在发现“我”表现出不屑或不耐烦，那就一定要告知。可见在自己身边，能有几个敢于说真话的人是十分必要的。</p>\n<p>以上是结合我的工作和生活，提供了一些反思和素材。除此之外，书中还记录了不少轶事，比如上海迪士尼的创建过程，迪士尼曾想收购 twitter但在最后一刻放弃，作者与乔布斯的相处，disney+的诞生和运营，凯文梅尔的事迹（去年在 tiktok 的事件里常看到报道），Bob梦见自己站在总统竞选辩论台上却感觉毫无准备，然后半夜从噩梦中惊醒（原来大老板们也会做类似的噩梦）等等，限于篇幅，就不一一记录了。</p>\n<p>最后说一点题外话，上周读完书我发了个朋友圈，几位朋友可能没有看过内容，以为我鸡汤中毒，我也打个哈哈一笑了之。不过事后也引起我的思考，如何去区分一本书到底是爽文，鸡汤还是励志。我想关键点可能在于行为。读完一本书，觉得不错，一拍大腿，然后束之高阁，这种对自己的认知和行为无法产生反馈，说的再天花乱坠，也没什么用。前脚看完，后脚就忘了。相反，如果看完了，从书中能够获得一套合理的行为准则，能反思到自己存在的不足，找到未来实践的指引，做到知行合一，我想这样就足够了。</p>\n<p>一些思考，欢迎指正。如果朋友感兴趣，推荐大家阅读。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cka6xu6wg00008cmhsarcszuz","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72q001x8cmhv0tstkf8"},{"post_id":"cka6xu6wl00018cmhsar3t6i2","category_id":"cka6xu71t000j8cmhil1ge6ke","_id":"cka6xu72r001z8cmhf3hcwn60"},{"post_id":"cka6xu6wm00028cmhavmctd7d","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72r00218cmh5qapfzjo"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu72s00248cmhvyn7gfgx"},{"post_id":"cka6xu6wo00048cmhtl5j1nlr","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu72t00268cmho4gmzeqs"},{"post_id":"cka6xu6wo00058cmhz0xol66m","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72t00298cmhjqrqyrx1"},{"post_id":"cka6xu6wp00068cmhbtds9u3a","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu72u002b8cmhmtxa06o3"},{"post_id":"cka6xu6wq00078cmhqkys3a96","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu72v002e8cmhmv4xhvl8"},{"post_id":"cka6xu6wq00088cmhlnb6tc3m","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu72v002g8cmhuthvzreu"},{"post_id":"cka6xu6wr00098cmhjkyxr1bz","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72w002j8cmhxrun1z1j"},{"post_id":"cka6xu6ws000a8cmhqojtklpq","category_id":"cka6xu71t000j8cmhil1ge6ke","_id":"cka6xu72w002l8cmh05vzxixr"},{"post_id":"cka6xu71j000b8cmhp430j98e","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72x002n8cmhavtrqo1s"},{"post_id":"cka6xu71u000l8cmhi4wlksh7","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72y002s8cmh7sl5kjgj"},{"post_id":"cka6xu71w000m8cmh56i2oa8i","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu72y002v8cmhjdrx5ie3"},{"post_id":"cka6xu71y000p8cmhie3hdsvx","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu72z002x8cmh49dtbvo7"},{"post_id":"cka6xu71z000q8cmhgb6in46l","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu73000308cmhyv6gxk09"},{"post_id":"cka6xu721000t8cmhfvynhiv5","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu73000328cmh6pzbn1c5"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu73100358cmh3x4n0tmh"},{"post_id":"cka6xu722000w8cmhnzm5ghan","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu73100378cmhys1tkw9e"},{"post_id":"cka6xu723000y8cmhu1mxwyha","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cka6xu73200398cmh08dw91oy"},{"post_id":"cka6xu72o001t8cmhpsyeqdev","category_id":"cka6xu720000r8cmhrml3wvur","_id":"cka6xu756003v8cmhhebdi2ih"},{"post_id":"ckaguocy200001smh9pqo5umo","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckaguocyc00011smhhfsl87h8"},{"post_id":"ckb6k0nq10000gcmh6etw1hb5","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckb6k0nqa0001gcmhcymed20x"},{"post_id":"ckb6k28yh000010mh7yk675vz","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckb6k28yj000110mh26u5fx9z"},{"post_id":"ckb6k477y0000asmhcqtd62y6","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckb6k47880001asmh7lot8k0d"},{"post_id":"ckb7cj43900004nfyengy8boo","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckb7cj44800014nfy38emdxx5"},{"post_id":"ckcdcedex00009nfy3emy4uu1","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckcdcedfr00019nfy5l85a8hl"},{"post_id":"ckcvlqb7z0000bkfybsaaf6kf","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckcvlqb880001bkfy76wfemoo"},{"post_id":"ckev41f160001jqs6cgxo6fgz","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckev41f1l0004jqs644pnainl"},{"post_id":"ckev435fo0000njs6ga936lti","category_id":"cka6xu720000r8cmhrml3wvur","_id":"ckev435fs0002njs66p9ta5lh"},{"post_id":"ckg59273800001kmh6rla9ivb","category_id":"ckg5appth0000ckmhcdf86z93","_id":"ckg5appto0001ckmhbxs939mb"},{"post_id":"ckn7220hi00017pfy9j1sae2n","category_id":"cka6xu720000r8cmhrml3wvur","_id":"ckn7220hv00047pfyhq909bho"},{"post_id":"ckn7220hk00027pfy3fep2jts","category_id":"cka6xu720000r8cmhrml3wvur","_id":"ckn7220hw00057pfy5jtcfwvf"},{"post_id":"ckonsxvmf000137s6bg40g6n8","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckonsykro000337s64v3i0d9e"},{"post_id":"ckonsxvma000037s6chohgwv0","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckont1mp0000437s643c04x50"},{"post_id":"ckq0cnvuc0000b4fy1ni8gjtw","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckq0cnvuk0002b4fycd54a2gh"},{"post_id":"ckq0cnvuc0000b4fy1ni8gjtw","category_id":"ckq0coeo90003b4fy0nr0gc85","_id":"ckq0coeob0004b4fybcuz5ms7"},{"post_id":"ckonsxvmf000137s6bg40g6n8","category_id":"ckq0coeo90003b4fy0nr0gc85","_id":"ckq0cop950005b4fyf6fs7df7"},{"post_id":"ckq4ue26u0000i0fy2mnrc4hs","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"ckq4ue27o0002i0fy6do7as3d"},{"post_id":"ckq4ue26u0000i0fy2mnrc4hs","category_id":"ckq0coeo90003b4fy0nr0gc85","_id":"ckq4ue27p0003i0fy49ts4m2j"},{"post_id":"cktk0fy8v0000b34n9h0nb5wi","category_id":"cka6xu71l000d8cmhgxsizk8u","_id":"cktk0fy970002b34n1sse4rmg"},{"post_id":"cktk0fy8v0000b34n9h0nb5wi","category_id":"ckq0coeo90003b4fy0nr0gc85","_id":"cktk0fy980003b34n9spi1ww1"}],"PostTag":[{"post_id":"cka6xu6wl00018cmhsar3t6i2","tag_id":"cka6xu71p000e8cmhfoc3j0j9","_id":"cka6xu72p001u8cmhwkiql4yc"},{"post_id":"cka6xu6wl00018cmhsar3t6i2","tag_id":"cka6xu71t000k8cmh616vvdgv","_id":"cka6xu72q001y8cmhmcut03vo"},{"post_id":"cka6xu6wl00018cmhsar3t6i2","tag_id":"cka6xu71x000o8cmhqsyyo73w","_id":"cka6xu72r00208cmhu8qtcrf9"},{"post_id":"cka6xu6wm00028cmhavmctd7d","tag_id":"cka6xu720000s8cmhklqtevep","_id":"cka6xu72s00238cmhymkjef19"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu723000x8cmh2i587xew","_id":"cka6xu72s00258cmhnxjh1uhr"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu72500108cmh2x1khunz","_id":"cka6xu72t00288cmhs2yj2sai"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu72600128cmh5vh9k3bf","_id":"cka6xu72u002a8cmhw1kgt8zb"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu72600148cmh19kshzgh","_id":"cka6xu72u002d8cmhrkggpvg1"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu72700168cmhm7w0hedz","_id":"cka6xu72v002f8cmh51vq8eg3"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu72800188cmh5ip7aft8","_id":"cka6xu72v002h8cmhy4v40n32"},{"post_id":"cka6xu6wn00038cmh7ujpku0k","tag_id":"cka6xu729001a8cmhpz81ovaq","_id":"cka6xu72w002k8cmhk1hih61h"},{"post_id":"cka6xu6wo00048cmhtl5j1nlr","tag_id":"cka6xu729001b8cmhu8w6rghl","_id":"cka6xu72w002m8cmh8t55vvwu"},{"post_id":"cka6xu6wo00048cmhtl5j1nlr","tag_id":"cka6xu72a001c8cmh0byoyptb","_id":"cka6xu72x002p8cmhqw05nzgq"},{"post_id":"cka6xu6wo00048cmhtl5j1nlr","tag_id":"cka6xu72a001d8cmhtq08weld","_id":"cka6xu72y002r8cmhrjv7p3sr"},{"post_id":"cka6xu6wo00048cmhtl5j1nlr","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"cka6xu72y002u8cmhbn4yrk3v"},{"post_id":"cka6xu6wp00068cmhbtds9u3a","tag_id":"cka6xu72b001f8cmhgau649xy","_id":"cka6xu72z002w8cmhscyar054"},{"post_id":"cka6xu6wp00068cmhbtds9u3a","tag_id":"cka6xu72b001g8cmhi9vyzcma","_id":"cka6xu72z002z8cmhday3oqur"},{"post_id":"cka6xu6wp00068cmhbtds9u3a","tag_id":"cka6xu72d001h8cmhm3eg072h","_id":"cka6xu73000318cmh0j7ir41m"},{"post_id":"cka6xu6wq00078cmhqkys3a96","tag_id":"cka6xu723000x8cmh2i587xew","_id":"cka6xu73000338cmhcaeeix1f"},{"post_id":"cka6xu6wq00078cmhqkys3a96","tag_id":"cka6xu72500108cmh2x1khunz","_id":"cka6xu73100368cmhwhjsyom6"},{"post_id":"cka6xu6wq00078cmhqkys3a96","tag_id":"cka6xu72e001k8cmhnk15rvbi","_id":"cka6xu73100388cmhbgv7t4zv"},{"post_id":"cka6xu6wq00088cmhlnb6tc3m","tag_id":"cka6xu72e001l8cmhlw3d9smx","_id":"cka6xu732003b8cmh58nn8xpg"},{"post_id":"cka6xu6wq00088cmhlnb6tc3m","tag_id":"cka6xu72f001m8cmh5mcrvl26","_id":"cka6xu732003c8cmhcf2cc0bn"},{"post_id":"cka6xu6wr00098cmhjkyxr1bz","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"cka6xu733003e8cmhwkuikl2l"},{"post_id":"cka6xu6wr00098cmhjkyxr1bz","tag_id":"cka6xu72g001o8cmh5e62moxa","_id":"cka6xu733003f8cmhfhv2gkkj"},{"post_id":"cka6xu6wr00098cmhjkyxr1bz","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"cka6xu734003h8cmhyjwc24ts"},{"post_id":"cka6xu6ws000a8cmhqojtklpq","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"cka6xu734003i8cmhkczobs12"},{"post_id":"cka6xu6ws000a8cmhqojtklpq","tag_id":"cka6xu72h001r8cmhiaj2e63o","_id":"cka6xu734003j8cmh39qd6c9j"},{"post_id":"cka6xu6ws000a8cmhqojtklpq","tag_id":"cka6xu72h001s8cmho4x3s43k","_id":"cka6xu734003l8cmhwfycj5ha"},{"post_id":"cka6xu71y000p8cmhie3hdsvx","tag_id":"cka6xu72y002t8cmhfzcbfuxv","_id":"cka6xu75900458cmhggwtmbin"},{"post_id":"cka6xu71y000p8cmhie3hdsvx","tag_id":"cka6xu72z002y8cmhb0xmik3y","_id":"cka6xu75900468cmhz898hb0m"},{"post_id":"cka6xu71y000p8cmhie3hdsvx","tag_id":"cka6xu73100348cmhwawo0nhj","_id":"cka6xu75900478cmhy6v9777m"},{"post_id":"cka6xu71y000p8cmhie3hdsvx","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"cka6xu75900488cmh01xotdnx"},{"post_id":"cka6xu71z000q8cmhgb6in46l","tag_id":"cka6xu723000x8cmh2i587xew","_id":"cka6xu75a00498cmhb44bwiay"},{"post_id":"cka6xu71z000q8cmhgb6in46l","tag_id":"cka6xu72500108cmh2x1khunz","_id":"cka6xu75a004a8cmhg5ubfrf3"},{"post_id":"cka6xu71z000q8cmhgb6in46l","tag_id":"cka6xu732003a8cmh99v56yai","_id":"cka6xu75a004b8cmh1h9e4yrv"},{"post_id":"cka6xu71z000q8cmhgb6in46l","tag_id":"cka6xu733003d8cmhttmfhgvz","_id":"cka6xu75a004c8cmhfmpwmhvt"},{"post_id":"cka6xu721000t8cmhfvynhiv5","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"cka6xu75a004d8cmh78zz0t59"},{"post_id":"cka6xu721000t8cmhfvynhiv5","tag_id":"cka6xu72g001o8cmh5e62moxa","_id":"cka6xu75a004e8cmhln5abtyq"},{"post_id":"cka6xu721000t8cmhfvynhiv5","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"cka6xu75b004f8cmhlmhse56l"},{"post_id":"cka6xu721000t8cmhfvynhiv5","tag_id":"cka6xu733003g8cmhur14awl9","_id":"cka6xu75b004g8cmha0krxwa4"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","tag_id":"cka6xu723000x8cmh2i587xew","_id":"cka6xu75b004h8cmh2nvajaro"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","tag_id":"cka6xu72500108cmh2x1khunz","_id":"cka6xu75b004i8cmh5z1jw6ou"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","tag_id":"cka6xu734003k8cmhdvrs3t7v","_id":"cka6xu75b004j8cmhtidjbi4u"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","tag_id":"cka6xu735003m8cmhdb3m46wm","_id":"cka6xu75c004k8cmhmfx1v3bs"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","tag_id":"cka6xu735003n8cmh6sh506ii","_id":"cka6xu75c004l8cmhw7gxfrez"},{"post_id":"cka6xu721000u8cmhnqhiyvd2","tag_id":"cka6xu736003o8cmh1g4fyb24","_id":"cka6xu75c004m8cmht3vvr7rr"},{"post_id":"cka6xu723000y8cmhu1mxwyha","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"cka6xu75c004n8cmh8zm0b855"},{"post_id":"cka6xu723000y8cmhu1mxwyha","tag_id":"cka6xu72g001o8cmh5e62moxa","_id":"cka6xu75c004o8cmhe7g578ww"},{"post_id":"cka6xu723000y8cmhu1mxwyha","tag_id":"cka6xu736003p8cmhyvu4owji","_id":"cka6xu75c004p8cmhbvp6lp6c"},{"post_id":"cka6xu723000y8cmhu1mxwyha","tag_id":"cka6xu736003q8cmhw5onfm83","_id":"cka6xu75d004q8cmh53vjyv3v"},{"post_id":"cka6xu72o001t8cmhpsyeqdev","tag_id":"cka6xu754003s8cmhda4sc522","_id":"cka6xu75e004r8cmhj2txrzha"},{"post_id":"cka6xu72o001t8cmhpsyeqdev","tag_id":"cka6xu756003x8cmh8bajg2y6","_id":"cka6xu75e004s8cmh5lr4b34v"},{"post_id":"cka6xu72o001t8cmhpsyeqdev","tag_id":"cka6xu75700408cmh565xa7eb","_id":"cka6xu75f004t8cmh9jen525m"},{"post_id":"cka6xu72o001t8cmhpsyeqdev","tag_id":"cka6xu75800438cmh6jjk1rk9","_id":"cka6xu75f004u8cmhxg1p2gyu"},{"post_id":"ckev435fo0000njs6ga936lti","tag_id":"cka6xu72t00278cmhv4jg9dz7","_id":"ckev435fs0001njs6f3qy6cph"},{"post_id":"ckev435fo0000njs6ga936lti","tag_id":"cka6xu72u002c8cmhfcuogwfx","_id":"ckev435fs0003njs6c8v00dgu"},{"post_id":"ckev435fo0000njs6ga936lti","tag_id":"cka6xu72v002i8cmhtpfr235r","_id":"ckev435fs0004njs6f7dzgj3t"},{"post_id":"ckev435fo0000njs6ga936lti","tag_id":"cka6xu72x002o8cmhto27x2w7","_id":"ckev435fs0005njs67jlqb9mu"},{"post_id":"ckev435fo0000njs6ga936lti","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"ckev435fs0006njs601k4exyz"},{"post_id":"ckn7220hi00017pfy9j1sae2n","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"ckn7220hz00097pfy9ujsa1pr"},{"post_id":"ckn7220hi00017pfy9j1sae2n","tag_id":"ckn7220ho00037pfyeflvdjqk","_id":"ckn7220hz000a7pfyf1341xic"},{"post_id":"ckn7220hi00017pfy9j1sae2n","tag_id":"ckn7220hx00067pfy5fcc01v0","_id":"ckn7220hz000b7pfy6p3h7v9x"},{"post_id":"ckn7220hk00027pfy3fep2jts","tag_id":"cka6xu72a001e8cmhm8sq40kv","_id":"ckn7220hz000c7pfy6ip98zs8"},{"post_id":"ckn7220hk00027pfy3fep2jts","tag_id":"ckn7220hx00077pfy11zr87xt","_id":"ckn7220i0000d7pfy2om01q4g"},{"post_id":"ckn7220hk00027pfy3fep2jts","tag_id":"cka6xu72y002t8cmhfzcbfuxv","_id":"ckn7220i0000e7pfy64e58aqu"},{"post_id":"ckn7220hk00027pfy3fep2jts","tag_id":"ckn7220hx00087pfyg3ee6cfl","_id":"ckn7220i0000f7pfy9ut14g3b"},{"post_id":"ckonsxvmf000137s6bg40g6n8","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"ckonsykro000237s65szm56cj"},{"post_id":"ckq0cnvuc0000b4fy1ni8gjtw","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"ckq0cnvuj0001b4fyf1ka227q"},{"post_id":"ckq4ue26u0000i0fy2mnrc4hs","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"ckq4ue27r0004i0fy74xs8dp5"},{"post_id":"ckq4ue26u0000i0fy2mnrc4hs","tag_id":"ckq4ue27a0001i0fye824a4n7","_id":"ckq4ue27r0005i0fy9geigfv4"},{"post_id":"cktk0fy8v0000b34n9h0nb5wi","tag_id":"cka6xu72f001n8cmhy4gh504k","_id":"cktk0fyar0004b34n73prgy7f"},{"post_id":"cktk0fy8v0000b34n9h0nb5wi","tag_id":"cktk0fy900001b34n7tjedmng","_id":"cktk0fyar0005b34n6vw194bp"}],"Tag":[{"name":"hexo","_id":"cka6xu71p000e8cmhfoc3j0j9"},{"name":"blog","_id":"cka6xu71t000k8cmh616vvdgv"},{"name":"github","_id":"cka6xu71x000o8cmhqsyyo73w"},{"name":"resolution","_id":"cka6xu720000s8cmhklqtevep"},{"name":"ECMAScript2015","_id":"cka6xu723000x8cmh2i587xew"},{"name":"es6","_id":"cka6xu72500108cmh2x1khunz"},{"name":"var","_id":"cka6xu72600128cmh5vh9k3bf"},{"name":"let","_id":"cka6xu72600148cmh19kshzgh"},{"name":"const","_id":"cka6xu72700168cmhm7w0hedz"},{"name":"block binding","_id":"cka6xu72800188cmh5ip7aft8"},{"name":"hoisting","_id":"cka6xu729001a8cmhpz81ovaq"},{"name":"ECMAScript2016","_id":"cka6xu729001b8cmhu8w6rghl"},{"name":"es7","_id":"cka6xu72a001c8cmh0byoyptb"},{"name":"decorator","_id":"cka6xu72a001d8cmhtq08weld"},{"name":"javascript","_id":"cka6xu72a001e8cmhm8sq40kv"},{"name":"react","_id":"cka6xu72b001f8cmhgau649xy"},{"name":"react native","_id":"cka6xu72b001g8cmhi9vyzcma"},{"name":"Xcode","_id":"cka6xu72d001h8cmhm3eg072h"},{"name":"module","_id":"cka6xu72e001k8cmhnk15rvbi"},{"name":"Flutter","_id":"cka6xu72e001l8cmhlw3d9smx"},{"name":"setup","_id":"cka6xu72f001m8cmh5mcrvl26"},{"name":"books","_id":"cka6xu72f001n8cmhy4gh504k"},{"name":"reading","_id":"cka6xu72g001o8cmh5e62moxa"},{"name":"setTimeout","_id":"cka6xu72h001r8cmhiaj2e63o"},{"name":"setInterval","_id":"cka6xu72h001s8cmho4x3s43k"},{"name":"leetcode","_id":"cka6xu72q001w8cmhuq2bt1up"},{"name":"algorithm","_id":"cka6xu72r00228cmh6lxybf54"},{"name":"window","_id":"cka6xu72t00278cmhv4jg9dz7"},{"name":"events","_id":"cka6xu72u002c8cmhfcuogwfx"},{"name":"capture/bubbling","_id":"cka6xu72v002i8cmhtpfr235r"},{"name":"delegate","_id":"cka6xu72x002o8cmhto27x2w7"},{"name":"nodejs","_id":"cka6xu72y002t8cmhfzcbfuxv"},{"name":"modules","_id":"cka6xu72z002y8cmhb0xmik3y"},{"name":"exports","_id":"cka6xu73100348cmhwawo0nhj"},{"name":"iterators","_id":"cka6xu732003a8cmh99v56yai"},{"name":"generators","_id":"cka6xu733003d8cmhttmfhgvz"},{"name":"investment","_id":"cka6xu733003g8cmhur14awl9"},{"name":"promise","_id":"cka6xu734003k8cmhdvrs3t7v"},{"name":"Observables","_id":"cka6xu735003m8cmhdb3m46wm"},{"name":"subscription","_id":"cka6xu735003n8cmh6sh506ii"},{"name":"subscribe","_id":"cka6xu736003o8cmh1g4fyb24"},{"name":"frontend","_id":"cka6xu736003p8cmhyvu4owji"},{"name":"前端工程化","_id":"cka6xu736003q8cmhw5onfm83"},{"name":"echarts","_id":"cka6xu754003s8cmhda4sc522"},{"name":"zrender","_id":"cka6xu756003x8cmh8bajg2y6"},{"name":"tooltip","_id":"cka6xu75700408cmh565xa7eb"},{"name":"confine","_id":"cka6xu75800438cmh6jjk1rk9"},{"name":"task","_id":"ckev41f1a0002jqs6ejn0b26k"},{"name":"microtask","_id":"ckev41f1l0005jqs6ceco2093"},{"name":"curry","_id":"ckn7220ho00037pfyeflvdjqk"},{"name":"closure","_id":"ckn7220hx00067pfy5fcc01v0"},{"name":"event loop","_id":"ckn7220hx00077pfy11zr87xt"},{"name":"browser","_id":"ckn7220hx00087pfyg3ee6cfl"},{"name":"leadership","_id":"ckq4ue27a0001i0fye824a4n7"},{"name":"history","_id":"cktk0fy900001b34n7tjedmng"}]}}